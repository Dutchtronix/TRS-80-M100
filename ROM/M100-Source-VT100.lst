 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 1 - 9/5/2025 20:20:35


       1/       0 :                     ;
       2/       0 :                     ; TRS-80 Model 100 ROM Source Code Listing by JdR (Dutchtronix)
       3/       0 :                     ;
       4/       0 :                     ; Based on VirtualT disassembly using an updated version of VirtualT
       5/       0 :                     ; All generated numeric labels (code and data) have been replaced with
       6/       0 :                     ; (hopefully) meaningful names.
       7/       0 :                     ;
       8/       0 :                     ; Other sources:
       9/       0 :                     ; 	Ken Pettit M100 disassembly m100_dis_2013.txt
      10/       0 :                     ;	Steven Adolph VT100 code
      11/       0 :                     ;	Steven Adolph HWSCROLL code
      12/       0 :                     ;	Microsoft Basic-80 5.2 Source
      13/       0 :                     ;	https://bitchin100.com/wiki/index.php?title=RAM_File_Handling
      14/       0 :                     ;	https://bitchin100.com/wiki/index.php?title=Low_Level_Filesystem_Access
      15/       0 :                     ;	https://bitchin100.com/wiki/index.php?title=Description_of_Machine_Code_File_Handling_Routines
      16/       0 :                     ;	https://bitchin100.com/wiki/index.php?title=Model_100/102_RAM_Pointers
      17/       0 :                     ;
      18/       0 :                     ;	Microsoft Basic-80 version N82
      19/       0 :                     ;
      20/       0 :                     ; When choosing the "Original M100 configuration" option below, the resulting binary is identical
      21/       0 :                     ; to the M100 ROM (patched for Y2K)
      22/       0 :                     ; The code is relocatable but is not adviced since many entry points addresses have been published.
      23/       0 :                     ;
      24/       0 :                     ; Other versions of the M100 Rom can be produced.
      25/       0 :                     ;
      26/       0 :                     ; 	VT100
      27/       0 :                     ;	This version supports screen text output to the serial port.
      28/       0 :                     ;	Best results if the receiving end is some kind of MVT100 supported device (Steven Adolph)
      29/       0 :                     ;	the MVT100 C# app in Windows works great.
      30/       0 :                     ;	This version disables support for the built-in M100 Modem
      31/       0 :                     ;	LCDPATCH & !HWMODEM required for VT100INROM
      32/       0 :                     ;
      33/       0 :                     ;	HWSCROLL
      34/       0 :                     ;	Steven Adolph's ROM version that uses the LCD hardware to speed up scrolling
      35/       0 :                     ;	BASEPATCH required for HWSCROLL
      36/       0 :                     ;	UNTESTED
      37/       0 :                     ;
      38/       0 :                     ; Both versions maintain the original published addresses (where possible)
      39/       0 :                     ;
      40/       0 :                     ; These versions are mutually exclusive.
      41/       0 :                     ;
      42/       0 :                     ; References to Epson M100 (!REALM100) are for a future project
      43/       0 :                     ;
      44/       0 :                     ; Assemble this file using "Makroassembler AS v1.42" by Alfred Arnold, ported to windows in a package
      45/       0 :                     ; called "aswcurr" http://john.ccac.rwth-aachen.de:8000/as/:
      46/       0 :                     ;
      47/       0 :                     ;	..aswcurr\bin\asw -i . -cpu 8085UNDOC -L <M100-Source>.asm
      48/       0 :                     ;	..\aswcurr\bin\p2bin.exe <M100-Source> -r $0000-$7fff
      49/       0 :                     ;
      50/       0 :                     ; There are 4 source files:
      51/       0 :                     ;
      52/       0 :                     ;	M100-Source.asm
      53/       0 :                     ;	VT100inROM.asm
      54/       0 :                     ;	VT100inROM2.asm
      55/       0 :                     ;	HWPatch.asm
      56/       0 :                     ;	
      57/       0 :                     ; Notes
      58/       0 :                     ;	VirtualT does not emulate telephone modem hardware completely.
      59/       0 :                     ;	Enabling the relay and modem are ignored.
      60/       0 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 2 - 9/5/2025 20:20:35


      61/       0 :                     ;	Using TERM with no emulated serial port hangs VirtualT because it VirtualT
      62/       0 :                     ;	never returns ready on the serial port. This can easily be fixed in VirtualT
      63/       0 :                     ;
      64/       0 : =>FALSE             	if	0
      65/       0 :                     ;Original M100 configuration
      66/       0 :                     BASEPATCH	equ	0
      67/       0 :                     LCDPATCH	equ	0
      68/       0 :                     HWSCROLL	equ	0
      69/       0 :                     HWMODEM		equ	1
      70/       0 :                     VT100INROM	equ	0
      71/       0 :                     AUXCON		equ	0						;Bar code reader hardware mod. No space available.
      72/       0 :                     OPTROM		equ	1						;support for Tandy supplied Option ROM
      73/       0 :                     DVIENABLED	equ	1						;support for DVI box
      74/       0 :                     DEADCODE	equ	1						;unused Code
      75/       0 :                     REALM100	equ	1						;as opposed to Epson M100.
      76/       0 : [64]                	endif
      77/       0 :                     
      78/       0 : =>TRUE              	if	1
      79/       0 :                     ; VT100 configuration
      80/       0 : =0H                 BASEPATCH	equ	0
      81/       0 : =1H                 LCDPATCH	equ	1
      82/       0 : =0H                 HWSCROLL	equ	0
      83/       0 : =0H                 HWMODEM		equ	0
      84/       0 : =1H                 VT100INROM	equ	1
      85/       0 : =1H                 AUXCON		equ	1						;Bar code reader hardware mod. No space available.
      86/       0 : =1H                 OPTROM		equ	1						;support for Tandy supplied Option ROM
      87/       0 : =1H                 DVIENABLED	equ	1						;support for DVI box
      88/       0 : =1H                 DEADCODE	equ	1						;unused Code
      89/       0 : =1H                 REALM100	equ	1						;as opposed to Epson M100.
      90/       0 : [78]                	endif
      91/       0 :                     	
      92/       0 : =>FALSE             	if	0
      93/       0 :                     ; HWSCROLL configuration
      94/       0 :                     BASEPATCH	equ	1
      95/       0 :                     LCDPATCH	equ	0
      96/       0 :                     HWSCROLL	equ	0
      97/       0 :                     HWMODEM		equ	1
      98/       0 :                     VT100INROM	equ	0
      99/       0 :                     AUXCON		equ	1						;Bar code reader hardware mod. No space available.
     100/       0 :                     OPTROM		equ	1						;support for Tandy supplied Option ROM
     101/       0 :                     DVIENABLED	equ	1						;support for DVI box
     102/       0 :                     DEADCODE	equ	1						;unused Code
     103/       0 :                     REALM100	equ	1						;as opposed to Epson M100.
     104/       0 : [92]                	endif
     105/       0 :                     
     106/       0 : =8A4DH              BOOTMARKER	equ	8A4DH
     107/       0 : =9C0BH              AUTOPWRDWN	equ	9C0BH
     108/       0 :                     ;
     109/       0 :                     ; for Epson M100. See Z80-MBC2 design.
     110/       0 :                     ;
     111/       0 : =0H                 STO_OPCODE	equ	0						;port 0
     112/       0 : =1H                 EXC_WR_OPCODE equ 1						;port 1
     113/       0 :                     ;
     114/       0 :                     ; FCB definitions
     115/       0 :                     ;
     116/       0 :                     ;Byte:
     117/       0 :                     ;      0 - File mode (0-not open, 1-open for input, 2 open for 
     118/       0 :                     ;          output, 8 open for append)
     119/       0 :                     ;  2 & 3 - Address of file directory entry+1: points to File Data
     120/       0 :                     ;      4 - File device (248-RAM, 249-Modem, 250-LinePrinTer, 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 3 - 9/5/2025 20:20:35


     121/       0 :                     ;          251-WAND, 252-COM, 253-CASsette, 254-CRT, 255-LCD)
     122/       0 :                     ;      6 - Offset from buffer start (see bytes 9) for start of next 
     123/       0 :                     ;          record
     124/       0 :                     ;      7 & 8 -  Relative position of next 256 byte block from
     125/       0 :                     ;          beginning of file
     126/       0 :                     ;      9 - Start of 256 byte buffer for data transfer
     127/       0 :                     ;
     128/       0 : =0H                 STAT_IN_FCB_OFS	equ	0
     129/       0 : =2H                 DIR_IN_FCB_OFS	equ	2
     130/       0 : =4H                 DEV_IN_FCB_OFS	equ	4
     131/       0 : =6H                 BUFOFS_IN_FCB_OFS equ	6
     132/       0 : =7H                 FILPOS_IN_FCB_OFS equ	7
     133/       0 : =9H                 BUFFER_IN_FCB_OFS equ	9
     134/       0 :                     ;
     135/       0 : =FFH                LCD_DEV	 equ	0FFH					;index 0..7
     136/       0 : =FEH                CRT_DEV	 equ	0FEH
     137/       0 : =FDH                CAS_DEV	 equ	0FDH
     138/       0 : =FCH                COM_DEV	 equ	0FCH
     139/       0 : =FBH                WAND_DEV equ	0FBH
     140/       0 : =FAH                LPT_DEV	 equ	0FAH
     141/       0 : =F9H                MDM_DEV	 equ	0F9H
     142/       0 : =F8H                RAM_DEV	 equ	0F8H
     143/       0 :                     ;
     144/       0 : =0H                 DCBOPN_FUN	equ	0
     145/       0 : =2H                 DCBCLS_FUN	equ	2
     146/       0 : =4H                 DCBOUT_FUN	equ	4
     147/       0 : =6H                 DCBIN_FUN	equ	6						;DCB In function
     148/       0 : =8H                 DCBIO_FUN 	equ	8
     149/       0 :                     ;
     150/       0 : =BH                 PASTE_KEY equ	0BH
     151/       0 : =CH                 SHIFT_PRINT_KEY equ	0CH
     152/       0 : =DH                 PRINT_KEY equ	0DH
     153/       0 : =EH                 LABEL_KEY equ	0EH
     154/       0 :                     ; ==============================================
     155/       0 :                     ;File Directory Entry:
     156/       0 :                     ;	type				1 byte
     157/       0 :                     ;	file data ptr		2 bytes
     158/       0 :                     ;	name				6+2 bytes
     159/       0 :                     ;
     160/       0 :                     ;	type				bit 4: Option Rom
     161/       0 :                     ;						bit 5: CO file
     162/       0 :                     ;						bit 6: DO file
     163/       0 :                     ;
     164/       0 :                     ; Directory Filetype bits
     165/       0 :                     ; 7	0 if a killed file
     166/       0 :                     ; 6	1 if a DO file
     167/       0 :                     ; 5	1 if a CO file
     168/       0 :                     ; 4	1 if located in Option ROM
     169/       0 :                     ; 3	1 for invisible file
     170/       0 :                     ; 2	Reserved
     171/       0 :                     ; 1	For DO files, true indicates "opened"
     172/       0 :                     ; 0	Internal use only (known to be used by LNKFIL)
     173/       0 :                     ; value 0F0H (11110000) used for Option Rom file
     174/       0 :                     ; value 0B0H (10110000)used for ROM command file
     175/       0 :                     ; ================================================
     176/       0 : =80H                _DIR_ACTIVE	equ	80H
     177/       0 : =40H                _DIR_DOFILE	equ	40H
     178/       0 : =20H                _DIR_COFILE	equ	20H
     179/       0 : =10H                _DIR_INROM	equ	10H
     180/       0 : =8H                 _DIR_INVIS	equ	08H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 4 - 9/5/2025 20:20:35


     181/       0 : =2H                 _DIR_DOOPEN	equ	02H
     182/       0 : =BH                 RAMDIRLEN	equ	0BH						;length of 1 entry: type (1), Ptr (2), name (6+2)
     183/       0 : =1BH                RAMDIRCNT	equ	27						;max number of directory entries
     184/       0 :                     
     185/       0 : =8H                 MAXCHRROW	equ	8 						;max char rows on LCD screen
     186/       0 : =28H                MAXCHRCOLUMN equ 40						;max char column on LCD screen
     187/       0 : =40H                MAXPIXROW	equ	64 						;max pixel rows on LCD screen
     188/       0 : =F0H                MAXPIXCOLUMN equ 240					;max pixel column on LCD screen
     189/       0 : =40H                MAXSERCNT	equ	64  					;max buffered Serial count. Must be power of 2
     190/       0 :                     ;
     191/       0 :                     ; the next 2 macros need to expand to 2 bytes exactly
     192/       0 :                     ;
     193/       0 :                     OUTPORT	macro	arg, {noexpand}
     194/       0 :                     	if REALM100
     195/       0 :                     	out		arg
     196/       0 :                     	else
     197/       0 :                     	rst		7
     198/       0 :                     	db		arg-47H
     199/       0 :                     	endif
     200/       0 :                     	endm
     201/       0 :                     	
     202/       0 :                     INPORT	macro	arg, {noexpand}
     203/       0 :                     	if REALM100
     204/       0 :                     	in		arg
     205/       0 :                     	else
     206/       0 :                     	rst		7
     207/       0 :                     	db		arg - 47H + 8
     208/       0 :                     	endif
     209/       0 :                     	endm
     210/       0 :                     ;Compare next byte with M
     211/       0 :                     SYNCHK	macro	arg, {noexpand}
     212/       0 :                     	rst		1
     213/       0 :                     	db		arg
     214/       0 :                     	endm
     215/       0 :                     ;Get next non-white char from M
     216/       0 :                     CHRGET	macro	{noexpand}
     217/       0 :                     	rst		2
     218/       0 :                     	endm
     219/       0 :                     ;Compare DE and HL
     220/       0 :                     COMPAR	macro	{noexpand}
     221/       0 :                     	rst		3
     222/       0 :                     	endm
     223/       0 :                     ;Send character in A to screen/printer
     224/       0 :                     OUTCHR	macro	{noexpand}
     225/       0 :                     	rst		4
     226/       0 :                     	endm
     227/       0 :                     ;Determine type of last var used
     228/       0 :                     LSTTYP	macro	{noexpand}
     229/       0 :                     	rst		5
     230/       0 :                     	endm
     231/       0 :                     ;Get sign of FAC1
     232/       0 :                     FSIGN	macro	{noexpand}
     233/       0 :                     	rst		6
     234/       0 :                     	endm
     235/       0 :                     ;Jump to RST 38H Vector entry of following byte
     236/       0 :                     RST38H	macro	arg, {noexpand}
     237/       0 :                     	rst		7
     238/       0 :                     	db		arg
     239/       0 :                     	endm
     240/       0 :                     ;get DE from M. Full Increment
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 5 - 9/5/2025 20:20:35


     241/       0 :                     GETDEFROMM macro {noexpand}
     242/       0 :                     	MOV     E,M
     243/       0 :                         INX     H
     244/       0 :                         MOV     D,M
     245/       0 :                     	INX		H
     246/       0 :                     	endm
     247/       0 :                     ;get DE from M. Partial Increment
     248/       0 :                     GETDEFROMMNOINC macro {noexpand}
     249/       0 :                     	MOV     E,M
     250/       0 :                         INX     H
     251/       0 :                         MOV     D,M
     252/       0 :                     	endm
     253/       0 :                     ;get HL from M. Partial Increment
     254/       0 :                     GETHLFROMM macro {noexpand}
     255/       0 :                     	MOV     A,M
     256/       0 :                         INX     H
     257/       0 :                         MOV     H,M
     258/       0 :                     	MOV		L,A
     259/       0 :                     	endm
     260/       0 :                     ; Skip XRA A, sets A != 0
     261/       0 :                     SKIP_XRA_A	macro {noexpand}
     262/       0 :                         DB      0F6H						;Tricked out ORI 0AFH
     263/       0 :                     	endm
     264/       0 :                     ; skip XRA A. A unaffected. Sets flags
     265/       0 :                     SKIP_XRA_A_CP macro {noexpand}
     266/       0 :                     	DB      0FEH						;Tricked out CPI 0AFH
     267/       0 :                     	endm
     268/       0 :                     ; skip the next 1 byte instruction. A affected. TODO replace SKIP_XRA_A
     269/       0 :                     SKIP_BYTE_INST macro {noexpand}
     270/       0 :                         DB      3EH							;Tricked out MVI A,0AFH
     271/       0 :                     	endm
     272/       0 :                     ; skip ORA M. B affected
     273/       0 :                     SKIP_BYTE_INST_B macro {noexpand}
     274/       0 :                     	DB      06H							;Tricked out MVI B,xxH
     275/       0 :                     	endm
     276/       0 :                     ; skip POP PSW or similar. C affected.
     277/       0 :                     SKIP_BYTE_INST_C macro {noexpand}
     278/       0 :                     	DB      0EH							;Tricked out MVI C,xxH
     279/       0 :                     	endm
     280/       0 :                     ; skip POP PSW or similar. D affected.
     281/       0 :                     SKIP_BYTE_INST_D macro {noexpand}
     282/       0 :                     	DB      16H							;Tricked out MVI D,xxH
     283/       0 :                     	endm
     284/       0 :                     ; skip POP PSW or similar. E affected.
     285/       0 :                     SKIP_BYTE_INST_E macro {noexpand}
     286/       0 :                     	DB      1EH							;Tricked out MVI E,xxH
     287/       0 :                     	endm
     288/       0 :                     ; skip MVI C,80H (or similar) or two 1 byte instructions. HL affected
     289/       0 :                     SKIP_2BYTES_INST_HL macro {noexpand}
     290/       0 :                         DB      21H							;Tricked out LXI H,800EH
     291/       0 :                     	endm
     292/       0 :                     ; skip MVI E,0BH (or similar) or two 1 byte instructions. BC affected
     293/       0 :                     SKIP_2BYTES_INST_BC macro {noexpand}
     294/       0 :                         DB      01H							;Tricked out LXI B,0E3D1H
     295/       0 :                     	endm
     296/       0 :                     ; skip MVI B,9CH (or similar) or two 1 byte instructions. DE affected
     297/       0 :                     SKIP_2BYTES_INST_DE macro {noexpand}
     298/       0 :                         DB		11H							;Tricked out LXI D,9C06H
     299/       0 :                     	endm
     300/       0 :                     ; skip two instructions. DE affected
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 6 - 9/5/2025 20:20:35


     301/       0 :                     SKIP_2INSTS	macro {noexpand}
     302/       0 :                         DB		11H							;Tricked out LXI D,9C06H
     303/       0 :                     	endm
     304/       0 :                     ; skip two 1 byte instructions. Requires carry clear to avoid jumping
     305/       0 :                     SKIP_2BYTES_INST_JC macro {noexpand}
     306/       0 :                         DB		0DAH						;Tricked out JC xxxxH
     307/       0 :                     	endm
     308/       0 :                     ; skip two 1 byte instructions. Requires Zero clear to avoid jumping
     309/       0 :                     SKIP_2BYTES_INST_JZ macro {noexpand}
     310/       0 :                         DB		0CAH						;Tricked out JZ xxxxH
     311/       0 :                     	endm
     312/       0 :                     ; skip two 1 byte instructions. Requires Zero set to avoid jumping
     313/       0 :                     SKIP_2BYTES_INST_JNZ macro {noexpand}
     314/       0 :                         DB		0C2H						;Tricked out JNZ xxxxH
     315/       0 :                     	endm
     316/       0 :                     ;
     317/       0 :                     ; 0F5F0H (SYSRAM_R) to 0F67FH RAM are initialized from R_FUN_INIT_IMAGE (144 bytes) at cold boot
     318/       0 :                     ;
     319/       0 : =F5E6H              SYSSTK_R	equ	0F5E6H					;cold boot stack
     320/       0 : =F5F0H              SYSRAM_R	equ	0F5F0H					;start of system RAM
     321/       0 : =F5F2H              AUTPWR_R	equ	0F5F2H					;auto power down flag
     322/       0 : =F5F4H              HIMEM_R		equ	0F5F4H					;Highest memory available to BASIC (clear value)
     323/       0 : =F5F6H              BOOTHK_R	equ	0F5F6H					;hook Boot-up
     324/       0 : =F5F9H              WANDHK_R	equ	0F5F9H					;wand hook
     325/       0 : =F5FCH              SERHK_R		equ	0F5FCH					;This is the RST 6.5 routine (RS232 receive interrupt) hook
     326/       0 : =F5FFH              SYSHK_R		equ	0F5FFH					;This is the RST 7.5 routine (SYSINT) hook
     327/       0 : =F602H              PWRDOWN_R	equ	0F602H					;power down trap
     328/       0 : =F624H              ROMJMP_R	equ	0F624H					;Launch Option ROM
     329/       0 : =F605H              ROMTST_R	equ	0F605H					;code to test for Option Rom
     330/       0 : =F62AH              ROMFLG_R	equ	0F62AH					;Option ROM installed flag
     331/       0 : =F62BH              MDMSPD_R	equ	0F62BH					;Dial speed (1=10pps), 2=20pps
     332/       0 : =F62CH              FNKMAC_R	equ 0F62CH					;Pointer to FKey text (from FKey table) for selected FKey
     333/       0 : =F62EH              PBUFIDX_R	equ	0F62EH					;index into Paste Buffer
     334/       0 : =F630H              FKEYSTAT_R	equ	0F630H					;Function key status table (1 = on) (8 bytes)
     335/       0 : =F638H              CONDEV_R	equ	0F638H					;New Console device flag
     336/       0 : =F639H              CSRY_R		equ	0F639H					;current cursor Y position (row)
     337/       0 : =F63AH              CSRX_R		equ	0F63AH					;current cursor X position (1-40) (column)
     338/       0 : =F63BH              LINCNT_R	equ	0F63BH					;Console height
     339/       0 : =F63CH              LINWDT_R	equ	0F63CH					;Console width
     340/       0 : =F63DH              LINPROT_R	equ	0F63DH					;Label line protect status
     341/       0 : =F63EH              SCRLDIS_R	equ	0F63EH					;Scrolling disable flag
     342/       0 : =F63FH              CURSTAT_R	equ	0F63FH					;Cursor status (0 = off)
     343/       0 : =F640H              LCDCSY_R	equ	0F640H					;Cursor row (1-8) initialized to 1
     344/       0 : =F641H              LCDCSX_R	equ	0F641H					;Cursor column (1-40) initialized to 1
     345/       0 : =F642H              DVIROWCOL_R	equ	0F642H					;initialized to 1,1
     346/       0 : =F644H              DVIMAXROW_R equ 0F644H					;initialized to 25
     347/       0 : =F645H              DVIMAXCOL_R	equ	0F645H					;initialized to 40 unless VT100INROM
     348/       0 : =F646H              ESCRST20_R	equ	0F646H					;ESC mode flag for OUTCHR (RST 20H)
     349/       0 :                     ;			equ 0F647H					;used for Double ESC
     350/       0 : =F648H              REVFLG_R	equ	0F648H					;Reverse video flag (FF=reverse/00=normal)
     351/       0 : =F649H              PRTWDTH_R	equ	0F649H					;Printer output width from CTRL-Y
     352/       0 : =F64AH              PRTBUF_R	equ	0F64AH					;4 byte text buffer
     353/       0 : =F64EH              XPLOT_R		equ	0F64EH					;X coord of last point plotted
     354/       0 : =F64FH              YPLOT_R		equ	0F64FH					;Y coord of last point plotted
     355/       0 : =F650H              FNKMOD_R	equ	0F650H					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
     356/       0 : =F651H              EDITFLG_R	equ	0F651H					;Flag used during EDITing a BASIC program.
     357/       0 : =F652H              ACTONERR_R	equ	0F652H					;Active On Error Handler
     358/       0 : =F654H              PNDINT_R	equ	0F654H					;pending interrupt count
     359/       0 : =F655H              TIMMON_R	equ	0F655H					;current month. Initialized to 0
     360/       0 : =F656H              PWROFF_R	equ	0F656H					;Power off exit condition switch
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 7 - 9/5/2025 20:20:35


     361/       0 : =F657H              TIMDWN_R	equ	0F657H					;POWER down time (1/10ths of a minute)
     362/       0 : =F658H              DUPLEX_R	equ	0F658H					;Full/Half duplex switch
     363/       0 : =F659H              ECHO_R		equ	0F659H					;Echo switch
     364/       0 : =F65AH              LFFLG_R		equ	0F65AH					;Auto linefeed on RS232 output switch (non zero send line feeds with each carriage return)
     365/       0 : =F65BH              SERMOD_R	equ	0F65BH					;Serial initialization string like "98N1D"
     366/       0 :                     										;LSTCAL_R-1 (0F660H) contains JMP instruction
     367/       0 : =F661H              LSTCAL_R	equ	0F661H					;Address last called (2 bytes)
     368/       0 : =F663H              INRCODE_R	equ	0F663H					;contains 1CH: INR E instruction. 0F664H contains RET
     369/       0 : =F665H              DCRCODE_R	equ	0F665H					;contains 15H: DCR D instruction. 0F666H contains RET
     370/       0 : =F667H              OUTCODE_R	equ	0F667H					;contains 0D3H: OUT instruction. 0F669H contains RET
     371/       0 : =F66AH              INCODE_R	equ	0F66AH					;contains 0DBH: IN instruction.  0F66CH contains RET
     372/       0 : =F66DH              COLONTXT_R	equ	0F66DH					;contains ':'. 5 bytes
     373/       0 : =F672H              ERRFLG_R	equ	0F672H					;Last Error code (1 byte)
     374/       0 : =F674H              LPTPOS_R	equ	0F674H					;Line printer head position (based from zero)
     375/       0 : =F675H              PRTFLG_R	equ	0F675H					;Flag 0FFH=send output to lpt
     376/       0 : =F676H              COLWRAP_R	equ	0F676H					;comma value for print. contains 14 or 56 if 80 columns width
     377/       0 : =F678H              STRBUF_R	equ	0F678H					;BASIC string buffer pointer/Top of available RAM
     378/       0 : =F67AH              CURLIN_R	equ	0F67AH					;Current Basic executing line number
     379/       0 : =F67CH              TXTTAB_R	equ	0F67CH					;Start of BASIC program pointer
     380/       0 : =F67EH              VALSTRPTR_R equ	0F67EH					;ptr used by VAL_STR_FUN() (2 bytes)
     381/       0 :                     ; ======================================
     382/       0 :                     ; end of R_FUN_INIT_IMAGE
     383/       0 :                     ; ======================================
     384/       0 : =F680H              EOSMRK_R	equ	0F680H					;End of Statement marker
     385/       0 : =F681H              TOKTMP_R	equ	0F681H					;temp storage for tokenized line:
     386/       0 :                     										;	next line (2 bytes) + line number (2 bytes)
     387/       0 : =F685H              INPBUF_R	equ	0F685H					;Start of keyboard crunch buffer for line input routine (90 bytes)
     388/       0 : =F6DFH              ESCESC_R	equ	0F6DFH					;Clear storage for key read from keyboard to test for ESC ESC (1 byte)
     389/       0 : =F6E0H              SAVESCESC_R	equ	0F6E0H					;saved ESCESC_R
     390/       0 : =F6E1H              PNDERR_R	equ	0F6E1H					;Pending error
     391/       0 : =F6E2H              DOADDR_R	equ	0F6E2H					;Start address in .DO file of SELection for copy/cut
     392/       0 : =F6E4H              DOEND_R		equ	0F6E4H					;End address in .DO file of SELection for copy/cut (2 bytes)
     393/       0 : =F6E6H              PASTEFLG_R	equ	0F6E6H					;paste buffer related
     394/       0 : =F6E7H              TMPLIN_R	equ	0F6E7H					;temp storage for line ptr (2 bytes)
     395/       0 : =F6E9H              PREVLINE_R	equ	0F6E9H					;2 bytes
     396/       0 : =F6EBH              TXTLINTBL_R equ 0F6EBH					;Storage of TEXT Line ptrs. Length at least 8 ptr entries, possibly 26 (DVI). (52 bytes)
     397/       0 : =F71FH              SEARCHSTR_R	equ	0F71FH					;Used to store search string in editor (72 bytes)
     398/       0 : =F767H              DOLOAD_R	equ	0F767H					;Load start address of .DO file being edited (2 bytes)
     399/       0 :                     ; potentially unused space 0F769H..0F786, 30 bytes
     400/       0 : =F787H              UNUSED4_R	equ	0F787H					;1 bytes. Only ever cleared
     401/       0 : =F788H              CURHPOS_R	equ	0F788H					;Horiz. position of cursor (0-39)
     402/       0 : =F789H              FNKSTR_R	equ	0F789H					;Function key definition area. 128/80H bytes
     403/       0 : =F809H              FILTYP_R	equ	0F809H					;File type
     404/       0 : =F80AH              BASFNK_R	equ	0F80AH					;BASIC's function keys. 128 bytes
     405/       0 : =F88AH              SHFTPRNT_R	equ	0F88AH					;SHIFT-PRINT key sequence Function text
     406/       0 : =F88CH              EOMFILE_R	equ	0F88CH					;end of file area/ptr to PASTE buffer (2 bytes)
     407/       0 : =F88EH              SAVCURPOS_R	equ	0F88EH					;temporarily saved current char position in line buffer
     408/       0 : =F890H              DSPCOFF_R	equ	0F890H					;Current column offset within display line buffer
     409/       0 : =F892H              CURPOS_R	equ	0F892H					;current char position in line buffer
     410/       0 : =F894H              LINBUF_R	equ	0F894H					;line buffer (140 chars)
     411/       0 : =F920H              LCDPRT_R	equ	0F920H					;LCD vs Printer output indication - output to LCD
     412/       0 : =F921H              WWRAP_R		equ	0F921H					;Get word-wrap enable flag
     413/       0 : =F922H              OUTFMTWIDTH_R equ 0F922H				;Output format width (40 or something else for CTRL-Y)
     414/       0 :                     ; 40 bits (10 nibbles) Clock Chip Data. Each nibble from the Clock Chip is stored in a byte
     415/       0 : =F923H              TIMBUF_R	EQU	0F923H					;(10 bytes)
     416/       0 : =F92DH              TIMYR1_R	equ	0F92DH					;Year 2 bytes (ones), (tens)
     417/       0 : =F92FH              TIMCNT_R	equ	0F92FH					;2Hz count-down value
     418/       0 :                     ; next 2 variables need to stay together
     419/       0 : =F930H              TIMCN2_R	equ	0F930H					;Counter (12 to 1)
     420/       0 : =F931H              PWRCNT_R	equ	0F931H					;Power down countdown value
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 8 - 9/5/2025 20:20:35


     421/       0 : =F932H              PWRDWN_R	equ	0F932H					;Power Down Flag, either 0 or 0FFH
     422/       0 : =F933H              CLKCHP_R	equ	0F933H					;Clock Chip Buffer (10 bytes)
     423/       0 : =F93DH              TIMINT_R	equ	0F93DH					;Time for ON TIME interrupt (SSHHMM or SSMMHH, 6 bytes)
     424/       0 : =F943H              ONTIMETRIGD_R equ 0F943H				;ON TIME interrupt currently triggered
     425/       0 : =F944H              SYSINT_R	equ	0F944H					;System Interrupt Table: 10 * 3 bytes = 30 (1EH)
     426/       0 :                     ; RAMDIR_R size = RAMDIRCNT * RAMDIRLEN = 297 (129H) bytes
     427/       0 :                     ; First 5 entries are ROM functions (BASIC, TEXT, TELCOM, ADDRSS, SCHEDL), 55/037H bytes
     428/       0 :                     ; Next 3 entries are for internal use (SUZUKI, HAYASHI, RICKY) 33/021H bytes
     429/       0 :                     ; 19 user entries available 209/0D1H bytes
     430/       0 :                     ; Total: 55+33+209 = 297/0129H. 0F962H..0FA8AH
     431/       0 : =F962H              RAMDIR_R	equ	0F962H					;start of RAM directory.
     432/       0 : =F999H              SUZUKI_R	equ	0F999H					;Suzuki Directory Entry.
     433/       0 :                     ;			equ	0F99AH					;BASIC program not saved pointer.
     434/       0 : =F9A4H              HAYASHI_R	equ	0F9A4H					;Hayashi Directory Entry
     435/       0 :                     ;			equ	0F9A5H					;paste buffer ptr.
     436/       0 :                     
     437/       0 : =>FALSE             	if		HWSCROLL
     438/       0 :                     ;---------------------------------------------------------------------
     439/       0 :                     ; Hardware Scroll Patch
     440/       0 :                     ;---------------------------------------------------------------------
     441/       0 :                     page_loc	equ	0F9ADH
     442/       0 :                     scroll_active equ 0F9AEH
     443/       0 : [437]               	endif								;HWSCROLL
     444/       0 :                     
     445/       0 : =F9AFH              RICKY_R		equ	0F9AFH					;Ricky Directory Entry.
     446/       0 :                     ;			equ	0F9B0H					;ptr 8099H
     447/       0 : =F9BAH              USRRAM_R	equ	0F9BAH					;start of user RAMDIR, 19 entries max, 11 bytes each
     448/       0 : =FA8AH              ENDUSRRAM_R	equ	0FA8AH					;last byte of RAMDIR_R
     449/       0 : =FA8CH              RAMDIRPTR_R	equ	0FA8CH					;(2 bytes)
     450/       0 : =FA8EH              CASFILSTAT_R equ 0FA8EH					;Cassette File Status
     451/       0 : =FA8FH              FILSTAT_R	equ	0FA8FH					;File Status (1/2 bytes)
     452/       0 : =FA91H              FILSTATTBL_R equ 0FA91H					;Basic File Status Table (16 bytes)
     453/       0 : =FAA1H              LSTPST_R	equ	0FAA1H					;Last Paste Character
     454/       0 : =FAA2H              FILNUM_R	equ	0FAA2H					;zero extended validated file number (2 bytes)
     455/       0 : =FAA4H              ROMSW_R		equ	0FAA4H					;code to switch back to the option rom
     456/       0 : =FAACH              LASTLPT_R	equ	0FAACH					;Last char sent to printer
     457/       0 : =FAADH              LINENA_R	equ	0FAADH					;Label line enable flag
     458/       0 : =FAAEH              PORTA8_R	equ	0FAAEH 					;Contents of port 0A8H. NOTE PORT 0A8H never read
     459/       0 : =FAAFH              IPLNAM_R	equ	0FAAFH					;Start of IPL filename (9 bytes)
     460/       0 : =FABAH              LASTLST_R	equ	0FABAH					;Address where last BASIC list started
     461/       0 : =FABCH              NXTLINE_R	equ	0FABCH					;line (ptr) used on Edit/List mode
     462/       0 : =FABEH              POWRSP_R	equ	0FABEH					;SP save area for power up/down
     463/       0 : =FAC0H              LOMEM_R		equ	0FAC0H					;Lowest RAM address in system (8000H for 32K system)
     464/       0 : =FAC2H              SER_UPDWN_R	equ	0FAC2H					;2 flags used in TELCOM Upload and Download
     465/       0 : =FAC4H              DOFILPTR_R	equ	0FAC4H					;ptr to DO file (2 bytes)
     466/       0 : =FAC6H              TLCMKEY_R	equ	0FAC6H					;saved key in Telcom code
     467/       0 : =FAC7H              POPPSW_R	equ	0FAC7H					;Conditionally POP PSW from stack based on this flag
     468/       0 : =FAC8H              UNUSED5_R	equ	0FAC8H					;set to 0 or 0FFH but never tested
     469/       0 : =FAC9H              RST38ARG_R	equ	0FAC9H					;data byte following rst 7
     470/       0 : =FACAH              CSRXSVD_R	equ	0FACAH					;saved Cursor column
     471/       0 : =FACBH              OLDCURSTAT_R equ 0FACBH					;Storage if cursor was on before BASIC CTRL-S
     472/       0 : =FACCH              LINPROT2_R	equ	0FACCH					;Saved Line 8 Protect status
     473/       0 : =FACDH              LPT_MOVING_R equ 0FACDH					;LPT head is moving
     474/       0 :                     ;
     475/       0 :                     ; next 5 words need to stay in order
     476/       0 :                     ;
     477/       0 : =FACEH              LOADADR_R	equ	0FACEH					;'Load address' of current program (2 bytes)
     478/       0 : =FAD0H              LASTLEN_R	equ	0FAD0H					;Length of last program (2 bytes)
     479/       0 : =FAD2H              LASTSTRT_R	equ	0FAD2H					;Start of  last program (2 bytes)
     480/       0 :                     ; 0FAD4H..0FAD7H						;4 bytes used for CAS
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 9 - 9/5/2025 20:20:35


     481/       0 : =FAD8H              XXSTRT_R	equ	0FAD8H					;2 bytes
     482/       0 : =FADAH              RST38_R		equ	0FADAH					;Start of RST 38H vector table: 48 * 2 bytes (60H)
     483/       0 : =FADEH              HCHGET_R	EQU	0FADEH					;CHGET hook entry
     484/       0 : =FAE0H              HCHSNS_R	EQU	0FAE0H					;CHSNS hook entry
     485/       0 : =FAE2H              HCHPUT_R	EQU	0FAE2H					;CHPUT (print) hook entry
     486/       0 : =FB14H              HOOKT2_R	equ	0FB14H					;start of second section of RST38_R
     487/       0 : =FB39H              ENDHKT2_R	equ	0FB39H					;last byte of RST38 Table
     488/       0 : =FB3AH              LCDBITS_R	equ	0FB3AH					;reflects the Reverse Video status of each char on LCD screen (40 bytes, 320 bits)
     489/       0 : =FB62H              TXTEND_R	equ	0FB62H					;Pointer to end of .DO storage
     490/       0 :                     ; next 2 variables need to be together
     491/       0 : =FB64H              CRELOC_R	equ	0FB64H					;Create/Locate switch for variables used in the main evaluation routine (Locate=0, Create>0).
     492/       0 : =FB65H              VALTYP_R	equ	0FB65H					;Type of last expression used: (2-Integer, 3-String, 4-Single Precision, 5-Double Precision)
     493/       0 :                     ; DORES_R 
     494/       0 :                     ; WHETHER CAN OR CAN'T CRUNCH RESERVED WORDS
     495/       0 :                     ; TURNED ON WHEN "DATA" BEING SCANNED BY CRUNCH SO UNQUOTED
     496/       0 :                     ; STRINGS WON'T BE CRUNCHED.
     497/       0 : =FB66H              DORES_R		equ	0FB66H					;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
     498/       0 : =FB67H              MEMSIZ_R	equ	0FB67H					;Start address for file buffer area (2 bytes)
     499/       0 : =FB69H              TEMPPT_R	equ	0FB69H					;String Stack ptr (2 bytes)
     500/       0 : =FB6BH              TEMPST_R	equ	0FB6BH					;String Stack 30 bytes (10 string descriptors)
     501/       0 : =FB88H              STRSTKEND_R	equ	0FB88H					;end of String Stack
     502/       0 : =FB89H              TRSNSTR_R	equ	0FB89H					;transient string storage (3 bytes)
     503/       0 : =FB8CH              FRETOP_R	equ	0FB8CH					;Pointer to free location in BASIC string buffer (2 bytes). Goes down.
     504/       0 : =FB8EH              TEMP3_R		equ	0FB8EH					;1/2 byte
     505/       0 : =FB90H              TEMP8_R		equ	0FB90H					;2 bytes
     506/       0 : =FB92H              MSTMP3_R	equ	0FB92H					;2 bytes
     507/       0 : =FB94H              DATALIN_R	equ	0FB94H					;Line number of current data statement
     508/       0 : =FB96H              SUBFLG_R	equ	0FB96H					;DONT RECOGNIZE SUBSCRIPTED VARIABLES flag
     509/       0 : =FB97H              PROFLG_R	equ	0FB97H					;1 byte. TODO Only ever cleared
     510/       0 : =FB98H              PRT_USING_R	equ	0FB98H					;Print Using Flag (1 byte
     511/       0 : =FB99H              LSTVAR_R	equ	0FB99H					;Address of last variable assigned (2 bytes)
     512/       0 : =FB9BH              SAVTXT_R	equ	0FB9BH					;Most recent or currenly running line pointer
     513/       0 : =FB9DH              BASSTK_R	equ	0FB9DH					;SP used by BASIC to reinitialize the stack
     514/       0 : =FB9FH              ERRLIN_R	equ	0FB9FH					;Line number of last error
     515/       0 : =FBA1H              DOT_R		equ	0FBA1H					;Most recent entered/ listed/ or edited line
     516/       0 : =FBA3H              ERRTXT_R	equ	0FBA3H					;Pointer to occurance of error
     517/       0 : =FBA5H              ONERR_R		equ	0FBA5H					;Address of ON ERROR routine
     518/       0 : =FBA7H              PRGRUN_R	equ	0FBA7H					;Basic program running flag
     519/       0 : =FBA8H              TEMP2_R		equ	0FBA8H					;temp pointer
     520/       0 : =FBAAH              OLDLIN_R	equ	0FBAAH					;Line where last break, END, or STOP occured (2 bytes)
     521/       0 :                     ;
     522/       0 :                     ; OLDTXT_R
     523/       0 :                     ; A STORED TEXT POINTER OF ZERO IS SETUP BY STKINI AND INDICATES THERE IS NOTHING TO CONTINUE
     524/       0 :                     ;
     525/       0 : =FBACH              OLDTXT_R	equ	0FBACH					;Address where program stoped on last break, END, or STOP (2)
     526/       0 : =FBAEH              DOSTRT_R	equ	0FBAEH					;Pointer to the start of the DO files and end of the BA files (2 bytes)
     527/       0 : =FBB0H              COSTRT_R	equ	0FBB0H					;Pointer to the start of CO files (2 bytes)
     528/       0 :                     ;
     529/       0 :                     ;POINTER TO START OF SIMPLE VARIABLE SPACE
     530/       0 :                     ;UPDATED WHENEVER THE SIZE OF THE PROGRAM CHANGES
     531/       0 :                     ;SET TO [TXTTAB] BY SCRATCH ("NEW")
     532/       0 :                     ;
     533/       0 : =FBB2H              VARTAB_R	equ	0FBB2H					;Pointer to the start of variable table (2 bytes)
     534/       0 :                     ;
     535/       0 :                     ;POINTER TO BEGINNING OF ARRAY TABLE
     536/       0 :                     ;INCREMENTED BY 6 WHENEVER A NEW SIMPLE VARIABLE IS FOUND, AND
     537/       0 :                     ;SET TO [VARTAB] BY CLEARC.
     538/       0 :                     ;
     539/       0 : =FBB4H              ARYTAB_R	equ	0FBB4H					;Pointer to the start of array table (2 bytes)
     540/       0 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 10 - 9/5/2025 20:20:35


     541/       0 :                     ;END OF STORAGE IN USE
     542/       0 :                     ;INCREASED WHENEVER A NEW ARRAY OR SIMPLE VARIABLE IS ENCOUNTERED
     543/       0 :                     ;SET TO [VARTAB] BY CLEARC.
     544/       0 :                     ;
     545/       0 : =FBB6H              STRGEND_R	equ	0FBB6H					;Pointer to the start of the systems unused memory (2 bytes)
     546/       0 :                     ;
     547/       0 :                     ;POINTER TO DATA. INITIALIZED TO POINT AT THE ZERO IN FRONT OF [TXTTAB]
     548/       0 :                     ;BY "RESTORE" WHICH IS CALLED BY CLEARC
     549/       0 :                     ;UPDATED BY EXECUTION OF A "READ"
     550/       0 :                     ;
     551/       0 : =FBB8H              DATAPTR_R	equ	0FBB8H					;Address where DATA search will begin on next READ statement (2 bytes)
     552/       0 :                     ;
     553/       0 :                     ;THIS GIVES THE DEFAULT VALTYP FOR EACH LETTER OF THE ALPHABET
     554/       0 :                     ;IT IS SET UP BY "CLEAR" AND CHANGED BY "DEFSTR" "DEFINT" "DEFSNG" "DEFDBL" AND USED
     555/       0 :                     ;BY PTRGET WHEN ! # % OR $ DON'T FOLLOW A VARAIBLE NAME
     556/       0 :                     ;
     557/       0 : =FBBAH              DEFTBL_R	equ	0FBBAH					;table for default variable types declared by the DEF statement.
     558/       0 :                     										;Each entry corresponds to one of the letters A-Z.
     559/       0 :                     										;The contents of each entry are 2 for an integer, 3 for a string,
     560/       0 :                     										;4 for a single precision number, and 8 for a double precision number. (26 bytes)
     561/       0 : =FBD4H              UNUSED7_R	equ	0FBD4H					;cleared and only used as a label.
     562/       0 : =FBD6H              UNUSED6_R	equ	0FBD6H					;only ever cleared (2 bytes)
     563/       0 :                     ; PRMPRV_R is used in mbasic 5.2 for CP/M for User Defined Functions, which are not
     564/       0 :                     ; supported in M100 basic. Looks like a left-over from that code
     565/       0 : =FBD9H              PRMPRV_R	equ	0FBD9H					;THE POINTER AT THE PREVIOUS PARAMETER(2 bytes)
     566/       0 : =FBDBH              UNUSED3_R	equ	0FBDBH					;Only ever cleared, never referenced (2 bytes)
     567/       0 : =FBDFH              ARYTA2_R	equ	0FBDFH					;(2 bytes)
     568/       0 : =FBE1H              UNUSED2_R	equ	0FBE1H					;Only ever cleared, never referenced (1 byte)
     569/       0 : =FBE2H              TEMP9_R		equ	0FBE2H					;2 bytes
     570/       0 : =FBE4H              UNUSED1_R	equ	0FBE4H					;Only ever cleared, never referenced (2 bytes)
     571/       0 : =FBE6H              VALSTRDAT_R	equ	0FBE6H					;used by VAL_STR_FUN(). Only valid if VALSTRPTR_R != 0 (1 byte)
     572/       0 : =FBE7H              FPTMP1_R	equ	0FBE7H					;Floating Point Temp 1 (2 bytes) OVERLAPS
     573/       0 : =FBE8H              MBUFFER_R	equ	0FBE8H					;number string stored here
     574/       0 : =FC12H              FPTMP4_R	equ	0FC12H					;Temps
     575/       0 : =FC14H              FPTMP5_R	equ	0FC14H
     576/       0 : =FC16H              FPTMP6_R	equ	0FC16H
     577/       0 : =FC17H              FPTMP7_R	equ	0FC17H
     578/       0 :                     ; extended precision FAC1 is 15 bytes
     579/       0 : =FC18H              DFACLO_R	equ	0FC18H					;Floating Point Accumulator (FAC1)
     580/       0 : =FC1AH              IFACLO_R	equ	0FC1AH					;FAC1 for integers
     581/       0 :                     ;
     582/       0 :                     ; BCD temps are referenced at their lowest digit, meaning highest address
     583/       0 :                     ; memory layout starts at 0FC27H
     584/       0 :                     ;
     585/       0 : =FC27H              BCDTMPS_R	equ	0FC27H
     586/       0 : =FC2FH              BCDTMP1_R	equ	0FC2FH					;BCD_TEMP1	These temps must be in this order
     587/       0 : =FC37H              BCDTMP2_R	equ	0FC37H					;BCD_TEMP2
     588/       0 : =FC3FH              BCDTMP3_R	equ	0FC3FH					;BCD_TEMP3
     589/       0 : =FC47H              BCDTMP4_R	equ	0FC47H					;BCD_TEMP4
     590/       0 : =FC4FH              BCDTMP5_R	equ	0FC4FH					;BCD_TEMP5
     591/       0 : =FC57H              BCDTMP6_R	equ	0FC57H					;BCD_TEMP6
     592/       0 : =FC5FH              BCDTMP7_R	equ	0FC5FH					;BCD_TEMP7 (x2)
     593/       0 :                     ; overloaded memory
     594/       0 : =FC60H              FPTMP2_R	equ	0FC60H					;Floating Point Temp 2
     595/       0 : =FC67H              BCDTMP8_R	equ	0FC67H					;Temp BCD value for computation
     596/       0 : =FC69H              DFACLO2_R	equ	0FC69H					;Second FAC (FAC2) 16 bytes
     597/       0 : =FC6BH              IFACLO2_R	equ	0FC6BH					;FAC2 for integers
     598/       0 : =FC79H              FPRND_R		equ	0FC79H					;Floating Point Random number (8 bytes)
     599/       0 : =FC81H              DVI_STAT_R	equ 0FC81H					;DVI being used
     600/       0 : =FC82H              MAXFILES_R	equ	0FC82H					;Maxfiles
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 11 - 9/5/2025 20:20:35


     601/       0 : =FC83H              FCBTBL_R	equ	0FC83H					;ptr to File number description table pointer (2 bytes)
     602/       0 : =FC87H              FCB1_BUF_R	equ	0FC87H					;ptr to buffer first file(2 bytes)
     603/       0 : =FC8CH              FCBLAST_R	equ	0FC8CH					;FCB ptr for the last file used (2 bytes)
     604/       0 : =FC92H              EXCFLG_R	equ	0FC92H					;Flag to execute BASIC program
     605/       0 : =FC93H              FILNAM_R	equ	0FC93H					;9 byte area for setting file names for search or open (9 bytes)
     606/       0 : =FC9CH              FILNM2_R	equ	0FC9CH					;Second file name/ same format as above. Used by NAME (11 bytes) last 2 bytes unused?
     607/       0 : =FCA7H              OPNFIL_R	equ 0FCA7H					;Any open files flag
     608/       0 : =FCA8H              BOOTSTK_R	equ	0FCA8H					;0FCA8H..0FCBFH	18H/24 byte stack area during boot
     609/       0 :                     ;
     610/       0 :                     ; ALTLCD_R and LCD_R need to be consecutive
     611/       0 :                     ; ALTLCD_R area only used in terminal mode
     612/       0 :                     ;
     613/       0 : =FCC0H              ALTLCD_R	equ	0FCC0H					;Screen buffer 0 (Previous page for Telcom)
     614/       0 : =FDA1H              MNU2RAM_R	equ	0FDA1H					;Map of MENU entry positions to RAM directory
     615/       0 : =FDD7H              TMP_UTIL_R	equ	0FDD7H					;temp to store a ptr (2 bytes)
     616/       0 : =FDD9H              STRNAM_R	equ	0FDD9H					;filename string. 8 bytes
     617/       0 : =FDEDH              MENUCMD_R	equ	0FDEDH					;Menu command entry count
     618/       0 : =FDEEH              MENPOS_R	equ	0FDEEH					;Current MENU directory location. Sometimes Used as Lfnd flag 
     619/       0 : =FDEFH              MENMAX_R	equ	0FDEFH					;Maximum MENU directory location
     620/       0 : =FDFAH              TMPCONDEV_R	equ	0FDFAH					;temporary Console Device Flag
     621/       0 : =FE00H              LCD_R		equ	0FE00H					;Screen buffer 1 (LCD memory)
     622/       0 : =FF40H              XONXOFF_R	equ	0FF40H					;XON/XOFF protocol control
     623/       0 :                     ;
     624/       0 :                     ; Zero 0FF40H..0FFFCH, basically all RAM >= XONXOFF_R at cold boot time.
     625/       0 :                     ;
     626/       0 : =FF41H              XONXOFF1_R	equ	0FF41H					;Second XON/XOFF protocol control
     627/       0 : =FF42H              XONFLG_R	equ	0FF42H					;XON/XOFF enable flag
     628/       0 : =FF43H              SERINIT_R	equ	0FF43H					;RS232 initialization status
     629/       0 : =FF44H              SNDFLG_R	equ	0FF44H					;Sound flag: 0 means sound allowed
     630/       0 : =FF45H              PORTE8_R	equ	0FF45H					;Contents of port E8H
     631/       0 : =FF46H              SERBUF_R	equ	0FF46H					;RS232 Character buffer
     632/       0 : =FF86H              SERCNT_R	equ	0FF86H					;RS232 buffer count
     633/       0 : =FF88H              SERPTR_R	equ	0FF88H					;RS232 buffer input pointer
     634/       0 : =FF8AH              CTRLS_R		equ	0FF8AH					;Control-S status
     635/       0 : =FF8BH              BAUDRT_R	equ	0FF8BH					;UART baud rate timer value (2 bytes)
     636/       0 : =FF8DH              PARMSK_R	equ	0FF8DH					;Serial Ignore Parity Mask byte. Used to remove bits if 'I' parity
     637/       0 : =FF8EH              CASPLS_R	equ	0FF8EH					;Cassette port pulse control
     638/       0 : =FF8FH              KBDSKIP_R	equ	0FF8FH					;Skip count for keyboard scanning. Initialized to 3
     639/       0 : =FF90H              KBDCNTR_R	equ	0FF90H					;Keyboard counter. Set to 2
     640/       0 :                     ; next 17 bytes need to be consecutive
     641/       0 : =FF91H              KBDCOL1_R	equ	0FF91H					;start of keyboard columns storage area 1: 9 columns
     642/       0 : =FF97H              SPCLKEY_R	equ	0FF97H					;special key storage, 8 bits: SPACE, DEL, TAB, ESC, PASTE, LABEL, PRINT, ENTER
     643/       0 : =FF98H              FUNKEY_R	equ	0FF98H					;Function key storage, 8 bits: F1 F2 F3 F4 F5 F6 F7 F8
     644/       0 :                     ;			equ	0FF99H					;end of keyboard scan column storage #1. 8 bits:
     645/       0 :                     										;SHIFT, CTRL, GRPH, CODE, NUM, CAPSLOCK
     646/       0 : =FF9AH              KBDCOL2_R	equ	0FF9AH					;start of keyboard columns storage area 2: 9 columns
     647/       0 : =FFA2H              ENDKBDCL2_R	equ	0FFA2H					;end of keyboard scan column storage @2. 8 bits:
     648/       0 :                     										;SHIFT, CTRL, GRPH, CODE, NUM, CAPSLOCK
     649/       0 :                     ; variables below must stay together
     650/       0 : =FFA3H              KEYSHFT_R	equ	0FFA3H					;Shift key status storage
     651/       0 : =FFA4H              KEYCNT_R	equ	0FFA4H					;Key repeat start delay counter
     652/       0 : =FFA5H              KEYCNT2_R	equ	0FFA5H
     653/       0 : =FFA6H              KEYSTRG_R	equ	0FFA6H					;Key position storage
     654/       0 : =FFA7H              KEYXXXX_R	equ	0FFA7H					;Key related.
     655/       0 : =FFA8H              KEYPTR_R	equ	0FFA8H					;Pointer to entry in 2nd Storage Buffer for key (2 bytes)
     656/       0 : =FFAAH              KBCNT_R		equ	0FFAAH					;Keyboard buffer count. Buffer must follow
     657/       0 : =FFABH              KBBUF_R		equ	0FFABH					;keyboard typeahead buffer (64 bytes 40H)
     658/       0 : =FFEBH              PNDCTRL_R	equ	0FFEBH					;Holds CTRL-C or CTRL-S until it is processed
     659/       0 : =FFECH              LCDBUF_R		equ	0FFECH					;6 byte LCD buffer
     660/       0 : =FFF2H              CSRSTAT_R	equ	0FFF2H					;cursor blink on-off status. Value 0, 1 or 080H (disabled)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 12 - 9/5/2025 20:20:35


     661/       0 : =FFF3H              CSRCNT_R	equ	0FFF3H					;Time until next cursor blink
     662/       0 :                     ; LCTEY_R and LCTEX_R are 0 based. Keep these 2 together.
     663/       0 : =FFF4H              LCTEY_R		equ	0FFF4H					;LCD row 0..7 of character position to be printed
     664/       0 : =FFF5H              LCTEX_R		equ	0FFF5H					;LCD column 0..39 of character position to be printed
     665/       0 : =FFF6H              PBTABLE_R	equ	0FFF6H					;stored LCD Driver Selection table (2 bytes)
     666/       0 : =FFF8H              SAVEDSP_R	equ	0FFF8H					;stored SP value
     667/       0 : =>TRUE              	if DVIENABLED
     668/       0 : =FFFAH              DVIBOX_R	equ	0FFFAH					;DVI MAILBOX SELECT area
     669/       0 : =FFFBH              DVIFLG_R	equ	0FFFBH					;optional external controller flag
     670/       0 : [667]               	endif
     671/       0 : =FFFCH              VIDFLG_R	equ	0FFFCH
     672/       0 :                     
     673/       0 : =>TRUE              	if VT100INROM
     674/       0 : =FFFEH              LAST_RAM	equ	var1
     675/       0 : =>FALSE             	else
     676/       0 :                     LAST_RAM	equ	VIDFLG_R
     677/       0 : [673]               	endif
     678/       0 :                     ;
     679/       0 :                     ; Reset Vector
     680/       0 :                     ;
     681/       0 :                     R_RESET_VECTOR:							;0000H
     682/       0 : C3 33 7D                JMP     R_BOOT_ROUTINE				;Boot routine
     683/       3 :                     
     684/       3 :                     L_MENU_MSG:
     685/       3 : 4D 45 4E 55 00          DB      "MENU",00H
     686/       8 :                     ;
     687/       8 :                     ; Compare next byte with M: SYNCHR
     688/       8 :                     ;
     689/       8 :                     R_COMP_BYTE_M:							;0008H
     690/       8 : 7E                      MOV     A,M
     691/       9 : E3                      XTHL
     692/       A : BE                      CMP     M
     693/       B : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
     694/       E : 23                      INX     H
     695/       F : E3                      XTHL
     696/      10 :                     ;
     697/      10 :                     ; Get next non-white char from M: CHRGET
     698/      10 :                     ;
     699/      10 :                     R_RST_10H:
     700/      10 : C3 58 08                JMP     L_CHRGTR					;Get next non-white char from M
     701/      13 :                     ;
     702/      13 :                     ; TXTLINTBL_R to DE, Compare DE, HL
     703/      13 :                     ;
     704/      13 :                     L_ISFRSTLIN:
     705/      13 : EB                      XCHG
     706/      14 : 2A EB F6                LHLD    TXTLINTBL_R					;Get first TEXT Line ptr to DE
     707/      17 : EB                      XCHG
     708/      18 :                     ;
     709/      18 :                     ;Compare DE and HL
     710/      18 :                     ; HL - DE
     711/      18 :                     ; OUT:
     712/      18 :                     ;	Z		equal or not equal
     713/      18 :                     ;	carry	if HL < DE
     714/      18 :                     ;	A		0 if Z set
     715/      18 :                     ;
     716/      18 :                     R_COMP_DE_HL:							;0018H
     717/      18 : 7C                      MOV     A,H
     718/      19 : 92                      SUB     D
     719/      1A : C0                      RNZ
     720/      1B : 7D                      MOV     A,L
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 13 - 9/5/2025 20:20:35


     721/      1C : 93                      SUB     E
     722/      1D : C9                      RET
     723/      1E :                     ;
     724/      1E :                     ; Send a space to screen/printer
     725/      1E :                     ;
     726/      1E :                     R_PRINT_SPACE:							;001EH
     727/      1E : 3E 20                   MVI     A,' '
     728/      20 :                     ;
     729/      20 :                     ; Send character in A to screen/printer
     730/      20 :                     ;
     731/      20 :                     R_PRINT_CHAR:							;0020H
     732/      20 : C3 44 4B                JMP     R_SEND_A_LCD_LPT			;Send A to screen or printer
     733/      23 : 00                      NOP    
     734/      24 :                     ;
     735/      24 :                     ; Power down TRAP
     736/      24 :                     ;
     737/      24 :                     R_PWR_DOWN_TRAP:						;0024H
     738/      24 : C3 02 F6                JMP     PWRDOWN_R
     739/      27 : 00                      NOP    
     740/      28 :                     ;
     741/      28 :                     ; Determine type of last var used RST 5
     742/      28 :                     ;
     743/      28 :                     ; RST 28H routine
     744/      28 :                     ; Determine type of last var used
     745/      28 :                     ; C: Clear = Double Precision
     746/      28 :                     ; P: Clear = Single Precision
     747/      28 :                     ; Z: Set = String
     748/      28 :                     ; S: Set = Integer
     749/      28 :                     ;
     750/      28 :                     R_DET_LAST_VAR_TYPE:				    ;0028H
     751/      28 : C3 69 10                JMP     R_RST_28H				    ;RST 28H routine
     752/      2B : 00                      NOP    
     753/      2C :                     ;
     754/      2C :                     ; RST 5.5 -- Bar Code Reader
     755/      2C :                     ;
     756/      2C :                     R_RST_5_5:								;002CH
     757/      2C : F3                      DI 
     758/      2D : C3 F9 F5                JMP     WANDHK_R					;RAM
     759/      30 :                     ;
     760/      30 :                     ; Get sign of FAC1 RST 6
     761/      30 :                     ;
     762/      30 :                     R_GET_FAC1_SIGN:						;0030H
     763/      30 : C3 DC 33                JMP     R_RST_30H_FUN				;Get sign of SGL or DBL precision
     764/      33 : 00                      NOP									;Filler
     765/      34 :                     ;
     766/      34 :                     ; RST 6.5 -- RS232 character pending
     767/      34 :                     ;
     768/      34 :                     R_RST_6_5:								;0034H
     769/      34 : F3                      DI 
     770/      35 : C3 AC 6D                JMP     R_RST6_5_ISR				;RST 6.5 routine (RS232 receive interrupt)
     771/      38 :                     ;
     772/      38 :                     ; RAM vector table driver
     773/      38 :                     ;
     774/      38 :                     R_RST38H:							    ;0038H
     775/      38 : C3 D6 7F                JMP     R_RAM_VCTR_TBL_DRIVER		;RST 38H RAM vector driver routine
     776/      3B : 00                      NOP									;Filler
     777/      3C :                     ;
     778/      3C :                     ; RST 7.5 -- Timer background task
     779/      3C :                     ;
     780/      3C :                     R_RST_7_5:								;003CH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 14 - 9/5/2025 20:20:35


     781/      3C : F3                      DI 
     782/      3D : C3 32 1B                JMP     R_TIMER_ISR			 	   ;RST 7.5 interrupt routine
     783/      40 :                     ;
     784/      40 :                     ; test relocatability of code
     785/      40 :                     ;
     786/      40 :                     ;	nop									;xxxx move everything over 1 byte
     787/      40 :                     ;
     788/      40 :                     ; Function vector table for SGN to MID$
     789/      40 :                     ;
     790/      40 :                     R_FUN_VCTR_TBL:								  	;0040H
     791/      40 : 07 34 54 36 F2 33       DW      R_SGN_FUN, R_INT_FUN, R_ABS_FUN
     792/      46 : 4C 2B 00 11 C8 10       DW      R_FRE_FUN, R_INP_FUN, R_LPOS_FUN
     793/      4C : CE 10 5A 30 3E 31       DW      R_POS_FUN, R_SQR_FUN, R_RND_FUN
     794/      52 : CF 2F A4 30 EF 2E       DW      R_LOG_FUN, R_EXP_FUN, R_COS_FUN
     795/      58 : 09 2F 58 2F 71 2F       DW      R_SIN_FUN, R_TAN_FUN, R_ATN_FUN
     796/      5E : 84 12 89 18 6D 50       DW      R_PEEK_FUN, R_EOF_FUN, R_LOC_FUN
     797/      64 : 6B 50 01 35 2A 35       DW      R_LOF_FUN, R_CINT_FUN, R_CSNG_FUN
     798/      6A : BA 35 45 36 43 29       DW      L_FRCDBL, R_FIX_FUN, R_LEN_FUN
     799/      70 : 3A 27 07 2A 4F 29       DW      R_STR_FUN, R_VAL_FUN, R_ASC_FUN
     800/      76 : 5F 29 8E 29 AB 29       DW      R_CHR_FUN, R_SPACE_FUN, R_LEFT_FUN
     801/      7C : DC 29 E6 29             DW      R_RIGHT_FUN, R_MID_FUN
     802/      80 :                     ;
     803/      80 :                     ;BASIC statement keyword table END to NEW
     804/      80 :                     ;
     805/      80 :                     ; Basic-80 N82 predates the ALPHA DISPATCH TABLE
     806/      80 :                     ;
     807/      80 :                     R_BASIC_KEYWORD_TBL:				    ;0080H
     808/      80 : =80H                Q	SET		128
     809/      80 : C5 4E 44                DB      80H | 'E',"ND"				;token value 80H
     810/      83 : =80H                _END EQU	Q
     811/      83 : =81H                Q	SET		Q+1
     812/      83 : C6 4F 52                DB      80H | 'F',"OR"				;token value 81H
     813/      86 : =81H                _FOR EQU	Q
     814/      86 : =82H                Q	SET		Q+1
     815/      86 : CE 45 58 54             DB      80H | 'N',"EXT"				;token value 82H
     816/      8A : =82H                _NEXT EQU	Q
     817/      8A : =83H                Q	SET		Q+1
     818/      8A : C4 41 54 41             DB      80H | 'D',"ATA"				;token value 83H
     819/      8E : =83H                _DATA EQU	Q
     820/      8E : =84H                Q	SET		Q+1
     821/      8E : C9 4E 50 55 54          DB      80H | 'I',"NPUT"			;token value 84H
     822/      93 : =84H                _INPUT EQU	Q
     823/      93 : =85H                Q	SET		Q+1
     824/      93 : C4 49 4D                DB      80H | 'D',"IM"				;token value 85H
     825/      96 : =85H                _DIM EQU	Q
     826/      96 : =86H                Q	SET		Q+1
     827/      96 : D2 45 41 44             DB      80H | 'R',"EAD"				;token value 86H
     828/      9A : =86H                _READ EQU	Q
     829/      9A : =87H                Q	SET		Q+1
     830/      9A : CC 45 54                DB      80H | 'L',"ET"				;token value 87H
     831/      9D : =87H                _LET EQU	Q
     832/      9D : =88H                Q	SET		Q+1
     833/      9D : C7 4F 54 4F             DB      80H | 'G',"OTO"				;token value 88H
     834/      A1 : =88H                _GOTO EQU	Q
     835/      A1 : =89H                Q	SET		Q+1
     836/      A1 : D2 55 4E                DB      80H | 'R',"UN"				;token value 89H
     837/      A4 : =89H                _RUN EQU	Q
     838/      A4 : =8AH                Q	SET		Q+1
     839/      A4 : C9 46                   DB      80H | 'I',"F"				;token value 8AH
     840/      A6 : =8AH                _IF EQU	Q
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 15 - 9/5/2025 20:20:35


     841/      A6 : =8BH                Q	SET		Q+1
     842/      A6 : D2 45 53 54 4F 52       DB      80H | 'R',"ESTORE"			;token value 8BH
                    45 
     843/      AD : =8BH                _RESTORE EQU	Q
     844/      AD : =8CH                Q	SET		Q+1
     845/      AD : C7 4F 53 55 42          DB      80H | 'G',"OSUB"			;token value 8CH
     846/      B2 : =8CH                _GOSUB EQU	Q
     847/      B2 : =8DH                Q	SET		Q+1
     848/      B2 : D2 45 54 55 52 4E       DB      80H | 'R',"ETURN"			;token value 8DH
     849/      B8 : =8DH                _RETURN EQU	Q
     850/      B8 : =8EH                Q	SET		Q+1
     851/      B8 : D2 45 4D                DB      80H | 'R',"EM"				;token value 8EH
     852/      BB : =8EH                _REM EQU	Q
     853/      BB : =8FH                Q	SET		Q+1
     854/      BB : D3 54 4F 50             DB      80H | 'S',"TOP"				;token value 8FH
     855/      BF : =8FH                _STOP EQU	Q
     856/      BF : =90H                Q	SET		Q+1
     857/      BF : D7 49 44 54 48          DB      80H | 'W',"IDTH"			;token value 90H
     858/      C4 : =90H                _WIDTH EQU	Q
     859/      C4 : =91H                Q	SET		Q+1
     860/      C4 : C5 4C 53 45             DB      80H | 'E',"LSE"				;token value 91H
     861/      C8 : =91H                _ELSE EQU	Q
     862/      C8 : =92H                Q	SET		Q+1
     863/      C8 : CC 49 4E 45             DB      80H | 'L',"INE"				;token value 92H
     864/      CC : =92H                _LINE EQU	Q
     865/      CC : =93H                Q	SET		Q+1
     866/      CC : C5 44 49 54             DB      80H | 'E',"DIT"				;token value 93H
     867/      D0 : =93H                _EDIT EQU	Q
     868/      D0 : =94H                Q	SET		Q+1
     869/      D0 : C5 52 52 4F 52          DB      80H | 'E',"RROR"			;token value 94H
     870/      D5 : =94H                _ERROR EQU	Q
     871/      D5 : =95H                Q	SET		Q+1
     872/      D5 : D2 45 53 55 4D 45       DB      80H | 'R',"ESUME"			;token value 95H
     873/      DB : =95H                _RESUME EQU	Q
     874/      DB : =96H                Q	SET		Q+1
     875/      DB : CF 55 54                DB      80H | 'O',"UT"				;token value 96H
     876/      DE : =96H                _OUT EQU	Q
     877/      DE : =97H                Q	SET		Q+1
     878/      DE : CF 4E                   DB      80H | 'O',"N"				;token value 97H
     879/      E0 : =97H                _ON EQU	Q
     880/      E0 : =98H                Q	SET		Q+1
     881/      E0 : C4 53 4B 4F 24          DB      80H | 'D',"SKO$"			;token value 98H
     882/      E5 : =98H                _DSKO_ EQU	Q
     883/      E5 : =99H                Q	SET		Q+1
     884/      E5 : CF 50 45 4E             DB      80H | 'O',"PEN"				;token value 99H
     885/      E9 : =99H                _OPEN EQU	Q
     886/      E9 : =9AH                Q	SET		Q+1
     887/      E9 : C3 4C 4F 53 45          DB      80H | 'C',"LOSE"			;token value 9AH
     888/      EE : =9AH                _CLOSE EQU	Q
     889/      EE : =9BH                Q	SET		Q+1
     890/      EE : CC 4F 41 44             DB      80H | 'L',"OAD"				;token value 9BH
     891/      F2 : =9BH                _LOAD EQU	Q
     892/      F2 : =9CH                Q	SET		Q+1
     893/      F2 : CD 45 52 47 45          DB      80H | 'M',"ERGE"			;token value 9CH
     894/      F7 : =9CH                _MERGE EQU	Q
     895/      F7 : =9DH                Q	SET		Q+1
     896/      F7 : C6 49 4C 45 53          DB      80H | 'F',"ILES"			;token value 9DH
     897/      FC : =9DH                _FILES EQU	Q
     898/      FC : =9EH                Q	SET		Q+1
     899/      FC : D3 41 56 45             DB      80H | 'S',"AVE"				;token value 9EH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 16 - 9/5/2025 20:20:35


     900/     100 : =9EH                _SAVE EQU	Q
     901/     100 : =9FH                Q	SET		Q+1
     902/     100 : CC 46 49 4C 45 53       DB      80H | 'L',"FILES"			;token value 9FH
     903/     106 : =9FH                _LFILES EQU	Q
     904/     106 : =A0H                Q	SET		Q+1
     905/     106 : CC 50 52 49 4E 54       DB      80H | 'L',"PRINT"			;token value 0A0H
     906/     10C : =A0H                _LPRINT EQU	Q
     907/     10C : =A1H                Q	SET		Q+1
     908/     10C : C4 45 46                DB      80H | 'D',"EF"				;token value 0A1H
     909/     10F : =A1H                _DEF EQU	Q
     910/     10F : =A2H                Q	SET		Q+1
     911/     10F : D0 4F 4B 45             DB      80H | 'P',"OKE"				;token value 0A2H
     912/     113 : =A2H                _POKE EQU	Q
     913/     113 : =A3H                Q	SET		Q+1
     914/     113 : D0 52 49 4E 54          DB      80H | 'P',"RINT"			;token value 0A3H
     915/     118 : =A3H                _PRINT EQU	Q
     916/     118 : =A4H                Q	SET		Q+1
     917/     118 : C3 4F 4E 54             DB      80H | 'C',"ONT"				;token value 0A4H
     918/     11C : =A4H                _CONT EQU	Q
     919/     11C : =A5H                Q	SET		Q+1
     920/     11C : CC 49 53 54             DB      80H | 'L',"IST"				;token value 0A5H
     921/     120 : =A5H                _LIST EQU	Q
     922/     120 : =A6H                Q	SET		Q+1
     923/     120 : CC 4C 49 53 54          DB      80H | 'L',"LIST"			;token value 0A6H
     924/     125 : =A6H                _LLIST EQU	Q
     925/     125 : =A7H                Q	SET		Q+1
     926/     125 : C3 4C 45 41 52          DB      80H | 'C',"LEAR"			;token value 0A7H
     927/     12A : =A7H                _CLEAR EQU	Q
     928/     12A : =A8H                Q	SET		Q+1
     929/     12A : C3 4C 4F 41 44          DB      80H | 'C',"LOAD"			;token value 0A8H
     930/     12F : =A8H                _CLOAD EQU	Q
     931/     12F : =A9H                Q	SET		Q+1
     932/     12F : C3 53 41 56 45          DB      80H | 'C',"SAVE"			;token value 0A9H
     933/     134 : =A9H                _CSAVE EQU	Q
     934/     134 : =AAH                Q	SET		Q+1
     935/     134 : D4 49 4D 45 24          DB      80H | 'T',"IME$"			;token value 0AAH
     936/     139 : =AAH                _TIME_ EQU	Q
     937/     139 : =ABH                Q	SET		Q+1
     938/     139 : C4 41 54 45 24          DB      80H | 'D',"ATE$"			;token value 0ABH
     939/     13E : =ABH                _DATE_ EQU	Q
     940/     13E : =ACH                Q	SET		Q+1
     941/     13E : C4 41 59 24             DB      80H | 'D',"AY$"				;token value 0ACH
     942/     142 : =ACH                _DAY_ EQU	Q
     943/     142 : =ADH                Q	SET		Q+1
     944/     142 : C3 4F 4D                DB      80H | 'C',"OM"				;token value 0ADH
     945/     145 : =ADH                _COM EQU	Q
     946/     145 : =AEH                Q	SET		Q+1
     947/     145 : CD 44 4D                DB      80H | 'M',"DM"				;token value 0AEH
     948/     148 : =AEH                _MDM EQU	Q
     949/     148 : =AFH                Q	SET		Q+1
     950/     148 : CB 45 59                DB      80H | 'K',"EY"				;token value 0AFH
     951/     14B : =AFH                _KEY EQU	Q
     952/     14B : =B0H                Q	SET		Q+1
     953/     14B : C3 4C 53                DB      80H | 'C',"LS"				;token value 0B0H
     954/     14E : =B0H                _CLS EQU	Q
     955/     14E : =B1H                Q	SET		Q+1
     956/     14E : C2 45 45 50             DB      80H | 'B',"EEP"				;token value 0B1H
     957/     152 : =B1H                _BEEP EQU	Q
     958/     152 : =B2H                Q	SET		Q+1
     959/     152 : D3 4F 55 4E 44          DB      80H | 'S',"OUND"			;token value 0B2H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 17 - 9/5/2025 20:20:35


     960/     157 : =B2H                _SOUND EQU	Q
     961/     157 : =B3H                Q	SET		Q+1
     962/     157 : CC 43 4F 50 59          DB      80H | 'L',"COPY"			;token value 0B3H
     963/     15C : =B3H                _LCOPY EQU	Q
     964/     15C : =B4H                Q	SET		Q+1
     965/     15C : D0 53 45 54             DB      80H | 'P',"SET"				;token value 0B4H
     966/     160 : =B4H                _PSET EQU	Q
     967/     160 : =B5H                Q	SET		Q+1
     968/     160 : D0 52 45 53 45 54       DB      80H | 'P',"RESET"			;token value 0B5H
     969/     166 : =B5H                _PRESET EQU	Q
     970/     166 : =B6H                Q	SET		Q+1
     971/     166 : CD 4F 54 4F 52          DB      80H | 'M',"OTOR"			;token value 0B6H
     972/     16B : =B6H                _MOTOR EQU	Q
     973/     16B : =B7H                Q	SET		Q+1
     974/     16B : CD 41 58                DB      80H | 'M',"AX"				;token value 0B7H
     975/     16E : =B7H                _MAX EQU	Q
     976/     16E : =B8H                Q	SET		Q+1
     977/     16E : D0 4F 57 45 52          DB      80H | 'P',"OWER"			;token value 0B8H
     978/     173 : =B8H                _POWER EQU	Q
     979/     173 : =B9H                Q	SET		Q+1
     980/     173 : C3 41 4C 4C             DB      80H | 'C',"ALL"				;token value 0B9H
     981/     177 : =B9H                _CALL EQU	Q
     982/     177 : =BAH                Q	SET		Q+1
     983/     177 : CD 45 4E 55             DB      80H | 'M',"ENU"				;token value 0BAH
     984/     17B : =BAH                _MENU EQU	Q
     985/     17B : =BBH                Q	SET		Q+1
     986/     17B : C9 50 4C                DB      80H | 'I',"PL"				;token value 0BBH
     987/     17E : =BBH                _IPL EQU	Q
     988/     17E : =BCH                Q	SET		Q+1
     989/     17E : CE 41 4D 45             DB      80H | 'N',"AME"				;token value 0BCH
     990/     182 : =BCH                _NAME EQU	Q
     991/     182 : =BDH                Q	SET		Q+1
     992/     182 : CB 49 4C 4C             DB      80H | 'K',"ILL"				;token value 0BDH
     993/     186 : =BDH                _KILL EQU	Q
     994/     186 : =BEH                Q	SET		Q+1
     995/     186 : D3 43 52 45 45 4E       DB      80H | 'S',"CREEN"			;token value 0BEH
     996/     18C : =BEH                _SCREEN EQU	Q
     997/     18C : =BFH                Q	SET		Q+1
     998/     18C : CE 45 57                DB      80H | 'N',"EW"				;token value 0BFH
     999/     18F : =BFH                _NEW EQU	Q
    1000/     18F : =C0H                Q	SET		Q+1
    1001/     18F :                     ;
    1002/     18F :                     ; Function keyword table TAB to <
    1003/     18F :                     ;
    1004/     18F :                     R_FUN_KEYWORD_TBL1:								;018FH
    1005/     18F : D4 41 42 28             DB      80H | 'T',"AB("				;token value 0C0H
    1006/     193 : =C0H                _TAB_ EQU	Q
    1007/     193 : =C1H                Q	SET		Q+1
    1008/     193 : D4 4F                   DB      80H | 'T',"O"				;token value 0C1H
    1009/     195 : =C1H                _TO EQU	Q
    1010/     195 : =C2H                Q	SET		Q+1
    1011/     195 : D5 53 49 4E 47          DB      80H | 'U',"SING"			;token value 0C2H
    1012/     19A : =C2H                _USING EQU	Q
    1013/     19A : =C3H                Q	SET		Q+1
    1014/     19A : D6 41 52 50 54 52       DB      80H | 'V',"ARPTR"			;token value 0C3H
    1015/     1A0 : =C3H                _VARPTR EQU	Q
    1016/     1A0 : =C4H                Q	SET		Q+1
    1017/     1A0 : C5 52 4C                DB      80H | 'E',"RL"				;token value 0C4H
    1018/     1A3 : =C4H                _ERL EQU	Q
    1019/     1A3 : =C5H                Q	SET		Q+1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 18 - 9/5/2025 20:20:35


    1020/     1A3 : C5 52 52                DB      80H | 'E',"RR"				;token value 0C5H
    1021/     1A6 : =C5H                _ERR EQU	Q
    1022/     1A6 : =C6H                Q	SET		Q+1
    1023/     1A6 : D3 54 52 49 4E 47       DB      80H | 'S',"TRING$"			;token value 0C6H
                    24 
    1024/     1AD : =C6H                _STRING_ EQU	Q
    1025/     1AD : =C7H                Q	SET		Q+1
    1026/     1AD : C9 4E 53 54 52          DB      80H | 'I',"NSTR"			;token value 0C7H
    1027/     1B2 : =C7H                _INSTR EQU	Q
    1028/     1B2 : =C8H                Q	SET		Q+1
    1029/     1B2 : C4 53 4B 49 24          DB      80H | 'D',"SKI$"			;token value 0C8H
    1030/     1B7 : =C8H                _DSKI_ EQU	Q
    1031/     1B7 : =C9H                Q	SET		Q+1
    1032/     1B7 : C9 4E 4B 45 59 24       DB      80H | 'I',"NKEY$"			;token value 0C9H
    1033/     1BD : =C9H                _INKEY_ EQU	Q
    1034/     1BD : =CAH                Q	SET		Q+1
    1035/     1BD : C3 53 52 4C 49 4E       DB      80H | 'C',"SRLIN"			;token value 0CAH
    1036/     1C3 : =CAH                _CSRLIN EQU	Q
    1037/     1C3 : =CBH                Q	SET		Q+1
    1038/     1C3 : CF 46 46                DB      80H | 'O',"FF"				;token value 0CBH
    1039/     1C6 : =CBH                _OFF EQU	Q
    1040/     1C6 : =CCH                Q	SET		Q+1
    1041/     1C6 : C8 49 4D 45 4D          DB      80H | 'H',"IMEM"			;token value 0CCH
    1042/     1CB : =CCH                _HIMEM EQU	Q
    1043/     1CB : =CDH                Q	SET		Q+1
    1044/     1CB : D4 48 45 4E             DB      80H | 'T',"HEN"				;token value 0CDH
    1045/     1CF : =CDH                _THEN EQU	Q
    1046/     1CF : =CEH                Q	SET		Q+1
    1047/     1CF : CE 4F 54                DB      80H | 'N',"OT"				;token value 0CEH
    1048/     1D2 : =CEH                _NOT EQU	Q
    1049/     1D2 : =CFH                Q	SET		Q+1
    1050/     1D2 : D3 54 45 50             DB      80H | 'S',"TEP"				;token value 0CFH
    1051/     1D6 : =CFH                _STEP EQU	Q
    1052/     1D6 : =D0H                Q	SET		Q+1
    1053/     1D6 : AB                      DB      80H | '+'					;token value 0D0H
    1054/     1D7 : =D0H                _PLUS_ EQU	Q
    1055/     1D7 : =D1H                Q	SET		Q+1
    1056/     1D7 : AD                      DB      80H | '-'					;token value 0D1H
    1057/     1D8 : =D1H                _MINUS_ EQU	Q
    1058/     1D8 : =D2H                Q	SET		Q+1
    1059/     1D8 : AA                      DB      80H | '*'					;token value 0D2H
    1060/     1D9 : =D2H                _MULT_ EQU	Q
    1061/     1D9 : =D3H                Q	SET		Q+1
    1062/     1D9 : AF                      DB      80H | '/'					;token value 0D3H
    1063/     1DA : =D3H                _DIV_ EQU	Q
    1064/     1DA : =D4H                Q	SET		Q+1
    1065/     1DA : DE                      DB      80H | '^'					;token value 0D4H
    1066/     1DB : =D4H                _HAT_ EQU	Q
    1067/     1DB : =D5H                Q	SET		Q+1
    1068/     1DB : C1 4E 44                DB      80H | 'A',"ND"				;token value 0D5H
    1069/     1DE : =D5H                _AND EQU	Q
    1070/     1DE : =D6H                Q	SET		Q+1
    1071/     1DE : CF 52                   DB      80H | 'O',"R"				;token value 0D6H
    1072/     1E0 : =D6H                _OR EQU	Q
    1073/     1E0 : =D7H                Q	SET		Q+1
    1074/     1E0 : D8 4F 52                DB      80H | 'X',"OR"				;token value 0D7H
    1075/     1E3 : =D7H                _XOR EQU	Q
    1076/     1E3 : =D8H                Q	SET		Q+1
    1077/     1E3 : C5 51 56                DB      80H | 'E',"QV"				;token value 0D8H
    1078/     1E6 : =D8H                _EQV EQU	Q
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 19 - 9/5/2025 20:20:35


    1079/     1E6 : =D9H                Q	SET		Q+1
    1080/     1E6 : C9 4D 50                DB      80H | 'I',"MP"				;token value 0D9H
    1081/     1E9 : =D9H                _IMP EQU	Q
    1082/     1E9 : =DAH                Q	SET		Q+1
    1083/     1E9 : CD 4F 44                DB      80H | 'M',"OD"				;token value 0DAH
    1084/     1EC : =DAH                _MOD EQU	Q
    1085/     1EC : =DBH                Q	SET		Q+1
    1086/     1EC : DC                      DB      80H | '\\'					;token value 0DBH
    1087/     1ED : =DBH                _BACKSLASH_ EQU	Q
    1088/     1ED : =DCH                Q	SET		Q+1
    1089/     1ED : BE                      DB      80H | '>'					;token value 0DCH
    1090/     1EE : =DCH                _GT_ EQU	Q
    1091/     1EE : =DDH                Q	SET		Q+1
    1092/     1EE : BD                      DB      80H | '='					;token value 0DDH
    1093/     1EF : =DDH                _EQUAL_ EQU	Q
    1094/     1EF : =DEH                Q	SET		Q+1
    1095/     1EF : BC                      DB      80H | '<'					;token value 0DEH
    1096/     1F0 : =DEH                _LT_ EQU	Q
    1097/     1F0 : =DFH                Q	SET		Q+1
    1098/     1F0 :                     ;
    1099/     1F0 :                     ; Function keyword table SGN to MID$
    1100/     1F0 :                     ;
    1101/     1F0 :                     R_FUN_KEYWORD_TBL2:						;01F0H
    1102/     1F0 : D3 47 4E                DB      80H | 'S',"GN"				;token value 0DFH
    1103/     1F3 : =DFH                _SGN EQU	Q
    1104/     1F3 : =E0H                Q	SET		Q+1
    1105/     1F3 : C9 4E 54                DB      80H | 'I',"NT"				;token value 0E0H
    1106/     1F6 : =E0H                _INT EQU	Q
    1107/     1F6 : =E1H                Q	SET		Q+1
    1108/     1F6 : C1 42 53                DB      80H | 'A',"BS"				;token value 0E1H
    1109/     1F9 : =E1H                _ABS EQU	Q
    1110/     1F9 : =E2H                Q	SET		Q+1
    1111/     1F9 : C6 52 45                DB      80H | 'F',"RE"				;token value 0E2H
    1112/     1FC : =E2H                _FRE EQU	Q
    1113/     1FC : =E3H                Q	SET		Q+1
    1114/     1FC : C9 4E 50                DB      80H | 'I',"NP"				;token value 0E3H
    1115/     1FF : =E3H                _INP EQU	Q
    1116/     1FF : =E4H                Q	SET		Q+1
    1117/     1FF : CC 50 4F 53             DB      80H | 'L',"POS"				;token value 0E4H
    1118/     203 : =E4H                _LPOS EQU	Q
    1119/     203 : =E5H                Q	SET		Q+1
    1120/     203 : D0 4F 53                DB      80H | 'P',"OS"				;token value 0E5H
    1121/     206 : =E5H                _POS EQU	Q
    1122/     206 : =E6H                Q	SET		Q+1
    1123/     206 : D3 51 52                DB      80H | 'S',"QR"				;token value 0E6H
    1124/     209 : =E6H                _SQR EQU	Q
    1125/     209 : =E7H                Q	SET		Q+1
    1126/     209 : D2 4E 44                DB      80H | 'R',"ND"				;token value 0E7H
    1127/     20C : =E7H                _RDN EQU	Q
    1128/     20C : =E8H                Q	SET		Q+1
    1129/     20C : CC 4F 47                DB      80H | 'L',"OG"				;token value 0E8H
    1130/     20F : =E8H                _LOG EQU	Q
    1131/     20F : =E9H                Q	SET		Q+1
    1132/     20F : C5 58 50                DB      80H | 'E',"XP"				;token value 0E9H
    1133/     212 : =E9H                _EXP EQU	Q
    1134/     212 : =EAH                Q	SET		Q+1
    1135/     212 : C3 4F 53                DB      80H | 'C',"OS"				;token value 0EAH
    1136/     215 : =EAH                _COS EQU	Q
    1137/     215 : =EBH                Q	SET		Q+1
    1138/     215 : D3 49 4E                DB      80H | 'S',"IN"				;token value 0EBH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 20 - 9/5/2025 20:20:35


    1139/     218 : =EBH                _SIN EQU	Q
    1140/     218 : =ECH                Q	SET		Q+1
    1141/     218 : D4 41 4E                DB      80H | 'T',"AN"				;token value 0ECH
    1142/     21B : =ECH                _TAN EQU	Q
    1143/     21B : =EDH                Q	SET		Q+1
    1144/     21B : C1 54 4E                DB      80H | 'A',"TN"				;token value 0EDH
    1145/     21E : =EDH                _ATN EQU	Q
    1146/     21E : =EEH                Q	SET		Q+1
    1147/     21E : D0 45 45 4B             DB      80H | 'P',"EEK"				;token value 0EEH
    1148/     222 : =EEH                _PEEK EQU	Q
    1149/     222 : =EFH                Q	SET		Q+1
    1150/     222 : C5 4F 46                DB      80H | 'E',"OF"				;token value 0EFH
    1151/     225 : =EFH                _EOF EQU	Q
    1152/     225 : =F0H                Q	SET		Q+1
    1153/     225 : CC 4F 43                DB      80H | 'L',"OC"				;token value 0F0H
    1154/     228 : =F0H                _LOC EQU	Q
    1155/     228 : =F1H                Q	SET		Q+1
    1156/     228 : CC 4F 46                DB      80H | 'L',"OF"				;token value 0F1H
    1157/     22B : =F1H                _LOF EQU	Q
    1158/     22B : =F2H                Q	SET		Q+1
    1159/     22B : C3 49 4E 54             DB      80H | 'C',"INT"				;token value 0F2H
    1160/     22F : =F2H                _CINT EQU	Q
    1161/     22F : =F3H                Q	SET		Q+1
    1162/     22F : C3 53 4E 47             DB      80H | 'C',"SNG"				;token value 0F3H
    1163/     233 : =F3H                _CSNG EQU	Q
    1164/     233 : =F4H                Q	SET		Q+1
    1165/     233 : C3 44 42 4C             DB      80H | 'C',"DBL"				;token value 0F4H
    1166/     237 : =F4H                _CDBL EQU	Q
    1167/     237 : =F5H                Q	SET		Q+1
    1168/     237 : C6 49 58                DB      80H | 'F',"IX"				;token value 0F5H
    1169/     23A : =F5H                _FIX EQU	Q
    1170/     23A : =F6H                Q	SET		Q+1
    1171/     23A : CC 45 4E                DB      80H | 'L',"EN"				;token value 0F6H
    1172/     23D : =F6H                _LEN EQU	Q
    1173/     23D : =F7H                Q	SET		Q+1
    1174/     23D : D3 54 52 24             DB      80H | 'S',"TR$"				;token value 0F7H
    1175/     241 : =F7H                _STR_ EQU	Q
    1176/     241 : =F8H                Q	SET		Q+1
    1177/     241 : D6 41 4C                DB      80H | 'V',"AL"				;token value 0F8H
    1178/     244 : =F8H                _VAL EQU	Q
    1179/     244 : =F9H                Q	SET		Q+1
    1180/     244 : C1 53 43                DB      80H | 'A',"SC"				;token value 0F9H
    1181/     247 : =F9H                _ASC EQU	Q
    1182/     247 : =FAH                Q	SET		Q+1
    1183/     247 : C3 48 52 24             DB      80H | 'C',"HR$"				;token value 0FAH
    1184/     24B : =FAH                _CHR_ EQU	Q
    1185/     24B : =FBH                Q	SET		Q+1
    1186/     24B : D3 50 41 43 45 24       DB      80H | 'S',"PACE$"			;token value 0FBH
    1187/     251 : =FBH                _SPACE_ EQU	Q
    1188/     251 : =FCH                Q	SET		Q+1
    1189/     251 : CC 45 46 54 24          DB      80H | 'L',"EFT$"			;token value 0FCH
    1190/     256 : =FCH                _LEFT_ EQU	Q
    1191/     256 : =FDH                Q	SET		Q+1
    1192/     256 : D2 49 47 48 54 24       DB      80H | 'R',"IGHT$"			;token value 0FDH
    1193/     25C : =FDH                _RIGHT_ EQU	Q
    1194/     25C : =FEH                Q	SET		Q+1
    1195/     25C : CD 49 44 24             DB      80H | 'M',"ID$"				;token value 0FEH
    1196/     260 : =FEH                _MID_ EQU	Q
    1197/     260 : =FFH                Q	SET		Q+1			
    1198/     260 :                     ;	DB      80H | 27H					;single quote. token value 0FFH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 21 - 9/5/2025 20:20:35


    1199/     260 : A7                      DB      80H | '\''
    1200/     261 :                     
    1201/     261 : =FFH                _QUOTE_ EQU	Q
    1202/     261 : =100H               Q	SET		Q+1
    1203/     261 : 80                      DB      80H | ''
    1204/     262 : =100H               _NONE_ EQU	Q
    1205/     262 : =101H               Q	SET		Q+1
    1206/     262 :                     
    1207/     262 :                     ;
    1208/     262 :                     ;BASIC statement vector table for END to NEW
    1209/     262 :                     ;
    1210/     262 :                     R_BASIC_VECTOR_TBL:						;0262H
    1211/     262 : 9F 40 26 07 74 41       DW      R_END_STMT, R_FOR_STMT, R_NEXT_STMT
    1212/     268 : 9E 09 A3 0C 8B 47       DW      R_DATA_STMT, R_INPUT_STMT, R_DIM_STMT
    1213/     26E : D9 0C C3 09 36 09       DW      R_READ_STMT, R_LET_STMT, R_GOTO_STMT
    1214/     274 : 0F 09 1A 0B 7F 40       DW      R_RUN_STMT, R_IF_STMT, R_RESTORE_STMT
    1215/     27A : 1E 09 66 09 A0 09       DW      R_GOSUB_STMT, R_RETURN_STMT, R_REM_STMT
    1216/     280 : 9A 40 C3 1D A0 09       DW      R_STOP_STMT, R_WIDTH_STMT, R_REM_STMT
    1217/     286 : 45 0C 51 5E 0F 0B       DW      R_LINE_STMT, R_EDIT_STMT, R_ERROR_STMT
    1218/     28C : B0 0A 0C 11 2F 0A       DW      R_RESUME_STMT, R_OUT_STMT, R_ON_STMT
    1219/     292 : 71 50 CB 4C 28 4E       DW      R_DSKO_FUN, R_OPEN_STMT, R_CLOSE_STMT
    1220/     298 : 70 4D 71 4D 3A 1F       DW      R_LOAD_STMT, R_MERGE_STMT, R_FILES_STMT
    1221/     29E : CF 4D 6F 50 4E 0B       DW      R_SAVE_STMT, R_LFILES_FUN, R_LPRINT_STMT
    1222/     2A4 : 72 08 8B 12 56 0B       DW      R_DEF_STMT, R_POKE_FUN, R_PRINT_STMT
    1223/     2AA : DA 40 40 11 3B 11       DW      R_CONT_STMT, R_LIST_STMT, R_LLIST_STMT
    1224/     2B0 : F9 40 77 23 80 22       DW      R_CLEAR_STMT, R_CLOAD_STMT, R_CSAVE_STMT
    1225/     2B6 : AB 19 BD 19 F1 19       DW      R_TIME_STMT, R_DATE_STMT, R_DAY_STMT
    1226/     2BC : 9E 1A 9E 1A B8 1B       DW      R_COM_MDM_STMT, R_COM_MDM_STMT, R_KEY_STMT
    1227/     2C2 : 31 42 29 42 C5 1D       DW      R_CLS_STMT, R_BEEP_STMT, R_SOUND_STMT
    1228/     2C8 : 5E 1E 57 1C 66 1C       DW      R_LCOPY_STMT, R_PSET_STMT, R_PRESET_STMT
    1229/     2CE : EC 1D 0B 7F 19 14       DW      R_MOTOR_STMT, R_MAX_FUN2, R_POWER_STMT
    1230/     2D4 : FA 1D 97 57 78 1A       DW      R_CALL_STMT, R_MENU_ENTRY, R_IPL_STMT
    1231/     2DA : 37 20 91 1F 22 1E       DW      R_NAME_STMT, R_KILL_STMT, R_SCREEN_STMT
    1232/     2E0 : FE 20                   DW      R_NEW_STMT
    1233/     2E2 :                     
    1234/     2E2 :                     ;
    1235/     2E2 :                     ; Math operator priority table
    1236/     2E2 :                     ;
    1237/     2E2 :                     R_MATH_PRIORITY_TBL:				    ;02E2H
    1238/     2E2 : 79 79 7C 7C 7F 50       DB      79H,79H,7CH,7CH,7FH,50H,46H,3CH
                    46 3C 
    1239/     2EA : 32 28 7A 7B             DB      32H,28H,7AH,7BH
    1240/     2EE :                     ;
    1241/     2EE :                     ; Vector table for math operations
    1242/     2EE :                     ; Used for type conversions
    1243/     2EE :                     ;
    1244/     2EE :                     R_MATH_VCTR_TBL:						;02EEH
    1245/     2EE : BA 35 00 00             DW      L_FRCDBL, 0
    1246/     2F2 : 01 35 D9 35 2A 35       DW      R_CINT_FUN, L_CHKSTR, R_CSNG_FUN
    1247/     2F8 :                     L_MATH_TBL_1:
    1248/     2F8 : 78 2B 69 2B FF 2C       DW      R_DBL_ADD, R_DBL_SUB, R_DBL_MULT
    1249/     2FE : C7 2D 8E 3D FA 34       DW      R_DBL_DIV, R_DBL_EXP, R_CMP_FAC1_FAC2
    1250/     304 :                     L_MATH_TBL_2:
    1251/     304 : F4 37 FD 37 03 38       DW      R_SNGL_ADD_BCDE, R_SNGL_SUB, R_SNGL_MULT_BCDE
    1252/     30A : 0E 38 7F 3D 98 34       DW      R_SNGL_DIV, R_SNGL_EXP, R_SNGL_CMP_BCDE_FAC1
    1253/     310 :                     L_MATH_TBL_3:
    1254/     310 : 04 37 F8 36 25 37       DW      R_SINT_ADD, R_SINT_SUB, R_SINT_MULT
    1255/     316 : 0D 0F F7 3D C2 34       DW      R_INT16_DIV, R_INT_EXP, R_SINT_CMP
    1256/     31C :                     ;
    1257/     31C :                     ;BASIC error message text
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 22 - 9/5/2025 20:20:35


    1258/     31C :                     ;
    1259/     31C :                     R_BASIC_ERR_MSG_TXT:				       	;031CH
    1260/     31C : 4E 46                   DB      "NF"
    1261/     31E : 53 4E                   DB      "SN"
    1262/     320 : 52 47                   DB      "RG"
    1263/     322 : 4F 44                   DB      "OD"
    1264/     324 : 46 43                   DB      "FC"
    1265/     326 : 4F 56                   DB      "OV"
    1266/     328 : 4F 4D                   DB      "OM"
    1267/     32A : 55 4C                   DB      "UL"
    1268/     32C : 42 53                   DB      "BS"
    1269/     32E : 44 44                   DB      "DD"
    1270/     330 : 2F 30                   DB      "/0"
    1271/     332 : 49 44                   DB      "ID"
    1272/     334 : 54 4D                   DB      "TM"
    1273/     336 : 4F 53                   DB      "OS"
    1274/     338 : 4C 53                   DB      "LS"
    1275/     33A : 53 54                   DB      "ST"
    1276/     33C : 43 4E                   DB      "CN"
    1277/     33E : 49 4F                   DB      "IO"
    1278/     340 : 4E 52                   DB      "NR"
    1279/     342 : 52 57                   DB      "RW"
    1280/     344 : 55 45                   DB      "UE"
    1281/     346 : 4D 4F                   DB      "MO"
    1282/     348 : 49 45                   DB      "IE"
    1283/     34A : 42 4E                   DB      "BN"
    1284/     34C : 46 46                   DB      "FF"
    1285/     34E : 41 4F                   DB      "AO"
    1286/     350 : 45 46                   DB      "EF"
    1287/     352 : 4E 4D                   DB      "NM"
    1288/     354 : 44 53                   DB      "DS"
    1289/     356 : 46 4C                   DB      "FL"
    1290/     358 : 43 46                   DB      "CF"
    1291/     35A :                     ;
    1292/     35A :                     ; Initialization image loaded to F5F0H (SYSRAM_R) by COLD BOOT
    1293/     35A :                     ;
    1294/     35A :                     R_FUN_INIT_IMAGE:						;035AH
    1295/     35A : 4D 8A               	DW	 BOOTMARKER						;COLD vs WARM boot marker (at address 0F5F0H/SYSRAM_R)
    1296/     35C : 00 00               	DW	 0000H							;Auto PowerDown signature (at address 0F5F2H)
    1297/     35E : F0 F5               	DW	 SYSRAM_R 						;initial value of HIMEM (at address 0F5F4H)
    1298/     360 : =>TRUE              	if	VT100INROM
    1299/     360 : C3 F9 53            	JMP		phook
    1300/     363 : =>FALSE             	else
    1301/     363 :                     	RET									;This RET can be changed to JMP to hook Boot-up (0F5F6H)
    1302/     363 :                     	DW	0000H							;Space for address for JMP
    1303/     363 : [1298]              	endif
    1304/     363 : FB                  	EI									;This is the hook for WAND (F5F9H) (RST 5.5)
    1305/     364 : C9                  	RET									;Replace EI, RET, NOP with a JMP instruction
    1306/     365 : 00                  	NOP
    1307/     366 : C9                  	RET									;This is the RST 6.5 routine (RS232 receive interrupt) hook (0F5FCH/SERHK_R)
    1308/     367 : 00 00               	DW	0000H							;Replace RET, NOP, NOP with a JMP instruction
    1309/     369 : C9                  	RET									;This is the RST 7.5 hook (Background tick) (F5FFH)
    1310/     36A : 00 00               	DW	0000H
    1311/     36C : C3 31 14            	JMP R_LOW_PWR_TRAP					;Normal TRAP (low power) interrupt routine - Hook at F602H
    1312/     36F :                     
    1313/     36F : =>TRUE              	if OPTROM
    1314/     36F :                     ; ===================================
    1315/     36F :                     ; Copy Option Rom routine to RAM to be used for switching back to the Option ROM after
    1316/     36F :                     ;      calling a routine in the Main ROM.
    1317/     36F :                     ;0040H  F5		 PUSH PSW				;Preserve the PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 23 - 9/5/2025 20:20:35


    1318/     36F :                     ;0041H  3A 45 FF LDA PORTE8_R		 	;Contents of port E8H
    1319/     36F :                     ;0044H  3C		 INR A				    ;Prepare to switch to OptRom. Set bit 0
    1320/     36F :                     ;0045H  D3 E0	 OUT E0H				;Switch to OptRom
    1321/     36F :                     ;0047H  F7		 RST 6
    1322/     36F :                     ; ===================================	
    1323/     36F : 3E 01               	MVI	A,01H							;0F605H (ROMTST_R)
    1324/     371 : D3 E8               	OUT	0E8H							;ROM Select: 1 Option Rom
    1325/     373 : 21 40 00            	LXI	H,0040H							;copy 0040-0047 from Option Rom to RAM
    1326/     376 : 11 A4 FA            	LXI D,ROMSW_R						;location of code to switch back to the option rom
    1327/     379 : 7E                  	MOV	A,M								;F60DH
    1328/     37A : 12                  	STAX D
    1329/     37B :                     ;F60FH:
    1330/     37B : 23                  	INX	H
    1331/     37C : 13                  	INX	D
    1332/     37D : 7D                  	MOV	A,L
    1333/     37E : D6 48               	SUI 48H								;check if HL == 0048H
    1334/     380 : C2 0F F6            	JNZ 0F60FH
    1335/     383 : D3 E8               	OUT	0E8H							;A == 0 => 0 Standard Rom
    1336/     385 : 2A A4 FA            	LHLD ROMSW_R						;Start of code to switch back to the option rom
    1337/     388 : 11 54 43            	LXI	D,4354H							;validity check?
    1338/     38B : C3 18 00            	JMP	R_COMP_DE_HL					;0018H
    1339/     38E : F3                  	DI									;0F624H Launch ROM command file from MENU program
    1340/     38F : 3E 01               	MVI	A,01H							;0F625H (63013) initialize TS-DOS ROM.
    1341/     391 : D3 E8               	OUT 0E8H							;ROM Select: 1 Option Rom
    1342/     393 : C7                  	RST 0
    1343/     394 : 00                  	DB		00H							;0F62AH Option Rom Flag Initial Value (ROMFLG_R)
    1344/     395 : 01                  	DB		01H							;0F62BH Dial speed (1=10pps), 2=20pps (MDMSPD_R)
    1345/     396 : 00 00               	DW		0000H						;0F62CH pointer to FKey text (from FKey table) for selected FKey (FNKMAC_R)
    1346/     398 : FF FF               	DW		0FFFFH						;0F62EH index into paste buffer (PBUFIDX_R)
    1347/     39A : =>FALSE             	else								;OPTROM
    1348/     39A :                     	;RAM area F605H..F623H available
    1349/     39A :                     	DB		00H,00H,00H,00H,00H,00H,00H,00H			;0F605H (ROMTST_R)
    1350/     39A :                     	DB		00H,00H,00H,00H,00H,00H,00H,00H			;0F60DH
    1351/     39A :                     	DB		00H,00H,00H,00H,00H,00H,00H,00H			;0F615H
    1352/     39A :                     	DB		00H,00H,00H,00H,00H,00H,00H				;0F61DH
    1353/     39A :                     	DI												;0F624H Launch ROM command file from MENU program
    1354/     39A :                     	MVI	A,01H										;0F625H (63013) initialize TS-DOS ROM.
    1355/     39A :                     	OUT 0E8H										;ROM Select: 1 Option Rom
    1356/     39A :                     	RST 0											;restart
    1357/     39A :                     	DB		00H										;0F62AH Option Rom Flag Initial Value (ROMFLG_R)
    1358/     39A :                     	DB		01H										;0F62BH Dial speed (1=10pps), 2=20pps (MDMSPD_R)
    1359/     39A :                     	DW		0000H									;0F62CH pointer to FKey text (from FKey table) for selected FKey (FNKMAC_R)
    1360/     39A :                     	DW		0FFFFH									;0F62EH index into paste buffer (PBUFIDX_R)
    1361/     39A : [1313]              	endif				;OPTROM
    1362/     39A :                     	
    1363/     39A : 00 00 00 00 00       	DB		00H,00H,00H,00H,00H       				;0F630H }	FKEYSTAT_R
    1364/     39F : 00 00 00 00 01 01   	DB		00H,00H,00H,00H,01H,01H,08H,28H       	;0F635H }
                    08 28 
    1365/     3A7 :                     
    1366/     3A7 : =>TRUE              	if VT100INROM
    1367/     3A7 : 00 00 00 01 01 01   	DB		00H,00H,00H,01H,01H,01H,01H,18H       	;0F63DH } set DVIMAXROW_R to 24 by 80
                    01 18 
    1368/     3AF : 50 00 00 00 50 38   	DB		50H,00H,00H,00H,50H,38H,30H,00H       	;0F645H }
                    30 00 
    1369/     3B7 : =>FALSE             	else											;!VT100INROM
    1370/     3B7 :                     	DB		00H,00H,00H,01H,01H,01H,01H,19H       	;0F63DH }
    1371/     3B7 :                     	DB		28H,00H,00H,00H,50H,38H,30H,00H       	;0F645H }
    1372/     3B7 : [1366]              	endif											;VT100INROM
    1373/     3B7 :                     
    1374/     3B7 : 00 00 00 00 00 00   	DB		00H,00H,00H,00H,00H,00H,00H,00H       	;0F64DH } Initialized Data space at F6XXH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 24 - 9/5/2025 20:20:35


                    00 00 
    1375/     3BF : 00 00 64 FF 00 00   	DB		00H,00H,64H,0FFH,00H,00H,'M','7'      	;0F655H } (TIMMON_R)
                    4D 37 
    1376/     3C7 : 49 31 45 C3 00 00   	DB		'I','1','E',0C3H,00H,00H,00H,0C9H     	;0F65DH }
                    00 C9 
    1377/     3CF : 00 C9 D3 00 C9 DB   	DB		00H,0C9H,0D3H,00H,0C9H,0DBH,00H,0C9H  	;0F665H }
                    00 C9 
    1378/     3D7 : 3A 00 00 00 00 00   	DB		':',00H,00H,00H,00H,00H,00H,00H       	;0F66DH }
                    00 00 
    1379/     3DF : 00 0E 00 15 FD FE   	DB		00H,0EH,00H,15H,0FDH,0FEH,0FFH,0B2H   	;0F675H }
                    FF B2 
    1380/     3E7 : FC 00 00            	DB		0FCH,00H,00H
    1381/     3EA :                     R_FUN_INIT_IMAGE_END:
    1382/     3EA :                     ;
    1383/     3EA :                     ;BASIC message strings
    1384/     3EA :                     ;
    1385/     3EA :                     R_ERROR_MSG:							;03EAH
    1386/     3EA : 20 45 72 72 6F 72       DB      " Error",00H
                    00 
    1387/     3F1 :                     R_IN_MSG:
    1388/     3F1 : 20 69 6E 20             DB      " in "
    1389/     3F5 :                     R_NULL_MSG:
    1390/     3F5 : 00                      DB      00H
    1391/     3F6 :                     R_OK_MSG:
    1392/     3F6 : 4F 6B 0D 0A 00          DB      "Ok",0DH,0AH,00H
    1393/     3FB :                     R_BREAK_MSG:
    1394/     3FB : 42 72 65 61 6B 00       DB      "Break",00H
    1395/     401 :                     ;
    1396/     401 :                     ; FNDFOR IS USED FOR FINDING "FOR" ENTRIES ON
    1397/     401 :                     ; THE STACK, WHENEVER A "FOR" IS EXECUTED A
    1398/     401 :                     ; 24 BYTE ENTRY IS PUSHED ONTO THE STACK,
    1399/     401 :                     ; BEFORE THIS IS DONE, HOWEVER, A CHECK
    1400/     401 :                     ; MUST BE MADE TO SEE IF THERE
    1401/     401 :                     ; ARE ANY "FOR" ENTRIES ALREADY ON THE STACK
    1402/     401 :                     ; FOR THE SAME LOOP VARIABLE, IF SO, THAT "FOR" ENTRY
    1403/     401 :                     ; AND ALL OTHER "FOR" ENTRIES THAT WERE MADE AFTER IT
    1404/     401 :                     ; ARE ELIMINATED FROM THE STACK, THIS IS SO A
    1405/     401 :                     ; PROGRAM THAT JUMPS OUT OF THE MIDDLE
    1406/     401 :                     ; OF A "FOR" LOOP AND THEN RESTARTS THE LOOP AGAIN
    1407/     401 :                     ; AND AGAIN WON'T USE UP 24 BYTES OF STACK
    1408/     401 :                     ; SPACE EVERY TIME, THE "NEXT" CODE ALSO
    1409/     401 :                     ; CALLS FNDFOR TO SEARCH FOR A "FOR" ENTRY WITH
    1410/     401 :                     ; THE LOOP VARIABLE IN
    1411/     401 :                     ; THE "NEXT". AT WHATEVER POINT A MATCH IS FOUND
    1412/     401 :                     ; THE STACK IS RESET, IF NO MATCH IS FOUND A
    1413/     401 :                     ; "NEXT WITHOUT FOR" ERROR OCCURS. GOSUB EXECUTION
    1414/     401 :                     ; ALSO PUTS A 6 BYTE ENTRY ON STACK,
    1415/     401 :                     ; WHEN A RETURN IS EXECUTED FNDFOR IS
    1416/     401 :                     ; CALLED WITH A VARIABLE POINTER THAT CAN'T
    1417/     401 :                     ; BE MATCHED, WHEN "FNDFOR" HAS RUN
    1418/     401 :                     ; THROUGH ALL THE "FOR" ENTRIES ON THE STACK
    1419/     401 :                     ; IT RETURNS AND THE RETURN CODE MAKES
    1420/     401 :                     ; SURE THE ENTRY THAT WAS STOPPED ON
    1421/     401 :                     ; IS A GOSUB ENTRY, THIS ASSURES THAT
    1422/     401 :                     ; IF YOU GOSUB TO A SECTION OF CODE
    1423/     401 :                     ; IN WHICH A FOR LOOP IS ENTERED BUT NEVER
    1424/     401 :                     ; EXITED THE RETURN WILL STILL BE
    1425/     401 :                     ; ABLE TO FIND THE MOST RECENT
    1426/     401 :                     ; GOSUB ENTRY, THE "RETURN" CODE ELIMINATES THE
    1427/     401 :                     ; "GOSUB" ENTRY AND ALL "FOR" ENTRIES MADE AFTER	
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 25 - 9/5/2025 20:20:35


    1428/     401 :                     ; ThE GOSUB ENTRY,
    1429/     401 :                     ;
    1430/     401 :                     ; FIND A FOR ENTRY ON THE STACK WITH THE VARIABLE POINTER
    1431/     401 :                     ; PASSED IN DE
    1432/     401 :                     ;
    1433/     401 :                     ; IN:
    1434/     401 :                     ;	DE		ptr to variable
    1435/     401 :                     ; OUT:
    1436/     401 :                     ;	HL		virtual stack ptr
    1437/     401 :                     ;	Z		set if matching variable found
    1438/     401 :                     ;
    1439/     401 :                     FNDFOR:
    1440/     401 : 21 04 00            	LXI     H,0004H						;IGNORING EVERYONE'S "L_NEWSTT" AND THE RETURN ADDRESS OF THIS
    1441/     404 : 39                  	DAD		SP							;SUBROUTINE, SET HL += SP
    1442/     405 :                     FNDFOR_HL:								;HL is Virtual Stack Ptr
    1443/     405 : 7E                  	MOV		A,M							;SEE WHAT TYPE OF THING IS ON THE STACK
    1444/     406 : 23                  	INX		H
    1445/     407 : FE 81               	CPI		_FOR						;IS THIS STACK ENTRY A FOR?
    1446/     409 : C0                  	RNZ									;brif no _FOR match
    1447/     40A : 4E                  	MOV		C,M							;get ptr to loop variable to BC from M
    1448/     40B : 23                  	INX		H
    1449/     40C : 46                  	MOV		B,M
    1450/     40D : 23                  	INX		H
    1451/     40E : E5                  	PUSH	H							;save virtual stack ptr
    1452/     40F : 60                  	MOV		H,B							;loop variable ptr to HL
    1453/     410 : 69                  	MOV		L,C
    1454/     411 : 7A                  	MOV		A,D							;FOR THE "NEXT" STATEMENT WITHOUT AN ARGUMENT
    1455/     412 : B3                  	ORA		E							;WE MATCH ON ANYTHING
    1456/     413 : EB                  	XCHG								;MAKE SURE WE RETURN loop variable ptr
    1457/     414 : CA 19 04            	JZ		POPGOF						;POINTING TO THE VARIABLE
    1458/     417 : EB                  	XCHG								;undo previous XCHG
    1459/     418 : (MACRO)             	COMPAR								;compare input variable ptr and loop variable ptr: HL - DE
    1460/     419 :                     POPGOF:
    1461/     419 : 01 16 00            	LXI		B,0016H						;Offset to next FOR ENTRY
    1462/     41C : E1                  	POP		H							;restore virtual stack ptr
    1463/     41D : C8                  	RZ									;retif match
    1464/     41E : 09                  	DAD		B							;update virtual stack ptr
    1465/     41F : C3 05 04            	JMP		FNDFOR_HL					;TRY THE NEXT ONE
    1466/     422 :                     ;
    1467/     422 :                     ; Initialize system and go to BASIC ready
    1468/     422 :                     ;
    1469/     422 :                     R_INIT_AND_READY:						;0422H
    1470/     422 : 01 01 05                LXI     B,R_POP_GO_BASIC_RDY
    1471/     425 : C3 8D 04                JMP     R_RESTORE_JMP_BC			;Restore stack & runtime and jump to BC
    1472/     428 :                     ; 
    1473/     428 :                     ; Normal end of program reached
    1474/     428 :                     ; 
    1475/     428 :                     L_END_OF_PROG:
    1476/     428 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    1477/     42B : 7C                      MOV     A,H							;test for 0FFFFH
    1478/     42C : A5                      ANA     L
    1479/     42D : 3C                      INR     A
    1480/     42E : CA 3A 04                JZ      +							;brif CURLIN_R == 0FFFFH
    1481/     431 :                     ; CURLIN_R != 0FFFFH. PRGRUN_R should be FALSE
    1482/     431 : 3A A7 FB                LDA     PRGRUN_R					;BASIC Program Running Flag
    1483/     434 : B7                      ORA     A
    1484/     435 : 1E 13                   MVI     E,13H						;preload error #
    1485/     437 : C2 5D 04                JNZ     R_GEN_ERR_IN_E				;Generate error 13H
    1486/     43A : C3 B6 40            +	JMP     L_ENDCON
    1487/     43D :                     ; TODO unreachable
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 26 - 9/5/2025 20:20:35


    1488/     43D : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error in E
    1489/     440 :                     
    1490/     440 :                     ; 
    1491/     440 :                     ; Generate SN error on DATA statement line
    1492/     440 :                     ; 
    1493/     440 :                     L_GEN_DATA_SN_ERROR:
    1494/     440 : 2A 94 FB                LHLD    DATALIN_R					;Line number of current data statement
    1495/     443 : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
    1496/     446 :                     ;
    1497/     446 :                     ; Generate Syntax error
    1498/     446 :                     ;
    1499/     446 :                     R_GEN_SN_ERROR:							;0446H
    1500/     446 : 1E 02                   MVI     E,02H						;Load value for SN Error
    1501/     448 : (MACRO)             	SKIP_2BYTES_INST_BC
    1502/     449 :                     ;
    1503/     449 :                     ; Generate /0 error
    1504/     449 :                     ;
    1505/     449 :                     R_GEN_D0_ERROR:							;0449H
    1506/     449 : 1E 0B                   MVI     E,0BH						;Load value for /0 Error
    1507/     44B : (MACRO)             	SKIP_2BYTES_INST_BC
    1508/     44C :                     ;
    1509/     44C :                     ; Generate NF error
    1510/     44C :                     ;
    1511/     44C :                     R_GEN_NF_ERROR:							;044CH
    1512/     44C : 1E 01                   MVI     E,01H						;Load value for NF Error
    1513/     44E : (MACRO)             	SKIP_2BYTES_INST_BC
    1514/     44F :                     ;
    1515/     44F :                     ; Generate DD error
    1516/     44F :                     ;
    1517/     44F :                     R_GEN_DD_ERROR:							;044FH
    1518/     44F : 1E 0A                   MVI     E,0AH						;Load value for DD Error
    1519/     451 : (MACRO)             	SKIP_2BYTES_INST_BC
    1520/     452 :                     ;
    1521/     452 :                     ; Generate RW error
    1522/     452 :                     ;
    1523/     452 :                     R_GEN_RW_ERROR:							;0452H
    1524/     452 : 1E 14                   MVI     E,14H						;Load value for RW Error
    1525/     454 : (MACRO)             	SKIP_2BYTES_INST_BC
    1526/     455 :                     ;
    1527/     455 :                     ; Generate OV error
    1528/     455 :                     ;
    1529/     455 :                     R_GEN_OV_ERROR:							;0455H
    1530/     455 : 1E 06                   MVI     E,06H						;Load value for OV Error
    1531/     457 : (MACRO)             	SKIP_2BYTES_INST_BC
    1532/     458 :                     ;
    1533/     458 :                     ; Generate MO error
    1534/     458 :                     ;
    1535/     458 :                     R_GEN_MO_ERROR:							;0458H
    1536/     458 : 1E 16                   MVI     E,16H						;Load value for MO Error
    1537/     45A : (MACRO)             	SKIP_2BYTES_INST_BC
    1538/     45B :                     ;
    1539/     45B :                     ; Generate TM error
    1540/     45B :                     ;
    1541/     45B :                     R_GEN_TM_ERROR:							;045BH
    1542/     45B : 1E 0D                   MVI     E,0DH						;Load value for TM Error
    1543/     45D :                     ;
    1544/     45D :                     ; Generate error in E
    1545/     45D :                     ;
    1546/     45D :                     R_GEN_ERR_IN_E:							;045DH
    1547/     45D : AF                      XRA     A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 27 - 9/5/2025 20:20:35


    1548/     45E : 32 A7 FC                STA     OPNFIL_R
    1549/     461 :                     ;
    1550/     461 :                     ; R_VAL_FUN() temporarily modified memory
    1551/     461 :                     ;
    1552/     461 : 2A 7E F6                LHLD    VALSTRPTR_R					;test ptr past string data
    1553/     464 : 7C                      MOV     A,H
    1554/     465 : B5                      ORA     L
    1555/     466 : CA 73 04                JZ      +							;brif ptr past string data==0: no VAL(str) active
    1556/     469 : 3A E6 FB                LDA     VALSTRDAT_R					;value past string data
    1557/     46C : 77                      MOV     M,A							;restore value past string data
    1558/     46D : 21 00 00                LXI     H,0
    1559/     470 : 22 7E F6                SHLD    VALSTRPTR_R					;clear ptr past string data
    1560/     473 : FB                  +	EI     
    1561/     474 : 2A 52 F6                LHLD    ACTONERR_R					;active ON ERROR handler vector
    1562/     477 : E5                      PUSH    H							;Push ERROR handler vector to stack
    1563/     478 : 7C                      MOV     A,H							;test ERROR handler vector
    1564/     479 : B5                      ORA     L
    1565/     47A : C0                      RNZ									;retif ERROR handler vector != 0, execute active ON ERROR handler vector
    1566/     47B : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    1567/     47E : 22 9F FB                SHLD    ERRLIN_R					;Line number of last error
    1568/     481 : 7C                      MOV     A,H							;test for 0FFFFH
    1569/     482 : A5                      ANA     L
    1570/     483 : 3C                      INR     A
    1571/     484 : CA 8A 04                JZ      L_GEN_ERR_IN_E_1			;Skip save of most recent lineNo if BASIC not running
    1572/     487 : 22 A1 FB                SHLD    DOT_R						;Most recent used or entered line number
    1573/     48A :                     L_GEN_ERR_IN_E_1:
    1574/     48A : 01 93 04                LXI     B,L_PRNT_ERR_IN_E			;Continuation function: ERROR print routine
    1575/     48D :                     ;
    1576/     48D :                     ; Restore stack & runtime and jump to BC
    1577/     48D :                     ;
    1578/     48D :                     ; IN:
    1579/     48D :                     ;	BC code address
    1580/     48D :                     ;
    1581/     48D :                     R_RESTORE_JMP_BC:						;048DH
    1582/     48D : 2A 9D FB                LHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
    1583/     490 : C3 78 3F                JMP     L_INIT_BASIC_0
    1584/     493 :                     
    1585/     493 :                     ; 
    1586/     493 :                     ; Generate Error in E Print routine
    1587/     493 :                     ; 
    1588/     493 :                     L_PRNT_ERR_IN_E:
    1589/     493 : C1                      POP     B
    1590/     494 : 7B                      MOV     A,E
    1591/     495 : 4B                      MOV     C,E
    1592/     496 : 32 72 F6                STA     ERRFLG_R					;Last Error code
    1593/     499 : 2A 9B FB                LHLD    SAVTXT_R					;Most recent or currenly running line pointer
    1594/     49C : 22 A3 FB                SHLD    ERRTXT_R					;Pointer to occurance of error
    1595/     49F : EB                      XCHG
    1596/     4A0 : 2A 9F FB                LHLD    ERRLIN_R					;Line number of last error
    1597/     4A3 : 7C                      MOV     A,H							;test for 0FFFFH
    1598/     4A4 : A5                      ANA     L
    1599/     4A5 : 3C                      INR     A
    1600/     4A6 : CA B6 04                JZ      +
    1601/     4A9 : 22 AA FB                SHLD    OLDLIN_R					;Line where break), END), or STOP occurred
    1602/     4AC : EB                      XCHG
    1603/     4AD : 22 AC FB                SHLD    OLDTXT_R					;Address where program stopped on last break), END), or STOP
    1604/     4B0 : 2A A5 FB                LHLD    ONERR_R						;Address of ON ERROR routine
    1605/     4B3 : 7C                      MOV     A,H
    1606/     4B4 : B5                      ORA     L
    1607/     4B5 : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 28 - 9/5/2025 20:20:35


    1608/     4B6 : 21 A7 FB            +	LXI     H,PRGRUN_R				    ;BASIC Program Running Flag
    1609/     4B9 : CA C5 04                JZ      R_PRINT_BASIC_ERR			;Print BASIC error message - XX error in XXX
    1610/     4BC : A6                      ANA     M
    1611/     4BD : C2 C5 04                JNZ     R_PRINT_BASIC_ERR			;Print BASIC error message - XX error in XXX
    1612/     4C0 : 35                      DCR     M
    1613/     4C1 : EB                      XCHG
    1614/     4C2 : C3 2B 08                JMP     L_NEWSTT_2					;Jump into Execute BASIC program loop
    1615/     4C5 :                     ;
    1616/     4C5 :                     ; Print BASIC error message - XX error in C
    1617/     4C5 :                     ;
    1618/     4C5 :                     R_PRINT_BASIC_ERR:						;04C5H
    1619/     4C5 : AF                      XRA     A
    1620/     4C6 : 77                      MOV     M,A
    1621/     4C7 : 59                      MOV     E,C
    1622/     4C8 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
    1623/     4CB : 7B                      MOV     A,E
    1624/     4CC : FE 3B                   CPI     ';'
    1625/     4CE : D2 DB 04                JNC     +
    1626/     4D1 : FE 32                   CPI     '2'
    1627/     4D3 : D2 DD 04                JNC     L_PRNT_ERR_1
    1628/     4D6 : FE 17                   CPI     17H
    1629/     4D8 : DA E0 04                JC      L_PRNT_ERR_2
    1630/     4DB : 3E 30               +	MVI     A,'0'
    1631/     4DD :                     L_PRNT_ERR_1:
    1632/     4DD : D6 1B                   SUI     1BH
    1633/     4DF : 5F                      MOV     E,A
    1634/     4E0 :                     L_PRNT_ERR_2:
    1635/     4E0 : 16 00                   MVI     D,00H
    1636/     4E2 : 21 1A 03                LXI     H,R_BASIC_ERR_MSG_TXT-2		;Code Based. 
    1637/     4E5 : 19                      DAD     D
    1638/     4E6 : 19                      DAD     D
    1639/     4E7 : 3E 3F                   MVI     A,'?'						;3FH
    1640/     4E9 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    1641/     4EA : 7E                      MOV     A,M							;Code based
    1642/     4EB : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    1643/     4EC : (MACRO)                 CHRGET								;Code Based. Get next non-white char from M
    1644/     4ED : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    1645/     4EE : 21 EA 03                LXI     H,R_ERROR_MSG				;Code Based. 
    1646/     4F1 : E5                      PUSH    H
    1647/     4F2 : 2A 9F FB                LHLD    ERRLIN_R					;Line number of last error
    1648/     4F5 : E3                      XTHL
    1649/     4F6 :                     L_ERRFIN:
    1650/     4F6 : CD B1 27                CALL    R_PRINT_STRING				;Code Based. Print buffer at M until NULL or '"'
    1651/     4F9 : E1                      POP     H
    1652/     4FA : 7C                      MOV     A,H
    1653/     4FB : A5                      ANA     L
    1654/     4FC : 3C                      INR     A
    1655/     4FD : C4 CC 39                CNZ     R_PRNT_BASIC_ERR_TERM    	;Finish printing BASIC ERROR message " in " line #
    1656/     500 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    1657/     501 :                     ;
    1658/     501 :                     ; Pop stack and vector to BASIC ready
    1659/     501 :                     ;
    1660/     501 :                     R_POP_GO_BASIC_RDY:						;0501H
    1661/     501 : C1                      POP     B
    1662/     502 :                     ;
    1663/     502 :                     ; Vector to BASIC ready - print Ok
    1664/     502 :                     ;
    1665/     502 :                     R_GO_BASIC_RDY_OK:						;0502H
    1666/     502 : CD 92 4B                CALL    R_SET_OUT_DEV_LCD			;Reinitialize output back to LCD
    1667/     505 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 29 - 9/5/2025 20:20:35


    1668/     508 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
    1669/     50B : 21 F6 03                LXI     H,R_OK_MSG					;Code Based. 
    1670/     50E : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
    1671/     511 :                     ;
    1672/     511 :                     ; Silent vector to BASIC ready
    1673/     511 :                     ;
    1674/     511 :                     L_MAIN:
    1675/     511 :                     R_GO_BASIC_RDY:							;0511H
    1676/     511 : 21 FF FF                LXI     H,0FFFFH
    1677/     514 : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
    1678/     517 : 21 6D F6                LXI     H,COLONTXT_R				;contains ':'
    1679/     51A : 22 9B FB                SHLD    SAVTXT_R					;Most recent or Currently running line pointer
    1680/     51D : CD 44 46                CALL    R_INP_DISP_LINE_NO_Q     	;Input and display (no "?") line and store
    1681/     520 : DA 11 05                JC      R_GO_BASIC_RDY				;IGNORE ^C
    1682/     523 :                     ;
    1683/     523 :                     ; Perform operation at M and return to ready
    1684/     523 :                     ;
    1685/     523 :                     L_PROCESS_BASIC:						;0523H
    1686/     523 : (MACRO)                 CHRGET								;Get next non-white char from M. Returns Carry flag if Numeric. Zero flag if 0
    1687/     524 : 3C                      INR     A							;test A while preserving carry
    1688/     525 : 3D                      DCR     A
    1689/     526 : CA 11 05                JZ      R_GO_BASIC_RDY				;brif empty line: vector to BASIC ready
    1690/     529 : F5                      PUSH    PSW							;save carry
    1691/     52A : CD EB 08                CALL    L_LINGET					;Convert line number at M to binary in DE
    1692/     52D : D2 36 05                JNC     L_PROC_BAS_1				;brif OK
    1693/     530 :                     ; number overflow
    1694/     530 : CD 1A 42                CALL    L_TST_FCBLAST
    1695/     533 : CA 46 04                JZ      R_GEN_SN_ERROR				;brif FCBLAST == 0: Generate Syntax error
    1696/     536 :                     L_PROC_BAS_1:							;line number in DE
    1697/     536 : 2B                      DCX     H							;backup
    1698/     537 : 7E                      MOV     A,M
    1699/     538 : FE 20                   CPI     ' '
    1700/     53A : CA 36 05                JZ      L_PROC_BAS_1				;brif A == ' '
    1701/     53D : FE 09                   CPI     09H							;TAB
    1702/     53F : CA 36 05                JZ      L_PROC_BAS_1				;brif A == TAB
    1703/     542 : 23                      INX     H							;next char
    1704/     543 : 7E                      MOV     A,M
    1705/     544 : FE 20                   CPI     ' '
    1706/     546 : CC 57 34                CZ      L_INCHL						;Increment HL: skip ' '
    1707/     549 : D5                      PUSH    D							;save line number
    1708/     54A : CD 46 06                CALL    R_CRUNCH					;Perform Token compression. Returns carry.
    1709/     54D : D1                      POP     D							;restore line number
    1710/     54E : F1                      POP     PSW							;restore carry
    1711/     54F : 22 9B FB                SHLD    SAVTXT_R					;Most recent or currently running line pointer
    1712/     552 : D2 1C 4F                JNC     L_LINE_NONUM				;brif line didn't start with a number
    1713/     555 : D5                      PUSH    D							;save line number
    1714/     556 : C5                      PUSH    B							;save BC
    1715/     557 :                     ; DONT ALLOW ANY FUNNY BUSINESS WITH EXISTING PGM
    1716/     557 : AF                      XRA     A
    1717/     558 : 32 97 FB                STA     PROFLG_R					;clear
    1718/     55B : (MACRO)                 CHRGET								;Get next non-white char from M
    1719/     55C : B7                      ORA     A							;test char
    1720/     55D : F5                      PUSH    PSW							;save char & flags
    1721/     55E : EB                      XCHG								;line number to HL
    1722/     55F : 22 A1 FB                SHLD    DOT_R						;Most recently entered line number
    1723/     562 : EB                      XCHG								;line number back to DE
    1724/     563 : CD 28 06                CALL    L_FNDLIN					;Find line number in DE. Preserve carry for a while
    1725/     566 :                     										;returns ptr to link field in BC if carry
    1726/     566 : DA 6F 05                JC      +							;found existing line
    1727/     569 :                     ; line number doesn't exist
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 30 - 9/5/2025 20:20:35


    1728/     569 : F1                      POP     PSW							;retrieve char & flags
    1729/     56A : F5                      PUSH    PSW
    1730/     56B : CA 4D 09                JZ      R_GEN_UL_ERROR				;brif end of line: Generate UL error
    1731/     56E : B7                      ORA     A							;test char
    1732/     56F :                     ; BC ptr to link field in line
    1733/     56F : C5                  +	PUSH    B							;save link field ptr
    1734/     570 : D2 91 05                JNC     +							;brif forward if no carry, not Z
    1735/     573 : CD 6C 12                CALL    L_COPY_TO_VARTAB			;Copy from (DE) to (BE) until DE == [VARTAB_R]
    1736/     576 : 79                      MOV     A,C							;compute BC - DE
    1737/     577 : 93                      SUB     E
    1738/     578 : 4F                      MOV     C,A
    1739/     579 : 78                      MOV     A,B
    1740/     57A : 9A                      SBB     D
    1741/     57B : 47                      MOV     B,A
    1742/     57C : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    1743/     57F : 09                      DAD     B
    1744/     580 : 22 AE FB                SHLD    DOSTRT_R					;DO files pointer
    1745/     583 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer
    1746/     586 : 09                      DAD     B
    1747/     587 : 22 B0 FB                SHLD    COSTRT_R					;CO files pointer
    1748/     58A : 2A D8 FA                LHLD    XXSTRT_R
    1749/     58D : 09                      DAD     B
    1750/     58E : 22 D8 FA                SHLD    XXSTRT_R
    1751/     591 : D1                  +	POP     D
    1752/     592 : F1                      POP     PSW
    1753/     593 : D5                      PUSH    D
    1754/     594 : CA DA 05                JZ      +
    1755/     597 : D1                      POP     D
    1756/     598 : 21 00 00                LXI     H,0
    1757/     59B : 22 A5 FB                SHLD    ONERR_R						;Address of ON ERROR routine
    1758/     59E : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
    1759/     5A1 : E3                      XTHL
    1760/     5A2 : C1                      POP     B
    1761/     5A3 : E5                      PUSH    H
    1762/     5A4 : 09                      DAD     B
    1763/     5A5 : E5                      PUSH    H
    1764/     5A6 : CD F0 3E                CALL    L_CPY_BC_TO_HL_CHK			;Copy data from BC to HL down until BC == DE w/ check
    1765/     5A9 : E1                      POP     H
    1766/     5AA : 22 B2 FB                SHLD    VARTAB_R					;Start of variable data pointer
    1767/     5AD : EB                      XCHG
    1768/     5AE : 74                      MOV     M,H
    1769/     5AF : C1                      POP     B
    1770/     5B0 : D1                      POP     D
    1771/     5B1 : E5                      PUSH    H
    1772/     5B2 : 23                      INX     H
    1773/     5B3 : 23                      INX     H
    1774/     5B4 : 73                      MOV     M,E
    1775/     5B5 : 23                      INX     H
    1776/     5B6 : 72                      MOV     M,D
    1777/     5B7 : 23                      INX     H
    1778/     5B8 : 11 81 F6                LXI     D,TOKTMP_R					;temp storage for tokenized line
    1779/     5BB : E5                      PUSH    H
    1780/     5BC : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    1781/     5BF : 09                      DAD     B
    1782/     5C0 : 22 AE FB                SHLD    DOSTRT_R					;DO files pointer
    1783/     5C3 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer
    1784/     5C6 : 09                      DAD     B
    1785/     5C7 : 22 B0 FB                SHLD    COSTRT_R					;CO files pointer
    1786/     5CA : 2A D8 FA                LHLD    XXSTRT_R
    1787/     5CD : 09                      DAD     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 31 - 9/5/2025 20:20:35


    1788/     5CE : 22 D8 FA                SHLD    XXSTRT_R
    1789/     5D1 : E1                      POP     H
    1790/     5D2 :                     ;
    1791/     5D2 :                     ; insert the new line
    1792/     5D2 :                     ;
    1793/     5D2 : 1A                  -	LDAX    D
    1794/     5D3 : 77                      MOV     M,A
    1795/     5D4 : 23                      INX     H							;next
    1796/     5D5 : 13                      INX     D
    1797/     5D6 : B7                      ORA     A
    1798/     5D7 : C2 D2 05                JNZ     -
    1799/     5DA : D1                  +	POP     D
    1800/     5DB : CD F4 05                CALL    R_CHEAD						;Fixup all links. Find end of BASIC program.
    1801/     5DE : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    1802/     5E1 : 22 A8 FB                SHLD    TEMP2_R
    1803/     5E4 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
    1804/     5E7 : 2A A8 FB                LHLD    TEMP2_R
    1805/     5EA : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    1806/     5ED : C3 11 05                JMP     R_GO_BASIC_RDY				;Silent vector to BASIC ready
    1807/     5F0 :                     ;
    1808/     5F0 :                     ; Update line addresses for current BASIC program
    1809/     5F0 :                     ;
    1810/     5F0 :                     R_UPDATE_LINE_ADDR:						;05F0H
    1811/     5F0 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program ptr
    1812/     5F3 : EB                      XCHG								;BASIC program txt ptr to DE
    1813/     5F4 :                     ;
    1814/     5F4 :                     ; CHEAD GOES THROUGH PROGRAM STORAGE AND FIXES
    1815/     5F4 :                     ; UP ALL THE LINKS, THE END OF EACH LINE IS
    1816/     5F4 :                     ; FOUND BY SEARCHING FOR THE ZERO AT THE END,
    1817/     5F4 :                     ; THE DBL ZERO LINK IS USED TO DETECT THE END OF THE PROGRAM
    1818/     5F4 :                     ;
    1819/     5F4 :                     ; IN:
    1820/     5F4 :                     ;	DE		BASIC program line ptr
    1821/     5F4 :                     ;
    1822/     5F4 :                     R_CHEAD:
    1823/     5F4 : 62                      MOV     H,D							;copy BASIC program line ptr to HL
    1824/     5F5 : 6B                      MOV     L,E
    1825/     5F6 : 7E                      MOV     A,M							;SEE IF END OF CHAIN
    1826/     5F7 : 23                      INX     H
    1827/     5F8 : B6                      ORA     M
    1828/     5F9 : C8                      RZ									;retif 0000 link found
    1829/     5FA : 23                  	INX     H							;FIX HL TO START OF TEXT
    1830/     5FB : 23                      INX     H							;skip line number
    1831/     5FC : 23                      INX     H
    1832/     5FD : AF                      XRA     A							;clear
    1833/     5FE : BE                  -	CMP     M							;find end of BASIC line
    1834/     5FF : 23                      INX     H
    1835/     600 : C2 FE 05                JNZ     -							;loop
    1836/     603 : EB                      XCHG								;HL ptr to previous line. DE ptr to current line
    1837/     604 : 73                      MOV     M,E							;FIRST BYTE OF FIXUP
    1838/     605 : 23                      INX     H							;next
    1839/     606 : 72                      MOV     M,D							;2ND BYTE OF FIXUP
    1840/     607 : C3 F4 05                JMP     R_CHEAD						;KEEP CHAINING TIL DONE
    1841/     60A :                     ;
    1842/     60A :                     ; Evaluate LIST statement arguments
    1843/     60A :                     ; SCNLIN SCANS A LINE RANGE OF
    1844/     60A :                     ; THE FORM #-# OK # OR #- OR -# OR BLANK
    1845/     60A :                     ; AND THEN FINDS THE FIRST LINE IN THE RANGE
    1846/     60A :                     ;
    1847/     60A :                     ; OUT:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 32 - 9/5/2025 20:20:35


    1848/     60A :                     ;	BC		First line ptr in the range
    1849/     60A :                     ;
    1850/     60A :                     R_SCNLIN:
    1851/     60A :                     R_EVAL_LIST_ARGS:						;060AH
    1852/     60A : 11 00 00                LXI     D,0
    1853/     60D : D5                      PUSH    D
    1854/     60E : CA 1B 06                JZ      +
    1855/     611 : D1                      POP     D
    1856/     612 : CD E0 08            	CALL	 LINGET						;GET A LINE #, IF NONE, RETURNS ZERO
    1857/     615 :                     ;    CALL    R_EVAL_LINE_NUM				;Evaluate line number text at M. IF NONE, RETURNS ZERO
    1858/     615 : D5                      PUSH    D
    1859/     616 : CA 24 06                JZ      L_SCNLIN_1					;brif zero (no more arguments)
    1860/     619 : (MACRO)             	SYNCHK	_MINUS_						;0D1H	token '-'
    1861/     61B : 11 FA FF            +	LXI     D,0FFFAH					;-4
    1862/     61E : C4 E0 08                CNZ     R_EVAL_LINE_NUM				;Evaluate line number text at M
    1863/     621 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    1864/     624 :                     L_SCNLIN_1:
    1865/     624 : EB                      XCHG
    1866/     625 : D1                      POP     D
    1867/     626 :                     L_SCNLIN_2:								;Entry with DE linenumber
    1868/     626 : E3                      XTHL
    1869/     627 : E5                      PUSH    H
    1870/     628 :                     ;
    1871/     628 :                     ; Find line number in DE
    1872/     628 :                     ; IN:
    1873/     628 :                     ;	DE
    1874/     628 :                     ; OUT:
    1875/     628 :                     ;	BC
    1876/     628 :                     ;	HL
    1877/     628 :                     ;	carry
    1878/     628 :                     ;
    1879/     628 :                     ; L_FNDLIN SEARCHES THE PROGRAM TEXT FOR THE LINE
    1880/     628 :                     ; WHOSE LINE # PASSED IN (D,E), (D,E) IS PRESERVED.
    1881/     628 :                     ; THERE ARE THREE POSSIBLE RETURNS:
    1882/     628 :                     ;
    1883/     628 :                     ; 1) ZERO FLAG SET, CARRY NOT SET, LINE NOT FOUND
    1884/     628 :                     ;	 NO LINE IN PROGRAM GREATER THAN ONE SOUGHT,
    1885/     628 :                     ;	 (B,C) POINTS TO TWO ZERO BYTES AT END OF PROGRAM,
    1886/     628 :                     ;	 (H,L)= (B,C) 
    1887/     628 :                     ; 2) ZERO, CARRY SET,
    1888/     628 :                     ;	 (B,C) POINTS TO THE LINK FIELD IN THE LINE
    1889/     628 :                     ;	 WHICH IS THE LINE SEARCHED FOR,
    1890/     628 :                     ;	 (H,L) POINTS TO THE LINK FIELD IN THE NEXT LINE,
    1891/     628 :                     ; 3) NON-ZERO, CARRY NOT SET,
    1892/     628 :                     ;	 LINE NOT FOUND, [B,C] POINTS TO LINE IN PROGRAM
    1893/     628 :                     ;	 GREATER THAN ONE SEARCHED FOR,
    1894/     628 :                     ;	 (H,L) POINTS TO THE LINK FIELD IN THE NEXT LINE.
    1895/     628 :                     ;
    1896/     628 :                     ;BASIC program:
    1897/     628 :                     ;	2 bytes ptr to next line, 2 bytes line number, crunched text, 0 terminated
    1898/     628 :                     ;	zero ptr to next line indicates end of program text
    1899/     628 :                     ;
    1900/     628 :                     L_FNDLIN:								;0628H
    1901/     628 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    1902/     62B :                     ;
    1903/     62B :                     ; Find target line number in DE starting at HL (current txt ptr)
    1904/     62B :                     ; Result in BC
    1905/     62B :                     ;
    1906/     62B :                     L_FNDLIN_2:				   				;062BH
    1907/     62B : 44                      MOV     B,H							;current BASIC txt ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 33 - 9/5/2025 20:20:35


    1908/     62C : 4D                      MOV     C,L
    1909/     62D : 7E                      MOV     A,M							;test for end of program: double 0
    1910/     62E : 23                      INX     H							;next
    1911/     62F : B6                      ORA     M
    1912/     630 : 2B                      DCX     H							;backup
    1913/     631 : C8                      RZ									;retif double 0 found
    1914/     632 : 23                      INX     H							;skip ptr to next line
    1915/     633 : 23                      INX     H
    1916/     634 : 7E                      MOV     A,M							;get next line # to HL
    1917/     635 : 23                      INX     H
    1918/     636 : 66                      MOV     H,M
    1919/     637 : 6F                      MOV     L,A
    1920/     638 : (MACRO)                 COMPAR								;Compare DE and HL: carry if HL < DE. No carry if next line # (HL) >= DE: HL - DE
    1921/     639 : 60                      MOV     H,B							;restore BASIC txt ptr
    1922/     63A : 69                      MOV     L,C
    1923/     63B : 7E                      MOV     A,M							;ptr to next BASIC line to HL
    1924/     63C : 23                      INX     H							;no flags affected
    1925/     63D : 66                      MOV     H,M
    1926/     63E : 6F                      MOV     L,A
    1927/     63F : 3F                      CMC									;complement carry
    1928/     640 : C8                      RZ									;retif line numbers match (COMPAR result)
    1929/     641 : 3F                      CMC									;complement carry
    1930/     642 : D0                      RNC									;retif next line # >= target line #
    1931/     643 : C3 2B 06                JMP     L_FNDLIN_2     				;continue
    1932/     646 :                     ;
    1933/     646 :                     ; Perform Token compression
    1934/     646 :                     ; HL points to identifier
    1935/     646 :                     ; token value returned in C?
    1936/     646 :                     ; return Carry and HL
    1937/     646 :                     ;
    1938/     646 :                     R_CRUNCH:								;0646H
    1939/     646 : AF                      XRA     A
    1940/     647 : 32 66 FB                STA     DORES_R						;ALLOW CRUNCHING
    1941/     64A : 4F                      MOV     C,A
    1942/     64B : 11 81 F6                LXI     D,TOKTMP_R					;temp storage for tokenized line: output ptr.
    1943/     64E :                     										;4 bytes before INPBUF_R
    1944/     64E :                     L_CRUNCH_0:
    1945/     64E : 7E                      MOV     A,M							;get char
    1946/     64F : FE 20                   CPI     ' '							;skip space
    1947/     651 : CA EA 06                JZ      L_CRUNCH_4
    1948/     654 : 47                      MOV     B,A							;save char
    1949/     655 : FE 22                   CPI     '"'
    1950/     657 : CA 0F 07                JZ      L_CRUNCH_6					;brif string
    1951/     65A : B7                      ORA     A							;test
    1952/     65B : CA 16 07                JZ      L_CRUNCH_7					;brif end of identifier
    1953/     65E : 23                      INX     H							;next
    1954/     65F : B7                      ORA     A							;test
    1955/     660 : FA 4E 06                JM      L_CRUNCH_0					;brif >= 128
    1956/     663 : 2B                      DCX     H							;previous
    1957/     664 : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    1958/     667 : B7                      ORA     A							;test
    1959/     668 : 7E                      MOV     A,M							;reload char
    1960/     669 : C2 EA 06                JNZ     L_CRUNCH_4					;brif WHETHER CAN OR CAN'T CRUNCH RES'D WORDS TRUE
    1961/     66C : FE 3F                   CPI     '?'
    1962/     66E : 3E A3                   MVI     A,_PRINT					;PRINT token
    1963/     670 : CA EA 06                JZ      L_CRUNCH_4
    1964/     673 : 7E                      MOV     A,M							;reload char
    1965/     674 : FE 30                   CPI     '0'
    1966/     676 : DA 7E 06                JC      +							;brif < '0'
    1967/     679 : FE 3C                   CPI     '<'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 34 - 9/5/2025 20:20:35


    1968/     67B : DA EA 06                JC      L_CRUNCH_4					;brif < '<'
    1969/     67E : D5                  +	PUSH    D							;still TOKTMP_R
    1970/     67F : 11 7F 00                LXI     D,R_BASIC_KEYWORD_TBL-1		;Code Based.
    1971/     682 : C5                      PUSH    B							;save
    1972/     683 : 01 CD 06                LXI     B,L_CRUNCH_CNT				;insert continuation function
    1973/     686 : C5                      PUSH    B
    1974/     687 : 06 7F                   MVI     B,_END-1					;7FH start token value-1
    1975/     689 : 7E                      MOV     A,M							;get identifier char
    1976/     68A :                     ; TODO could call R_CONV_A_TOUPPER() here
    1977/     68A : FE 61                   CPI     'a'
    1978/     68C : DA 97 06                JC      L_CRUNCH_1					;brif < 'a'
    1979/     68F : FE 7B                   CPI     'z'+1						;7BH
    1980/     691 : D2 97 06                JNC     L_CRUNCH_1					;brif >= '{'
    1981/     694 : E6 5F                   ANI     5FH							;01011111 convert to upper case
    1982/     696 : 77                      MOV     M,A							;update identifier char
    1983/     697 :                     L_CRUNCH_1:
    1984/     697 : 4E                      MOV     C,M
    1985/     698 : EB                      XCHG								;keywords ptr to HL Code Based
    1986/     699 : 23                  -	INX     H							;next
    1987/     69A : B6                      ORA     M							;Code Based find start of keyword
    1988/     69B : F2 99 06                JP      -							;brif bit 7 clear
    1989/     69E : 04                      INR     B							;token value
    1990/     69F : 7E                      MOV     A,M							;Code Based get keyword char
    1991/     6A0 : E6 7F                   ANI     7FH							;clear bit 7
    1992/     6A2 : C8                      RZ									;end of table
    1993/     6A3 : B9                      CMP     C							;identifier char
    1994/     6A4 : C2 99 06                JNZ     -							;brif different
    1995/     6A7 : EB                      XCHG								;keywords ptr back to DE
    1996/     6A8 : E5                      PUSH    H							;save identifier start ptr
    1997/     6A9 :                     L_CRUNCH_2:
    1998/     6A9 : 13                      INX     D							;next keyword char ptr
    1999/     6AA : 1A                      LDAX    D							;Code based get keyword char
    2000/     6AB : B7                      ORA     A							;test for next keyword
    2001/     6AC : FA C9 06                JM      L_CRUNCH_3					;end of keyword found
    2002/     6AF : 4F                      MOV     C,A							;save
    2003/     6B0 : 78                      MOV     A,B							;token value
    2004/     6B1 : FE 88                   CPI     _GOTO						;special token value for "GOTO"
    2005/     6B3 : C2 B8 06                JNZ     +
    2006/     6B6 : (MACRO)                 CHRGET								;Get next non-white char from M
    2007/     6B7 : 2B                      DCX     H
    2008/     6B8 : 23                  +	INX     H
    2009/     6B9 : 7E                      MOV     A,M							;identifier char
    2010/     6BA :                     ;
    2011/     6BA :                     ; note conversion to UC was done earlier for first character
    2012/     6BA :                     ;
    2013/     6BA : FE 61                   CPI     'a'							;61H
    2014/     6BC : DA C1 06                JC      +							;brif < 'a'
    2015/     6BF : E6 5F                   ANI     5FH							;01011111B convert to upper case
    2016/     6C1 : B9                  +	CMP     C							;compare identifier and keyword
    2017/     6C2 : CA A9 06                JZ      L_CRUNCH_2					;brif match
    2018/     6C5 : E1                      POP     H							;restore identifier start ptr
    2019/     6C6 : C3 97 06                JMP     L_CRUNCH_1
    2020/     6C9 :                     ;
    2021/     6C9 :                     ; end of keyword found
    2022/     6C9 :                     ;
    2023/     6C9 :                     L_CRUNCH_3:
    2024/     6C9 : 48                      MOV     C,B							;tokenized value of identifier
    2025/     6CA : F1                      POP     PSW							;removed saved BC?
    2026/     6CB : EB                      XCHG
    2027/     6CC : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 35 - 9/5/2025 20:20:35


    2028/     6CD :                     
    2029/     6CD :                     L_CRUNCH_CNT:
    2030/     6CD : EB                      XCHG
    2031/     6CE : 79                      MOV     A,C
    2032/     6CF : C1                      POP     B							;Restore line length from stack
    2033/     6D0 : D1                      POP     D							;Restore output pointer from stack
    2034/     6D1 : EB                      XCHG								;HL=output pointer, DE = input string
    2035/     6D2 : FE 91                   CPI     _ELSE						;91H Test for ELSE token
    2036/     6D4 : 36 3A                   MVI     M,':'						;3AH insert ':' before ELSE
    2037/     6D6 : C2 DB 06                JNZ     +							;brif not ELSE. Ignore previous insertion
    2038/     6D9 : 0C                      INR     C							;effectuate insertion
    2039/     6DA : 23                      INX     H
    2040/     6DB : FE FF               +	CPI     _QUOTE_						;0FFH Test for "'" token (Alternate REM)
    2041/     6DD : C2 E9 06                JNZ     +							;brif !comment
    2042/     6E0 :                     ; replace "'" comment with ':' _REM
    2043/     6E0 : 36 3A                   MVI     M,':'						;3AH
    2044/     6E2 : 23                      INX     H							;insert ':' indicating end of statement
    2045/     6E3 : 06 8E                   MVI     B,_REM						;8EH Load value for REM token
    2046/     6E5 : 70                      MOV     M,B
    2047/     6E6 : 23                      INX     H
    2048/     6E7 : 0C                      INR     C
    2049/     6E8 : 0C                      INR     C
    2050/     6E9 : EB                  +	XCHG								;HL=input line, DE = output pointer
    2051/     6EA :                     ;
    2052/     6EA :                     ; Save token in A to (DE)
    2053/     6EA :                     ;
    2054/     6EA :                     L_CRUNCH_4:
    2055/     6EA : 23                      INX     H							;next char
    2056/     6EB : 12                      STAX    D							;store token in buffer
    2057/     6EC : 13                      INX     D							;next
    2058/     6ED : 0C                      INR     C							;count
    2059/     6EE : D6 3A                   SUI     ':'							;3AH Test for ':' token and rebase
    2060/     6F0 : CA F8 06                JZ      +							;brif A was ':'
    2061/     6F3 : FE 49                   CPI     _DATA-':'					;test for DATA token (83H - 3AH = 49H)
    2062/     6F5 : C2 FB 06                JNZ     L_CRUNCH_5
    2063/     6F8 :                     ; A == 0. ':' or _DATA found: clear DORES_R
    2064/     6F8 : 32 66 FB            +	STA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    2065/     6FB :                     L_CRUNCH_5:
    2066/     6FB : D6 54                   SUI     _REM-':'					;54H Test for REM statement
    2067/     6FD : CA 05 07                JZ      +							;brif match. A == 0
    2068/     700 : D6 71                   SUI     _QUOTE_-_REM				;71H	Test for _QUOTE_ token
    2069/     702 : C2 4E 06                JNZ     L_CRUNCH_0					;brif !match. Continue crunching
    2070/     705 :                     ; A == 0. _REM or _QUOTE_ found
    2071/     705 : 47                  +	MOV     B,A							;Save termination marker as NULL (end of string)
    2072/     706 :                     ;
    2073/     706 :                     ; Copy data directly to (DE) for strings, _REM and _QUOTE_ token
    2074/     706 :                     ;
    2075/     706 : 7E                  -	MOV     A,M							;get next char
    2076/     707 : B7                      ORA     A
    2077/     708 : CA 16 07                JZ      L_CRUNCH_7					;brif end of string
    2078/     70B : B8                      CMP     B							;B == termination char
    2079/     70C : CA EA 06                JZ      L_CRUNCH_4					;Jump to Save token if termination char found (QUOTE or NULL)
    2080/     70F :                     ;
    2081/     70F :                     ; Copy Next byte of string or _REM to (DE)
    2082/     70F :                     ; Entry point for string (B == '"')
    2083/     70F :                     ;
    2084/     70F :                     L_CRUNCH_6:
    2085/     70F : 23                      INX     H
    2086/     710 : 12                      STAX    D
    2087/     711 : 0C                      INR     C							;count
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 36 - 9/5/2025 20:20:35


    2088/     712 : 13                      INX     D
    2089/     713 : C3 06 07                JMP     -							;Jump to test next byte for termination marker (QUOTE or NULL)
    2090/     716 :                     ;
    2091/     716 :                     ; End of string to tokenize found.
    2092/     716 :                     ; A == 0
    2093/     716 :                     ; C == count/line length
    2094/     716 :                     ; DE
    2095/     716 :                     ;
    2096/     716 :                     L_CRUNCH_7:
    2097/     716 : 21 05 00                LXI     H,0005H						;Prepare to add 5 to line length for Address, Line # & termination
    2098/     719 : 44                      MOV     B,H							;zero extend C to BC (H == 0)
    2099/     71A : 09                      DAD     B
    2100/     71B : 44                      MOV     B,H							;new line length to BC
    2101/     71C : 4D                      MOV     C,L
    2102/     71D : 21 80 F6                LXI     H,EOSMRK_R					;Load pointer to End of statement marker
    2103/     720 : 12                      STAX    D							;Store Zero to output - End of line marker
    2104/     721 : 13                      INX     D
    2105/     722 : 12                      STAX    D							;Store 2nd zero to output - NULL next BASIC line address LSB
    2106/     723 : 13                      INX     D
    2107/     724 : 12                      STAX    D							;Store 3rd zero to output - NULL next BASIC line address MSB
    2108/     725 : C9                      RET
    2109/     726 :                     ;
    2110/     726 :                     ; FOR statement
    2111/     726 :                     ;
    2112/     726 :                     ;	FOR var=start to final [step increment]
    2113/     726 :                     ;
    2114/     726 :                     ; A FOR ENTRY ON THE STACK HAS THE FOLLOWING FORMAT
    2115/     726 :                     ; LOW ADRESS:
    2116/     726 :                     ;
    2117/     726 :                     ;	TOKEN (_FOR IN HIGH BYTE) 1 BYTE
    2118/     726 :                     ;	A POINTER TO THE LOOP VARIABLE 2 BYTES (LSTVAR_R)
    2119/     726 :                     ;	A BYTE REFLECTING THE SIGN OF THE INCREMENT 1 BYTE  ??? PLUS TYPE
    2120/     726 :                     ;	THE STEP 8 BYTES.
    2121/     726 :                     ;	THE UPPER VALUE 8 BYTES
    2122/     726 :                     ;	THE LINE # OF THE "FOR" STATEMENT 2 BYTES
    2123/     726 :                     ;	A TEXT POINTER INTO THE "FOR" STATEMENT 2 BYTES
    2124/     726 :                     ;
    2125/     726 :                     ; HIGH ADDRESS
    2126/     726 :                     ;
    2127/     726 :                     ; TOTAL 24 BYTES
    2128/     726 :                     ;
    2129/     726 :                     R_FOR_STMT:								;0726H
    2130/     726 : 3E 64                   MVI     A,64H						;01100100 100.
    2131/     728 : 32 96 FB                STA     SUBFLG_R					;DONT RECOGNIZE SUBSCRIPTED VARIABLES flag
    2132/     72B :                     ;READ THE VARIABLE AND ASSIGN IT THE CORRECT INTIAL VALUE
    2133/     72B :                     ;AND STORE A POINTER TO THE VARTABLE IN (TEMP)
    2134/     72B : CD C3 09                CALL    R_LET_STMT
    2135/     72E : C1                      POP     B							;return address to BC
    2136/     72F : E5                      PUSH    H							;TEXT PTR ON THE STACK (2 bytes)
    2137/     730 : CD 9E 09            	CALL    R_DATA_STMT				    ;DATA statement. Returns text ptr
    2138/     733 : 22 92 FB                SHLD    MSTMP3_R					;save text ptr
    2139/     736 : 21 02 00                LXI     H,0002H
    2140/     739 : 39                      DAD     SP
    2141/     73A :                     ; FNDFOR MUST HAVE VARIABLE POINTER IN DE
    2142/     73A : CD 05 04            -	CALL    FNDFOR_HL					;FNDFOR. Check for existing FOR loop for DE variable
    2143/     73D : C2 58 07                JNZ     +							;brif NOT found
    2144/     740 :                     ; Found FOR loop structure for this variable on the stack
    2145/     740 :                     ; FNDFOR_HL returns FOR structures size in BC, virtual stack ptr in HL
    2146/     740 : 09                      DAD     B							;index virtual stack ptr to start of  
    2147/     741 : D5                      PUSH    D							;save DE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 37 - 9/5/2025 20:20:35


    2148/     742 : 2B                      DCX     H							;get DE from M decrementing: must be loop variable ptr
    2149/     743 : 56                      MOV     D,M
    2150/     744 : 2B                      DCX     H
    2151/     745 : 5E                      MOV     E,M
    2152/     746 : 23                      INX     H							;reset virtual stack ptr
    2153/     747 : 23                      INX     H
    2154/     748 : E5                      PUSH    H							;save virtual stack ptr
    2155/     749 : 2A 92 FB                LHLD    MSTMP3_R					;saved loop variable for this FOR loop
    2156/     74C : (MACRO)                 COMPAR								;HL - DE
    2157/     74D : E1                      POP     H							;restore virtual stack ptr
    2158/     74E : D1                      POP     D							;restore DE
    2159/     74F : C2 3A 07                JNZ     -							;brif no match
    2160/     752 : D1                      POP     D							;restore DE
    2161/     753 : F9                      SPHL								;set SP to virtual stack ptr
    2162/     754 : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
    2163/     757 : (MACRO)             	SKIP_BYTE_INST_C
    2164/     758 : D1                  +	POP     D
    2165/     759 : EB                      XCHG
    2166/     75A : 0E 0C                   MVI     C,0CH
    2167/     75C : CD FF 3E                CALL    R_GETSTK					;Test for 12 units free in stack space
    2168/     75F : E5                      PUSH    H
    2169/     760 : 2A 92 FB                LHLD    MSTMP3_R					;FOR loop text ptr
    2170/     763 : E3                      XTHL								;swap with saved HL: build _FOR loop structure on stack
    2171/     764 : E5                      PUSH    H
    2172/     765 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    2173/     768 : E3                      XTHL								;swap with saved HL: build _FOR loop structure on stack
    2174/     769 : (MACRO)             	SYNCHK	_TO							;TO Token
    2175/     76B :                     ;
    2176/     76B :                     ; TO statement
    2177/     76B :                     ;
    2178/     76B :                     R_TO_STMT:								;076BH
    2179/     76B : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    2180/     76C : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error if STRING type
    2181/     76F : F5                      PUSH    PSW							;save type
    2182/     770 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    2183/     773 : F1                      POP     PSW							;restore type
    2184/     774 : E5                      PUSH    H							;text ptr
    2185/     775 : D2 91 07                JNC     L_TO_DOUBLE					;brif type DBL
    2186/     778 : F2 C8 07                JP      L_TO_SINGLE					;brif type SNGL
    2187/     77B : CD 01 35                CALL    R_CINT_FUN					;CINT function
    2188/     77E : E3                      XTHL								;swapped with saved text ptr: build _FOR loop structure on stack (just 2 bytes, not 8)
    2189/     77F : 11 01 00                LXI     D,0001H						;default step size
    2190/     782 : 7E                      MOV     A,M							;get next char/token
    2191/     783 :                     ;
    2192/     783 :                     ; STEP statement for integer type
    2193/     783 :                     ;
    2194/     783 :                     R_STEP_STMT:							;0783H
    2195/     783 : FE CF                   CPI     _STEP						;optional
    2196/     785 : CC 12 11                CZ      L_GETINT					;Evaluate expression at M. Result in DE 
    2197/     788 : D5                      PUSH    D							;save step result: build _FOR loop structure on stack
    2198/     789 : E5                      PUSH    H							;save text ptr
    2199/     78A : EB                      XCHG								;step result to HL
    2200/     78B : CD 1B 34                CALL    L_EVAL_HL					;Z, -1 or 1
    2201/     78E : C3 EA 07                JMP     L_STEP_INT_SNGL				;2 items on stack: integer step value & txt ptr. BCDE used
    2202/     791 :                     ;
    2203/     791 :                     ; TO <DBL>
    2204/     791 :                     ;
    2205/     791 :                     L_TO_DOUBLE:
    2206/     791 : CD BA 35                CALL    L_FRCDBL				    ;CDBL function
    2207/     794 : D1                      POP     D							;restore DE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 38 - 9/5/2025 20:20:35


    2208/     795 :                     ; create 8 bytes on the stack
    2209/     795 : 21 F8 FF                LXI     H,0FFF8H					;Load -8 into HL
    2210/     798 : 39                      DAD     SP							;add to SP
    2211/     799 : F9                      SPHL								;set new SP
    2212/     79A : D5                      PUSH    D							;save DE
    2213/     79B : CD 87 34                CALL    L_CPY_FAC1_TO_M				;move FAC1 to M: build _FOR loop structure on stack
    2214/     79E : E1                      POP     H
    2215/     79F : 7E                      MOV     A,M
    2216/     7A0 : FE CF                   CPI     _STEP						;0CFH
    2217/     7A2 : 11 86 32                LXI     D,R_DBL_ONE					;Code Based. 1.0 default DBL step value
    2218/     7A5 : 3E 01                   MVI     A,01H						;preload 1 (step value positive)
    2219/     7A7 : C2 B7 07                JNZ     +							;brif !_STEP token
    2220/     7AA : (MACRO)                 CHRGET								;Get next non-white char from M
    2221/     7AB : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    2222/     7AE : E5                      PUSH    H							;save text ptr
    2223/     7AF : CD BA 35                CALL    L_FRCDBL				   	;CDBL function
    2224/     7B2 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
    2225/     7B3 : 11 18 FC                LXI     D,DFACLO_R				    ;FAC1
    2226/     7B6 : E1                      POP     H							;restore text ptr
    2227/     7B7 :                     ;:								;D now has ptr to Double TO value
    2228/     7B7 : 44                  +	MOV     B,H							;save text ptr
    2229/     7B8 : 4D                      MOV     C,L
    2230/     7B9 :                     ; create 8 bytes on the stack for STEP value
    2231/     7B9 : 21 F8 FF                LXI     H,0FFF8H					;Load -8 into HL
    2232/     7BC : 39                      DAD     SP
    2233/     7BD : F9                      SPHL
    2234/     7BE : F5                      PUSH    PSW							;save step value sign
    2235/     7BF : C5                      PUSH    B							;save text ptr
    2236/     7C0 : CD 65 34                CALL    R_MOVE_TYP_BYTES_INC		;from (DE) to M
    2237/     7C3 : E1                      POP     H							;restore text ptr to HL
    2238/     7C4 : F1                      POP     PSW							;restore step value sign
    2239/     7C5 : C3 F1 07                JMP     L_FOR_COMMON
    2240/     7C8 :                     ;
    2241/     7C8 :                     ; TO <SNGL>
    2242/     7C8 :                     ;
    2243/     7C8 :                     L_TO_SINGLE:
    2244/     7C8 : CD 2A 35                CALL    R_CSNG_FUN				    ;CSNG function
    2245/     7CB : CD 3D 34                CALL    R_SNGL_BCDE_EQ_FAC1      	;Load single precision FAC1 to BCDE
    2246/     7CE : E1                      POP     H							;restore text ptr
    2247/     7CF : C5                      PUSH    B							;save single precision TO value in BCDE:
    2248/     7D0 : D5                      PUSH    D							;	build _FOR loop structure on stack
    2249/     7D1 : 01 41 10                LXI     B,1041H						;default SNGL constant 1.0 to BCDE 
    2250/     7D4 : 11 00 00                LXI     D,0
    2251/     7D7 : 7E                      MOV     A,M							;get next crunched char
    2252/     7D8 : FE CF                   CPI     _STEP						;0CFH
    2253/     7DA : 3E 01                   MVI     A,01H						;preload 1 (step value positive)
    2254/     7DC : C2 EB 07                JNZ     L_STEP_INT_SNGL_1			;brif no _STEP BCDE loaded
    2255/     7DF : CD AC 0D                CALL    L_FRMCHK      				;Main BASIC_1 evaluation routine _STEP value
    2256/     7E2 : E5                      PUSH    H							;save text ptr
    2257/     7E3 : CD 2A 35                CALL    R_CSNG_FUN				    ;CSNG function
    2258/     7E6 : CD 3D 34                CALL    R_SNGL_BCDE_EQ_FAC1      	;Load single precision FAC1 to BCDE
    2259/     7E9 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
    2260/     7EA :                     ;
    2261/     7EA :                     ; 2 items on stack at this entry point:
    2262/     7EA :                     ;	TO value (INT) and text ptr OR TO value (SNGL) and text ptr
    2263/     7EA :                     ;
    2264/     7EA :                     L_STEP_INT_SNGL:
    2265/     7EA : E1                      POP     H							;restore text ptr
    2266/     7EB :                     L_STEP_INT_SNGL_1:
    2267/     7EB : D5                      PUSH    D							;save SNGL STEP value in BCDE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 39 - 9/5/2025 20:20:35


    2268/     7EC : C5                      PUSH    B
    2269/     7ED : C5                      PUSH    B							;reserve 8 dummy bytes on stack
    2270/     7EE : C5                      PUSH    B
    2271/     7EF : C5                      PUSH    B
    2272/     7F0 : C5                      PUSH    B
    2273/     7F1 :                     ;	TO value (DBL) and text ptr
    2274/     7F1 :                     ;	A Step value sign
    2275/     7F1 :                     L_FOR_COMMON:
    2276/     7F1 : B7                      ORA     A							;step value sign
    2277/     7F2 : C2 F7 07                JNZ     +							;brif != 0
    2278/     7F5 : 3E 02                   MVI     A,02H						;special sign value if 0
    2279/     7F7 : 4F                  +	MOV     C,A							;save Step value sign in C
    2280/     7F8 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    2281/     7F9 : 47                      MOV     B,A							;save in B
    2282/     7FA : C5                      PUSH    B							;save B & C: build _FOR loop structure on stack
    2283/     7FB : E5                      PUSH    H							;save text ptr
    2284/     7FC : 2A 99 FB                LHLD    LSTVAR_R					;Address of last variable assigned
    2285/     7FF : E3                      XTHL								;swap LSTVAR_R and pushed text ptr: build _FOR loop structure on stack
    2286/     800 :                     L_PUSH_FOR:
    2287/     800 : 06 81                   MVI     B,_FOR						;push _FOR on stack: build _FOR loop structure on stack
    2288/     802 : C5                      PUSH    B
    2289/     803 : 33                      INX     SP							;1 byte only
    2290/     804 :                     ;
    2291/     804 :                     ; NEW STATEMENT FETCHER
    2292/     804 :                     ;
    2293/     804 :                     ; BACK HERE FOR NEW STATEMENT. CHARACTER POINTED TO BY [H,L]
    2294/     804 :                     ; ":" OR END-OF-LINE. THE ADDRESS OF THIS LOCATION IS
    2295/     804 :                     ; LEFT ON THE STACK WHEN A STATEMENT IS EXECUTED SO
    2296/     804 :                     ; IT CAN MERELY DO A RETURN WHEN IT IS DONE.
    2297/     804 :                     ;
    2298/     804 :                     L_NEWSTT:								;0804H
    2299/     804 : CD 6D 6D                CALL    R_CHECK_RS232_QUEUE      	;Check RS232 queue for pending characters
    2300/     807 : C4 28 40                CNZ     L_PROCESS_ON_INT			;calif TRUE: process ON COM interrupt
    2301/     80A : 3A 54 F6                LDA     PNDINT_R					;test PNDINT_R
    2302/     80D : B7                      ORA     A
    2303/     80E : C4 2B 40                CNZ     L_PROCESS_ON_INT_1			;calif != 0: Process ON KEY/TIME$/COM/MDM interrupts
    2304/     811 :                     L_NEWSTT_1:
    2305/     811 : CD F3 13                CALL    L_CHK_KEY_CTRL				;Test for CTRL-C or CTRL-S
    2306/     814 : 22 9B FB                SHLD    SAVTXT_R					;Most recent or currenly running line pointer
    2307/     817 : EB                      XCHG
    2308/     818 : 21 00 00                LXI     H,0
    2309/     81B : 39                      DAD     SP							;get SP into HL
    2310/     81C : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
    2311/     81F : EB                      XCHG
    2312/     820 : 7E                      MOV     A,M
    2313/     821 : FE 3A                   CPI     ':'
    2314/     823 : CA 3A 08                JZ      R_RUN_BASIC_AT_HL			;Start executing BASIC program at HL
    2315/     826 : B7                      ORA     A							;expect end of BASIC line here
    2316/     827 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    2317/     82A : 23                      INX     H							;next BASIC line
    2318/     82B :                     L_NEWSTT_2:								;entry point with HL loaded
    2319/     82B : 7E                      MOV     A,M							;test ptr at M: next BASIC line
    2320/     82C : 23                      INX     H
    2321/     82D : B6                      ORA     M
    2322/     82E : CA 28 04                JZ      L_END_OF_PROG				;brif end of BASIC program
    2323/     831 : 23                      INX     H							;advance to line number
    2324/     832 : (MACRO)             	GETDEFROMMNOINC						;get line number in DE
    2325/     835 : EB                      XCHG
    2326/     836 : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
    2327/     839 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 40 - 9/5/2025 20:20:35


    2328/     839 : =>FALSE             	if 0
    2329/     839 :                     	LDA	TRCFLG							;SEE IF TRACE IS ON
    2330/     839 :                     	ORA	A								;NON-ZERO MEANS YES
    2331/     839 :                     	JZ	L_NOTTRC						;SKIP THIS PRINTING
    2332/     839 :                     	PUSH	D							;SAVE THE TEXT POINTER
    2333/     839 :                     	MVI	A,'['							;FORMAT THE LINE NUMBER
    2334/     839 :                     	CALL	OUTDO						;OUTPUT IT
    2335/     839 :                     	CALL	LINPRT						;PRINT THE LINE # IN HL
    2336/     839 :                     	MVI	A,']'							;SOME MORE FORMATING
    2337/     839 :                     	CALL	OUTDO
    2338/     839 :                     	POP	D								;DE=TEXT POINTER
    2339/     839 :                     L_NOTTRC:
    2340/     839 : [2328]              	endif
    2341/     839 :                     
    2342/     839 : EB                      XCHG
    2343/     83A :                     ;
    2344/     83A :                     ; Start executing BASIC program at HL
    2345/     83A :                     ;
    2346/     83A :                     L_GONE:
    2347/     83A :                     R_RUN_BASIC_AT_HL:						;083AH
    2348/     83A : (MACRO)                 CHRGET								;Get next non-white char from M
    2349/     83B : 11 04 08                LXI     D,L_NEWSTT					;continuation code
    2350/     83E : D5                      PUSH    D
    2351/     83F :                     L_GONE3:
    2352/     83F :                     L_RUN_BASIC_PGRM_4:
    2353/     83F : C8                      RZ									;to continuation if char == 0
    2354/     840 :                     ;
    2355/     840 :                     ; Execute token in A, HL points to crunched text
    2356/     840 :                     ;
    2357/     840 :                     L_GONE2:
    2358/     840 :                     R_EXEC_INST_IN_A:						;0840H
    2359/     840 : D6 80                   SUI     _END						;80H
    2360/     842 : DA C3 09                JC      R_LET_STMT				    ;brif A < _END LET statement equivalent
    2361/     845 : FE 40                   CPI     _TAB_-_END					;40H
    2362/     847 : D2 F4 10                JNC     L_IS_MIDSTR					;brif 0 based token >= 40H: must be MID$
    2363/     84A :                     ;
    2364/     84A :                     ; A now 0 based token range 0 (_END)..3FH (_NEW)
    2365/     84A :                     ;
    2366/     84A : 07                      RLC									;times 2
    2367/     84B : 4F                      MOV     C,A							;zero extend to BC
    2368/     84C : 06 00                   MVI     B,00H
    2369/     84E : EB                      XCHG								;HL to DE
    2370/     84F : 21 62 02                LXI     H,R_BASIC_VECTOR_TBL		;Code Based. 
    2371/     852 : 09                      DAD     B							;index into R_BASIC_VECTOR_TBL
    2372/     853 : 4E                      MOV     C,M							;get function in BC
    2373/     854 : 23                      INX     H
    2374/     855 : 46                      MOV     B,M
    2375/     856 : C5                      PUSH    B							;push function on stack as return address
    2376/     857 : EB                      XCHG								;restore HL
    2377/     858 :                     ;
    2378/     858 :                     ; NEWSTT FALLS INTO CHRGET. THIS FETCHES THE FIRST CHAR AFTER
    2379/     858 :                     ; THE STATEMENT TOKEN AND THE CHRGET'S "RET" DISPATCHES TO STATEMENT; Fall through to get the next non-white char
    2380/     858 :                     ;
    2381/     858 :                     ; RST 10H routine with pre-increment of HL
    2382/     858 :                     ; Get next non-white char from M
    2383/     858 :                     ; Returns Carry flag if Numeric. Zero flag if 0.
    2384/     858 :                     ;
    2385/     858 :                     L_CHRGTR:								;0858H
    2386/     858 : 23                      INX     H
    2387/     859 : 7E                      MOV     A,M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 41 - 9/5/2025 20:20:35


    2388/     85A : FE 3A                   CPI     ':'							;IS IT END OF STATMENT OR BIGGER
    2389/     85C : D0                      RNC									;return if A >= ':' => non-numeric
    2390/     85D :                     L_CHRCON:
    2391/     85D : FE 20                   CPI     ' '
    2392/     85F : CA 58 08                JZ      L_CHRGTR					;skip space
    2393/     862 : FE 0B                   CPI     0BH
    2394/     864 : D2 6C 08                JNC     +							;brif A >= VT
    2395/     867 : FE 09                   CPI     09H
    2396/     869 : D2 58 08                JNC     L_CHRGTR					;brif A < VT && A >= TAB, incl. LF
    2397/     86C : FE 30               +   CPI     '0'							;Carry set if A < '0'
    2398/     86E : 3F                      CMC									;complement carry: Carry set if A >= '0'
    2399/     86F : 3C                      INR     A							;set flags except Carry
    2400/     870 : 3D                      DCR     A
    2401/     871 : C9                      RET
    2402/     872 :                     ;
    2403/     872 :                     ; DEF statement
    2404/     872 :                     ;
    2405/     872 :                     R_DEF_STMT:								;0872H
    2406/     872 : FE E0                   CPI     _INT						;0E0H
    2407/     874 : CA 86 08                JZ      R_DEFINT_STMT				;DEFINT statement
    2408/     877 : FE 44                   CPI     'D'
    2409/     879 : C2 8C 08                JNZ     L_TRY_DEFSNG				;brif != 'D':try DEFSNG or DEFSTR
    2410/     87C : (MACRO)                 CHRGET								;Get next non-white char from M
    2411/     87D : (MACRO)             	SYNCHK	'B'
    2412/     87F : (MACRO)             	SYNCHK	'L'
    2413/     881 :                     ;
    2414/     881 :                     ; DEFDBL statement
    2415/     881 :                     ;
    2416/     881 :                     R_DEFDBL_STMT:							;0881H
    2417/     881 : 1E 08                   MVI     E,08H
    2418/     883 : C3 A1 08                JMP     R_DECL_VAR_TYPE_E			;Declare variable at M to be type DBL
    2419/     886 :                     ;
    2420/     886 :                     ; DEFINT statement
    2421/     886 :                     ;
    2422/     886 :                     R_DEFINT_STMT:							;0886H
    2423/     886 : (MACRO)                 CHRGET								;Get next non-white char from M
    2424/     887 : 1E 02                   MVI     E,02H
    2425/     889 : C3 A1 08                JMP     R_DECL_VAR_TYPE_E			;Declare variable at M to be type INT
    2426/     88C :                     
    2427/     88C :                     L_TRY_DEFSNG:
    2428/     88C : (MACRO)             	SYNCHK	'S'							;53H
    2429/     88E : FE 4E                   CPI     'N'							;4EH
    2430/     890 : C2 9B 08                JNZ     L_VER_DEFSTR				;brif A != 'N'
    2431/     893 : (MACRO)                 CHRGET								;Get next non-white char from M
    2432/     894 : (MACRO)             	SYNCHK	'G'							;47H
    2433/     896 :                     ;
    2434/     896 :                     ; DEFSNG statement
    2435/     896 :                     ;
    2436/     896 :                     R_DEFSNG_STMT:							;0896H
    2437/     896 : 1E 04                   MVI     E,04H
    2438/     898 : C3 A1 08                JMP     R_DECL_VAR_TYPE_E			;Declare variable at M to be type SNGL
    2439/     89B :                     ;
    2440/     89B :                     ; Verify DEFSTR
    2441/     89B :                     ;
    2442/     89B :                     L_VER_DEFSTR:
    2443/     89B : (MACRO)             	SYNCHK	'T'							;54H
    2444/     89D : (MACRO)             	SYNCHK	'R'							;52H
    2445/     89F :                     ;
    2446/     89F :                     ; DEFSTR statement
    2447/     89F :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 42 - 9/5/2025 20:20:35


    2448/     89F :                     R_DEFSTR_STMT:							;089FH
    2449/     89F : 1E 03                   MVI     E,03H						;type STRING
    2450/     8A1 :                     ;
    2451/     8A1 :                     ; Declare variable at M to be type E
    2452/     8A1 :                     ;
    2453/     8A1 :                     R_DECL_VAR_TYPE_E:						;08A1H
    2454/     8A1 : CD F1 40                CALL    R_ISLET_M				    ;Check if M is alpha character
    2455/     8A4 : 01 46 04                LXI     B,R_GEN_SN_ERROR			;continuation function
    2456/     8A7 : C5                      PUSH    B
    2457/     8A8 : D8                      RC									;retif no alpha
    2458/     8A9 : D6 41                   SUI     'A'
    2459/     8AB : 4F                      MOV     C,A							;rescaled character base 0
    2460/     8AC : 47                      MOV     B,A							;save
    2461/     8AD : (MACRO)                 CHRGET								;Get next non-white char from M
    2462/     8AE : FE D1                   CPI     _MINUS_						;token '-': letter range
    2463/     8B0 : C2 BC 08                JNZ     +
    2464/     8B3 : (MACRO)                 CHRGET								;Get next non-white char from M: end range
    2465/     8B4 : CD F1 40                CALL    R_ISLET_M				    ;Check if M is alpha character
    2466/     8B7 : D8                      RC									;retif no alpha
    2467/     8B8 : D6 41                   SUI     'A'							;rescale character base 0
    2468/     8BA : 47                      MOV     B,A							;save to B
    2469/     8BB : (MACRO)                 CHRGET								;Get next non-white char from M
    2470/     8BC : 78                  +	MOV     A,B							;end letter range
    2471/     8BD : 91                      SUB     C
    2472/     8BE : D8                      RC 									;brif A < C
    2473/     8BF : 3C                      INR     A							;make it a count
    2474/     8C0 : E3                      XTHL								;remove continuation address, save text ptr
    2475/     8C1 : 21 BA FB                LXI     H,DEFTBL_R				    ;DEF definition table
    2476/     8C4 : 06 00                   MVI     B,00H						;zero extend C to BC
    2477/     8C6 : 09                      DAD     B							;index
    2478/     8C7 : 73                  -	MOV     M,E							;set type
    2479/     8C8 : 23                      INX     H							;next letter
    2480/     8C9 : 3D                      DCR     A							;count
    2481/     8CA : C2 C7 08                JNZ     -
    2482/     8CD : E1                      POP     H							;restore text ptr
    2483/     8CE : 7E                      MOV     A,M							;next char
    2484/     8CF : FE 2C                   CPI     ','
    2485/     8D1 : C0                      RNZ									;retif done
    2486/     8D2 : (MACRO)                 CHRGET								;Get next non-white char from M
    2487/     8D3 : C3 A1 08                JMP     R_DECL_VAR_TYPE_E			;Declare another variable at M to be type E
    2488/     8D6 :                     
    2489/     8D6 :                     L_EVAL_POS_EXPR_PREINC:
    2490/     8D6 : (MACRO)                 CHRGET								;pre-increment
    2491/     8D7 :                     L_EVAL_POS_EXPR:						;Evaluate positive expression at M-1
    2492/     8D7 : CD 13 11                CALL    L_GETIN2					;Evaluate expression at M-1 to DE
    2493/     8DA : F0                      RP									;retif positive result
    2494/     8DB :                     ;
    2495/     8DB :                     ; Generate FC error
    2496/     8DB :                     ;
    2497/     8DB :                     R_GEN_FC_ERROR:							;08DBH
    2498/     8DB : 1E 05                   MVI     E,05H
    2499/     8DD : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 5
    2500/     8E0 :                     ;
    2501/     8E0 :                     ; Evaluate line number text at M
    2502/     8E0 :                     ;
    2503/     8E0 :                     LINGET:
    2504/     8E0 :                     R_EVAL_LINE_NUM:						;08E0H
    2505/     8E0 : 7E                      MOV     A,M							;next char
    2506/     8E1 : FE 2E                   CPI     '.'
    2507/     8E3 : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 43 - 9/5/2025 20:20:35


    2508/     8E4 : 2A A1 FB                LHLD    DOT_R						;preload Most recent used or entered line number in DE
    2509/     8E7 : EB                      XCHG
    2510/     8E8 : CA 58 08                JZ      L_CHRGTR					;brif period: Get next non-white char from M and return
    2511/     8EB :                     ;
    2512/     8EB :                     ; L_LINGET READS A LINE # FROM THE CURRENT TEXT POSITION
    2513/     8EB :                     ;
    2514/     8EB :                     ; LINE NUMBERS RANGE FROM 0 TO 65529
    2515/     8EB :                     ;
    2516/     8EB :                     ; THE ANSWER IS RETURNED IN [D,E].
    2517/     8EB :                     ; [H,L] IS UPDATED TO POINT TO THE TERMINATING CHARACTER
    2518/     8EB :                     ; AND [A] CONTAINS THE TERMINATING CHARACTER WITH CONDITION
    2519/     8EB :                     ; CODES SET UP TO REFLECT ITS VALUE.
    2520/     8EB :                     ;
    2521/     8EB :                     ; OUT:
    2522/     8EB :                     ;	A			TERMINATING CHARACTER
    2523/     8EB :                     ;	carry		FALSE if not numeric
    2524/     8EB :                     ;				TRUE if number overflow
    2525/     8EB :                     ;	DE			binary line number
    2526/     8EB :                     ;
    2527/     8EB :                     L_LINGET:								;08EBH
    2528/     8EB : 2B                      DCX     H							;correct for PREINC
    2529/     8EC :                     L_LINGET_PREINC:					    ;08ECH
    2530/     8EC : 11 00 00                LXI     D,0							;clear accumulated line number
    2531/     8EF :                     L_MORLIN:
    2532/     8EF : (MACRO)             	CHRGET								;Get next non-white char from M
    2533/     8F0 : D0                      RNC									;Return if not ASCII Digit '0-9'
    2534/     8F1 : E5                      PUSH    H							;save txt ptr
    2535/     8F2 : F5                      PUSH    PSW							;save new digit
    2536/     8F3 : 21 98 19                LXI     H,1998H						;Load value of 65520 / 10
    2537/     8F6 : (MACRO)                 COMPAR								;Compare current binary number and 1998H: HL - DE
    2538/     8F7 : DA 0C 09                JC      L_POPHSR					;brif line # would be too big. FORCE CALLER TO SEE DIGIT AND GIVE SYNTAX ERROR
    2539/     8FA : 62                      MOV     H,D							;intermediate result from DE
    2540/     8FB : 6B                      MOV     L,E
    2541/     8FC : 19                      DAD     D							;x2
    2542/     8FD : 29                      DAD     H							;x4
    2543/     8FE : 19                      DAD     D							;x5
    2544/     8FF : 29                      DAD     H							;x10
    2545/     900 : F1                      POP     PSW							;restore new digit
    2546/     901 : D6 30                   SUI     '0'							;rebase
    2547/     903 : 5F                      MOV     E,A							;zero extend to DE
    2548/     904 : 16 00                   MVI     D,00H
    2549/     906 : 19                      DAD     D							;add new digit
    2550/     907 : EB                      XCHG								;new intermediate result in DE	
    2551/     908 : E1                      POP     H							;restore txt ptr
    2552/     909 : C3 EF 08                JMP     L_MORLIN					;Loop
    2553/     90C :                     L_POPHSR:
    2554/     90C : F1                  	POP     PSW							;restore new digit
    2555/     90D : E1                      POP     H							;restore txt ptr
    2556/     90E : C9                      RET
    2557/     90F :                     ;
    2558/     90F :                     ; RUN statement
    2559/     90F :                     ;
    2560/     90F :                     ; IN:
    2561/     90F :                     ;	Z		set is end of statement
    2562/     90F :                     ;
    2563/     90F :                     R_RUN_STMT:								;090FH
    2564/     90F : CA 28 3F                JZ      R_INIT_BASIC_VARS			;brif end of statement:
    2565/     912 :                     										;	Initialize BASIC Variables for new execution
    2566/     912 : D2 6E 4D                JNC     R_RUN_STMT_2				;RUN_2 statement
    2567/     915 : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 44 - 9/5/2025 20:20:35


    2568/     918 : 01 04 08                LXI     B,L_NEWSTT					;continuation function
    2569/     91B : C3 35 09                JMP     L_RUNC2						;do GOTO
    2570/     91E :                     ;
    2571/     91E :                     ; GOSUB statement
    2572/     91E :                     ;
    2573/     91E :                     R_GOSUB_STMT:							;091EH
    2574/     91E : 0E 03                   MVI     C,03H
    2575/     920 : CD FF 3E                CALL    R_GETSTK					;Test for 3 units free in stack space
    2576/     923 : C1                      POP     B							;remove return address
    2577/     924 : E5                      PUSH    H							;save txt ptr
    2578/     925 : E5                      PUSH    H							;prepare XTHL
    2579/     926 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    2580/     929 : E3                      XTHL								;CURLIN_R to stack, txt ptr to HL	
    2581/     92A : 01 00 00                LXI     B,0
    2582/     92D : C5                      PUSH    B
    2583/     92E : 01 04 08                LXI     B,L_NEWSTT					;continuation function
    2584/     931 : 3E 8C                   MVI     A,_GOSUB
    2585/     933 : F5                      PUSH    PSW
    2586/     934 : 33                      INX     SP							;only push byte _GOSUB
    2587/     935 :                     L_RUNC2:
    2588/     935 : C5                      PUSH    B							;push continuation function address
    2589/     936 :                     ;
    2590/     936 :                     ; GOTO statement
    2591/     936 :                     ;
    2592/     936 :                     R_GOTO_STMT:							;0936H
    2593/     936 : CD EB 08                CALL    L_LINGET					;Convert line number at M to binary in DE. 
    2594/     939 :                     L_GOTO_STMT_1:
    2595/     939 : CD A0 09                CALL    R_REM_STMT				    ;REM statement
    2596/     93C : 23                      INX     H							;next char
    2597/     93D : E5                      PUSH    H							;save txt ptr
    2598/     93E : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    2599/     941 : (MACRO)                 COMPAR								;Compare Target Line number (DE) and CURLIN_R (HL): HL - DE
    2600/     942 : E1                      POP     H							;restore txt ptr
    2601/     943 :                     ; if target line number is > current line number, start search at current line number
    2602/     943 : DC 2B 06                CC      L_FNDLIN_2     				;calif CURLIN_R < Line number: Find line number in DE starting at HL
    2603/     946 :                     ; else start search from the beginning
    2604/     946 : D4 28 06                CNC     L_FNDLIN					;calif carry clear: Find line number in DE
    2605/     949 : 60                      MOV     H,B
    2606/     94A : 69                      MOV     L,C
    2607/     94B : 2B                      DCX     H
    2608/     94C : D8                      RC
    2609/     94D :                     ;
    2610/     94D :                     ; Generate UL error
    2611/     94D :                     ;
    2612/     94D :                     R_GEN_UL_ERROR:							;094DH
    2613/     94D : 1E 08                   MVI     E,08H
    2614/     94F : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error in E
    2615/     952 :                     
    2616/     952 :                     ; 
    2617/     952 :                     ; GOSUB to BASIC line due to ON KEY/TIME$/MDM/COM
    2618/     952 :                     ; 
    2619/     952 :                     L_GOSUB_ON_INTR:
    2620/     952 : E5                      PUSH    H							;Push line # to Stack
    2621/     953 : E5                      PUSH    H							;Push again to preserve through XTHL
    2622/     954 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    2623/     957 : E3                      XTHL								;Put Current line number on Stack. HL=new line
    2624/     958 : C5                      PUSH    B							;save BC
    2625/     959 : 3E 8C                   MVI     A,_GOSUB					;8CH
    2626/     95B : F5                      PUSH    PSW							;Push GOSUB Token to Stack
    2627/     95C : 33                      INX     SP							;Remove flags from Stack. Keep only GOSUB token
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 45 - 9/5/2025 20:20:35


    2628/     95D : EB                      XCHG								;HL now has pointer to GOSUB line
    2629/     95E : 2B                      DCX     H							;Decrement to save as currently running line pointer
    2630/     95F : 22 9B FB                SHLD    SAVTXT_R					;Most recent or currenly running line pointer
    2631/     962 : 23                      INX     H							;Increment back to beginning of line
    2632/     963 : C3 2B 08                JMP     L_NEWSTT_2					;Jump into Execute BASIC program loop
    2633/     966 :                     ;
    2634/     966 :                     ; RETURN statement
    2635/     966 :                     ;
    2636/     966 :                     R_RETURN_STMT:							;0966H
    2637/     966 : C0                      RNZ
    2638/     967 : 16 FF                   MVI     D,0FFH						;guaranteed no match
    2639/     969 : CD 01 04                CALL    FNDFOR						;Pop return address for NEXT or RETURN
    2640/     96C : FE 8C                   CPI     _GOSUB
    2641/     96E : CA 72 09                JZ      +
    2642/     971 : 2B                      DCX     H							;backup ptr if token == _GOSUB
    2643/     972 : F9                  +	SPHL								;HL to SP: remove any FOR structure
    2644/     973 : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
    2645/     976 : 1E 03                   MVI     E,03H						;code for RG Error
    2646/     978 : C2 5D 04                JNZ     R_GEN_ERR_IN_E				;Generate RG error
    2647/     97B : E1                      POP     H
    2648/     97C : 7C                      MOV     A,H							;test HL
    2649/     97D : B5                      ORA     L
    2650/     97E : CA 87 09                JZ      +
    2651/     981 : 7E                      MOV     A,M
    2652/     982 : E6 01                   ANI     01H							;test bit 0
    2653/     984 : C4 C7 3F                CNZ     L_UPD_INTR_TBL				;calif bit 0 not set: update System Interrupt Table entry
    2654/     987 : E1                  +	POP     H							;restore text ptr
    2655/     988 : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
    2656/     98B : 23                      INX     H							;test for 0FFFFH
    2657/     98C : 7C                      MOV     A,H
    2658/     98D : B5                      ORA     L
    2659/     98E : C2 98 09                JNZ     +							;brif text ptr != 0FFFFH
    2660/     991 : 3A 97 FB                LDA     PROFLG_R					;test PROFLG_R
    2661/     994 : B7                      ORA     A
    2662/     995 : C2 01 05                JNZ     R_POP_GO_BASIC_RDY       	;brif PROFLG_R != 0: Pop stack and vector to BASIC ready
    2663/     998 : 21 04 08            +	LXI     H,L_NEWSTT					;set as continuation function. Restore HL
    2664/     99B : E3                      XTHL
    2665/     99C : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    2666/     99D :                     L_DATA_STMT_POPHL:
    2667/     99D : E1                      POP     H
    2668/     99E :                     ;
    2669/     99E :                     ; DATA statement
    2670/     99E :                     ;
    2671/     99E :                     ; IN:
    2672/     99E :                     ;	D		number of expected DATA items
    2673/     99E :                     ; OUT:
    2674/     99E :                     ;	HL		text ptr
    2675/     99E :                     ;
    2676/     99E :                     R_DATA_STMT:							;099EH
    2677/     99E :                     ;Tricked out LXI B,0E3AH, NOP: skip MVI C,0 but also loads C with ':' (3AH)
    2678/     99E : 01 3A                   DB      01H,3AH						
    2679/     9A0 :                     ;
    2680/     9A0 :                     ; REM statement
    2681/     9A0 :                     ; Also called for ELSE statement
    2682/     9A0 :                     ;
    2683/     9A0 :                     ; IN:
    2684/     9A0 :                     ;	D		number of expected DATA items
    2685/     9A0 :                     ;
    2686/     9A0 :                     R_REM_STMT:								;09A0H
    2687/     9A0 : 0E 00                   MVI     C,00H						;stop at end of line. TODO LXI B,0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 46 - 9/5/2025 20:20:35


    2688/     9A2 : 06 00                   MVI     B,00H
    2689/     9A4 :                     L_REM1:
    2690/     9A4 : 79                      MOV     A,C							;swap B & C					
    2691/     9A5 : 48                      MOV     C,B
    2692/     9A6 : 47                      MOV     B,A
    2693/     9A7 :                     L_REM2:
    2694/     9A7 : 7E                      MOV     A,M							;end of BASIC line?
    2695/     9A8 : B7                      ORA     A
    2696/     9A9 : C8                      RZ									;retif end of line
    2697/     9AA : B8                      CMP     B
    2698/     9AB : C8                      RZ									;retif A == B
    2699/     9AC : 23                      INX     H							;next txt ptr
    2700/     9AD : FE 22                   CPI     '"'							;22H
    2701/     9AF : CA A4 09                JZ      L_REM1						;brif string
    2702/     9B2 : D6 8A                   SUI     8AH							;_IF ??
    2703/     9B4 : C2 A7 09                JNZ     L_REM2						;brif not _IF, continue scanning
    2704/     9B7 :                     ; IF found
    2705/     9B7 : B8                      CMP     B							;carry set if A < B
    2706/     9B8 : 8A                      ADC     D
    2707/     9B9 : 57                      MOV     D,A
    2708/     9BA : C3 A7 09                JMP     L_REM2						;continue
    2709/     9BD :                     ;
    2710/     9BD :                     ;
    2711/     9BD :                     L_ASSIGN:								;continuation function from R_LINE_INPUT_FILE
    2712/     9BD : F1                      POP     PSW							;type of last variable used
    2713/     9BE : C6 03                   ADI		03H							;restore type
    2714/     9C0 : C3 D6 09                JMP     L_LET_1
    2715/     9C3 :                     ;
    2716/     9C3 :                     ; LET statement: assignment
    2717/     9C3 :                     ;
    2718/     9C3 :                     R_LET_STMT:								;09C3H
    2719/     9C3 : CD 90 47                CALL    R_FIND_VAR_ADDR				;Find address of variable at M and store in DE
    2720/     9C6 : (MACRO)             	SYNCHK	_EQUAL_						;'=' token
    2721/     9C8 : EB                      XCHG
    2722/     9C9 : 22 99 FB                SHLD    LSTVAR_R					;store DE as Address of last variable assigned
    2723/     9CC : EB                      XCHG
    2724/     9CD : D5                      PUSH    D							;save variable address (lvalue)
    2725/     9CE : 3A 65 FB                LDA     VALTYP_R					;Type of assignment variable
    2726/     9D1 : F5                      PUSH    PSW							;save Type of assignment variable
    2727/     9D2 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine for expression
    2728/     9D5 : F1                      POP     PSW							;restore Type of assignment variable
    2729/     9D6 :                     L_LET_1:								;A contains Type of assignment variable
    2730/     9D6 : E3                      XTHL								;swap pushed variable address and HL (txt ptr)
    2731/     9D7 :                     L_LET_2:
    2732/     9D7 : 47                      MOV     B,A							;Type of assignment variable to B
    2733/     9D8 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used (or expression)
    2734/     9DB : B8                      CMP     B							;do types match?
    2735/     9DC : 78                      MOV     A,B							;assignment variable type rules
    2736/     9DD : CA E6 09                JZ      +							;brif same
    2737/     9E0 : CD D7 10                CALL    L_DO_MATH_VCTR_TBL			;match types
    2738/     9E3 : 3A 65 FB                LDA     VALTYP_R					;Type of assignment variable
    2739/     9E6 : 11 18 FC            +	LXI     D,DFACLO_R				    ;preload FAC1
    2740/     9E9 : FE 02                   CPI     02H							;integer type
    2741/     9EB : C2 F1 09                JNZ     +							;brif ! integer type
    2742/     9EE :                     ; assignment is integer type
    2743/     9EE : 11 1A FC                LXI     D,IFACLO_R				    ;FAC1 for integers
    2744/     9F1 :                     ;DE now has appropriate FAC address
    2745/     9F1 : E5                  +	PUSH    H							;save lvalue ptr
    2746/     9F2 : FE 03                   CPI     03H							;string type?
    2747/     9F4 : C2 29 0A                JNZ     L_LET_5						;brif not string type
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 47 - 9/5/2025 20:20:35


    2748/     9F7 :                     ;
    2749/     9F7 :                     ; assignment is string type
    2750/     9F7 :                     ;
    2751/     9F7 : 2A 1A FC                LHLD    IFACLO_R					;[FAC1]
    2752/     9FA : E5                      PUSH    H							;save string descriptor
    2753/     9FB : 23                      INX     H							;skip length
    2754/     9FC : (MACRO)             	GETDEFROMMNOINC						;string data ptr to DE
    2755/     9FF : 21 84 F6                LXI     H,INPBUF_R-1
    2756/     A02 : (MACRO)                 COMPAR								;INPBUF_R-1 - DE
    2757/     A03 : DA 1D 0A                JC      L_LET_3						;brif INPBUF_R-1 < DE
    2758/     A06 : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer
    2759/     A09 : (MACRO)                 COMPAR								;STRGEND_R - DE
    2760/     A0A : D1                      POP     D							;pop string descriptor
    2761/     A0B : D2 25 0A                JNC     L_LET_4						;brif STRGEND_R >= DE
    2762/     A0E : 21 88 FB                LXI     H,STRSTKEND_R
    2763/     A11 : (MACRO)                 COMPAR								;Compare string descriptor and STRSTKEND_R: HL - DE
    2764/     A12 : DA 1C 0A                JC      +							;brif STRSTKEND_R < DE
    2765/     A15 : 21 6A FB                LXI     H,TEMPPT_R+1				;0FB6AH String Stack address+1
    2766/     A18 : (MACRO)                 COMPAR								;TEMPPT_R+1 - DE
    2767/     A19 : DA 25 0A                JC      L_LET_4						;brif TEMPPT_R+1 < DE: String Stack underflow??
    2768/     A1C : (MACRO)             +	SKIP_BYTE_INST						;Sets A to 0AFH
    2769/     A1D :                     L_LET_3:
    2770/     A1D : D1                      POP     D
    2771/     A1E : CD 35 29                CALL    L_FRETMS				;POP string from string stack if same as DE
    2772/     A21 : EB                      XCHG								;swap assigned variable ptr (lvalue) and recent string descriptor
    2773/     A22 : CD 47 27                CALL    L_STR_1
    2774/     A25 :                     L_LET_4:
    2775/     A25 : CD 35 29                CALL    L_FRETMS				;POP string from string stack if same as DE
    2776/     A28 : E3                      XTHL								;swap string descriptor ptr and lvalue
    2777/     A29 :                     L_LET_5:
    2778/     A29 : CD 65 34                CALL    R_MOVE_TYP_BYTES_INC		;VALTYP_R sized assignment from (DE) to M
    2779/     A2C : D1                      POP     D							;restore expression (lvalue or string descriptor ptr)
    2780/     A2D : E1                      POP     H							;restore BASIC txt ptr
    2781/     A2E : C9                      RET
    2782/     A2F :                     ;
    2783/     A2F :                     ; ON statement
    2784/     A2F :                     ;
    2785/     A2F :                     R_ON_STMT:								;0A2FH
    2786/     A2F : FE 94                   CPI     _ERROR						;94H
    2787/     A31 : C2 5B 0A                JNZ     R_ON_KEY_STMT				;ON KEY/TIME/COM/MDM GOSUB routine
    2788/     A34 :                     ;
    2789/     A34 :                     ; ON ERROR statement
    2790/     A34 :                     ;
    2791/     A34 :                     R_ON_ERROR_STMT:						;0A34H
    2792/     A34 : (MACRO)                 CHRGET								;Get next non-white char from M
    2793/     A35 : (MACRO)             	SYNCHK	_GOTO						;88H
    2794/     A37 : CD EB 08                CALL    L_LINGET				;Convert line number at M to binary in DE
    2795/     A3A : 7A                      MOV     A,D							;test result
    2796/     A3B : B3                      ORA     E
    2797/     A3C : CA 48 0A                JZ      +							;brif line number == 0
    2798/     A3F : CD 26 06                CALL    L_SCNLIN_2
    2799/     A42 : 50                      MOV     D,B
    2800/     A43 : 59                      MOV     E,C
    2801/     A44 : E1                      POP     H
    2802/     A45 : D2 4D 09                JNC     R_GEN_UL_ERROR				;Generate UL error
    2803/     A48 : EB                  +	XCHG
    2804/     A49 : 22 A5 FB                SHLD    ONERR_R						;Address of ON ERROR routine
    2805/     A4C : EB                      XCHG
    2806/     A4D : D8                      RC
    2807/     A4E : 3A A7 FB                LDA     PRGRUN_R					;BASIC Program Running Flag
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 48 - 9/5/2025 20:20:35


    2808/     A51 : B7                      ORA     A
    2809/     A52 : 7B                      MOV     A,E
    2810/     A53 : C8                      RZ
    2811/     A54 : 3A 72 F6                LDA     ERRFLG_R					;Last Error code
    2812/     A57 : 5F                      MOV     E,A							;argument to L_GEN_ERR_IN_E_1
    2813/     A58 : C3 8A 04                JMP     L_GEN_ERR_IN_E_1
    2814/     A5B :                     ;
    2815/     A5B :                     ; ON KEY/TIME/COM/MDM GOSUB routine
    2816/     A5B :                     ;
    2817/     A5B :                     R_ON_KEY_STMT:							;0A5BH
    2818/     A5B : CD FC 1A                CALL    R_DET_DEVICE_ARG			;Determine device (KEY/TIME/COM/MDM) for ON GOSUB
    2819/     A5E : DA 94 0A                JC      R_ON_TIME_STMT				;ON TIME$ handler
    2820/     A61 : C5                      PUSH    B
    2821/     A62 : (MACRO)                 CHRGET								;Get next non-white char from M
    2822/     A63 : (MACRO)             	SYNCHK	_GOSUB						;8CH
    2823/     A65 : AF                      XRA     A
    2824/     A66 :                     L_LOOPONKEY:
    2825/     A66 : C1                      POP     B
    2826/     A67 : C5                      PUSH    B
    2827/     A68 : B9                      CMP     C
    2828/     A69 : D2 46 04                JNC     R_GEN_SN_ERROR				;Generate Syntax error
    2829/     A6C : F5                      PUSH    PSW
    2830/     A6D : CD EB 08                CALL    L_LINGET					;Convert line number at M to binary in DE
    2831/     A70 : 7A                      MOV     A,D
    2832/     A71 : B3                      ORA     E
    2833/     A72 : CA 7E 0A                JZ      +
    2834/     A75 : CD 26 06                CALL    L_SCNLIN_2
    2835/     A78 : 50                      MOV     D,B
    2836/     A79 : 59                      MOV     E,C
    2837/     A7A : E1                      POP     H
    2838/     A7B : D2 4D 09                JNC     R_GEN_UL_ERROR				;Generate UL error
    2839/     A7E : F1                  +	POP     PSW
    2840/     A7F : C1                      POP     B
    2841/     A80 : F5                      PUSH    PSW
    2842/     A81 : 80                      ADD     B
    2843/     A82 : C5                      PUSH    B
    2844/     A83 : CD 22 1B                CALL    R_ONCOM_STMT				;ON COM handler
    2845/     A86 : 2B                      DCX     H
    2846/     A87 : (MACRO)                 CHRGET								;Get next non-white char from M
    2847/     A88 : C1                      POP     B
    2848/     A89 : D1                      POP     D
    2849/     A8A : C8                      RZ
    2850/     A8B : C5                      PUSH    B
    2851/     A8C : D5                      PUSH    D
    2852/     A8D : (MACRO)             	SYNCHK	','
    2853/     A8F : F1                      POP     PSW
    2854/     A90 : 3C                      INR     A
    2855/     A91 : C3 66 0A                JMP     L_LOOPONKEY					;loop
    2856/     A94 :                     ;
    2857/     A94 :                     ; ON TIME$ handler
    2858/     A94 :                     ;
    2859/     A94 :                     R_ON_TIME_STMT:							;0A94H
    2860/     A94 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    2861/     A97 : 7E                      MOV     A,M							;get token
    2862/     A98 : 47                      MOV     B,A							;save token
    2863/     A99 : FE 8C                   CPI     _GOSUB						;8CH
    2864/     A9B : CA A1 0A                JZ      +
    2865/     A9E : (MACRO)             	SYNCHK	_GOTO						;88H
    2866/     AA0 : 2B                      DCX     H							;backup txt ptr
    2867/     AA1 : 4B                  +	MOV     C,E
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 49 - 9/5/2025 20:20:35


    2868/     AA2 : 0D                  -	DCR     C
    2869/     AA3 : 78                      MOV     A,B							;token
    2870/     AA4 : CA 40 08                JZ      R_EXEC_INST_IN_A			;Execute instruction in A), HL points to args
    2871/     AA7 : CD EC 08                CALL    L_LINGET_PREINC     		;Convert ASCII number at M+1 to binary
    2872/     AAA : FE 2C                   CPI     ','
    2873/     AAC : C0                      RNZ
    2874/     AAD : C3 A2 0A                JMP     -
    2875/     AB0 :                     ;
    2876/     AB0 :                     ; RESUME statement
    2877/     AB0 :                     ;
    2878/     AB0 :                     R_RESUME_STMT:							;0AB0H
    2879/     AB0 : 3A A7 FB                LDA     PRGRUN_R					;BASIC Program Running Flag
    2880/     AB3 : B7                      ORA     A
    2881/     AB4 : C2 C0 0A                JNZ     +							;brif Basic Program running
    2882/     AB7 : 32 A5 FB                STA     ONERR_R						;Clear ON ERROR routine
    2883/     ABA : 32 A6 FB                STA     ONERR_R+1
    2884/     ABD : C3 52 04                JMP     R_GEN_RW_ERROR				;Generate RW error ("Resume without error")
    2885/     AC0 : 3C                  +	INR     A
    2886/     AC1 : 32 72 F6                STA     ERRFLG_R					;Last Error code
    2887/     AC4 : 7E                      MOV     A,M
    2888/     AC5 : FE 82                   CPI     _NEXT						;82H
    2889/     AC7 : CA DB 0A                JZ      L_RESNXT
    2890/     ACA : CD EB 08                CALL    L_LINGET					;Convert line number at M to binary in DE
    2891/     ACD : C0                      RNZ									
    2892/     ACE : 7A                      MOV     A,D
    2893/     ACF : B3                      ORA     E
    2894/     AD0 : CA E0 0A                JZ		+
    2895/     AD3 : CD 39 09                CALL    L_GOTO_STMT_1
    2896/     AD6 : AF                      XRA     A
    2897/     AD7 : 32 A7 FB                STA     PRGRUN_R					;clear BASIC Program Running Flag
    2898/     ADA : C9                      RET
    2899/     ADB :                     
    2900/     ADB :                     L_RESNXT:
    2901/     ADB : (MACRO)                 CHRGET								;Get next non-white char from M
    2902/     ADC : C0                      RNZ
    2903/     ADD : C3 E5 0A                JMP     L_RESTXT
    2904/     AE0 :                     
    2905/     AE0 : AF                  +	XRA     A
    2906/     AE1 : 32 A7 FB                STA     PRGRUN_R					;Clear BASIC Program Running Flag
    2907/     AE4 : 3C                      INR     A							;now 1
    2908/     AE5 :                     L_RESTXT:
    2909/     AE5 : 2A A3 FB                LHLD    ERRTXT_R					;Pointer to occurance of error
    2910/     AE8 : EB                      XCHG
    2911/     AE9 : 2A 9F FB                LHLD    ERRLIN_R					;Line number of last error
    2912/     AEC : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
    2913/     AEF : EB                      XCHG
    2914/     AF0 : C0                      RNZ									;GO TO L_NEWSTT IF JUST "RESUME"
    2915/     AF1 : 7E                      MOV     A,M
    2916/     AF2 : B7                      ORA     A
    2917/     AF3 : C2 FA 0A                JNZ     L_NOTBGL
    2918/     AF6 : 23                      INX     H
    2919/     AF7 : 23                      INX     H
    2920/     AF8 : 23                      INX     H
    2921/     AF9 : 23                      INX     H
    2922/     AFA :                     L_NOTBGL:
    2923/     AFA : 23                  	INX     H
    2924/     AFB : 7A                      MOV     A,D
    2925/     AFC : A3                      ANA     E
    2926/     AFD : 3C                      INR     A
    2927/     AFE : C2 08 0B                JNZ     +
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 50 - 9/5/2025 20:20:35


    2928/     B01 : 3A 97 FB                LDA     PROFLG_R
    2929/     B04 : 3D                      DCR     A
    2930/     B05 : CA B3 40                JZ      L_STPEND					;brif PROFLG_R == 1
    2931/     B08 : AF                  +	XRA     A
    2932/     B09 : 32 A7 FB                STA     PRGRUN_R					;BASIC Program Running Flag
    2933/     B0C : C3 9E 09                JMP     R_DATA_STMT				    ;GET NEXT STMT
    2934/     B0F :                     ;
    2935/     B0F :                     ; ERROR statement
    2936/     B0F :                     ;
    2937/     B0F :                     R_ERROR_STMT:							;0B0FH
    2938/     B0F : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    2939/     B12 : C0                      RNZ
    2940/     B13 : B7                      ORA     A
    2941/     B14 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
    2942/     B17 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error in E
    2943/     B1A :                     ;
    2944/     B1A :                     ; IF statement
    2945/     B1A :                     ;
    2946/     B1A :                     R_IF_STMT:								;0B1AH
    2947/     B1A : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    2948/     B1D : 7E                      MOV     A,M
    2949/     B1E : FE 2C                   CPI     ','
    2950/     B20 : CC 58 08                CZ      L_CHRGTR					;Get next non-white char from M
    2951/     B23 : FE 88                   CPI     _GOTO						;88H
    2952/     B25 : CA 2B 0B                JZ      +
    2953/     B28 : (MACRO)             	SYNCHK	_THEN						;0CDH
    2954/     B2A : 2B                      DCX     H							;backup text ptr
    2955/     B2B : E5                  +	PUSH    H							;save text ptr
    2956/     B2C : CD 11 34                CALL    L_VSIGN						;Determine sign of last variable used
    2957/     B2F : E1                      POP     H							;restore text ptr
    2958/     B30 : CA 3A 0B                JZ      L_IF_STMT_2
    2959/     B33 :                     L_IF_STMT_1:
    2960/     B33 : (MACRO)                 CHRGET								;Get next non-white char from M
    2961/     B34 : DA 36 09                JC      R_GOTO_STMT				    ;GOTO statement
    2962/     B37 : C3 3F 08                JMP     L_RUN_BASIC_PGRM_4
    2963/     B3A :                     
    2964/     B3A :                     L_IF_STMT_2:
    2965/     B3A : 16 01                   MVI     D,01H						;1 DATA item
    2966/     B3C : CD 9E 09            -	CALL    R_DATA_STMT				    ;DATA statement
    2967/     B3F : B7                      ORA     A
    2968/     B40 : C8                      RZ
    2969/     B41 : (MACRO)                 CHRGET								;Get next non-white char from M
    2970/     B42 : FE 91                   CPI     _ELSE						;91H
    2971/     B44 : C2 3C 0B                JNZ     -
    2972/     B47 : 15                      DCR     D
    2973/     B48 : C2 3C 0B                JNZ     -
    2974/     B4B : C3 33 0B                JMP     L_IF_STMT_1
    2975/     B4E :                     ;
    2976/     B4E :                     ; LPRINT statement
    2977/     B4E :                     ;
    2978/     B4E :                     R_LPRINT_STMT:							;0B4EH
    2979/     B4E : 3E 01                   MVI     A,01H
    2980/     B50 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
    2981/     B53 : C3 60 0B                JMP     L_PRINT_STMT_1
    2982/     B56 :                     ;
    2983/     B56 :                     ; PRINT statement
    2984/     B56 :                     ;
    2985/     B56 :                     R_PRINT_STMT:							;0B56H
    2986/     B56 : 0E 02                   MVI     C,02H						;indicated PRINT
    2987/     B58 : CD 2B 4F                CALL    L_VALIDATE_FILE_1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 51 - 9/5/2025 20:20:35


    2988/     B5B : FE 40                   CPI     '@'
    2989/     B5D : CC 5F 1D                CZ      L_PRINT_POS					;set new cursor Position
    2990/     B60 :                     L_PRINT_STMT_1:
    2991/     B60 : 2B                      DCX     H
    2992/     B61 : (MACRO)                 CHRGET								;Get next non-white char from M
    2993/     B62 : CC CB 4B                CZ      L_PRINT_CRLF
    2994/     B65 :                     L_PRINT_STMT_2:
    2995/     B65 : CA 39 0C                JZ      L_FINPRT
    2996/     B68 : FE C2                   CPI     _USING						;0C2H
    2997/     B6A : CA 91 49                JZ      R_USING_FUN				    ;USING function
    2998/     B6D : FE C0                   CPI     _TAB_						;0C0H
    2999/     B6F : CA 01 0C                JZ      R_TAB_STMT				    ;TAB statement
    3000/     B72 : E5                      PUSH    H
    3001/     B73 : FE 2C                   CPI     ','
    3002/     B75 : CA CD 0B                JZ      L_PRINT_STMT_6
    3003/     B78 : FE 3B                   CPI     ';'
    3004/     B7A : CA 34 0C                JZ      L_PRINT_NEXT
    3005/     B7D : C1                      POP     B
    3006/     B7E : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    3007/     B81 : E5                      PUSH    H
    3008/     B82 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    3009/     B83 : CA C6 0B                JZ      L_PRINT_STMT_5						;brif string
    3010/     B86 : CD E8 39                CALL    R_PRINT_FAC1_ZERO			;Convert binary number in FAC1 to ASCII at MBUFFER_R
    3011/     B89 : CD 6B 27                CALL    R_STRLTI_PREDEC_HL			;scan string
    3012/     B8C : 36 20                   MVI     M,' '
    3013/     B8E : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    3014/     B91 : 34                      INR     M
    3015/     B92 : CD 1A 42                CALL    L_TST_FCBLAST
    3016/     B95 : C2 C2 0B                JNZ     L_PRINT_STMT_4				;brif FCBLAST != 0
    3017/     B98 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    3018/     B9B : 3A 75 F6                LDA     PRTFLG_R					;Output device for RST 20H (0=screen)
    3019/     B9E : B7                      ORA     A
    3020/     B9F : CA AB 0B                JZ      +
    3021/     BA2 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
    3022/     BA5 : 86                      ADD     M
    3023/     BA6 : FE FF                   CPI     0FFH
    3024/     BA8 : C3 B9 0B                JMP     L_PRINT_STMT_3
    3025/     BAB : 3A 3C F6            +	LDA     LINWDT_R					;Active columns count (1-40)
    3026/     BAE : 47                      MOV     B,A
    3027/     BAF : 3C                      INR     A
    3028/     BB0 : CA C2 0B                JZ      L_PRINT_STMT_4
    3029/     BB3 : 3A 88 F7                LDA     CURHPOS_R					;Horiz. position of cursor (0-39)
    3030/     BB6 : 86                      ADD     M
    3031/     BB7 : 3D                      DCR     A
    3032/     BB8 : B8                      CMP     B
    3033/     BB9 :                     L_PRINT_STMT_3:
    3034/     BB9 : DA C2 0B                JC      L_PRINT_STMT_4
    3035/     BBC : CC D1 4B                CZ      L_RECORD_CR
    3036/     BBF : C4 CB 4B                CNZ     L_PRINT_CRLF
    3037/     BC2 :                     L_PRINT_STMT_4:
    3038/     BC2 : CD B4 27                CALL    L_PRINT_LST_STR
    3039/     BC5 : B7                      ORA     A
    3040/     BC6 :                     L_PRINT_STMT_5:
    3041/     BC6 : CC B4 27                CZ      L_PRINT_LST_STR
    3042/     BC9 : E1                      POP     H
    3043/     BCA : C3 60 0B                JMP     L_PRINT_STMT_1
    3044/     BCD :                     L_PRINT_STMT_6:
    3045/     BCD : 01 08 00                LXI     B,08H
    3046/     BD0 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    3047/     BD3 : 09                      DAD     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 52 - 9/5/2025 20:20:35


    3048/     BD4 : CD 1A 42                CALL    L_TST_FCBLAST
    3049/     BD7 : 7E                      MOV     A,M							;HL == 8 if !FCBLAST_R. A unused if !FCBLAST_R
    3050/     BD8 : C2 F8 0B                JNZ     L_PRINT_STMT_8
    3051/     BDB : 3A 75 F6                LDA     PRTFLG_R					;Output device for RST 20H (0=screen)
    3052/     BDE : B7                      ORA     A
    3053/     BDF : CA EA 0B                JZ      +							;brif screen output
    3054/     BE2 :                     ; PRTFLG_R != 0
    3055/     BE2 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
    3056/     BE5 : FE EE                   CPI     238							;0EEH
    3057/     BE7 : C3 F2 0B                JMP     L_PRINT_STMT_7				;carry if LPTPOS_R < 238
    3058/     BEA :                     ; screen output
    3059/     BEA : 3A 76 F6            +	LDA     COLWRAP_R					;comma value for print
    3060/     BED : 47                      MOV     B,A							;save in B
    3061/     BEE : 3A 88 F7                LDA     CURHPOS_R					;Horiz. position of cursor (0-39)
    3062/     BF1 : B8                      CMP     B							;result in carry if CURHPOS_R < COLWRAP_R
    3063/     BF2 :                     L_PRINT_STMT_7:
    3064/     BF2 : D4 CB 4B                CNC     L_PRINT_CRLF				;calif (LPTPOS_R >= 238) or (CURHPOS_R >= COLWRAP_R)
    3065/     BF5 : D2 34 0C                JNC     L_PRINT_NEXT
    3066/     BF8 :                     L_PRINT_STMT_8:							;compute modulo 14
    3067/     BF8 : D6 0E                   SUI     0EH							;14
    3068/     BFA : D2 F8 0B                JNC     L_PRINT_STMT_8				;brif A >= 0
    3069/     BFD : 2F                      CMA									;complement negative A
    3070/     BFE : C3 2B 0C                JMP     L_TAB_STMT_2				;print A spaces
    3071/     C01 :                     ;
    3072/     C01 :                     ; TAB statement
    3073/     C01 :                     ;
    3074/     C01 :                     ;	TAB(num)
    3075/     C01 :                     ;
    3076/     C01 :                     R_TAB_STMT:								;0C01H
    3077/     C01 : CD 2D 11                CALL    L_GTBYTC					;Evaluate byte expression at M to E
    3078/     C04 : (MACRO)             	SYNCHK	')'
    3079/     C06 : 2B                      DCX     H							;backup text ptr
    3080/     C07 : E5                      PUSH    H							;save text ptr
    3081/     C08 : 01 08 00                LXI     B,08H
    3082/     C0B : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    3083/     C0E : 09                      DAD     B
    3084/     C0F : CD 1A 42                CALL    L_TST_FCBLAST
    3085/     C12 : 7E                      MOV     A,M							;HL == 8 if !FCBLAST_R. A unused if !FCBLAST_R
    3086/     C13 : C2 26 0C                JNZ     L_TAB_STMT_1
    3087/     C16 : 3A 75 F6                LDA     PRTFLG_R					;Output device for RST 20H (0=screen)
    3088/     C19 : B7                      ORA     A
    3089/     C1A : CA 23 0C                JZ      +							;brif PRTFLG_R == 0
    3090/     C1D : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
    3091/     C20 : C3 26 0C                JMP     L_TAB_STMT_1
    3092/     C23 : 3A 88 F7            +	LDA     CURHPOS_R					;Horiz. position of cursor (0-39)
    3093/     C26 :                     L_TAB_STMT_1:							;Expects position in A
    3094/     C26 : 2F                      CMA									;complement position #
    3095/     C27 : 83                      ADD     E							;num value (mod 256)
    3096/     C28 : D2 34 0C                JNC     L_PRINT_NEXT
    3097/     C2B :                     L_TAB_STMT_2:
    3098/     C2B : 3C                      INR     A
    3099/     C2C : 47                      MOV     B,A
    3100/     C2D : 3E 20                   MVI     A,' '
    3101/     C2F :                     ;Send B spaces to screen/printer	
    3102/     C2F : (MACRO)             -	OUTCHR
    3103/     C30 : 05                      DCR     B
    3104/     C31 : C2 2F 0C                JNZ     -
    3105/     C34 :                     ;
    3106/     C34 :                     ; Prepare to process next item to print from PRINT statement
    3107/     C34 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 53 - 9/5/2025 20:20:35


    3108/     C34 :                     L_PRINT_NEXT:
    3109/     C34 : E1                      POP     H							;Stack cleanup
    3110/     C35 : (MACRO)                 CHRGET								;Get next non-white char from M
    3111/     C36 : C3 65 0B                JMP     L_PRINT_STMT_2						;Jump into PRINT statement to print next item
    3112/     C39 :                     ;
    3113/     C39 :                     L_FINPRT:							;continuation function
    3114/     C39 : AF                      XRA     A
    3115/     C3A : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
    3116/     C3D : E5                      PUSH    H							;save txt ptr
    3117/     C3E : 67                      MOV     H,A							;clear FCBLAST_R
    3118/     C3F : 6F                      MOV     L,A
    3119/     C40 : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    3120/     C43 : E1                      POP     H
    3121/     C44 : C9                      RET
    3122/     C45 :                     ;
    3123/     C45 :                     ; LINE statement
    3124/     C45 :                     ;
    3125/     C45 :                     R_LINE_STMT:							;0C45H
    3126/     C45 : FE 84                   CPI     _INPUT						;84H
    3127/     C47 : C2 6D 1C                JNZ     R_LINE_STMT_1				;LINE_1 statement
    3128/     C4A :                     ;
    3129/     C4A :                     ; LINE INPUT statement
    3130/     C4A :                     ;
    3131/     C4A : (MACRO)                 CHRGET								;Get next non-white char from M
    3132/     C4B : FE 23                   CPI     '#'
    3133/     C4D : CA 5B 4F                JZ      R_LINE_INPUT_FILE			;LINE INPUT FROM FILE NUMBER # statement
    3134/     C50 : CD E6 10                CALL    R_CHK_RUNNING_PGRM    		;Check for running program
    3135/     C53 : 7E                      MOV     A,M
    3136/     C54 : CD B4 0C                CALL    L_INPUT_STMT_1
    3137/     C57 : CD 90 47                CALL    R_FIND_VAR_ADDR				;Find address of variable at M and store in DE
    3138/     C5A : CD D9 35                CALL    L_CHKSTR
    3139/     C5D : D5                      PUSH    D
    3140/     C5E : E5                      PUSH    H
    3141/     C5F : CD 44 46                CALL    R_INP_DISP_LINE_NO_Q     	;Input and display (no "?") line and store
    3142/     C62 : D1                      POP     D
    3143/     C63 : C1                      POP     B
    3144/     C64 : DA B3 40                JC      L_STPEND
    3145/     C67 : C5                      PUSH    B
    3146/     C68 : D5                      PUSH    D
    3147/     C69 : 06 00                   MVI     B,00H
    3148/     C6B : CD 6E 27                CALL    R_STRLTI_FOR_B				;Search string at M until 0 found
    3149/     C6E : E1                      POP     H
    3150/     C6F : 3E 03                   MVI     A,03H
    3151/     C71 : C3 D6 09                JMP     L_LET_1
    3152/     C74 :                     
    3153/     C74 :                     L_REDO_MSG:
    3154/     C74 : 3F 52 65 64 6F 20       DB      "?Redo from start",0DH,0AH,00H
                    66 72 6F 6D 20 73 
                    74 61 72 74 0D 0A 
                    00 
    3155/     C87 :                     ;
    3156/     C87 :                     ;
    3157/     C87 :                     ;
    3158/     C87 :                     L_CHK_REDO:
    3159/     C87 : 3A 98 FB                LDA     PRT_USING_R
    3160/     C8A : B7                      ORA     A
    3161/     C8B : C2 40 04                JNZ     L_GEN_DATA_SN_ERROR			;brif PRT_USING_R != 0: Generate SN error on DATA statement line
    3162/     C8E :                     ; [PRT_USING_R] == 0
    3163/     C8E : C1                      POP     B
    3164/     C8F : 21 74 0C                LXI     H,L_REDO_MSG				;Code Based. 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 54 - 9/5/2025 20:20:35


    3165/     C92 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
    3166/     C95 : 2A 9B FB                LHLD    SAVTXT_R					;Most recent or currenly running line pointer
    3167/     C98 : C9                      RET
    3168/     C99 :                     ;
    3169/     C99 :                     ; INPUT # statement: read for file
    3170/     C99 :                     ;
    3171/     C99 :                     R_INPUT_FROM_FILE:						;0C99H
    3172/     C99 : CD 29 4F                CALL    L_VALIDATE_FILE
    3173/     C9C : E5                      PUSH    H							;save FCB ptr
    3174/     C9D : 21 84 F6                LXI     H,INPBUF_R-1
    3175/     CA0 : C3 D4 0C                JMP     L_INPUT_STMT_3
    3176/     CA3 :                     ;
    3177/     CA3 :                     ; INPUT statement
    3178/     CA3 :                     ;
    3179/     CA3 :                     R_INPUT_STMT:							;0CA3H
    3180/     CA3 : CD E6 10                CALL    R_CHK_RUNNING_PGRM  		;Check for running program
    3181/     CA6 : 7E                      MOV     A,M
    3182/     CA7 : FE 23                   CPI     '#'							;input from file #?
    3183/     CA9 : CA 99 0C                JZ      R_INPUT_FROM_FILE			;INPUT # statement
    3184/     CAC : CD E6 10                CALL    R_CHK_RUNNING_PGRM  		;Check for running program
    3185/     CAF : 7E                      MOV     A,M
    3186/     CB0 : 01 C4 0C                LXI     B,L_INPUT_STMT_2			;continuation function
    3187/     CB3 : C5                      PUSH    B
    3188/     CB4 :                     L_INPUT_STMT_1:
    3189/     CB4 : FE 22                   CPI     '"'
    3190/     CB6 : 3E 00                   MVI     A,00H
    3191/     CB8 : C0                      RNZ
    3192/     CB9 : CD 6C 27                CALL    R_STRLTI
    3193/     CBC : (MACRO)             	SYNCHK	';'	
    3194/     CBE : E5                      PUSH    H
    3195/     CBF : CD B4 27                CALL    L_PRINT_LST_STR
    3196/     CC2 : E1                      POP     H
    3197/     CC3 : C9                      RET
    3198/     CC4 :                     L_INPUT_STMT_2:
    3199/     CC4 : E5                      PUSH    H
    3200/     CC5 : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
    3201/     CC8 : C1                      POP     B
    3202/     CC9 : DA B3 40                JC      L_STPEND
    3203/     CCC : 23                      INX     H
    3204/     CCD : 7E                      MOV     A,M
    3205/     CCE : B7                      ORA     A
    3206/     CCF : 2B                      DCX     H
    3207/     CD0 : C5                      PUSH    B
    3208/     CD1 : CA 9D 09                JZ      L_DATA_STMT_POPHL
    3209/     CD4 :                     L_INPUT_STMT_3:
    3210/     CD4 : 36 2C                   MVI     M,','
    3211/     CD6 : C3 DE 0C                JMP     L_READ_STMT_1
    3212/     CD9 :                     ;
    3213/     CD9 :                     ; READ statement
    3214/     CD9 :                     ;
    3215/     CD9 :                     ; IN:
    3216/     CD9 :                     ;	A
    3217/     CD9 :                     ;
    3218/     CD9 :                     R_READ_STMT:							;0CD9H
    3219/     CD9 : E5                      PUSH    H							;save txt ptr
    3220/     CDA : 2A B8 FB                LHLD    DATAPTR_R					;Address where DATA search will begin next
    3221/     CDD : (MACRO)             	SKIP_XRA_A							;ORI 0AFH
    3222/     CDE :                     L_READ_STMT_1:							;A == 0 entry point
    3223/     CDE : AF                      XRA     A							
    3224/     CDF : 32 98 FB                STA     PRT_USING_R					;set [PRT_USING_R]
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 55 - 9/5/2025 20:20:35


    3225/     CE2 : E3                      XTHL
    3226/     CE3 : C3 E8 0C                JMP     +
    3227/     CE6 :                     L_READ_STMT_2:
    3228/     CE6 : (MACRO)             	SYNCHK	','
    3229/     CE8 : CD 90 47            +	CALL    R_FIND_VAR_ADDR				;Find address of variable at M and store in DE
    3230/     CEB : E3                      XTHL
    3231/     CEC : D5                      PUSH    D							;variable address to stack
    3232/     CED : 7E                      MOV     A,M
    3233/     CEE : FE 2C                   CPI     ','
    3234/     CF0 : CA 0E 0D                JZ      L_READ_STMT_3				;brif char == ','
    3235/     CF3 : 3A 98 FB                LDA     PRT_USING_R
    3236/     CF6 : B7                      ORA     A
    3237/     CF7 : C2 82 0D                JNZ     L_READ_STMT_8				;brif PRT_USING_R != 0
    3238/     CFA : 3E 3F                   MVI     A,'?'						;3FH
    3239/     CFC : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    3240/     CFD : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
    3241/     D00 : D1                      POP     D
    3242/     D01 : C1                      POP     B
    3243/     D02 : DA B3 40                JC      L_STPEND
    3244/     D05 : 23                      INX     H
    3245/     D06 : 7E                      MOV     A,M
    3246/     D07 : 2B                      DCX     H
    3247/     D08 : B7                      ORA     A
    3248/     D09 : C5                      PUSH    B
    3249/     D0A : CA 9D 09                JZ      L_DATA_STMT_POPHL
    3250/     D0D : D5                      PUSH    D
    3251/     D0E :                     L_READ_STMT_3:
    3252/     D0E : CD 1A 42                CALL    L_TST_FCBLAST
    3253/     D11 : C2 4D 4F                JNZ     L_READ_STMT_9				;brif FCBLAST != 0
    3254/     D14 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    3255/     D15 : F5                      PUSH    PSW
    3256/     D16 : C2 3D 0D                JNZ     L_READ_STMT_6				;brif not string type
    3257/     D19 : (MACRO)                 CHRGET								;Get next non-white char from M
    3258/     D1A : 57                      MOV     D,A
    3259/     D1B : 47                      MOV     B,A
    3260/     D1C : FE 22                   CPI     '"'
    3261/     D1E : CA 2E 0D                JZ      L_READ_STMT_4
    3262/     D21 : 3A 98 FB                LDA     PRT_USING_R
    3263/     D24 : B7                      ORA     A
    3264/     D25 : 57                      MOV     D,A
    3265/     D26 : CA 2B 0D                JZ      +
    3266/     D29 : 16 3A                   MVI     D,':'
    3267/     D2B : 06 2C               +	MVI     B,','
    3268/     D2D : 2B                      DCX     H
    3269/     D2E :                     L_READ_STMT_4:
    3270/     D2E : CD 6F 27                CALL    L_STR_LOOP
    3271/     D31 :                     L_READ_STMT_5:							;continuation function
    3272/     D31 : F1                      POP     PSW
    3273/     D32 : C6 03                   ADI		03H
    3274/     D34 : EB                      XCHG
    3275/     D35 : 21 45 0D                LXI     H,L_READ_STMT_7				;continuation function
    3276/     D38 : E3                      XTHL
    3277/     D39 : D5                      PUSH    D
    3278/     D3A : C3 D7 09                JMP     L_LET_2
    3279/     D3D :                     ; not string type
    3280/     D3D :                     L_READ_STMT_6:
    3281/     D3D : (MACRO)                 CHRGET								;Get next non-white char from M
    3282/     D3E : 01 31 0D                LXI     B,L_READ_STMT_5				;continuation function
    3283/     D41 : C5                      PUSH    B
    3284/     D42 : C3 40 38                JMP     R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 56 - 9/5/2025 20:20:35


    3285/     D45 :                     
    3286/     D45 :                     L_READ_STMT_7:
    3287/     D45 : 2B                      DCX     H
    3288/     D46 : (MACRO)                 CHRGET								;Get next non-white char from M
    3289/     D47 : CA 4F 0D                JZ      +
    3290/     D4A : FE 2C                   CPI     ','
    3291/     D4C : C2 87 0C                JNZ     L_CHK_REDO
    3292/     D4F : E3                  +	XTHL
    3293/     D50 : 2B                      DCX     H
    3294/     D51 : (MACRO)                 CHRGET								;Get next non-white char from M
    3295/     D52 : C2 E6 0C                JNZ     L_READ_STMT_2
    3296/     D55 : D1                      POP     D
    3297/     D56 : 3A 98 FB                LDA     PRT_USING_R
    3298/     D59 : B7                      ORA     A
    3299/     D5A : EB                      XCHG
    3300/     D5B : C2 95 40                JNZ     L_RESTORE_1
    3301/     D5E : D5                      PUSH    D
    3302/     D5F : CD 1A 42                CALL    L_TST_FCBLAST
    3303/     D62 : C2 6D 0D                JNZ     +							;brif FCBLAST != 0
    3304/     D65 : 7E                      MOV     A,M
    3305/     D66 : B7                      ORA     A
    3306/     D67 : 21 71 0D                LXI     H,L_Extra_MSG				;Code Based. 
    3307/     D6A : C4 B1 27                CNZ     R_PRINT_STRING				;Print buffer at M until NULL or '"'
    3308/     D6D : E1                  +	POP     H
    3309/     D6E : C3 39 0C                JMP     L_FINPRT
    3310/     D71 :                     
    3311/     D71 :                     L_Extra_MSG:
    3312/     D71 : 3F 45 78 74 72 61       DB      "?Extra ignored",0DH,0AH,00H
                    20 69 67 6E 6F 72 
                    65 64 0D 0A 00 
    3313/     D82 :                     
    3314/     D82 :                     L_READ_STMT_8:
    3315/     D82 : CD 9E 09                CALL    R_DATA_STMT				    ;DATA statement
    3316/     D85 : B7                      ORA     A
    3317/     D86 : C2 9B 0D                JNZ     +
    3318/     D89 : 23                      INX     H
    3319/     D8A : 7E                      MOV     A,M
    3320/     D8B : 23                      INX     H
    3321/     D8C : B6                      ORA     M
    3322/     D8D : 1E 04                   MVI     E,04H
    3323/     D8F : CA 5D 04                JZ      R_GEN_ERR_IN_E				;Generate error 4
    3324/     D92 : 23                      INX     H
    3325/     D93 : (MACRO)             	GETDEFROMMNOINC
    3326/     D96 : EB                      XCHG
    3327/     D97 : 22 94 FB                SHLD    DATALIN_R					;Line number of current data statement
    3328/     D9A : EB                      XCHG
    3329/     D9B : (MACRO)             +	CHRGET								;Get next non-white char from M
    3330/     D9C : FE 83                   CPI     _DATA						;83H
    3331/     D9E : C2 82 0D                JNZ     L_READ_STMT_8
    3332/     DA1 : C3 0E 0D                JMP     L_READ_STMT_3
    3333/     DA4 :                     
    3334/     DA4 :                     L_FRMEQL:
    3335/     DA4 : (MACRO)             	SYNCHK	_EQUAL_						;'=' token
    3336/     DA6 : C3 AB 0D                JMP     L_FRMEVL					;Main BASIC evaluation routine
    3337/     DA9 :                     
    3338/     DA9 :                     L_FRMPRN:
    3339/     DA9 : (MACRO)             	SYNCHK	'('
    3340/     DAB :                     ;
    3341/     DAB :                     ; Main BASIC evaluation routine
    3342/     DAB :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 57 - 9/5/2025 20:20:35


    3343/     DAB :                     ; During evaluation, order of precedence of operators is honored
    3344/     DAB :                     ; by PUSHing function handlers to the stack. Then they are
    3345/     DAB :                     ; unwound to be handled in the proper order.
    3346/     DAB :                     ;
    3347/     DAB :                     L_FRMEVL:				;0DABH
    3348/     DAB : 2B                      DCX     H
    3349/     DAC :                     ;
    3350/     DAC :                     ; Main BASIC_1 evaluation routine
    3351/     DAC :                     ;
    3352/     DAC :                     L_FRMCHK:						    	;0DACH
    3353/     DAC : 16 00                   MVI     D,00H						;priority 0
    3354/     DAE :                     ;
    3355/     DAE :                     ; Main BASIC_1 evaluation routine with priority in D
    3356/     DAE :                     ;
    3357/     DAE :                     L_LPOPER:
    3358/     DAE : D5                      PUSH    D							;save priority
    3359/     DAF : 0E 01                   MVI     C,01H
    3360/     DB1 : CD FF 3E                CALL    R_GETSTK					;Test for 1 unit free in stack space
    3361/     DB4 : CD 1C 0F                CALL    L_EVAL					    ;Evaluate function at M
    3362/     DB7 :                     ; From mbasic 5.2
    3363/     DB7 :                     ;RESET OVERFLOW PRINTING BACK TO NORMAL
    3364/     DB7 :                     ;	XRA	A			;(SET TO 1 AT FUNDSP TO SUPPRESS
    3365/     DB7 :                     ;	STA	FLGOVC			;MULTIPLE OVERFLOW MESSAGES)
    3366/     DB7 :                     L_TSTOP:
    3367/     DB7 : 22 A8 FB                SHLD    TEMP2_R					;store text ptr
    3368/     DBA :                     L_RETAOP:
    3369/     DBA : 2A A8 FB                LHLD    TEMP2_R					;restore text ptr
    3370/     DBD : C1                      POP     B							;restore priority
    3371/     DBE :                     L_NOTSTV:
    3372/     DBE : 7E                      MOV     A,M
    3373/     DBF : 22 8E FB                SHLD    TEMP3_R
    3374/     DC2 : FE D0                   CPI     _PLUS_						;token '+'
    3375/     DC4 : D8                      RC									;done if A < _PLUS_
    3376/     DC5 : FE DF                   CPI     _SGN
    3377/     DC7 : D0                      RNC   								;return if token >= _SGN 
    3378/     DC8 : FE DC                   CPI     _GT_
    3379/     DCA : D2 29 0E                JNC     L_COMP_OP					;brif token >= _GT_
    3380/     DCD :                     ; token is range _PLUS_ to _BACKSLASH_ (+, -, *, /, ^, AND, OR, XOR, EQV, IMP, MOD, \)
    3381/     DCD :                     ; rescale the token to 0..11 range
    3382/     DCD : D6 D0                   SUI     _PLUS_						;0D0H
    3383/     DCF : 5F                      MOV     E,A							;save rescaled token
    3384/     DD0 : C2 DC 0D                JNZ     +							;brif token was != _PLUS_
    3385/     DD3 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
    3386/     DD6 : FE 03                   CPI     03H							;String type?
    3387/     DD8 : 7B                      MOV     A,E							;restore rescaled token
    3388/     DD9 : CA CC 28                JZ      L_STR_CONCAT				;string concatenation
    3389/     DDC :                     ;
    3390/     DDC :                     ;	Operands are processed as given below:
    3391/     DDC :                     ;	1. (): Parentheses
    3392/     DDC :                     ;	2. ^: Exponentiation
    3393/     DDC :                     ;	3. +,-: Unary plus and minus (not to be confused with addition and subtraction)
    3394/     DDC :                     ;	4. *,/,\: Multiplication and division
    3395/     DDC :                     ;	5. MOD: Modulo
    3396/     DDC :                     ;	6. +,-: Addition and subtraction
    3397/     DDC :                     ;	7. <,>,=,>=,<=,<>: Comparison
    3398/     DDC :                     ;	8. NOT: Logical negation
    3399/     DDC :                     ;	9. AND: Logical AND
    3400/     DDC :                     ;	10. OR: Logical OR
    3401/     DDC :                     ;	11. XOR: Logical XOR
    3402/     DDC :                     ;	12. EQV: Logical inverse XOR
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 58 - 9/5/2025 20:20:35


    3403/     DDC :                     ;	13. IMP: Logical bit selection
    3404/     DDC :                     ;
    3405/     DDC : 21 E2 02            +	LXI     H,R_MATH_PRIORITY_TBL		;Code Based. table has 12 entries
    3406/     DDF : 16 00                   MVI     D,00H						;zero extend rescaled token
    3407/     DE1 : 19                      DAD     D							;index into table
    3408/     DE2 : 78                      MOV     A,B							;input priority
    3409/     DE3 : 56                      MOV     D,M							;get priority
    3410/     DE4 : BA                      CMP     D
    3411/     DE5 : D0                      RNC									;return if input priority >= table priority
    3412/     DE6 : C5                      PUSH    B
    3413/     DE7 : 01 BA 0D                LXI     B,L_RETAOP					;continuation function
    3414/     DEA : C5                      PUSH    B
    3415/     DEB : 7A                      MOV     A,D							;priority
    3416/     DEC : FE 51                   CPI     51H
    3417/     DEE : DA 45 0E                JC      L_COMP_OP_1					;brif priority < 51H
    3418/     DF1 : E6 FE                   ANI     0FEH						;11111110H clear bit 0
    3419/     DF3 : FE 7A                   CPI     7AH
    3420/     DF5 : CA 45 0E                JZ      L_COMP_OP_1					;brif priority == 7AH
    3421/     DF8 :                     ;
    3422/     DF8 :                     ;orig priorities:	 79H,79H,7CH,7CH,7FH,50H,46H,3CH,32H,28H,7AH,7BH
    3423/     DF8 :                     ;D	priorities left: 79H,79H,7CH,7CH,7FH,XXX,XXX,XXX,XXX,XXX,XXX,7BH
    3425/     DF8 :                     ;E	token: 			  +   -   *   /   ^	 AND  OR XOR EQV IMP MOD  ;
    3426/     DF8 :                     L_EVAL_PRI_3:
    3427/     DF8 : 21 1A FC                LXI     H,IFACLO_R				    ;FAC1 for integers
    3428/     DFB : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
    3429/     DFE : D6 03                   SUI     03H							;STRING?
    3430/     E00 : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error if type STRING
    3431/     E03 : B7                      ORA     A							;test VARTYP-3
    3432/     E04 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    3433/     E07 : E5                      PUSH    H
    3434/     E08 : FA 1A 0E                JM      +							;brif integer
    3435/     E0B : 2A 18 FC                LHLD    DFACLO_R					;FAC1
    3436/     E0E : E5                      PUSH    H
    3437/     E0F : E2 1A 0E                JPO     +
    3438/     E12 : 2A 1E FC                LHLD    IFACLO_R+4
    3439/     E15 : E5                      PUSH    H
    3440/     E16 : 2A 1C FC                LHLD    IFACLO_R+2
    3441/     E19 : E5                      PUSH    H
    3442/     E1A : C6 03               +	ADI		03H							;restore VARTYP
    3443/     E1C : 4B                      MOV     C,E							;operator vector index
    3444/     E1D : 47                      MOV     B,A							;VALTYP_R
    3445/     E1E : C5                      PUSH    B
    3446/     E1F : 01 6C 0E                LXI     B,L_COMP_OP_3				;vector function
    3447/     E22 :                     ;
    3448/     E22 :                     ; PUSH operator vector and continue evaluation
    3449/     E22 :                     ;
    3450/     E22 :                     L_PUSH_OP_VEC:
    3451/     E22 : C5                      PUSH    B							;insert vector function 
    3452/     E23 : 2A 8E FB                LHLD    TEMP3_R						;saved text ptr
    3453/     E26 : C3 AE 0D                JMP     L_LPOPER					;recurse D has priority
    3454/     E29 :                     ;
    3455/     E29 :                     ; Handle '>', '=', '<' operators in expression
    3456/     E29 :                     ; ;
    3457/     E29 :                     ; A: token.
    3458/     E29 :                     ; Process if token >= _GT_ && token < _SGN:
    3459/     E29 :                     ;	_GT_, _EQUAL_, _LT_
    3460/     E29 :                     ;
    3461/     E29 :                     ; Also look for >=, <> and <=
    3462/     E29 :                     ; Turns out that MS-BASIC also accepts =>, >< and =< as relations operators!
    3463/     E29 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 59 - 9/5/2025 20:20:35


    3464/     E29 :                     ; IN:
    3465/     E29 :                     ;	A		token
    3466/     E29 :                     ;	B		priority, preserved
    3467/     E29 :                     ; OUT:
    3468/     E29 :                     ;	D		relational operator code (1..6 for >, =, >=, <, <> and <=)
    3469/     E29 :                     ;
    3470/     E29 :                     L_COMP_OP:
    3471/     E29 : 16 00                   MVI     D,00H						;clear CPRTYP
    3472/     E2B : D6 DC               -	SUI     _GT_						;0DCH	rescale token to 0..2
    3473/     E2D : DA 51 0E                JC      L_COMP_OP_2					;brif OP < _GT_
    3474/     E30 : FE 03                   CPI     _LT_ - _GT_ +1				;03H
    3475/     E32 : D2 51 0E                JNC     L_COMP_OP_2					;brif OP > _LT_
    3476/     E35 : FE 01                   CPI     01H							;sets Carry if token < _EQUAL_
    3477/     E37 : 17                      RAL									;carry to bit 0
    3478/     E38 : AA                      XRA     D							;A is new CPRTYP
    3479/     E39 : BA                      CMP     D							;old CPRTYP
    3480/     E3A : 57                      MOV     D,A							;update CPRTYP
    3481/     E3B : DA 46 04                JC      R_GEN_SN_ERROR				;brif new CPRTYP < old CPRTYP: Generate Syntax error
    3482/     E3E : 22 8E FB                SHLD    TEMP3_R						;save txt ptr
    3483/     E41 : (MACRO)                 CHRGET								;Get next non-white char from M
    3484/     E42 : C3 2B 0E                JMP     -
    3485/     E45 :                     ;
    3486/     E45 :                     ; Also priority (in A) < 51H
    3487/     E45 :                     ;
    3488/     E45 :                     L_COMP_OP_1:
    3489/     E45 : D5                      PUSH    D							
    3490/     E46 : CD 01 35                CALL    R_CINT_FUN				    ;CINT function
    3491/     E49 : D1                      POP     D
    3492/     E4A : E5                      PUSH    H
    3493/     E4B : 01 72 10                LXI     B,L_LOGIC_VEC				;Load pointer to vector for handling logic functions
    3494/     E4E : C3 22 0E                JMP     L_PUSH_OP_VEC				;PUSH operator vector and continue evaluation
    3495/     E51 :                     ;
    3496/     E51 :                     ; IN:
    3497/     E51 :                     ;	B		priority, preserved
    3498/     E51 :                     ;	D		relational operator code (1..6 for >, =, >=, <, <> and <=)
    3499/     E51 :                     ;
    3500/     E51 :                     L_COMP_OP_2:
    3501/     E51 : 78                      MOV     A,B							;priority
    3502/     E52 : FE 64                   CPI     64H
    3503/     E54 : D0                      RNC									;retif priority >= 64H  
    3504/     E55 : C5                      PUSH    B							;save priority on the stack
    3505/     E56 : D5                      PUSH    D							;save CPRTYP on the stack
    3506/     E57 : 11 05 64                LXI     D,6405H						;Priority in D, compare MATH vector index in E
    3507/     E5A : 21 47 10                LXI     H,L_EVAL_REL_OP				;vector function
    3508/     E5D : E5                      PUSH    H
    3509/     E5E : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    3510/     E5F : C2 F8 0D                JNZ     L_EVAL_PRI_3				;brif !STRING type
    3511/     E62 :                     ; String type
    3512/     E62 : 2A 1A FC                LHLD    IFACLO_R					;[FAC1]
    3513/     E65 : E5                      PUSH    H							;stack argument for L_STR_CMP()
    3514/     E66 : 01 0C 27                LXI     B,L_STR_CMP					;string operator vector function
    3515/     E69 : C3 22 0E                JMP     L_PUSH_OP_VEC				;PUSH operator vector and continue evaluation
    3516/     E6C :                     
    3517/     E6C :                     L_COMP_OP_3:
    3518/     E6C : C1                      POP     B
    3519/     E6D : 79                      MOV     A,C
    3520/     E6E : 32 66 FB                STA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    3521/     E71 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
    3522/     E74 : B8                      CMP     B
    3523/     E75 : C2 85 0E                JNZ     +							;brif type mismatch
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 60 - 9/5/2025 20:20:35


    3524/     E78 : FE 02                   CPI     02H							;type INTEGER
    3525/     E7A : CA A1 0E                JZ      L_COMP_OP_4
    3526/     E7D : FE 04                   CPI     04H							;type SNGL PREC
    3527/     E7F : CA F0 0E                JZ      L_COMP_OP_12
    3528/     E82 : D2 B4 0E                JNC     L_COMP_OP_6					;brif A >= 4, i.e. DBL PREC.
    3529/     E85 : 57                  +	MOV     D,A
    3530/     E86 : 78                      MOV     A,B
    3531/     E87 : FE 08                   CPI     08H
    3532/     E89 : CA B1 0E                JZ      L_COMP_OP_5
    3533/     E8C : 7A                      MOV     A,D
    3534/     E8D : FE 08                   CPI     08H
    3535/     E8F : CA D8 0E                JZ      L_COMP_OP_10
    3536/     E92 : 78                      MOV     A,B
    3537/     E93 : FE 04                   CPI     04H
    3538/     E95 : CA ED 0E                JZ      L_COMP_OP_11
    3539/     E98 : 7A                      MOV     A,D
    3540/     E99 : FE 03                   CPI     03H							;type STRING
    3541/     E9B : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error
    3542/     E9E : D2 F8 0E                JNC     L_COMP_OP_14						;brif type >= 3
    3543/     EA1 :                     L_COMP_OP_4:
    3544/     EA1 : 21 10 03                LXI     H,L_MATH_TBL_3				;Code Based. integer operators
    3545/     EA4 : 06 00                   MVI     B,00H						;zero extend C to BC
    3546/     EA6 : 09                      DAD     B							;word index
    3547/     EA7 : 09                      DAD     B
    3548/     EA8 : 4E                      MOV     C,M							;operator function to BC
    3549/     EA9 : 23                      INX     H
    3550/     EAA : 46                      MOV     B,M
    3551/     EAB : D1                      POP     D
    3552/     EAC : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    3553/     EAF : C5                      PUSH    B							;execute operator function
    3554/     EB0 : C9                      RET
    3555/     EB1 :                     
    3556/     EB1 :                     L_COMP_OP_5:
    3557/     EB1 : CD BA 35                CALL    L_FRCDBL				    ;CDBL function
    3558/     EB4 :                     L_COMP_OP_6:
    3559/     EB4 : CD 84 34                CALL    L_CPY_FAC1_TO_2				;Copy FAC1 to FAC2
    3560/     EB7 : E1                      POP     H
    3561/     EB8 : 22 1C FC                SHLD    IFACLO_R+2
    3562/     EBB : E1                      POP     H
    3563/     EBC : 22 1E FC                SHLD    IFACLO_R+4
    3564/     EBF :                     L_COMP_OP_7:
    3565/     EBF : C1                      POP     B
    3566/     EC0 : D1                      POP     D
    3567/     EC1 : CD 32 34                CALL    R_SNGL_FAC1_EQ_BCDE        	;Load single precision in BCDE to FAC1
    3568/     EC4 :                     L_COMP_OP_8:
    3569/     EC4 : CD BA 35                CALL    L_FRCDBL					;CDBL function
    3570/     EC7 : 21 F8 02                LXI     H,L_MATH_TBL_1				;Code Based. 
    3571/     ECA :                     L_COMP_OP_9:
    3572/     ECA : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    3573/     ECD : 07                      RLC									;times 2
    3574/     ECE : 85                      ADD     L							;add to HL
    3575/     ECF : 6F                      MOV     L,A
    3576/     ED0 : 8C                      ADC     H
    3577/     ED1 : 95                      SUB     L							;minus L
    3578/     ED2 : 67                      MOV     H,A
    3579/     ED3 : 7E                      MOV     A,M							;get word at M to HL
    3580/     ED4 : 23                      INX     H
    3581/     ED5 : 66                      MOV     H,M
    3582/     ED6 : 6F                      MOV     L,A
    3583/     ED7 : E9                      PCHL								;jmp to HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 61 - 9/5/2025 20:20:35


    3584/     ED8 :                     
    3585/     ED8 :                     L_COMP_OP_10:
    3586/     ED8 : 78                      MOV     A,B
    3587/     ED9 : F5                      PUSH    PSW
    3588/     EDA : CD 84 34                CALL    L_CPY_FAC1_TO_2				;Copy FAC1 to FAC2
    3589/     EDD : F1                      POP     PSW
    3590/     EDE : 32 65 FB                STA     VALTYP_R					;Type of last expression used
    3591/     EE1 : FE 04                   CPI     04H							;Single Precision?
    3592/     EE3 : CA BF 0E                JZ      L_COMP_OP_7
    3593/     EE6 : E1                      POP     H
    3594/     EE7 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
    3595/     EEA : C3 C4 0E                JMP     L_COMP_OP_8
    3596/     EED :                     
    3597/     EED :                     L_COMP_OP_11:
    3598/     EED : CD 2A 35                CALL    R_CSNG_FUN				  	;CSNG function
    3599/     EF0 :                     L_COMP_OP_12:
    3600/     EF0 : C1                      POP     B
    3601/     EF1 : D1                      POP     D
    3602/     EF2 : 21 04 03            -	LXI     H,L_MATH_TBL_2				;Code Based. 
    3603/     EF5 : C3 CA 0E                JMP     L_COMP_OP_9
    3604/     EF8 :                     
    3605/     EF8 :                     L_COMP_OP_14:
    3606/     EF8 : E1                      POP     H
    3607/     EF9 : CD 22 34                CALL    R_PUSH_SNGL_FAC1			;Push single precision FAC1 on stack
    3608/     EFC : CD 43 35                CALL    R_CONV_SINT_HL_SNGL        	;Convert signed integer HL to single precision FAC1
    3609/     EFF : CD 3D 34                CALL    R_SNGL_BCDE_EQ_FAC1        	;Load single precision FAC1 to BCDE
    3610/     F02 : E1                      POP     H
    3611/     F03 : 22 18 FC                SHLD    DFACLO_R					;FAC1
    3612/     F06 : E1                      POP     H
    3613/     F07 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
    3614/     F0A : C3 F2 0E                JMP     -
    3615/     F0D :                     
    3616/     F0D :                     ;
    3617/     F0D :                     ; Integer Divide FAC1=DE/HL
    3618/     F0D :                     ;
    3619/     F0D :                     R_INT16_DIV:							;0F0DH
    3620/     F0D : E5                      PUSH    H							;save
    3621/     F0E : EB                      XCHG								;DE => HL
    3622/     F0F : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
    3623/     F12 : E1                      POP     H							;restore
    3624/     F13 : CD 22 34                CALL    R_PUSH_SNGL_FAC1			;Push single precision FAC1 on stack
    3625/     F16 : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
    3626/     F19 : C3 0C 38                JMP     L_STK_SNGL_DIV				;pop SNGL and do R_SNGL_DIV
    3627/     F1C :                     ;
    3628/     F1C :                     ; Evaluate function at M
    3629/     F1C :                     ;
    3630/     F1C :                     R_EVAL:
    3631/     F1C :                     L_EVAL:									;0F1CH
    3632/     F1C : (MACRO)                 CHRGET								;Get next non-white char from M
    3633/     F1D : CA 58 04                JZ      R_GEN_MO_ERROR				;Generate MO error
    3634/     F20 : DA 40 38                JC      R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
    3635/     F23 : CD F2 40                CALL    R_ISLET				    	;Check if A is alpha character.
    3636/     F26 : D2 DA 0F                JNC     R_ISVAR						;R_EVAL_VAR Evaluate variable. Carry set means numeric.
    3637/     F29 : FE D0                   CPI     _PLUS_
    3638/     F2B : CA 1C 0F                JZ      R_EVAL					    ;ignore '+'
    3639/     F2E : FE 2E                   CPI     '.'							;constant starting with '.'
    3640/     F30 : CA 40 38                JZ      R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
    3641/     F33 : FE D1                   CPI     _MINUS_						;token '-'
    3642/     F35 : CA CC 0F                JZ      R_DO_MINUS
    3643/     F38 : FE 22                   CPI     '"'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 62 - 9/5/2025 20:20:35


    3644/     F3A :                     ;IF SO BUILD A DESCRIPTOR IN A TEMPORARY DESCRIPTOR LOCATION AND PUT A POINTER TO THE
    3645/     F3A :                     ;	DESCRIPTOR IN FACLO
    3646/     F3A : CA 6C 27                JZ      R_STRLTI
    3647/     F3D : FE CE                   CPI     _NOT
    3648/     F3F : CA 54 10                JZ      R_NOT_FUN				    ;NOT function [NOTER]
    3649/     F42 : FE C5                   CPI     _ERR
    3650/     F44 : C2 51 0F                JNZ     L_EVAL_1
    3651/     F47 :                     ;
    3652/     F47 :                     ; ERR function
    3653/     F47 :                     ;
    3654/     F47 :                     R_ERR_FUN:								;0F47H
    3655/     F47 : (MACRO)                 CHRGET								;Get next non-white char from M
    3656/     F48 : 3A 72 F6                LDA     ERRFLG_R					;Last Error code
    3657/     F4B : E5                      PUSH    H
    3658/     F4C : CD D1 10                CALL    L_LD_FAC1_BYTE				;Load byte iin A into FAC1
    3659/     F4F : E1                      POP     H
    3660/     F50 : C9                      RET
    3661/     F51 :                     
    3662/     F51 :                     L_EVAL_1:
    3663/     F51 : FE C4                   CPI     _ERL
    3664/     F53 : C2 60 0F                JNZ     L_EVAL_2
    3665/     F56 :                     ;
    3666/     F56 :                     ; ERL function
    3667/     F56 :                     ;
    3668/     F56 :                     R_ERL_FUN:								;0F56H
    3669/     F56 : (MACRO)                 CHRGET								;Get next non-white char from M
    3670/     F57 : E5                      PUSH    H
    3671/     F58 : 2A 9F FB                LHLD    ERRLIN_R					;Line number of last error
    3672/     F5B : CD DB 37                CALL    L_CONV_UNSGND_HL_SNGL		;Convert unsigned integer HL to single precision FAC1
    3673/     F5E : E1                      POP     H
    3674/     F5F : C9                      RET
    3675/     F60 :                     
    3676/     F60 :                     L_EVAL_2:
    3677/     F60 : FE AA                   CPI     _TIME_						;TIME$
    3678/     F62 : CA 04 19                JZ      R_TIME_FUN				  	;TIME$ function
    3679/     F65 : FE AB                   CPI     _DATE_						;DATE$
    3680/     F67 : CA 24 19                JZ      R_DATE_FUN
    3681/     F6A : FE AC                   CPI     _DAY_						;DAY$
    3682/     F6C : CA 55 19                JZ      R_DAY_FUN				    ;DAY function
    3683/     F6F : FE B7                   CPI     _MAX
    3684/     F71 : CA 9B 1D                JZ      R_MAX_FUN				    ;MAX function
    3685/     F74 : FE CC                   CPI     _HIMEM
    3686/     F76 : CA B9 1D                JZ      R_HIMEM_FUN				    ;HIMEM function
    3687/     F79 : FE C3                   CPI     _VARPTR
    3688/     F7B : C2 A3 0F                JNZ     L_EVAL_3
    3689/     F7E :                     ;
    3690/     F7E :                     ; VARPTR function
    3691/     F7E :                     ;
    3692/     F7E :                     R_VARPTR_FUN:							;0F7EH
    3693/     F7E : (MACRO)                 CHRGET								;Get next non-white char from M
    3694/     F7F : (MACRO)             	SYNCHK	'('
    3695/     F81 : FE 23                   CPI     '#'
    3696/     F83 : C2 92 0F                JNZ     R_VARPTR_VAR_FUN			;VARPTR(variable) function
    3697/     F86 :                     ;
    3698/     F86 :                     ; VARPTR(#file) function
    3699/     F86 :                     ;
    3700/     F86 :                     R_VARPTR_BUF_FUN:						;0F86H
    3701/     F86 : CD 2D 11                CALL    L_GTBYTC					;Evaluate byte expression at M
    3702/     F89 : E5                      PUSH    H							;save text ptr
    3703/     F8A : CD 84 4C                CALL    R_GET_FCB_FROM_A			;Get FCB for file in A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 63 - 9/5/2025 20:20:35


    3704/     F8D : EB                      XCHG								;result to DE
    3705/     F8E : E1                      POP     H							;restore text ptr
    3706/     F8F : C3 95 0F                JMP     +
    3707/     F92 :                     
    3708/     F92 :                     ;
    3709/     F92 :                     ; VARPTR(variable) function
    3710/     F92 :                     ;
    3711/     F92 :                     ; Get memory address of "variable"
    3712/     F92 :                     ;
    3713/     F92 :                     R_VARPTR_VAR_FUN:						;0F92H
    3714/     F92 : CD 2C 48                CALL    L_FIND_ADDR_5				;Find address of variable at M
    3715/     F95 : (MACRO)             +	SYNCHK	')'
    3716/     F97 : E5                      PUSH    H							;save text ptr
    3717/     F98 : EB                      XCHG								;DE to HL
    3718/     F99 : 7C                      MOV     A,H
    3719/     F9A : B5                      ORA     L
    3720/     F9B : CA DB 08                JZ      R_GEN_FC_ERROR				;brif 0: Generate FC error
    3721/     F9E : CD 10 35                CALL    L_MAKINT					;Load signed integer in HL to FAC1
    3722/     FA1 : E1                      POP     H							;restore text ptr
    3723/     FA2 : C9                      RET
    3724/     FA3 :                     
    3725/     FA3 :                     L_EVAL_3:
    3726/     FA3 : FE C7                   CPI     _INSTR
    3727/     FA5 : CA 37 2A                JZ      R_INSTR_FUN				    ;INSTR function
    3728/     FA8 : FE C9                   CPI     _INKEY_
    3729/     FAA : CA EA 4B                JZ      R_INKEY_FUN				    ;INKEY$ function
    3730/     FAD : FE C6                   CPI     _STRING_
    3731/     FAF : CA 6D 29                JZ      R_STRING_FUN				;STRING$ function
    3732/     FB2 : FE 84                   CPI     _INPUT
    3733/     FB4 : CA 8E 4E                JZ      R_INPUT_STMT_2				;INPUT_2 statement
    3734/     FB7 : FE CA                   CPI     _CSRLIN
    3735/     FB9 : CA 90 1D                JZ      R_CSRLIN_FUN				;CSRLIN function
    3736/     FBC : FE C8                   CPI     _DSKI_
    3737/     FBE : CA 73 50                JZ      R_DSKI_FUN				    ;DSKI$ function
    3738/     FC1 :                     ;
    3739/     FC1 :                     ; rescale the token
    3740/     FC1 :                     ;
    3741/     FC1 : D6 DF                   SUI     _SGN						;0DFH
    3742/     FC3 : D2 F2 0F                JNC     L_EVAL_5					;brif token >= 0DFH: SGN to MID$
    3743/     FC6 :                     ; token < _SGN
    3744/     FC6 :                     L_EVAL_4:								;evaluate expression in parens
    3745/     FC6 : CD A9 0D                CALL    L_FRMPRN
    3746/     FC9 : (MACRO)             	SYNCHK	')'
    3747/     FCB : C9                      RET
    3748/     FCC :                     
    3749/     FCC :                     R_DO_MINUS:
    3750/     FCC : 16 7D                   MVI     D,7DH						;priority
    3751/     FCE : CD AE 0D                CALL    L_LPOPER
    3752/     FD1 : 2A A8 FB                LHLD    TEMP2_R
    3753/     FD4 : E5                      PUSH    H
    3754/     FD5 : CD F6 33                CALL    L_VNEG
    3755/     FD8 :                     L_POPHL_RET_2:							;duplicate
    3756/     FD8 : E1                      POP     H
    3757/     FD9 : C9                      RET
    3758/     FDA :                     ;
    3759/     FDA :                     ; Evaluate variable
    3760/     FDA :                     ;
    3761/     FDA :                     R_ISVAR:
    3762/     FDA :                     R_EVAL_VAR:								;0FDAH
    3763/     FDA : CD 90 47                CALL    R_FIND_VAR_ADDR				;Find address of variable at M. Result in DE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 64 - 9/5/2025 20:20:35


    3764/     FDD :                     ;
    3765/     FDD :                     ; Return address L_ISVAR_1 is intercepted if variable does not exist yet.
    3766/     FDD :                     ;
    3767/     FDD :                     L_ISVAR_1:
    3768/     FDD : E5                      PUSH    H
    3769/     FDE : EB                      XCHG								;variable ptr to HL
    3770/     FDF : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
    3771/     FE2 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    3772/     FE3 : C4 7E 34                CNZ     L_CPY_M_TO_FAC1				;Move VALTYP_R bytes from M to FAC1 with increment
    3773/     FE6 : E1                      POP     H
    3774/     FE7 : C9                      RET
    3775/     FE8 :                     ;
    3776/     FE8 :                     ; Get char at M and convert to uppercase
    3777/     FE8 :                     ;
    3778/     FE8 :                     R_CONV_M_TOUPPER:						;0FE8H
    3779/     FE8 : 7E                      MOV     A,M
    3780/     FE9 :                     ;
    3781/     FE9 :                     ;Convert A to uppercase
    3782/     FE9 :                     ;
    3783/     FE9 :                     R_CONV_A_TOUPPER:						;0FE9H
    3784/     FE9 : FE 61                   CPI     'a'
    3785/     FEB : D8                      RC
    3786/     FEC : FE 7B                   CPI     'z'+1
    3787/     FEE : D0                      RNC
    3788/     FEF : E6 5F                   ANI     5FH							;01011111 clear bit 5
    3789/     FF1 : C9                      RET
    3790/     FF2 :                     
    3791/     FF2 :                     L_EVAL_5:
    3792/     FF2 : 06 00                   MVI     B,00H						;preset
    3793/     FF4 : 07                      RLC									;A times 2
    3794/     FF5 : 4F                      MOV     C,A
    3795/     FF6 : C5                      PUSH    B
    3796/     FF7 : (MACRO)                 CHRGET								;Get next non-white char from M
    3797/     FF8 : 79                      MOV     A,C
    3798/     FF9 : FE 39                   CPI     39H							;'9'
    3799/     FFB : DA 15 10                JC      L_EVAL_6					;brif char < '9'
    3800/     FFE : CD A9 0D                CALL    L_FRMPRN
    3801/    1001 : (MACRO)             	SYNCHK	','
    3802/    1003 : CD D9 35                CALL    L_CHKSTR
    3803/    1006 : EB                      XCHG
    3804/    1007 : 2A 1A FC                LHLD    IFACLO_R					;load HL from FAC1 for integers
    3805/    100A : E3                      XTHL								;swap [SP] and HL
    3806/    100B : E5                      PUSH    H							;push [SP] again
    3807/    100C : EB                      XCHG
    3808/    100D : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    3809/    1010 : EB                      XCHG
    3810/    1011 : E3                      XTHL
    3811/    1012 : C3 2E 10                JMP     L_EVAL_7
    3812/    1015 :                     
    3813/    1015 :                     L_EVAL_6:
    3814/    1015 : CD C6 0F                CALL    L_EVAL_4					;evaluate expression in parens
    3815/    1018 : E3                      XTHL								;swap [SP] and HL
    3816/    1019 : 7D                      MOV     A,L
    3817/    101A : FE 0E                   CPI     0EH
    3818/    101C : DA 2A 10                JC      +							;brif L < 0EH
    3819/    101F : FE 1D                   CPI     1DH
    3820/    1021 : D2 2A 10                JNC     +							;brif L >= 1DH
    3821/    1024 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    3822/    1025 : E5                      PUSH    H							;save offset
    3823/    1026 : DC BA 35                CC      L_FRCDBL				    ;calif carry set: CDBL function
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 65 - 9/5/2025 20:20:35


    3824/    1029 : E1                      POP     H							;restore offset
    3825/    102A : 11 D8 0F            +	LXI     D,L_POPHL_RET_2				;continuation function: POP H, RET
    3826/    102D : D5                      PUSH    D
    3827/    102E :                     L_EVAL_7:
    3828/    102E : 01 40 00                LXI     B,R_FUN_VCTR_TBL			;Code Based. HL must be offset
    3829/    1031 :                     L_VECT_JMP:
    3830/    1031 : 09                      DAD     B							;byte index.
    3831/    1032 : 4E                      MOV     C,M							;get HL from Code Based M. Preserve A
    3832/    1033 : 23                      INX     H
    3833/    1034 : 66                      MOV     H,M
    3834/    1035 : 69                      MOV     L,C
    3835/    1036 : E9                      PCHL								;jmp to HL
    3836/    1037 :                     ;
    3837/    1037 :                     ; ASCII num conversion - find ASCII or tokenized '+' or '-' in A
    3838/    1037 :                     ;
    3839/    1037 :                     R_ASCII_NUM_CONV:						;1037H
    3840/    1037 : 15                      DCR     D
    3841/    1038 : FE D1                   CPI     _MINUS_	
    3842/    103A : C8                      RZ
    3843/    103B : FE 2D                   CPI     '-'
    3844/    103D : C8                      RZ
    3845/    103E : 14                      INR     D
    3846/    103F : FE 2B                   CPI     '+'
    3847/    1041 : C8                      RZ
    3848/    1042 : FE D0                   CPI     _PLUS_
    3849/    1044 : C8                      RZ
    3850/    1045 : 2B                      DCX     H
    3851/    1046 : C9                      RET
    3852/    1047 :                     ;
    3853/    1047 :                     ; used as continuation function to evaluate a relational operator
    3854/    1047 :                     ; A == 1 or -1 from L_EVAL_CARRY_IN_A()
    3855/    1047 :                     ;
    3856/    1047 :                     L_EVAL_REL_OP:
    3857/    1047 : 3C                      INR     A							;A now 0 or 2. carry set if A was -1
    3858/    1048 : 8F                      ADC     A							;normalize to -1,
    3859/    1049 : C1                      POP     B							;get CPRTYP to B
    3860/    104A : A0                      ANA     B
    3861/    104B : C6 FF                   ADI		0FFH
    3862/    104D : 9F                      SBB     A
    3863/    104E : CD 0A 34                CALL    L_SGN_EXTEND				;sign extend A to HL and FAC1
    3864/    1051 : C3 66 10                JMP     +							;TODO jmp directly to L_RETAOP()
    3865/    1054 :                     ;
    3866/    1054 :                     ; NOT function
    3867/    1054 :                     ;
    3868/    1054 :                     R_NOT_FUN:								;1054H
    3869/    1054 : 16 5A                   MVI     D,5AH						;priority
    3870/    1056 : CD AE 0D                CALL    L_LPOPER
    3871/    1059 : CD 01 35                CALL    R_CINT_FUN				    ;CINT function
    3872/    105C : 7D                      MOV     A,L
    3873/    105D : 2F                      CMA
    3874/    105E : 6F                      MOV     L,A
    3875/    105F : 7C                      MOV     A,H
    3876/    1060 : 2F                      CMA
    3877/    1061 : 67                      MOV     H,A
    3878/    1062 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
    3879/    1065 : C1                      POP     B
    3880/    1066 : C3 BA 0D            +	JMP     L_RETAOP
    3881/    1069 :                     ;
    3882/    1069 :                     ; RST 28H routine
    3883/    1069 :                     ; Determine type of last var used
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 66 - 9/5/2025 20:20:35


    3884/    1069 :                     ; C: Clear = Double Precision
    3885/    1069 :                     ; P: Clear = Single Precision
    3886/    1069 :                     ; Z: Set = String
    3887/    1069 :                     ; S: Set = Integer
    3888/    1069 :                     ;
    3889/    1069 :                     ; A contains VALTYP_R - 3
    3890/    1069 :                     ;
    3891/    1069 :                     R_RST_28H:								;1069H
    3892/    1069 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
    3893/    106C : FE 08                   CPI     08H							;Compare with Double Precision to set carry (Clear if Dbl)
    3894/    106E : 3D                      DCR     A
    3895/    106F : 3D                      DCR     A							;Decrement type 3 times to set Z, P and S flags
    3896/    1070 : 3D                      DCR     A
    3897/    1071 : C9                      RET
    3898/    1072 :                     ;
    3899/    1072 :                     ; vector for handling logic functions
    3900/    1072 :                     ;
    3901/    1072 :                     L_LOGIC_VEC:
    3902/    1072 : 78                      MOV     A,B
    3903/    1073 : F5                      PUSH    PSW
    3904/    1074 : CD 01 35                CALL    R_CINT_FUN				   	;CINT function
    3905/    1077 : F1                      POP     PSW
    3906/    1078 : D1                      POP     D
    3907/    1079 : FE 7A                   CPI     7AH							;MOD priority
    3908/    107B : CA DF 37                JZ      L_MOD_PRI
    3909/    107E : FE 7B                   CPI     7BH							;BACKSLASH priority
    3910/    1080 : CA 7E 37                JZ      R_SINT_DIV				    ;Signed integer divide (FAC1=DE/HL)
    3911/    1083 : 01 D3 10                LXI     B,L_LD_FAC1_BYTE_1			;continuation function
    3912/    1086 : C5                      PUSH    B
    3913/    1087 : FE 46                   CPI     46H							;OR priority
    3914/    1089 : C2 92 10                JNZ     L_LOGIC_VEC_1
    3915/    108C :                     ;
    3916/    108C :                     ; OR function: A,L = DE | HL
    3917/    108C :                     ;
    3918/    108C :                     ;R_OR_FUN:								;108CH
    3919/    108C : 7B                      MOV     A,E
    3920/    108D : B5                      ORA     L
    3921/    108E : 6F                      MOV     L,A
    3922/    108F : 7C                      MOV     A,H
    3923/    1090 : B2                      ORA     D
    3924/    1091 : C9                      RET
    3925/    1092 :                     
    3926/    1092 :                     L_LOGIC_VEC_1:
    3927/    1092 : FE 50                   CPI     50H							;AND priority
    3928/    1094 : C2 9D 10                JNZ     L_LOGIC_VEC_2
    3929/    1097 :                     ;
    3930/    1097 :                     ; AND function:  A,L = DE & HL
    3931/    1097 :                     ;
    3932/    1097 :                     ;R_AND_FUN:								;1097H
    3933/    1097 : 7B                      MOV     A,E
    3934/    1098 : A5                      ANA     L
    3935/    1099 : 6F                      MOV     L,A
    3936/    109A : 7C                      MOV     A,H
    3937/    109B : A2                      ANA     D
    3938/    109C : C9                      RET
    3939/    109D :                     
    3940/    109D :                     L_LOGIC_VEC_2:
    3941/    109D : FE 3C                   CPI     3CH							;XOR priority
    3942/    109F : C2 A8 10                JNZ     L_LOGIC_VEC_3
    3943/    10A2 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 67 - 9/5/2025 20:20:35


    3944/    10A2 :                     ; XOR function:  A,L = DE ^ HL
    3945/    10A2 :                     ;
    3946/    10A2 :                     ;R_XOR_FUN:								;10A2H
    3947/    10A2 : 7B                      MOV     A,E
    3948/    10A3 : AD                      XRA     L
    3949/    10A4 : 6F                      MOV     L,A
    3950/    10A5 : 7C                      MOV     A,H
    3951/    10A6 : AA                      XRA     D
    3952/    10A7 : C9                      RET
    3953/    10A8 :                     
    3954/    10A8 :                     L_LOGIC_VEC_3:
    3955/    10A8 : FE 32                   CPI     32H							;EQV priority
    3956/    10AA : C2 B5 10                JNZ     R_IMP_FUN				    ;IMP function
    3957/    10AD :                     ;
    3958/    10AD :                     ; EQV function
    3959/    10AD :                     ;
    3960/    10AD :                     ;	EQV function (~(HL XOR DE))
    3961/    10AD :                     ;
    3962/    10AD :                     ;R_EQV_FUN:								;10ADH
    3963/    10AD : 7B                      MOV     A,E							;Move LSB of DE to A
    3964/    10AE : AD                      XRA     L							;XOR with LSB of HL
    3965/    10AF : 2F                      CMA									;Compliment the result
    3966/    10B0 : 6F                      MOV     L,A							;And save in L
    3967/    10B1 : 7C                      MOV     A,H							;Move MSB of HL to A
    3968/    10B2 : AA                      XRA     D							;XOR with D
    3969/    10B3 : 2F                      CMA									;Compliment that result
    3970/    10B4 : C9                      RET
    3971/    10B5 :                     ;
    3972/    10B5 :                     ; IMP function: Logical bit selection
    3973/    10B5 :                     ;
    3974/    10B5 :                     ;	IMP function (NOT ((NOT HL) AND DE))
    3975/    10B5 :                     ;
    3976/    10B5 :                     R_IMP_FUN:								;10B5H
    3977/    10B5 : 7D                      MOV     A,L							;Load LSB of HL
    3978/    10B6 : 2F                      CMA									;Complement HL
    3979/    10B7 : A3                      ANA     E							;AND with LSB of DE
    3980/    10B8 : 2F                      CMA									;Compliment the result
    3981/    10B9 : 6F                      MOV     L,A							;Save A
    3982/    10BA : 7C                      MOV     A,H							;Get MSB of HL
    3983/    10BB : 2F                      CMA									;Compliment HL
    3984/    10BC : A2                      ANA     D							;AND with MSB of DE
    3985/    10BD : 2F                      CMA									;Compliment the result
    3986/    10BE : C9                      RET
    3987/    10BF :                     ;
    3988/    10BF :                     ; Subtract HL - DE and unsigned convert to SNGL in FAC1
    3989/    10BF :                     ;
    3990/    10BF :                     ; IN:
    3991/    10BF :                     ;	HL, DE		operands
    3992/    10BF :                     ;
    3993/    10BF :                     L_SUB_DE_FROM_HL:
    3994/    10BF : 7D                      MOV     A,L							;HL -= DE
    3995/    10C0 : 93                      SUB     E
    3996/    10C1 : 6F                      MOV     L,A
    3997/    10C2 : 7C                      MOV     A,H
    3998/    10C3 : 9A                      SBB     D
    3999/    10C4 : 67                      MOV     H,A
    4000/    10C5 : C3 DB 37                JMP     L_CONV_UNSGND_HL_SNGL		;Convert unsigned integer HL to single precision FAC1
    4001/    10C8 :                     ;
    4002/    10C8 :                     ; LPOS function
    4003/    10C8 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 68 - 9/5/2025 20:20:35


    4004/    10C8 :                     R_LPOS_FUN:								;10C8H
    4005/    10C8 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
    4006/    10CB : C3 D1 10                JMP     L_LD_FAC1_BYTE				;Load byte iin A into FAC1
    4007/    10CE :                     ;
    4008/    10CE :                     ; POS function
    4009/    10CE :                     ;
    4010/    10CE :                     R_POS_FUN:								;10CEH
    4011/    10CE : 3A 88 F7                LDA     CURHPOS_R					;Horiz. position of cursor (0-39)
    4012/    10D1 :                     ;
    4013/    10D1 :                     ; Load byte in A into FAC1
    4014/    10D1 :                     ;
    4015/    10D1 :                     L_LD_FAC1_BYTE:							;10D1H
    4016/    10D1 : 6F                      MOV     L,A
    4017/    10D2 : AF                      XRA     A
    4018/    10D3 :                     L_LD_FAC1_BYTE_1:						;also continuation function
    4019/    10D3 : 67                      MOV     H,A
    4020/    10D4 : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
    4021/    10D7 :                     
    4022/    10D7 :                     L_DO_MATH_VCTR_TBL:
    4023/    10D7 : E5                      PUSH    H
    4024/    10D8 : E6 07                   ANI     07H							;max offset is 7
    4025/    10DA : 21 EE 02                LXI     H,R_MATH_VCTR_TBL			;Code Based. 
    4026/    10DD : 4F                      MOV     C,A							;zero extend A to BC
    4027/    10DE : 06 00                   MVI     B,00H
    4028/    10E0 : 09                      DAD     B							;byte index into R_MATH_VCTR_TBL
    4029/    10E1 : CD 31 10                CALL    L_VECT_JMP					;jump to vector
    4030/    10E4 : E1                      POP     H
    4031/    10E5 : C9                      RET
    4032/    10E6 :                     ;
    4033/    10E6 :                     ; Check for running program
    4034/    10E6 :                     ;
    4035/    10E6 :                     R_CHK_RUNNING_PGRM:						;10E6H
    4036/    10E6 : E5                      PUSH    H
    4037/    10E7 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    4038/    10EA : 23                      INX     H
    4039/    10EB : 7C                      MOV     A,H							;test HL
    4040/    10EC : B5                      ORA     L
    4041/    10ED : E1                      POP     H
    4042/    10EE : C0                      RNZ
    4043/    10EF :                     ;
    4044/    10EF :                     ; Generate ID error
    4045/    10EF :                     ;
    4046/    10EF :                     R_GEN_ID_ERROR:							;10EFH
    4047/    10EF : 1E 0C                   MVI     E,0CH						;OS error?
    4048/    10F1 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 12.
    4049/    10F4 :                     	
    4050/    10F4 :                     ;
    4051/    10F4 :                     ; A is 0 based token value 40H (_TAB_)..7FH (_QUOTE_)
    4052/    10F4 :                     ; None of these tokens are valid at the beginning of a crunched line,
    4053/    10F4 :                     ; except MID$:
    4054/    10F4 :                     ;	MID$(str, pos) = "test"
    4055/    10F4 :                     ;
    4056/    10F4 :                     L_IS_MIDSTR:
    4057/    10F4 : FE 7E                   CPI     _MID_-80H					;7EH
    4058/    10F6 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    4059/    10F9 : 23                      INX     H							;next 
    4060/    10FA : C3 C2 2A                JMP     LHSMID
    4061/    10FD :                     ; TODO unreachable code
    4062/    10FD : C3 46 04                JMP     R_GEN_SN_ERROR				;Generate Syntax error
    4063/    1100 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 69 - 9/5/2025 20:20:35


    4064/    1100 :                     ; INP function
    4065/    1100 :                     ;
    4066/    1100 :                     R_INP_FUN:								;1100H
    4067/    1100 : CD 31 11                CALL    L_CONINT
    4068/    1103 : 32 6B F6                STA     INCODE_R+1
    4069/    1106 : CD 6A F6                CALL    INCODE_R
    4070/    1109 : C3 D1 10                JMP     L_LD_FAC1_BYTE				;Load byte iin A into FAC1
    4071/    110C :                     ;
    4072/    110C :                     ; OUT statement
    4073/    110C :                     ;
    4074/    110C :                     R_OUT_STMT:								;110CH
    4075/    110C : CD 1F 11                CALL    L_SET_PORT_NUM
    4076/    110F : C3 67 F6                JMP     OUTCODE_R
    4077/    1112 :                     ;
    4078/    1112 :                     ; Evaluate expression at M
    4079/    1112 :                     ;
    4080/    1112 :                     ; OUT:
    4081/    1112 :                     ;	DE		integer result
    4082/    1112 :                     ;	Z		set if result <= 255
    4083/    1112 :                     ;
    4084/    1112 :                     ;
    4085/    1112 :                     L_GETINT:								;1112H
    4086/    1112 : (MACRO)                 CHRGET								;pre-increment
    4087/    1113 :                     ;
    4088/    1113 :                     ; Evaluate expression at M-1
    4089/    1113 :                     ;
    4090/    1113 :                     ; OUT:
    4091/    1113 :                     ;	Z		sign of expression
    4092/    1113 :                     ;	DE		expression value
    4093/    1113 :                     ;
    4094/    1113 :                     L_GETIN2:								;1113H
    4095/    1113 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    4096/    1116 :                     L_INTFR2:
    4097/    1116 : E5                      PUSH    H							;save text ptr
    4098/    1117 : CD 01 35                CALL    R_CINT_FUN				  	;CINT function
    4099/    111A : EB                      XCHG								;result to DE
    4100/    111B : E1                      POP     H							;restore text ptr
    4101/    111C : 7A                      MOV     A,D							;test sign
    4102/    111D : B7                      ORA     A
    4103/    111E : C9                      RET
    4104/    111F :                     
    4105/    111F :                     L_SET_PORT_NUM:
    4106/    111F : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    4107/    1122 : 32 6B F6                STA     INCODE_R+1					;port number
    4108/    1125 : 32 68 F6                STA     OUTCODE_R+1
    4109/    1128 : (MACRO)             	SYNCHK	','
    4110/    112A : C3 2E 11                JMP     L_GETBYT					;Evaluate byte expression at M-1
    4111/    112D :                     ;
    4112/    112D :                     ; Evaluate expression at M. Must be byte value
    4113/    112D :                     ;
    4114/    112D :                     ; OUT:
    4115/    112D :                     ;	A,E		byte value
    4116/    112D :                     ;
    4117/    112D :                     L_GTBYTC:								;112DH
    4118/    112D : (MACRO)                 CHRGET								;Get next non-white char from M
    4119/    112E :                     ;
    4120/    112E :                     ; Evaluate byte expression at M-1
    4121/    112E :                     ;
    4122/    112E :                     ; OUT:
    4123/    112E :                     ;	A, E		byte value
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 70 - 9/5/2025 20:20:35


    4124/    112E :                     ;
    4125/    112E :                     L_GETBYT:								;112EH
    4126/    112E : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    4127/    1131 :                     L_CONINT:								;CONVERT THE FAC TO AN INTEGER IN DE
    4128/    1131 : CD 16 11                CALL    L_INTFR2					;returns 0 if expression value <= 255
    4129/    1134 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;Generate FC error
    4130/    1137 : 2B                      DCX     H							;backup text ptr
    4131/    1138 : (MACRO)                 CHRGET								;Get next non-white char from M
    4132/    1139 : 7B                      MOV     A,E							;RETURN THE RESULT IN [A] AND [E]
    4133/    113A : C9                      RET
    4134/    113B :                     ;
    4135/    113B :                     ; LLIST statement
    4136/    113B :                     ;
    4137/    113B :                     R_LLIST_STMT:							;113BH
    4138/    113B : 3E 01                   MVI     A,01H
    4139/    113D : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
    4140/    1140 :                     ;
    4141/    1140 :                     ; LIST statement
    4142/    1140 :                     ;
    4143/    1140 :                     ; Code shared with R_EDIT_STMT
    4144/    1140 :                     ;
    4145/    1140 :                     ;
    4146/    1140 :                     R_LIST_STMT:							;1140H
    4147/    1140 : C1                      POP     B							;remove (fake) return address
    4148/    1141 : CD 0A 06                CALL    R_EVAL_LIST_ARGS			;Evaluate LIST statement arguments
    4149/    1144 : C5                      PUSH    B							;first line ptr in range
    4150/    1145 : 60                      MOV     H,B							;HL = first line ptr
    4151/    1146 : 69                      MOV     L,C
    4152/    1147 : 22 BA FA                SHLD    LASTLST_R					;Address where last BASIC list started
    4153/    114A :                     L_LIST_LOOP:
    4154/    114A : 21 FF FF                LXI     H,0FFFFH
    4155/    114D : 22 7A F6                SHLD    CURLIN_R					;set currently executing line number to -1
    4156/    1150 : E1                      POP     H							;result of R_EVAL_LIST_ARGS
    4157/    1151 : 22 BC FA                SHLD    NXTLINE_R					;next line ptr
    4158/    1154 : D1                      POP     D
    4159/    1155 : 4E                      MOV     C,M							;BC = ptr to next basic line
    4160/    1156 : 23                      INX     H
    4161/    1157 : 46                      MOV     B,M
    4162/    1158 : 23                      INX     H
    4163/    1159 : 78                      MOV     A,B							;test BC
    4164/    115A : B1                      ORA     C
    4165/    115B : CA 95 11                JZ      L_LIST_STMT_3				;brif BC == 0
    4166/    115E : CD 1A 42                CALL    L_TST_FCBLAST
    4167/    1161 : CC F3 13                CZ      L_CHK_KEY_CTRL				;calif FCBLAST==0: Test for CTRL-C or CTRL-S
    4168/    1164 : C5                      PUSH    B							;save ptr to next basic line
    4169/    1165 : 4E                      MOV     C,M							;BC = Basic line number
    4170/    1166 : 23                      INX     H
    4171/    1167 : 46                      MOV     B,M
    4172/    1168 : 23                      INX     H							;HL now points to Basic txt
    4173/    1169 : C5                      PUSH    B							;save line number
    4174/    116A : E3                      XTHL								;swap with Basic txt ptr
    4175/    116B : EB                      XCHG								;line number to DE
    4176/    116C : (MACRO)                 COMPAR								;HL - DE: HL - DE
    4177/    116D : C1                      POP     B							;Basic txt ptr
    4178/    116E : DA 94 11                JC      L_LIST_STMT_2				;brif HL < DE: done
    4179/    1171 : E3                      XTHL								;swap Basic txt ptr and ptr to next Basic line
    4180/    1172 : E5                      PUSH    H
    4181/    1173 : C5                      PUSH    B
    4182/    1174 : EB                      XCHG
    4183/    1175 : 22 A1 FB                SHLD    DOT_R						;Most recent used or entered line number
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 71 - 9/5/2025 20:20:35


    4184/    1178 : CD D4 39                CALL    R_PRINT_HL_ON_LCD			;Print binary number in HL at current position
    4185/    117B : E1                      POP     H							;ptr to Basic txt
    4186/    117C : 7E                      MOV     A,M
    4187/    117D : FE 09                   CPI     09H
    4188/    117F : CA 85 11                JZ      +
    4189/    1182 : 3E 20                   MVI     A,' '
    4190/    1184 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    4191/    1185 : CD AA 11            +	CALL    L_EXPND_BASIC_LN			;copy Basic txt line to INPBUF_R
    4192/    1188 : 21 85 F6                LXI     H,INPBUF_R					;Keyboard buffer
    4193/    118B : CD A2 11                CALL    R_BUF_TO_LCD				;Send buffer at M to screen
    4194/    118E : CD CB 4B                CALL    L_PRINT_CRLF
    4195/    1191 : C3 4A 11                JMP     L_LIST_LOOP
    4196/    1194 :                     ;
    4197/    1194 :                     ; Finished list Basic Program lines
    4198/    1194 :                     ;
    4199/    1194 :                     L_LIST_STMT_2:
    4200/    1194 : C1                      POP     B							;clear stack
    4201/    1195 :                     L_LIST_STMT_3:
    4202/    1195 : 3A 51 F6                LDA     EDITFLG_R
    4203/    1198 : A7                      ANA     A
    4204/    1199 : C2 82 5E                JNZ     L_EDIT_MODE					;brif EDITFLG_R it set
    4205/    119C : 3E 1A                   MVI     A,1AH						;^Z
    4206/    119E : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    4207/    119F : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
    4208/    11A2 :                     ;
    4209/    11A2 :                     ; Send buffer at M to screen
    4210/    11A2 :                     ;
    4211/    11A2 :                     R_BUF_TO_LCD:							;11A2H
    4212/    11A2 : 7E                      MOV     A,M							;get char
    4213/    11A3 : B7                      ORA     A							;test
    4214/    11A4 : C8                      RZ									;retif end of line
    4215/    11A5 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    4216/    11A6 : 23                      INX     H							;next char ptr
    4217/    11A7 : C3 A2 11                JMP     R_BUF_TO_LCD				;Send buffer at M to screen
    4218/    11AA :                     
    4219/    11AA :                     L_EXPND_BASIC_LN:
    4220/    11AA : 01 85 F6                LXI     B,INPBUF_R				    ;Keyboard buffer
    4221/    11AD : 16 FF                   MVI     D,0FFH						;maximum BASIC line length
    4222/    11AF : AF                      XRA     A
    4223/    11B0 : 32 66 FB                STA     DORES_R						;clear WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4224/    11B3 : C3 B9 11                JMP     L_EXPND_BASIC_LN_2
    4225/    11B6 :                     L_EXPND_BASIC_LN_1:
    4226/    11B6 : 03                      INX     B							;next output ptr
    4227/    11B7 : 15                      DCR     D							;decrement BASIC line length
    4228/    11B8 : C8                      RZ									;retif done
    4229/    11B9 :                     L_EXPND_BASIC_LN_2:
    4230/    11B9 : 7E                  	MOV     A,M							;get txt/token from Basic program
    4231/    11BA : 23                      INX     H							;next
    4232/    11BB : B7                      ORA     A							;test end of line
    4233/    11BC : 02                      STAX    B							;store it in output buffer
    4234/    11BD : C8                      RZ									;retif end of line
    4235/    11BE : FE 22                   CPI     '"'
    4236/    11C0 : C2 CD 11                JNZ     +							;brif char != '"'
    4237/    11C3 :                     ; char == '"': toggle DORES_R bit 0
    4238/    11C3 : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4239/    11C6 : EE 01                   XRI     01H							;00000001
    4240/    11C8 : 32 66 FB                STA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4241/    11CB : 3E 22                   MVI     A,'"'						;reload
    4242/    11CD : FE 3A               +	CPI     ':'
    4243/    11CF : C2 E1 11                JNZ     L_EXPND_BASIC_LN_3			;brif char != ':'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 72 - 9/5/2025 20:20:35


    4244/    11D2 :                     ; char == ':': clear DORES_R	 bit 1 unless DORES_R bit 7 is set
    4245/    11D2 : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4246/    11D5 : 1F                      RAR
    4247/    11D6 : DA DF 11                JC      +
    4248/    11D9 : 17                      RAL
    4249/    11DA : E6 FD                   ANI     0FDH						;11111101 clear bit 1
    4250/    11DC : 32 66 FB                STA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4251/    11DF : 3E 3A               +	MVI     A,':'						;reload
    4252/    11E1 :                     L_EXPND_BASIC_LN_3:
    4253/    11E1 : B7                      ORA     A
    4254/    11E2 : F2 B6 11                JP      L_EXPND_BASIC_LN_1			;brif A not a BASIC token
    4255/    11E5 :                     ; BASIC token found
    4256/    11E5 : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4257/    11E8 : 1F                      RAR
    4258/    11E9 : DA B6 11                JC      L_EXPND_BASIC_LN_1			;brif DORES_R bit 0 is set
    4259/    11EC : 2B                      DCX     H							;backup in BASIC txt
    4260/    11ED : 1F                      RAR									;test DORES_R bit 2
    4261/    11EE : 1F                      RAR
    4262/    11EF : D2 33 12                JNC     L_EXPND_BASIC_LN_9
    4263/    11F2 : 7E                      MOV     A,M
    4264/    11F3 : FE FF                   CPI     0FFH
    4265/    11F5 : E5                      PUSH    H							;save HL, BC
    4266/    11F6 : C5                      PUSH    B
    4267/    11F7 :                     ;
    4268/    11F7 :                     ; Check for comment
    4269/    11F7 :                     ;
    4270/    11F7 : 21 1A 12                LXI     H,L_EXPND_BASIC_LN_4		;use continuation function to save 4 bytes
    4271/    11FA : E5                      PUSH    H
    4272/    11FB : C0                      RNZ									;to L_EXPND_BASIC_LN_4 if A != 0FFH
    4273/    11FC : 0B                      DCX     B							;backup in INPBUF_R
    4274/    11FD : 0A                      LDAX    B							
    4275/    11FE : FE 4D                   CPI     'M'
    4276/    1200 : C0                      RNZ									;to L_EXPND_BASIC_LN_4 if A != 'M'
    4277/    1201 : 0B                      DCX     B							;backup in INPBUF_R
    4278/    1202 : 0A                      LDAX    B
    4279/    1203 : FE 45                   CPI     'E'
    4280/    1205 : C0                      RNZ									;to L_EXPND_BASIC_LN_4 if A != 'E'
    4281/    1206 : 0B                      DCX     B							;backup in INPBUF_R
    4282/    1207 : 0A                      LDAX    B
    4283/    1208 : FE 52                   CPI     'R'
    4284/    120A : C0                      RNZ									;to L_EXPND_BASIC_LN_4 if A != "R'
    4285/    120B : 0B                      DCX     B							;backup in INPBUF_R
    4286/    120C : 0A                      LDAX    B
    4287/    120D : FE 3A                   CPI     ':'
    4288/    120F : C0                      RNZ									;to L_EXPND_BASIC_LN_4 if A != ':'
    4289/    1210 : F1                      POP     PSW
    4290/    1211 : F1                      POP     PSW
    4291/    1212 : E1                      POP     H
    4292/    1213 : 14                      INR     D
    4293/    1214 : 14                      INR     D
    4294/    1215 : 14                      INR     D
    4295/    1216 : 14                      INR     D
    4296/    1217 : C3 42 12                JMP     L_EXPND_BASIC_LN_10
    4297/    121A :                     L_EXPND_BASIC_LN_4:
    4298/    121A : C1                      POP     B							;restore HL, BC
    4299/    121B : E1                      POP     H
    4300/    121C : 7E                      MOV     A,M							;get token from BASIC txt
    4301/    121D :                     L_EXPND_BASIC_LN_5:
    4302/    121D : 23                      INX     H							;next
    4303/    121E : C3 B6 11                JMP     L_EXPND_BASIC_LN_1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 73 - 9/5/2025 20:20:35


    4304/    1221 :                     	
    4305/    1221 :                     L_EXPND_BASIC_LN_6:
    4306/    1221 : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4307/    1224 : F6 02                   ORI     02H							;00000010 Set bit 1 (_DATA)
    4308/    1226 :                     L_EXPND_BASIC_LN_7:
    4309/    1226 : 32 66 FB                STA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4310/    1229 : AF                      XRA     A
    4311/    122A : C9                      RET
    4312/    122B :                     L_EXPND_BASIC_LN_8:
    4313/    122B : 3A 66 FB                LDA     DORES_R						;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
    4314/    122E : F6 04                   ORI     04H							;00000100 Set bit 2 (_REM)
    4315/    1230 : C3 26 12                JMP     L_EXPND_BASIC_LN_7
    4316/    1233 :                     L_EXPND_BASIC_LN_9:
    4317/    1233 : 17                      RAL
    4318/    1234 : DA 1D 12                JC      L_EXPND_BASIC_LN_5
    4319/    1237 : 7E                      MOV     A,M							;get token from BASIC txt
    4320/    1238 : FE 83                   CPI     _DATA
    4321/    123A : CC 21 12                CZ      L_EXPND_BASIC_LN_6			;calif A == _DATA
    4322/    123D : FE 8E                   CPI     _REM
    4323/    123F : CC 2B 12                CZ      L_EXPND_BASIC_LN_8			;calif A == _REM
    4324/    1242 :                     L_EXPND_BASIC_LN_10:
    4325/    1242 : 7E                      MOV     A,M							;reload token from BASIC txt
    4326/    1243 : 23                      INX     H							;next
    4327/    1244 : FE 91                   CPI     _ELSE
    4328/    1246 : CC 43 36                CZ      L_DEC_BC					;calif A == _ELSE
    4329/    1249 : D6 7F                   SUI     7FH							;DEL rebase token
    4330/    124B : E5                      PUSH    H							;save ptr to BASIC txt
    4331/    124C :                     ; find BASIC keyword
    4332/    124C : 5F                      MOV     E,A							;rebased token value
    4333/    124D : 21 80 00                LXI     H,R_BASIC_KEYWORD_TBL		;Code Based. 
    4334/    1250 : 7E                  -	MOV     A,M							;get char from code space
    4335/    1251 : 23                      INX     H							;next
    4336/    1252 : B7                      ORA     A							;find beginning of keyword
    4337/    1253 : F2 50 12                JP      -							;brif bit 7 clear
    4338/    1256 : 1D                      DCR     E							;decrement rebased token value
    4339/    1257 : C2 50 12                JNZ		-
    4340/    125A : E6 7F                   ANI     7FH							;01111111 clear bit 7
    4341/    125C :                     ; copy BASIC keyword to buffer
    4342/    125C : 02                  -	STAX    B							;copy char to INPBUF_R
    4343/    125D : 03                      INX     B							;next
    4344/    125E : 15                      DCR     D							;token length
    4345/    125F : CA E2 27                JZ      L_POP_PSW_RET				;brif 0: pop PSW, ret
    4346/    1262 : 7E                      MOV     A,M							;next char from code space
    4347/    1263 : 23                      INX     H							;next
    4348/    1264 : B7                      ORA     A							;find end of keyword
    4349/    1265 : F2 5C 12                JP		-							;brif bit 7 clear
    4350/    1268 : E1                      POP     H
    4351/    1269 : C3 B9 11                JMP     L_EXPND_BASIC_LN_2
    4352/    126C :                     ;
    4353/    126C :                     ; Copy from (DE) to (BE) until DE == [VARTAB_R]
    4354/    126C :                     ;
    4355/    126C :                     ; IN:
    4356/    126C :                     ;	BC		destination ptr
    4357/    126C :                     ;	HL		src ptr
    4358/    126C :                     ;
    4359/    126C :                     L_COPY_TO_VARTAB:
    4360/    126C : EB                      XCHG								;argument HL to DE
    4361/    126D : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
    4362/    1270 : 1A                  -	LDAX    D
    4363/    1271 : 02                      STAX    B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 74 - 9/5/2025 20:20:35


    4364/    1272 : 03                      INX     B
    4365/    1273 : 13                      INX     D
    4366/    1274 : (MACRO)                 COMPAR								;Compare DE and [VARTAB_R]: HL - DE: HL - DE
    4367/    1275 : C2 70 12                JNZ     -							;brif not equal
    4368/    1278 : 60                      MOV     H,B							;HL = BC
    4369/    1279 : 69                      MOV     L,C
    4370/    127A : 22 B2 FB                SHLD    VARTAB_R					;Start of variable data pointer
    4371/    127D : 22 B4 FB                SHLD    ARYTAB_R					;ptr to Start of array table
    4372/    1280 : 22 B6 FB                SHLD    STRGEND_R					;Unused memory pointer
    4373/    1283 : C9                      RET
    4374/    1284 :                     ;
    4375/    1284 :                     ; PEEK function
    4376/    1284 :                     ;
    4377/    1284 :                     R_PEEK_FUN:								;1284H
    4378/    1284 : CD A1 12                CALL    L_CVT_TO_SIGNED_INT
    4379/    1287 : 7E                      MOV     A,M
    4380/    1288 : C3 D1 10                JMP     L_LD_FAC1_BYTE				;Load byte iin A into FAC1
    4381/    128B :                     ;
    4382/    128B :                     ; POKE function
    4383/    128B :                     ;
    4384/    128B :                     ; POKE addr,byte-value
    4385/    128B :                     ;
    4386/    128B :                     R_POKE_FUN:								;128BH
    4387/    128B : CD 97 12                CALL    R_EVAL_EXPR_2				;Evaluate expression at M_2: address
    4388/    128E : D5                      PUSH    D							;save address
    4389/    128F : (MACRO)             	SYNCHK	','
    4390/    1291 : CD 2E 11                CALL    L_GETBYT    				;Evaluate byte expression at M-1: byte value into A
    4391/    1294 : D1                      POP     D							;restore address
    4392/    1295 : 12                      STAX    D							;set memory
    4393/    1296 : C9                      RET
    4394/    1297 :                     ;
    4395/    1297 :                     ; Evaluate expression at M_2
    4396/    1297 :                     ;
    4397/    1297 :                     ;	Expect a 16-bit integer
    4398/    1297 :                     ;
    4399/    1297 :                     ; OUT:
    4400/    1297 :                     ;	DE		16-bit integer
    4401/    1297 :                     ;
    4402/    1297 :                     R_EVAL_EXPR_2:							;1297H
    4403/    1297 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    4404/    129A : E5                      PUSH    H							;save text ptr
    4405/    129B : CD A1 12                CALL    L_CVT_TO_SIGNED_INT			;FAC1 to HL
    4406/    129E : EB                      XCHG								;result to DE
    4407/    129F : E1                      POP     H							;restore text ptr
    4408/    12A0 : C9                      RET
    4409/    12A1 :                     ;
    4410/    12A1 :                     ;Convert last expression to integer (-32768 to 32767) or OV
    4411/    12A1 :                     ;
    4412/    12A1 :                     L_CVT_TO_SIGNED_INT:
    4413/    12A1 : 01 01 35                LXI     B,R_CINT_FUN				;CINT function
    4414/    12A4 : C5                      PUSH    B							;insert new return address
    4415/    12A5 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    4416/    12A6 : F8                      RM									;retif INT type
    4417/    12A7 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
    4418/    12A8 : F8                      RM									;retif FAC1 negative
    4419/    12A9 : CD 2A 35                CALL    R_CSNG_FUN					;CSNG function
    4420/    12AC : 01 45 32                LXI     B,3245H						;Load BCDE with Single precision for 32768.0
    4421/    12AF : 11 76 80                LXI     D,8076H
    4422/    12B2 : CD 98 34                CALL    R_SNGL_CMP_BCDE_FAC1		;Compare single precision in BCDE with FAC1
    4423/    12B5 : D8                      RC
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 75 - 9/5/2025 20:20:35


    4424/    12B6 : 01 45 65                LXI     B,6545H						;Load BCDE with Single precision for 65536.0
    4425/    12B9 : 11 53 60                LXI     D,6053H
    4426/    12BC : CD 98 34                CALL    R_SNGL_CMP_BCDE_FAC1        ;Compare single precision in BCDE with FAC1
    4427/    12BF : D2 55 04                JNC     R_GEN_OV_ERROR				;Generate OV error
    4428/    12C2 : 01 C5 65                LXI     B,65C5H						;Load BCDE with Single precision for -65536.0
    4429/    12C5 : 11 53 60                LXI     D,6053H
    4430/    12C8 : C3 F4 37                JMP     R_SNGL_ADD_BCDE				;Single precision addition (FAC1=FAC1+BCDE)
    4431/    12CB :                     ;
    4432/    12CB :                     ; Wait for key from keyboard. Special characters only?
    4433/    12CB :                     ;
    4434/    12CB :                     ; OUT:
    4435/    12CB :                     ;	A		key
    4436/    12CB :                     ;	carry	set if no key
    4437/    12CB :                     ;
    4438/    12CB :                     R_WAIT_KEY:								;12CBH
    4439/    12CB : E5                      PUSH    H
    4440/    12CC : D5                      PUSH    D
    4441/    12CD : C5                      PUSH    B
    4442/    12CE : CD D4 12                CALL    L_WAIT_KEY_1
    4443/    12D1 : C3 EE 14                JMP     R_POP_ALL_WREGS
    4444/    12D4 :                     ;
    4445/    12D4 :                     ; Wait for key from keyboard - no reg PUSH
    4446/    12D4 :                     ;
    4447/    12D4 :                     L_WAIT_KEY_1:
    4448/    12D4 : (MACRO)             	RST38H	04H							;intercepted by VT100 code
    4449/    12D6 :                     ;
    4450/    12D6 :                     ; Process next byte of FKey text to "inject" the keys
    4451/    12D6 :                     ;
    4452/    12D6 : 2A 2C F6                LHLD    FNKMAC_R					;Get pointer to FKey text (from FKey table) for selected FKey
    4453/    12D9 : 24                      INR     H							;test H for 0
    4454/    12DA : 25                      DCR     H
    4455/    12DB : CA 00 13                JZ      L_INJECT_KEYS				;Jump to process paste buffer injection if no FKey selected
    4456/    12DE : 46                      MOV     B,M							;Get next byte from selected FKey text
    4457/    12DF : 78                      MOV     A,B
    4458/    12E0 : B7                      ORA     A
    4459/    12E1 : CA EA 12                JZ      L_WAIT_KEY_2				;brif (HL) == 0
    4460/    12E4 : 23                      INX     H							;next
    4461/    12E5 : 7E                      MOV     A,M
    4462/    12E6 : B7                      ORA     A
    4463/    12E7 : C2 EB 12                JNZ     +							;brif (HL) != 0
    4464/    12EA :                     L_WAIT_KEY_2:
    4465/    12EA : 67                      MOV     H,A							;Load zero into H to indicate FKey no longer active
    4466/    12EB : 22 2C F6            +	SHLD    FNKMAC_R					;Store pointer to FKey text (from FKey table) for selected FKey
    4467/    12EE : 78                      MOV     A,B
    4468/    12EF : C9                      RET
    4469/    12F0 :                     ;
    4470/    12F0 :                     ; Process PASTE key from keyboard
    4471/    12F0 :                     ;
    4472/    12F0 :                     L_PROCESS_PASTE:
    4473/    12F0 : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
    4474/    12F3 : 87                      ADD     A							;bit 7 to carry
    4475/    12F4 : D8                      RC  								;return if TEXT   
    4476/    12F5 : 21 00 00                LXI     H,0
    4477/    12F8 : 22 2E F6                SHLD    PBUFIDX_R					;initialize Paste Buffer Index
    4478/    12FB : 3E 0D                   MVI     A,0DH
    4479/    12FD : 32 A1 FA                STA     LSTPST_R					;Set last paste character to ENTER
    4480/    1300 :                     ;
    4481/    1300 :                     ; Process next byte from Paste buffer to "inject" the keystrokes
    4482/    1300 :                     ;
    4483/    1300 :                     L_INJECT_KEYS:							;process paste buffer injection if no FKey selected
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 76 - 9/5/2025 20:20:35


    4484/    1300 : 2A 2E F6                LHLD    PBUFIDX_R					;Paste Buffer Index
    4485/    1303 : 7D                      MOV     A,L							;test for 0FFFFH
    4486/    1304 : A4                      ANA     H
    4487/    1305 : 3C                      INR     A
    4488/    1306 : CA 3D 13                JZ      L_NO_INJECT_KEYS			;brif PBUFIDX_R == 0FFFFH
    4489/    1309 : E5                      PUSH    H							;save PBUFIDX_R
    4490/    130A : 3A A1 FA                LDA     LSTPST_R					;Get value of last paste character
    4491/    130D : FE 0D                   CPI     0DH							;was it ENTER?
    4492/    130F : CC 46 21                CZ      LNKFIL						;Update line addresses for ALL BASIC programs if it was ENTER
    4493/    1312 : 2A A5 F9                LHLD    HAYASHI_R+1					;Start of Paste Buffer
    4494/    1315 : D1                      POP     D							;PBUFIDX_R
    4495/    1316 : 19                      DAD     D							;&SCRDIR_R[PBUFIDX_R]
    4496/    1317 : 7E                      MOV     A,M
    4497/    1318 : 32 A1 FA                STA     LSTPST_R					;last Paste Buffer character
    4498/    131B : 47                      MOV     B,A							;save
    4499/    131C : FE 1A                   CPI     1AH							;^Z?
    4500/    131E : 3E 00                   MVI     A,00H						;preload return value
    4501/    1320 : CA 36 13                JZ      L_INSRT_FFFF
    4502/    1323 : CD 70 72                CALL    R_CHK_PENDING_KEYS			;Check keyboard queue for pending characters
    4503/    1326 : DA 36 13                JC      L_INSRT_FFFF				;brif pending character
    4504/    1329 : 23                      INX     H							;next Paste Buffer character
    4505/    132A : 7E                      MOV     A,M
    4506/    132B : EB                      XCHG								;Paste Buffer ptr to DE
    4507/    132C : 23                      INX     H							;PBUFIDX_R
    4508/    132D : 22 2E F6                SHLD    PBUFIDX_R					;and save
    4509/    1330 : FE 1A                   CPI     1AH							;^Z?
    4510/    1332 : 78                      MOV     A,B							;previous Paste Buffer character
    4511/    1333 : 37                      STC								;clear Carry
    4512/    1334 : 3F                      CMC
    4513/    1335 : C0                      RNZ									;done if != ^Z
    4514/    1336 :                     L_INSRT_FFFF:
    4515/    1336 : 21 FF FF                LXI     H,0FFFFH					;reset Paste Buffer Index
    4516/    1339 : 22 2E F6                SHLD    PBUFIDX_R
    4517/    133C : C9                      RET
    4518/    133D :                     
    4519/    133D :                     L_NO_INJECT_KEYS:
    4520/    133D : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
    4521/    1340 : C2 58 13                JNZ     +							;brif char present
    4522/    1343 : CD C2 13                CALL    L_CURSOR_ON					;Turn cursor on if not already during program pause
    4523/    1346 : 3E FF                   MVI     A,0FFH
    4524/    1348 : 32 56 F6                STA     PWROFF_R					;Set Power off exit condition switch
    4525/    134B : CD DB 13            -	CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
    4526/    134E : CA 4B 13                JZ      -							;loop
    4527/    1351 : AF                      XRA     A
    4528/    1352 : 32 56 F6                STA     PWROFF_R					;Clear Power off exit condition switch
    4529/    1355 : CD D0 13                CALL    L_CURSOR_OFF				;Turn cursor back off if it was off before
    4530/    1358 : 21 32 F9            +	LXI     H,PWRDWN_R					;test Power Down Flag
    4531/    135B : 7E                      MOV     A,M
    4532/    135C : A7                      ANA     A
    4533/    135D : C2 B5 13                JNZ     L_POWER_OFF					;brif PWRDWN_R != 0
    4534/    1360 : CD B1 1B                CALL    R_KICK_PWR_OFF_WDT			;Renew automatic power-off counter
    4535/    1363 : CD 42 72                CALL    R_SCAN_KEYBOARD				;Scan keyboard for special character (CTRL-BREAK ==> CTRL-C)
    4536/    1366 : D0                      RNC									;retif no special key
    4537/    1367 : D6 0B                   SUI     PASTE_KEY					;Test for PASTE key
    4538/    1369 : CA F0 12                JZ      L_PROCESS_PASTE				;brif PASTE_KEY: Process PASTE key (F11 on virtualt)
    4539/    136C : D2 C0 13                JNC     L_RETURN_ZERO				;brif A > PASTE_KEY (0BH): return 0
    4540/    136F :                     ; A (keyvalue - PASTE_KEY) now negative
    4541/    136F : 3C                      INR     A							;test for SHIFT-PRINT key
    4542/    1370 : CA 9F 13                JZ      L_INJECT_KEYS_3				;Jump to process special "Paste" of SHIFT-PRINT key sequence
    4543/    1373 : 3C                      INR     A							;Test for PRINT key
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 77 - 9/5/2025 20:20:35


    4544/    1374 : CA 5E 1E                JZ      R_LCOPY_STMT				;LCOPY statement (F10 on virtualt)
    4545/    1377 : 3C                      INR     A							;Test for LABEL key
    4546/    1378 : CA A5 13                JZ      R_TOGGLE_LABEL				;Toggle function key label line (F9 on virtualt)
    4547/    137B :                     ; A = (keyvalue - 0BH + 3) < 0
    4548/    137B :                     ; F1..F8 = -8..-1
    4549/    137B : 5F                      MOV     E,A							;save negative Function keyvalue
    4550/    137C : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
    4551/    137F : 87                      ADD     A							;move bit 6 (TELCOM) to carry
    4552/    1380 : 87                      ADD     A
    4553/    1381 : 7B                      MOV     A,E							;restore incremented key value
    4554/    1382 : D8                      RC									;done if TELCOM
    4555/    1383 : 16 FF                   MVI     D,0FFH						;sign extend Function keyvalue to DE
    4556/    1385 :                     ;
    4557/    1385 :                     ; This is calculating the FKey table entry in FNKMAC_R
    4558/    1385 :                     ; FNKSTR_R is an area of 8 keyvalue strings, each 16 bytes long
    4559/    1385 :                     ; A contains function keyvalue -8..-1 (F1..F8)
    4560/    1385 :                     ;
    4561/    1385 : EB                      XCHG								;Function keyvalue to HL				
    4562/    1386 : 29                      DAD     H							;x2
    4563/    1387 : 29                      DAD     H							;x4
    4564/    1388 : 29                      DAD     H							;x8
    4565/    1389 : 29                      DAD     H							;x16
    4566/    138A : 11 09 F8                LXI     D,FNKSTR_R+128				;ptr beyond end of function keyvalue strings
    4567/    138D : 19                      DAD     D							;HL is negative offset
    4568/    138E : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
    4569/    1391 : A7                      ANA     A
    4570/    1392 : F2 99 13                JP      L_INJECT_KEYS_2				;brif !TEXT
    4571/    1395 : 23                      INX     H							;HL += 4
    4572/    1396 : 23                      INX     H
    4573/    1397 : 23                      INX     H
    4574/    1398 : 23                      INX     H
    4575/    1399 :                     L_INJECT_KEYS_2:
    4576/    1399 : 22 2C F6            	SHLD    FNKMAC_R					;Save pointer to FKey text (from FKey table) for selected FKey
    4577/    139C : C3 D4 12                JMP     L_WAIT_KEY_1				;start returning the function keyvalue string
    4578/    139F :                     
    4579/    139F :                     L_INJECT_KEYS_3:
    4580/    139F : 2A 8A F8                LHLD    SHFTPRNT_R
    4581/    13A2 : C3 99 13                JMP     L_INJECT_KEYS_2
    4582/    13A5 :                     ;
    4583/    13A5 :                     ; Toggle function key label line, if enabled
    4584/    13A5 :                     ;
    4585/    13A5 :                     R_TOGGLE_LABEL:							;13A5H
    4586/    13A5 : 3A AD FA                LDA     LINENA_R					;Label line enable flag
    4587/    13A8 : A7                      ANA     A
    4588/    13A9 : C8                      RZ									;return if label line not enabled
    4589/    13AA : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
    4590/    13AD : EE FF                   XRI     0FFH						;flip status
    4591/    13AF :                     L_SET_LABEL_LINE:
    4592/    13AF : CA 8A 42                JZ      R_ERASE_FKEY_DISP			;Erase function key display if now OFF
    4593/    13B2 : C3 A8 42                JMP     R_DISP_FKEY_LINE			;ON: Display function key line
    4594/    13B5 :                     ;
    4595/    13B5 :                     ; PWRDWN_R == 0FFH => Power Off
    4596/    13B5 :                     ;
    4597/    13B5 :                     ; IN:
    4598/    13B5 :                     ;	HL points to PWRDWN_R
    4599/    13B5 :                     ;
    4600/    13B5 :                     L_POWER_OFF:
    4601/    13B5 : F3                      DI 
    4602/    13B6 : 36 00                   MVI     M,00H						;clear Power Down Flag
    4603/    13B8 : 3A 57 F6                LDA     TIMDWN_R					;POWER down time (1/10ths of a minute)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 78 - 9/5/2025 20:20:35


    4604/    13BB : 2B                      DCX     H							;Point to power-down count-down
    4605/    13BC : 77                      MOV     M,A							;Update power-down count-down for next power-up
    4606/    13BD : CD 3F 14                CALL    R_POWER_DOWN				;Turn off computer
    4607/    13C0 :                     L_RETURN_ZERO:
    4608/    13C0 : AF                      XRA     A
    4609/    13C1 : C9                      RET
    4610/    13C2 :                     
    4611/    13C2 :                     ; 
    4612/    13C2 :                     ; Turn cursor on if not already during program pause
    4613/    13C2 :                     ; 
    4614/    13C2 :                     L_CURSOR_ON:
    4615/    13C2 : 3A 3F F6                LDA     CURSTAT_R					;Cursor status (0 = off)
    4616/    13C5 : 32 CB FA                STA     OLDCURSTAT_R				;Storage if cursor was on before BASIC CTRL-S
    4617/    13C8 : A7                      ANA     A
    4618/    13C9 : C0                      RNZ
    4619/    13CA : CD 49 42                CALL    R_TURN_CURSOR_ON			;Turn the cursor on
    4620/    13CD : C3 62 42                JMP     R_SEND_ESC_X				;Send ESC X
    4621/    13D0 :                     
    4622/    13D0 :                     ; 
    4623/    13D0 :                     ; Turn cursor back off after BASIC "un-pause" if it was off before
    4624/    13D0 :                     ; 
    4625/    13D0 :                     L_CURSOR_OFF:
    4626/    13D0 : 3A CB FA                LDA     OLDCURSTAT_R				;Storage if cursor was on before BASIC CTRL-S
    4627/    13D3 : A7                      ANA     A
    4628/    13D4 : C0                      RNZ
    4629/    13D5 : CD 4E 42                CALL    R_TURN_CURSOR_OFF			;Turn the cursor off
    4630/    13D8 : C3 62 42                JMP     R_SEND_ESC_X				;Send ESC X
    4631/    13DB :                     ;
    4632/    13DB :                     ; Check keyboard queue for pending characters
    4633/    13DB :                     ;
    4634/    13DB :                     R_CHK_KEY_QUEUE:						;13DBH
    4635/    13DB : 3A 2D F6                LDA     FNKMAC_R+1					;MSB of FNKMAC_R ptr
    4636/    13DE : A7                      ANA     A
    4637/    13DF : C0                      RNZ									;retif FNKMAC_R+1 != 0
    4638/    13E0 : 3A 32 F9                LDA     PWRDWN_R					;Power Down Flag
    4639/    13E3 : A7                      ANA     A
    4640/    13E4 : C0                      RNZ									;retif PWRDWN_R != 0
    4641/    13E5 : E5                      PUSH    H
    4642/    13E6 : 2A 2E F6                LHLD    PBUFIDX_R					;Paste Buffer Index
    4643/    13E9 : 7D                      MOV     A,L
    4644/    13EA : A4                      ANA     H
    4645/    13EB : 3C                      INR     A
    4646/    13EC : E1                      POP     H
    4647/    13ED : C0                      RNZ									;return if PBUFIDX_R != 0FFFFH    
    4648/    13EE : (MACRO)             	RST38H	06H
    4649/    13F0 : C3 70 72                JMP     R_CHK_PENDING_KEYS          ;Check keyboard queue for pending characters
    4650/    13F3 :                     ;
    4651/    13F3 :                     ; Test for CTRL-C or CTRL-S during BASIC Execute
    4652/    13F3 :                     ;
    4653/    13F3 :                     L_CHK_KEY_CTRL:
    4654/    13F3 : CD 83 72                CALL    R_CHK_BREAK				  	;Check for break or wait (CTRL-S)
    4655/    13F6 : C8                      RZ									;No
    4656/    13F7 : FE 03                   CPI     03H							;^C
    4657/    13F9 : CA 12 14                JZ      +							;brif TRUE
    4658/    13FC : FE 13                   CPI     13H							;^S
    4659/    13FE : C0                      RNZ									;NO
    4660/    13FF : CD C2 13                CALL    L_CURSOR_ON					;Turn cursor on if not already during program pause
    4661/    1402 :                     ;$$LOOP:
    4662/    1402 : CD 83 72            -	CALL    R_CHK_BREAK				    ;Check for break or wait (CTRL-S)
    4663/    1405 : FE 13                   CPI     13H							;^S
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 79 - 9/5/2025 20:20:35


    4664/    1407 : CA D0 13                JZ      L_CURSOR_OFF						;brif TRUE to restore cursor
    4665/    140A : FE 03                   CPI     03H							;^C
    4666/    140C : C2 02 14                JNZ     -							;$$LOOP brif FALSE
    4667/    140F : CD D0 13                CALL    L_CURSOR_OFF						;restore cursor
    4668/    1412 : AF                  +	XRA     A
    4669/    1413 : 32 AA FF                STA     KBCNT_R						;Keyboard buffer count
    4670/    1416 : C3 9A 40                JMP     R_STOP_STMT				    ;STOP statement
    4671/    1419 :                     ;
    4672/    1419 :                     ; POWER statement
    4673/    1419 :                     ;
    4674/    1419 :                     R_POWER_STMT:							;1419H
    4675/    1419 : D6 A4                   SUI     _CONT						;0A4H CONT token
    4676/    141B : CA 59 14                JZ      R_POWER_CONT_STMT			;POWER CONT statement: disable automatic shutdown
    4677/    141E : FE 27                   CPI     _OFF-_CONT					;0CBH-0A4H = 27H: _OFF token
    4678/    1420 : C2 61 14                JNZ     R_POWER_ON_STMT				;POWER ON statement
    4679/    1423 : (MACRO)                 CHRGET								;Get next non-white char from M
    4680/    1424 : CA 51 14                JZ      R_POWER_DOWN_NOSTATE		;brif done: Turn off computer
    4681/    1427 : (MACRO)             	SYNCHK	','
    4682/    1429 : (MACRO)             	SYNCHK	_RESUME						;RESUME token
    4683/    142B : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    4684/    142E : C3 3F 14                JMP     R_POWER_DOWN				;Turn off computer, preserving state
    4685/    1431 :                     ;
    4686/    1431 :                     ; Normal TRAP (low power) interrupt routine
    4687/    1431 :                     ;
    4688/    1431 :                     R_LOW_PWR_TRAP:							;1431H
    4689/    1431 : F5                      PUSH    PSW
    4690/    1432 : 3A 56 F6                LDA     PWROFF_R					;Power off exit condition switch
    4691/    1435 : A7                      ANA     A
    4692/    1436 : 3E 01                   MVI     A,01H
    4693/    1438 : 32 56 F6                STA     PWROFF_R					;Power off exit condition switch
    4694/    143B : C2 51 14                JNZ     R_POWER_DOWN_NOSTATE		;brif PWROFF_R != 0
    4695/    143E : F1                      POP     PSW
    4696/    143F :                     ;
    4697/    143F :                     ; Turn off computer - preserve system state to stack
    4698/    143F :                     ;
    4699/    143F :                     R_POWER_DOWN:							;143FH
    4700/    143F : F3                      DI 
    4701/    1440 : E5                      PUSH    H
    4702/    1441 : D5                      PUSH    D
    4703/    1442 : C5                      PUSH    B
    4704/    1443 : F5                      PUSH    PSW
    4705/    1444 : 21 00 00                LXI     H,0
    4706/    1447 : 39                      DAD     SP							;SP to HL
    4707/    1448 : 22 BE FA                SHLD    POWRSP_R					;SP save area for power up/down
    4708/    144B : 21 0B 9C                LXI     H,AUTOPWRDWN				;Load Auto PowerDown signature
    4709/    144E : 22 F2 F5                SHLD    AUTPWR_R					;Save Auto PowerDown signature
    4710/    1451 :                     R_POWER_DOWN_NOSTATE:
    4711/    1451 : F3                      DI 
    4712/    1452 : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
    4713/    1454 : F6 10                   ORI     10H							;set the PowerDown bit
    4714/    1456 : (MACRO)                 OUTPORT	0BAH						;bye bye
    4715/    1458 : 76                      HLT    
    4716/    1459 :                     ;
    4717/    1459 :                     ; POWER CONT statement
    4718/    1459 :                     ;
    4719/    1459 :                     ; IN:
    4720/    1459 :                     ;	A == 0
    4721/    1459 :                     ;
    4722/    1459 :                     R_POWER_CONT_STMT:						;1459H
    4723/    1459 : CD 69 14                CALL    L_POWER_ON_STMT_1			;clear TIMDWN_R & PWRCNT_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 80 - 9/5/2025 20:20:35


    4724/    145C : 32 32 F9                STA     PWRDWN_R					;clear Power Down Flag
    4725/    145F : (MACRO)                 CHRGET								;Get next non-white char from M
    4726/    1460 : C9                      RET
    4727/    1461 :                     ;
    4728/    1461 :                     ; POWER ON statement: POWER ON num 10 <= num <= 255
    4729/    1461 :                     ; num == 6 seconds
    4730/    1461 :                     ;
    4731/    1461 :                     R_POWER_ON_STMT:						;1461H
    4732/    1461 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    4733/    1464 : FE 0A                   CPI     0AH							;minimum 10
    4734/    1466 : DA DB 08                JC      R_GEN_FC_ERROR				;Generate FC error
    4735/    1469 :                     L_POWER_ON_STMT_1:
    4736/    1469 : 32 57 F6                STA     TIMDWN_R					;POWER down time (1/10ths of a minute)
    4737/    146C : 32 31 F9                STA     PWRCNT_R
    4738/    146F : C9                      RET
    4739/    1470 :                     ;
    4740/    1470 :                     ; Output character to printer
    4741/    1470 :                     ;
    4742/    1470 :                     R_OUT_CH_TO_LPT:						;1470H
    4743/    1470 : (MACRO)             	RST38H	0AH
    4744/    1472 : CD 3F 6D                CALL    R_SEND_A_TO_LPT				;Send character in A to the printer
    4745/    1475 : D2 7F 14                JNC     +
    4746/    1478 : AF                      XRA     A
    4747/    1479 : 32 CD FA                STA     LPT_MOVING_R				;clear
    4748/    147C : C3 94 14                JMP     R_GEN_IO_ERROR				;Generate I/O error
    4749/    147F : F5                  +	PUSH    PSW
    4750/    1480 : 3E FF                   MVI     A,0FFH
    4751/    1482 : 32 CD FA                STA     LPT_MOVING_R				;set
    4752/    1485 : CD B1 1B                CALL    R_KICK_PWR_OFF_WDT       	;Renew automatic power-off counter
    4753/    1488 : F1                      POP     PSW
    4754/    1489 : C9                      RET
    4755/    148A :                     ;
    4756/    148A :                     ; Start tape and load tape header
    4757/    148A :                     ;
    4758/    148A :                     R_LOAD_CAS_HDR:							;148AH
    4759/    148A : CD A8 14                CALL    R_CAS_MOTOR_ON				;Turn cassette motor on
    4760/    148D : CD 85 6F                CALL    R_CAS_READ_HEADER			;Read cassette header and sync byte
    4761/    1490 : D0                      RNC
    4762/    1491 :                     L_CAS_IO_ERROR:
    4763/    1491 : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    4764/    1494 :                     ;
    4765/    1494 :                     ; Generate I/O error
    4766/    1494 :                     ;
    4767/    1494 :                     R_GEN_IO_ERROR:							;1494H
    4768/    1494 : 1E 12                   MVI     E,12H
    4769/    1496 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error in E
    4770/    1499 :                     ;
    4771/    1499 :                     ; Turn cassette motor on and write sync header
    4772/    1499 :                     ;
    4773/    1499 :                     R_DET_CAS_SYNC_HDR:								;1499H
    4774/    1499 : CD A8 14                CALL    R_CAS_MOTOR_ON				;Turn cassette motor on
    4775/    149C : 01 00 00                LXI     B,0							;wait loop
    4776/    149F : 0B                  -	DCX     B							;test BC
    4777/    14A0 : 78                      MOV     A,B
    4778/    14A1 : B1                      ORA     C
    4779/    14A2 : C2 9F 14                JNZ     -
    4780/    14A5 : C3 46 6F                JMP     R_CAS_WRITE_HEADER       	;Write cassette header and sync byte
    4781/    14A8 :                     ;
    4782/    14A8 :                     ; Turn cassette motor on
    4783/    14A8 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 81 - 9/5/2025 20:20:35


    4784/    14A8 :                     R_CAS_MOTOR_ON:							;14A8H
    4785/    14A8 : F3                      DI 
    4786/    14A9 : (MACRO)             	SKIP_2INSTS							;skip EI & MVI E,00H
    4787/    14AA :                     ;
    4788/    14AA :                     ; Turn cassette motor off
    4789/    14AA :                     ;
    4790/    14AA :                     R_CAS_MOTOR_OFF:						;14AAH
    4791/    14AA : FB                      EI     
    4792/    14AB : 1E 00                   MVI     E,00H
    4793/    14AD : C3 43 70                JMP     R_CAS_REMOTE_FUN			;Cassette REMOTE routine - turn motor on or off
    4794/    14B0 :                     ;
    4795/    14B0 :                     ; Read byte from tape & update checksum
    4796/    14B0 :                     ;
    4797/    14B0 :                     R_CAS_READ_BYTE:						;14B0H
    4798/    14B0 : D5                      PUSH    D
    4799/    14B1 : E5                      PUSH    H
    4800/    14B2 : C5                      PUSH    B
    4801/    14B3 : CD 2A 70                CALL    R_CAS_READ_NO_CHKSUM       	;Read character from cassette w/o checksum
    4802/    14B6 : DA 91 14                JC      L_CAS_IO_ERROR
    4803/    14B9 : 7A                      MOV     A,D
    4804/    14BA : C1                      POP     B
    4805/    14BB : 81                      ADD     C
    4806/    14BC : 4F                      MOV     C,A
    4807/    14BD : 7A                      MOV     A,D
    4808/    14BE : E1                      POP     H
    4809/    14BF : D1                      POP     D
    4810/    14C0 : C9                      RET
    4811/    14C1 :                     ;
    4812/    14C1 :                     ; Write byte to tape & update checksum
    4813/    14C1 :                     ;
    4814/    14C1 :                     R_CAS_WRITE_BYTE:						;14C1H
    4815/    14C1 : D5                      PUSH    D
    4816/    14C2 : E5                      PUSH    H
    4817/    14C3 : 57                      MOV     D,A
    4818/    14C4 : 81                      ADD     C
    4819/    14C5 : 4F                      MOV     C,A
    4820/    14C6 : C5                      PUSH    B
    4821/    14C7 : 7A                      MOV     A,D
    4822/    14C8 : CD 5B 6F                CALL    R_CAS_WRITE_NO_SYNC      	;Write char in A to cassette w/o checksum
    4823/    14CB : DA 91 14                JC      L_CAS_IO_ERROR
    4824/    14CE : C1                      POP     B
    4825/    14CF : E1                      POP     H
    4826/    14D0 : D1                      POP     D
    4827/    14D1 : C9                      RET
    4828/    14D2 :                     ;
    4829/    14D2 :                     ; LCD Device control block
    4830/    14D2 :                     ;
    4831/    14D2 :                     R_LCD_DCB:								;14D2H
    4832/    14D2 : D8 14 59 4D E5 14       DW      R_LCD_OPEN, R_LCD_CLOSE_FUN, R_LCD_OUT
    4833/    14D8 :                     ;
    4834/    14D8 :                     ; LCD and PRT file open routine
    4835/    14D8 :                     ;
    4836/    14D8 :                     ; IN:
    4837/    14D8 :                     ;	E			File Status
    4838/    14D8 :                     ;	HL			FCB ptr
    4839/    14D8 :                     ;
    4840/    14D8 :                     ;	PSW and HL on stack
    4841/    14D8 :                     ;
    4842/    14D8 :                     ;
    4843/    14D8 :                     R_LCD_OPEN:								;14D8H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 82 - 9/5/2025 20:20:35


    4844/    14D8 : 3E 02                   MVI     A,02H						;Output mode
    4845/    14DA : BB                      CMP     E
    4846/    14DB : C2 4E 50                JNZ     R_GEN_NM_ERR_FUN			;Generate NM error (Bad Filename)
    4847/    14DE :                     L_FINALIZE_FCB:
    4848/    14DE : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    4849/    14E1 : 73                      MOV     M,E							;update File Open Mode 
    4850/    14E2 : F1                      POP     PSW							;restore function code
    4851/    14E3 : E1                      POP     H							;restore txt ptr
    4852/    14E4 : C9                      RET
    4853/    14E5 :                     ;
    4854/    14E5 :                     ; Output to LCD file
    4855/    14E5 :                     ;
    4856/    14E5 :                     R_LCD_OUT:								;14E5H
    4857/    14E5 : F1                      POP     PSW							;get char to write
    4858/    14E6 : F5                      PUSH    PSW
    4859/    14E7 : CD 1F 43                CALL    R_CHAR_PLOT
    4860/    14EA :                     L_PWR_POP_ALL:
    4861/    14EA : CD B1 1B                CALL    R_KICK_PWR_OFF_WDT       	;Renew automatic power-off counter
    4862/    14ED :                     ;
    4863/    14ED :                     ; Pop AF), BC), DE), HL from stack
    4864/    14ED :                     ;
    4865/    14ED :                     R_POP_ALL_REGS:							;14EDH
    4866/    14ED : F1                      POP     PSW
    4867/    14EE :                     R_POP_ALL_WREGS:
    4868/    14EE : C1                      POP     B
    4869/    14EF : D1                      POP     D
    4870/    14F0 : E1                      POP     H
    4871/    14F1 : C9                      RET
    4872/    14F2 :                     ;
    4873/    14F2 :                     ; CRT device control block
    4874/    14F2 :                     ;
    4875/    14F2 :                     R_CRT_DCB:								 ;14F2H
    4876/    14F2 : F8 14 59 4D FA 14       DW      R_CRT_OPEN, R_LCD_CLOSE_FUN, R_CRT_OUT
    4877/    14F8 :                     
    4878/    14F8 :                     R_CRT_OPEN:
    4879/    14F8 : (MACRO)             	RST38H	40H
    4880/    14FA :                     R_CRT_OUT:
    4881/    14FA : (MACRO)             	RST38H	44H
    4882/    14FC :                     ;
    4883/    14FC :                     ; RAM device control block
    4884/    14FC :                     ;
    4885/    14FC :                     R_RAM_DCB:								;14FCH
    4886/    14FC : 06 15 8D 15 AC 15       DW      R_RAM_OPEN, R_RAM_CLOSE, R_RAM_OUT
    4887/    1502 : C4 15 1B 16             DW      R_RAM_IN, R_RAM_IO
    4888/    1506 :                     ;
    4889/    1506 :                     ; Open RAM file
    4890/    1506 :                     ;
    4891/    1506 :                     ; BC, DE, HL pushed on stack
    4892/    1506 :                     ;
    4893/    1506 :                     ; IN:
    4894/    1506 :                     ;	D		DCB code
    4895/    1506 :                     ;	E		File open Mode (1 input, 2 output, 8 append)
    4896/    1506 :                     ;	HL		FCB ptr
    4897/    1506 :                     ;
    4898/    1506 :                     R_RAM_OPEN:								;1506H
    4899/    1506 : E5                      PUSH    H
    4900/    1507 : D5                      PUSH    D
    4901/    1508 : 23                      INX     H							;point to Directory Entry			
    4902/    1509 : 23                      INX     H
    4903/    150A : E5                      PUSH    H							;push ptr to Directory Entry Ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 83 - 9/5/2025 20:20:35


    4904/    150B : 7B                      MOV     A,E							;open mode code
    4905/    150C : FE 01                   CPI     01H							;input
    4906/    150E : CA 41 15                JZ      L_RAM_OPEN_MODE1
    4907/    1511 : FE 08                   CPI     08H							;append mode
    4908/    1513 : CA 5C 15                JZ      L_RAM_OPEN_MODE8
    4909/    1516 :                     ; File open Mode 2: output
    4910/    1516 :                     L_RAM_OPEN_MODE2:
    4911/    1516 : CD 0F 22                CALL    R_OPEN_TXT_FILE_OUTPUT		;Open a text file at FILNAM_R. DE is Directory ptr
    4912/    1519 : DA 80 15                JC      L_RAM_EXISTS				;brif File already exists: delete if possible
    4913/    151C : D5                      PUSH    D							;save DE
    4914/    151D : CD DA 18                CALL    L_UPD_FOR_LOOPS				;update FOR loops stack chain with offset 1 (^Z)
    4915/    1520 : D1                      POP     D							;restore Directory Entry ptr to DE
    4916/    1521 :                     ;
    4917/    1521 :                     ; set relative position in file.
    4918/    1521 :                     ; Directory Entry ptr in DE
    4919/    1521 :                     ; FCB ptr on stack
    4920/    1521 :                     ;
    4921/    1521 :                     L_SET_START_OF_FILE:
    4922/    1521 : 01 00 00                LXI     B,0							;start of file
    4923/    1524 :                     L_SET_END_OF_FILE:						;entry point with BC == file length (append mode)
    4924/    1524 : E1                      POP     H							;restore FCB ptr to HL
    4925/    1525 : 1A                      LDAX    D							;File Directory Entry -> File Type
    4926/    1526 : E6 02                   ANI     02H							;00000010 isolate bit 1
    4927/    1528 : C2 51 50                JNZ     R_GEN_AO_ERR_FUN			;brif != 0: Generate Already Open error
    4928/    152B : 1A                      LDAX    D							;reload File Type
    4929/    152C : F6 02                   ORI     02H							;set bit 1: File is open
    4930/    152E : 12                      STAX    D							;update File Type
    4931/    152F : 13                      INX     D							;ptr to File Data Ptr
    4932/    1530 : 73                      MOV     M,E							;store in FCB
    4933/    1531 : 23                      INX     H
    4934/    1532 : 72                      MOV     M,D
    4935/    1533 : 23                      INX     H							;advance to offset from Buffer Start
    4936/    1534 : 23                      INX     H
    4937/    1535 : 23                      INX     H
    4938/    1536 : 36 00                   MVI     M,00H						;set offset to 0
    4939/    1538 : 23                      INX     H							;advance to relative position in file
    4940/    1539 : 71                      MOV     M,C							;set to BC value
    4941/    153A : 23                      INX     H
    4942/    153B : 70                      MOV     M,B
    4943/    153C : D1                      POP     D							;restore Device/Open Mode
    4944/    153D : E1                      POP     H							;restore FCB
    4945/    153E : C3 DE 14                JMP     L_FINALIZE_FCB				;update FCBLAST_R and clean stack
    4946/    1541 :                     ;
    4947/    1541 :                     ; Jumped to from R_RAM_OPEN. Ptr to Directory Entry Ptr on stack
    4948/    1541 :                     ; Open file mode == 1: input
    4949/    1541 :                     ;
    4950/    1541 :                     L_RAM_OPEN_MODE1:
    4951/    1541 : 3A 51 F6                LDA     EDITFLG_R					;test
    4952/    1544 : A7                      ANA     A
    4953/    1545 : 21 AF F9                LXI     H,RICKY_R					;Ricky part of directory
    4954/    1548 : CC 8F 20                CZ      R_FINDFILE					;calif EDITFLG_R == 0
    4955/    154B : CA 57 50                JZ      R_GEN_FF_ERR_FUN			;brif not found: Generate FF error
    4956/    154E : EB                      XCHG
    4957/    154F : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    4958/    1552 : AF                      XRA     A							
    4959/    1553 : 77                      MOV     M,A							;set File status to closed
    4960/    1554 : 6F                      MOV     L,A							;clear HL
    4961/    1555 : 67                      MOV     H,A
    4962/    1556 : 22 D8 FA                SHLD    XXSTRT_R					;clear XXSTRT_R
    4963/    1559 : C3 21 15                JMP     L_SET_START_OF_FILE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 84 - 9/5/2025 20:20:35


    4964/    155C :                     ;
    4965/    155C :                     ; Jumped to from R_RAM_OPEN. Ptr to Directory Entry Ptr on stack
    4966/    155C :                     ; Function code == 8: append 
    4967/    155C :                     ;
    4968/    155C :                     L_RAM_OPEN_MODE8:
    4969/    155C : E1                      POP     H
    4970/    155D : D1                      POP     D
    4971/    155E : 1E 02                   MVI     E,02H
    4972/    1560 : D5                      PUSH    D
    4973/    1561 : E5                      PUSH    H
    4974/    1562 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    4975/    1565 : CD 8F 20                CALL    R_FINDFILE
    4976/    1568 : CA 16 15                JZ      L_RAM_OPEN_MODE2			;brif not found. Open new file
    4977/    156B : 5D                      MOV     E,L							;save Directory Entry in DE
    4978/    156C : 54                      MOV     D,H
    4979/    156D : 23                      INX     H							;get ptr to File Data in HL
    4980/    156E : 7E                      MOV     A,M
    4981/    156F : 23                      INX     H
    4982/    1570 : 66                      MOV     H,M
    4983/    1571 : 6F                      MOV     L,A
    4984/    1572 : 01 FF FF                LXI     B,0FFFFH					;predecrement file length
    4985/    1575 :                     ; compute file count
    4986/    1575 : 7E                  -	MOV     A,M
    4987/    1576 : 23                      INX     H
    4988/    1577 : 03                      INX     B
    4989/    1578 : FE 1A                   CPI     1AH							;^Z
    4990/    157A : C2 75 15                JNZ     -
    4991/    157D : C3 24 15                JMP     L_SET_END_OF_FILE			;BC has file length
    4992/    1580 :                     ;
    4993/    1580 :                     ; Opening a file for output but file already exists
    4994/    1580 :                     ; DE is Directory Ptr
    4995/    1580 :                     ;
    4996/    1580 :                     L_RAM_EXISTS:
    4997/    1580 : 1A                      LDAX    D							;get Filetype
    4998/    1581 : E6 02                   ANI     02H							;00000010 isolate bit 1. File open for DO files
    4999/    1583 : C2 51 50                JNZ     R_GEN_AO_ERR_FUN			;brif set: Generate Already Open error
    5000/    1586 : EB                      XCHG								;Directory Ptr to HL
    5001/    1587 : CD BF 1F                CALL    KILASC						;kill existing text file:  DE & HL are inputs
    5002/    158A : C3 16 15                JMP     L_RAM_OPEN_MODE2			;continue
    5003/    158D :                     ;
    5004/    158D :                     ; Close RAM file
    5005/    158D :                     ;
    5006/    158D :                     ; IN:
    5007/    158D :                     ;	HL		FCB ptr
    5008/    158D :                     ;
    5009/    158D :                     R_RAM_CLOSE:							;158DH
    5010/    158D : E5                      PUSH    H							;save FCB ptr
    5011/    158E : CD A0 15                CALL    L_DIRECTORY_CLOSE			;mark directory entry as closed
    5012/    1591 : E1                      POP     H							;restore FCB ptr
    5013/    1592 : CD 2A 17                CALL    L_CHK_FCB_DATA				;check offset in File Buffer
    5014/    1595 : C4 21 16                CNZ     L_WRT_FCB_DATA				;write buffer if data present
    5015/    1598 : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    5016/    159B : 36 00                   MVI     M,00H						;set File Status "not open"
    5017/    159D : C3 59 4D                JMP     R_LCD_CLOSE_FUN				;LCD), CRT), and LPT file close routine
    5018/    15A0 :                     
    5019/    15A0 :                     L_DIRECTORY_CLOSE:
    5020/    15A0 : 23                      INX     H							;ptr to File Directory Entry address
    5021/    15A1 : 23                      INX     H
    5022/    15A2 : 7E                      MOV     A,M							;get File Directory Entry address
    5023/    15A3 : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 85 - 9/5/2025 20:20:35


    5024/    15A4 : 66                      MOV     H,M
    5025/    15A5 : 6F                      MOV     L,A
    5026/    15A6 : 2B                      DCX     H							;File Directory Entry type
    5027/    15A7 : 7E                      MOV     A,M							;clear bit 1
    5028/    15A8 : E6 FD                   ANI     0FDH						;11111101
    5029/    15AA : 77                      MOV     M,A
    5030/    15AB : C9                      RET
    5031/    15AC :                     ;
    5032/    15AC :                     ; Output to RAM file
    5033/    15AC :                     ;
    5034/    15AC :                     R_RAM_OUT:								;15ACH
    5035/    15AC : F1                      POP     PSW
    5036/    15AD : F5                      PUSH    PSW
    5037/    15AE : 01 EA 14                LXI     B,L_PWR_POP_ALL				;pop ALL registers function
    5038/    15B1 : C5                      PUSH    B
    5039/    15B2 : A7                      ANA     A
    5040/    15B3 : C8                      RZ									;to Pop ALL
    5041/    15B4 : FE 1A                   CPI     1AH							;^Z
    5042/    15B6 : C8                      RZ									;to Pop ALL
    5043/    15B7 : FE 7F                   CPI     7FH							;DEL
    5044/    15B9 : C8                      RZ									;to Pop ALL
    5045/    15BA : CD 39 17                CALL    L_WRITE_TO_DEVICE
    5046/    15BD : C0                      RNZ									;retif buffer not full (offset != 0)
    5047/    15BE : 01 00 01                LXI     B,0100H						;256.
    5048/    15C1 : C3 21 16                JMP     L_WRT_FCB_DATA				;write FCB buffer if offset == 0
    5049/    15C4 :                     ;
    5050/    15C4 :                     ; Input from RAM file
    5051/    15C4 :                     ;
    5052/    15C4 :                     ; BC, DE, HL pushed on stack.
    5053/    15C4 :                     ;	NOTE: registers are not restored in that order
    5054/    15C4 :                     ;
    5055/    15C4 :                     ; IN:
    5056/    15C4 :                     ;	HL		FCB ptr
    5057/    15C4 :                     ;
    5058/    15C4 :                     R_RAM_IN:								;15C4H
    5059/    15C4 : EB                      XCHG
    5060/    15C5 : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    5061/    15C8 : CD C7 18                CALL    L_TSTFILSTAT
    5062/    15CB : EB                      XCHG								;ptr to BASIC File Status to DE
    5063/    15CC : CD 49 17                CALL    L_GET_FILEDATA_PTR			;Returns current offset in A, buffer ptr in HL
    5064/    15CF : C2 09 16                JNZ     L_RAM_IN_1					;brif offset != 0
    5065/    15D2 :                     ; current offset == 0. Read new FCB data buffer
    5066/    15D2 : EB                      XCHG								;buffer ptr to DE
    5067/    15D3 : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
    5068/    15D6 : (MACRO)                 COMPAR								;HL - DE
    5069/    15D7 : F5                      PUSH    PSW							;save COMPAR result
    5070/    15D8 : D5                      PUSH    D							;save buffer ptr
    5071/    15D9 : C4 46 21                CNZ     LNKFIL						;Fix up the directory start pointers
    5072/    15DC : E1                      POP     H							;restore buffer ptr (was DE)
    5073/    15DD : F1                      POP     PSW							;restore COMPAR result
    5074/    15DE : 01 F9 FF                LXI     B,-(BUFFER_IN_FCB_OFS - DIR_IN_FCB_OFS) ;0FFF9H
    5075/    15E1 : 09                      DAD     B							;HL ptr to File Directory Entry ptr
    5076/    15E2 : (MACRO)             	GETDEFROMMNOINC						;DE = File Directory Entry ptr
    5077/    15E5 : EB                      XCHG								;File Directory Entry ptr +1 to HL. FCB ptr to DE
    5078/    15E6 : (MACRO)             	GETHLFROMM							;get File Data ptr to HL
    5079/    15EA : C2 F5 15                JNZ     +							;COMPAR result
    5080/    15ED : D5                      PUSH    D							;save FCB ptr (DIR_IN_FCB_OFS + 1)
    5081/    15EE : EB                      XCHG
    5082/    15EF : 2A D8 FA                LHLD    XXSTRT_R					;[XXSTRT_R] to DE
    5083/    15F2 : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 86 - 9/5/2025 20:20:35


    5084/    15F3 : 19                      DAD     D							;add [XXSTRT_R] to HL
    5085/    15F4 : D1                      POP     D							;restore FCB ptr (DIR_IN_FCB_OFS + 1)
    5086/    15F5 : EB                  +	XCHG								;FCB ptr (DIR_IN_FCB_OFS + 1) to HL
    5087/    15F6 : 23                      INX     H							;HL += 4 => FILPOS_IN_FCB_OFS
    5088/    15F7 : 23                      INX     H
    5089/    15F8 : 23                      INX     H
    5090/    15F9 : 23                      INX     H
    5091/    15FA : 4E                      MOV     C,M							;get File Position Offset from M to BC
    5092/    15FB : 23                      INX     H							;to FILPOS_IN_FCB_OFS+1
    5093/    15FC : 46                      MOV     B,M
    5094/    15FD : 34                      INR     M							;increment M: File Position offset += 256
    5095/    15FE : 23                      INX     H							;to &BUFFER_IN_FCB_OFS
    5096/    15FF : EB                      XCHG								;save HL to DE (destination). Old DE is source				
    5097/    1600 : 09                      DAD     B							;index to &BUFFER_IN_FCB_OFS[FILPOS_IN_FCB_OFS]
    5098/    1601 : 06 00                   MVI     B,00H						;256 count
    5099/    1603 : CD 42 25                CALL    R_MOVE_B_BYTES				;Move B bytes from M to (DE). Updates DE, HL, B==0
    5100/    1606 : EB                      XCHG
    5101/    1607 : 25                      DCR     H							;HL -= 256
    5102/    1608 : AF                      XRA     A
    5103/    1609 :                     L_RAM_IN_1:
    5104/    1609 : 4F                      MOV     C,A							;current offset to BC
    5105/    160A : 09                      DAD     B							;assume B was 0
    5106/    160B : 7E                      MOV     A,M							;get byte from file
    5107/    160C : FE 1A                   CPI     1AH							;test for EOF
    5108/    160E : 37                      STC									;preset clear Carry
    5109/    160F : 3F                      CMC
    5110/    1610 : C2 8A 4E                JNZ     L_POPDHBREGS				;brif not EOF, carry clear, return file byte
    5111/    1613 : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    5112/    1616 : 77                      MOV     M,A							;set File Status to 1AH
    5113/    1617 : 37                      STC
    5114/    1618 : C3 8A 4E                JMP     L_POPDHBREGS				;Pops DE, HL, BC from stack and return
    5115/    161B :                     ;
    5116/    161B :                     ; Special RAM file I/O
    5117/    161B :                     ;
    5118/    161B :                     R_RAM_IO:								;161BH
    5119/    161B : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    5120/    161E : C3 CD 17                JMP     L_COM_IO_1
    5121/    1621 :                     ;
    5122/    1621 :                     ; write FCB buffer if offset != 0
    5123/    1621 :                     ; IN:
    5124/    1621 :                     ;	B		count
    5125/    1621 :                     ;	HL		ptr to FCB DATA
    5126/    1621 :                     ;
    5127/    1621 :                     L_WRT_FCB_DATA:
    5128/    1621 : E5                      PUSH    H							;save FCB Data Ptr
    5129/    1622 : C5                      PUSH    B							;save count
    5130/    1623 : E5                      PUSH    H							;save data ptr
    5131/    1624 : EB                      XCHG								;data ptr to DE
    5132/    1625 : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
    5133/    1628 : (MACRO)                 COMPAR								;Compare data ptr and FCB1_BUF_R: HL - DE
    5134/    1629 : C4 46 21                CNZ     LNKFIL						;Fix up the directory start pointers
    5135/    162C : E1                      POP     H							;restore data ptr
    5136/    162D : 2B                      DCX     H							;ptr to File Position MSB into HL
    5137/    162E : 56                      MOV     D,M							;File Position to HL
    5138/    162F : 2B                      DCX     H
    5139/    1630 : 5E                      MOV     E,M
    5140/    1631 : EB                      XCHG
    5141/    1632 : C1                      POP     B							;retrieve count
    5142/    1633 : C5                      PUSH    B
    5143/    1634 : E5                      PUSH    H							;save Relative File Position
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 87 - 9/5/2025 20:20:35


    5144/    1635 : 09                      DAD     B							;new EOF position
    5145/    1636 : EB                      XCHG								;EOF position to DE, FILPOS_IN_FCB_OFS ptr to HL
    5146/    1637 : 73                      MOV     M,E							;update new EOF position
    5147/    1638 : 23                      INX     H
    5148/    1639 : 72                      MOV     M,D
    5149/    163A : 01 FA FF                LXI     B,0FFFAH					;-6
    5150/    163D : 09                      DAD     B							;HL ptr to DIR_IN_FCB_OFS
    5151/    163E : (MACRO)             	GETDEFROMMNOINC						;get ptr to File Data Ptr to DE (from Directory Entry)
    5152/    1641 : 1A                      LDAX    D							;File Data Ptr to HL
    5153/    1642 : 6F                      MOV     L,A
    5154/    1643 : 13                      INX     D
    5155/    1644 : 1A                      LDAX    D
    5156/    1645 : 67                      MOV     H,A
    5157/    1646 : C1                      POP     B							;restore Relative File Position
    5158/    1647 : 09                      DAD     B							;Add to File Data Ptr
    5159/    1648 : C1                      POP     B							;restore count
    5160/    1649 : E5                      PUSH    H							;save absolute File Data ptr
    5161/    164A : C5                      PUSH    B							;save count
    5162/    164B : CD 6D 6B                CALL    MAKHOL						;Insert BC spaces at M
    5163/    164E : D4 DD 18                CNC     L_UPD_FOR_LOOPS_1			;update FOR loop stack chain. BC is offset to add
    5164/    1651 : C1                      POP     B							;restore count
    5165/    1652 : D1                      POP     D							;absolute File Data ptr to DE
    5166/    1653 : E1                      POP     H							;restore FCB Data Ptr
    5167/    1654 : DA 69 16                JC      L_WRT_FCB_NOMEM				;brif Out of Memory
    5168/    1657 : E5                      PUSH    H							;save File Data ptr
    5169/    1658 :                     ;copy C bytes from FCB Data to File Data
    5170/    1658 : 7E                  -	MOV     A,M
    5171/    1659 : 12                      STAX    D
    5172/    165A : 13                      INX     D
    5173/    165B : 23                      INX     H
    5174/    165C : 0D                      DCR     C
    5175/    165D : C2 58 16                JNZ     -
    5176/    1660 : D1                      POP     D							;restore File Data ptr
    5177/    1661 : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
    5178/    1664 : (MACRO)                 COMPAR								;HL - DE
    5179/    1665 : C8                      RZ
    5180/    1666 : C3 46 21                JMP     LNKFIL						;Fix up the directory start pointers
    5181/    1669 :                     ;
    5182/    1669 :                     ; Out of Memory Condition
    5183/    1669 :                     ;
    5184/    1669 :                     L_WRT_FCB_NOMEM:
    5185/    1669 : 01 F7 FF                LXI     B,0FFF7H					;-9
    5186/    166C : 09                      DAD     B
    5187/    166D : 36 00                   MVI     M,00H
    5188/    166F : CD A0 15                CALL    L_DIRECTORY_CLOSE
    5189/    1672 : C3 17 3F                JMP     L_OUTOFMEMORY
    5190/    1675 :                     ;
    5191/    1675 :                     ; Get ptr to BASIC File Status
    5192/    1675 :                     ;
    5193/    1675 :                     ; OUT:
    5194/    1675 :                     ;	HL	ptr to BASIC File Status
    5195/    1675 :                     ;
    5196/    1675 :                     R_GET_FILESTAT:							;1675H
    5197/    1675 : D5                      PUSH    D							;save
    5198/    1676 : 2A A2 FA                LHLD    FILNUM_R					;zero extended validated file number
    5199/    1679 : 11 91 FA                LXI     D,FILSTATTBL_R				;BASIC File Status
    5200/    167C : 19                      DAD     D							;index
    5201/    167D : D1                      POP     D							;restore
    5202/    167E : C9                      RET
    5203/    167F :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 88 - 9/5/2025 20:20:35


    5204/    167F :                     ; CAS device control block
    5205/    167F :                     ;
    5206/    167F :                     R_CAS_DCB:								       	;167FH
    5207/    167F : 89 16 AD 16 C7 16       DW      R_CAS_OPEN, R_CAS_CLOSE, R_CAS_OUT
    5208/    1685 : D2 16 10 17             DW      R_CAS_IN, R_CAS_IO
    5209/    1689 :                     ;
    5210/    1689 :                     ; Open CAS file
    5211/    1689 :                     ;
    5212/    1689 :                     ; IN:
    5213/    1689 :                     ;	HL
    5214/    1689 :                     ;	E		input or output selection
    5215/    1689 :                     ;
    5216/    1689 :                     R_CAS_OPEN:								;1689H
    5217/    1689 : E5                      PUSH    H							;save FCB ptr
    5218/    168A : D5                      PUSH    D							;save open mode
    5219/    168B : 01 06 00                LXI     B,0006H						;offset 6
    5220/    168E : 09                      DAD     B							;index
    5221/    168F : AF                      XRA     A
    5222/    1690 : 77                      MOV     M,A							;clear (HL+6)
    5223/    1691 : 32 8E FA                STA     CASFILSTAT_R				;clear CASFILSTAT_R
    5224/    1694 : 7B                      MOV     A,E							;function requested
    5225/    1695 : FE 08                   CPI     DCBIO_FUN					;8
    5226/    1697 : CA 4E 50                JZ      R_GEN_NM_ERR_FUN			;brif DCBIO_FUN: Generate NM error
    5227/    169A : FE 01                   CPI     01H
    5228/    169C : CA A7 16                JZ      +							;brif input function
    5229/    169F : CD 0E 26                CALL    R_CAS_OPEN_OUT_DO			;Open CAS for output of TEXT files
    5230/    16A2 : D1                  -	POP     D							;restore Open Mode
    5231/    16A3 : E1                      POP     H							;restore FCB ptr
    5232/    16A4 : C3 DE 14                JMP     L_FINALIZE_FCB				;update FCBLAST_R and clean stack
    5233/    16A7 :                     
    5234/    16A7 : CD 53 26            +	CALL    R_CAS_OPEN_IN_DO			;Open CAS for input of TEXT files
    5235/    16AA : C3 A2 16                JMP     -
    5236/    16AD :                     
    5237/    16AD :                     ;
    5238/    16AD :                     ; Close CAS file
    5239/    16AD :                     ;
    5240/    16AD :                     R_CAS_CLOSE:							;16ADH
    5241/    16AD : CD 2A 17                CALL    L_CHK_FCB_DATA				;check offset in File Buffer
    5242/    16B0 : CA C0 16                JZ      +							;brif no data present
    5243/    16B3 :                     ; Fill remainder of buffer with ^Z
    5244/    16B3 : E5                      PUSH    H							;save FCB data ptr
    5245/    16B4 : 09                      DAD     B							;index
    5246/    16B5 : 36 1A               -	MVI     M,1AH						;^Z
    5247/    16B7 : 23                      INX     H
    5248/    16B8 : 0C                      INR     C							;increment until overflow
    5249/    16B9 : C2 B5 16                JNZ     -
    5250/    16BC : E1                      POP     H							;restore FCB data ptr
    5251/    16BD : CD 16 17                CALL    L_WRT_CAS_BLK
    5252/    16C0 : AF                  +	XRA     A
    5253/    16C1 : 32 8E FA                STA     CASFILSTAT_R				;clear CASFILSTAT_R
    5254/    16C4 : C3 59 4D                JMP     R_LCD_CLOSE_FUN				;LCD), CRT), and LPT file close routine
    5255/    16C7 :                     ;
    5256/    16C7 :                     ; Output to CAS file
    5257/    16C7 :                     ;
    5258/    16C7 :                     R_CAS_OUT:								;16C7H
    5259/    16C7 : F1                      POP     PSW							;retrieve data byte
    5260/    16C8 : F5                      PUSH    PSW
    5261/    16C9 : CD 39 17                CALL    L_WRITE_TO_DEVICE
    5262/    16CC : CC 16 17                CZ      L_WRT_CAS_BLK				;calif buffer full
    5263/    16CF : C3 EA 14                JMP     L_PWR_POP_ALL				;pop ALL registers function
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 89 - 9/5/2025 20:20:35


    5264/    16D2 :                     ;
    5265/    16D2 :                     ; Input from CAS file
    5266/    16D2 :                     ;
    5267/    16D2 :                     ; BC, DE, HL pushed on stack
    5268/    16D2 :                     ;
    5269/    16D2 :                     ;
    5270/    16D2 :                     R_CAS_IN:								;16D2H
    5271/    16D2 : EB                      XCHG								;HL to DE
    5272/    16D3 : 21 8E FA                LXI     H,CASFILSTAT_R
    5273/    16D6 : CD C7 18                CALL    L_TSTFILSTAT
    5274/    16D9 : EB                      XCHG
    5275/    16DA : CD 49 17                CALL    L_GET_FILEDATA_PTR			;Returns current offset in A
    5276/    16DD : C2 FF 16                JNZ     +							;brif current offset != 0
    5277/    16E0 :                     ; current offset in buffer is 0: read new data into buffer
    5278/    16E0 : E5                      PUSH    H							;save buffer ptr
    5279/    16E1 : CD D1 26                CALL    L_FND_CAS_DATA_BLK
    5280/    16E4 : E1                      POP     H							;restore buffer ptr
    5281/    16E5 : 01 00 00                LXI     B,0							;256 count
    5282/    16E8 : CD B0 14            -	CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    5283/    16EB : 77                      MOV     M,A							;update buffer
    5284/    16EC : 23                      INX     H							;next
    5285/    16ED : 05                      DCR     B
    5286/    16EE : C2 E8 16                JNZ     -							;brif not done reading buffer
    5287/    16F1 : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    5288/    16F4 : 79                      MOV     A,C
    5289/    16F5 : A7                      ANA     A
    5290/    16F6 : C2 91 14                JNZ     L_CAS_IO_ERROR
    5291/    16F9 :                     ; C == 0
    5292/    16F9 : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    5293/    16FC : 25                      DCR     H							;point to start of buffer (-256)
    5294/    16FD : AF                      XRA     A
    5295/    16FE : 47                      MOV     B,A							;clear B
    5296/    16FF : 4F                  +	MOV     C,A							;BC = current offset in buffer
    5297/    1700 : 09                      DAD     B							;index into buffer ptr
    5298/    1701 : 7E                      MOV     A,M							;get data byte
    5299/    1702 : FE 1A                   CPI     1AH							;test for EOF
    5300/    1704 : 37                      STC									;preload clear carry
    5301/    1705 : 3F                      CMC
    5302/    1706 : C2 8A 4E                JNZ     L_POPDHBREGS				;brif not EOF: Pops DE, HL, BC from stack and return
    5303/    1709 : 32 8E FA                STA     CASFILSTAT_R				;move EOF into CASFILSTAT_R
    5304/    170C : 37                      STC									;set carry
    5305/    170D : C3 8A 4E                JMP     L_POPDHBREGS				;Pops DE, HL, BC from stack and return
    5306/    1710 :                     
    5307/    1710 :                     R_CAS_IO:
    5308/    1710 : 21 8E FA                LXI     H,CASFILSTAT_R
    5309/    1713 : C3 CD 17                JMP     L_COM_IO_1
    5310/    1716 :                     ;
    5311/    1716 :                     ; Write Buffer for a cassette device file
    5312/    1716 :                     ;
    5313/    1716 :                     ; IN:
    5314/    1716 :                     ;	HL		ptr to buffer
    5315/    1716 :                     ;
    5316/    1716 :                     L_WRT_CAS_BLK:
    5317/    1716 : E5                      PUSH    H							;save buffer ptr
    5318/    1717 : CD 48 26                CALL    L_PREP_DATA_BLK				;prepare cassette sync header
    5319/    171A : E1                      POP     H							;restore buffer ptr
    5320/    171B : 01 00 00                LXI     B,0							;256 count to B. C==0
    5321/    171E : 7E                  -	MOV     A,M
    5322/    171F : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write byte to tape & update checksum
    5323/    1722 : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 90 - 9/5/2025 20:20:35


    5324/    1723 : 05                      DCR     B							;count
    5325/    1724 : C2 1E 17                JNZ     -							;brif count != 0
    5326/    1727 : C3 35 26                JMP     L_CAS_FIN_BLK				;finish cassette block
    5327/    172A :                     ;
    5328/    172A :                     ; check offset in File Buffer
    5329/    172A :                     ;
    5330/    172A :                     ; IN:
    5331/    172A :                     ;	HL		FCB ptr
    5332/    172A :                     ;
    5333/    172A :                     ; OUT:
    5334/    172A :                     ;	HL		Start of 256 byte buffer for data transfer
    5335/    172A :                     ;	BC		Offset from buffer start for start of next record
    5336/    172A :                     ;	Z		set if cannot write or [BUFOFS_IN_FCB]==0, meaning no data in buffer
    5337/    172A :                     ;
    5338/    172A :                     L_CHK_FCB_DATA:
    5339/    172A : 7E                      MOV     A,M							;FCB status
    5340/    172B : FE 01                   CPI     01H							;is it "Open for Input"
    5341/    172D : C8                      RZ									;retif true: cannot write
    5342/    172E : 01 06 00                LXI     B,BUFOFS_IN_FCB_OFS			;Offset from buffer start for start of next record
    5343/    1731 : 09                      DAD     B							;index to offset
    5344/    1732 : 7E                      MOV     A,M							;get offset to C
    5345/    1733 : 4F                      MOV     C,A							;B == 0
    5346/    1734 : 36 00                   MVI     M,00H						;clear offset> TODO could do MOV M,B
    5347/    1736 : C3 4F 17                JMP     L_FILEDATA_ADV				;advance to Start of 256 byte buffer for data transfer and test A
    5348/    1739 :                     ;
    5349/    1739 :                     ; L_WRITE_TO_DEVICE: Write byte in A to file
    5350/    1739 :                     ;
    5351/    1739 :                     ; IN:
    5352/    1739 :                     ;	A			data byte
    5353/    1739 :                     ;	HL			FCB ptr
    5354/    1739 :                     ;
    5355/    1739 :                     ; OUT:
    5356/    1739 :                     ;	HL			ptr to file buffer ptr
    5357/    1739 :                     ;	Z			set if offset overflowed to 0
    5358/    1739 :                     ;
    5359/    1739 :                     L_WRITE_TO_DEVICE:
    5360/    1739 : 5F                      MOV     E,A							;save A
    5361/    173A : 01 06 00                LXI     B,BUFOFS_IN_FCB_OFS			;Offset from buffer start for start of next record
    5362/    173D : 09                      DAD     B							;index
    5363/    173E : 7E                      MOV     A,M							;get current offset
    5364/    173F : 34                      INR     M							;increment offset. Sets Z flag
    5365/    1740 : 23                      INX     H							;advance to Start of 256 byte buffer for data transfer
    5366/    1741 : 23                      INX     H
    5367/    1742 : 23                      INX     H
    5368/    1743 : E5                      PUSH    H							;save buffer ptr
    5369/    1744 : 4F                      MOV     C,A							;current offset to BC
    5370/    1745 : 09                      DAD     B							;index into buffer
    5371/    1746 : 73                      MOV     M,E							;write to file`
    5372/    1747 : E1                      POP     H							;restore buffer ptr
    5373/    1748 : C9                      RET
    5374/    1749 :                     ;
    5375/    1749 :                     ; L_GET_FILEDATA_PTR:
    5376/    1749 :                     ; Get ptr to current position in File Buffer
    5377/    1749 :                     ; increment current offset
    5378/    1749 :                     ;
    5379/    1749 :                     ; IN:
    5380/    1749 :                     ;	HL			FCB ptr
    5381/    1749 :                     ;
    5382/    1749 :                     ; OUT:
    5383/    1749 :                     ;	A			current offset into File Buffer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 91 - 9/5/2025 20:20:35


    5384/    1749 :                     ;	B			0
    5385/    1749 :                     ;	HL			ptr to File Buffer
    5386/    1749 :                     ;	Z			if current offset in 256 File Buffer is 0
    5387/    1749 :                     ;
    5388/    1749 :                     L_GET_FILEDATA_PTR:
    5389/    1749 : 01 06 00                LXI     B,BUFOFS_IN_FCB_OFS			;Offset from buffer start for start of next record
    5390/    174C : 09                      DAD     B							;index to offset
    5391/    174D : 7E                      MOV     A,M							;get current offset
    5392/    174E : 34                      INR     M							;increment offset
    5393/    174F :                     L_FILEDATA_ADV:							;shared tail. A	== Current offset into 256 byte buffer
    5394/    174F : 23                      INX     H							;advance to Start of 256 byte buffer for data transfer
    5395/    1750 : 23                      INX     H
    5396/    1751 : 23                      INX     H
    5397/    1752 : A7                      ANA     A							;test current offset
    5398/    1753 : C9                      RET
    5399/    1754 :                     ;
    5400/    1754 :                     ; LPT device control block
    5401/    1754 :                     ;
    5402/    1754 :                     R_LPT_DCB:								;1754H
    5403/    1754 : D8 14 59 4D 5A 17       DW      R_LCD_OPEN, R_LCD_CLOSE_FUN, R_LPT_OUT
    5404/    175A :                     ;
    5405/    175A :                     ; Output to LPT file
    5406/    175A :                     ;
    5407/    175A :                     R_LPT_OUT:								;175AH
    5408/    175A : F1                      POP     PSW
    5409/    175B : F5                      PUSH    PSW
    5410/    175C : CD 55 4B                CALL    R_PRINT_A_EXPAND			;Print A to printer), expanding tabs if necessary
    5411/    175F : C3 EA 14                JMP     L_PWR_POP_ALL				;pop ALL registers function
    5412/    1762 :                     ;
    5413/    1762 :                     ; COM device control block
    5414/    1762 :                     ;
    5415/    1762 :                     R_COM_DCB:								;1762H
    5416/    1762 : 6D 17 9E 17 A8 17       DW      R_COM_OPEN, R_COM_CLOSE, R_COM_OUT
    5417/    1768 : B0 17 CA 17             DW      R_COM_IN, R_COM_IO
    5418/    176C :                     ;
    5419/    176C :                     ; Open MDM file
    5420/    176C :                     ;
    5421/    176C :                     ; IN:
    5422/    176C :                     ;	carry		clear
    5423/    176C :                     ;
    5424/    176C :                     R_MDM_OPEN:								;176CH
    5425/    176C : (MACRO)             	SKIP_XRA_A							;actually STC
    5426/    176D :                     ;
    5427/    176D :                     ; Open COM file. Supports both MDM and Serial port
    5428/    176D :                     ;
    5429/    176D :                     R_COM_OPEN:								;176DH
    5430/    176D : 37                      STC									;set carry: use RS232 port
    5431/    176E : F5                      PUSH    PSW							;save carry
    5432/    176F : DC 7C 51                CC      R_DISCONNECT_PHONE       	;Disconnect phone line and disable modem carrier
    5433/    1772 : F1                      POP     PSW							;restore carry
    5434/    1773 : F5                      PUSH    PSW
    5435/    1774 : E5                      PUSH    H							;save FCB ptr
    5436/    1775 : D5                      PUSH    D							;save Open Mode
    5437/    1776 : 21 93 FC                LXI     H,FILNAM_R					;Current Filename
    5438/    1779 : CD E6 17                CALL    R_SET_RS232_PARAMS       	;Set RS232 parameters from string at M
    5439/    177C : D1                      POP     D							;restore Open Mode
    5440/    177D : 7B                      MOV     A,E							;get File Open Mode
    5441/    177E : FE 08                   CPI     08H							;append
    5442/    1780 : CA 4E 50                JZ      R_GEN_NM_ERR_FUN			;brif append mode: Generate NM error (Bad File Name)
    5443/    1783 : D6 01                   SUI     01H							;input
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 92 - 9/5/2025 20:20:35


    5444/    1785 : C2 8B 17                JNZ     +							;brif not input: must be output
    5445/    1788 :                     ; A == 0
    5446/    1788 : 32 8F FA                STA     FILSTAT_R					;save File Open Mode
    5447/    178B : E1                  +	POP     H							;restore FCB ptr
    5448/    178C : F1                      POP     PSW							;restore carry
    5449/    178D : =>FALSE             	if		HWMODEM
    5450/    178D :                         JC      L_FINALIZE_FCB				;brif Serial port: update FCBLAST_R and clean stack.
    5451/    178D :                     ; E is File Open Mode
    5452/    178D :                         CALL    R_GO_OFFHOOK_WAIT			;Go off-hook and wait for carrier
    5453/    178D :                         JC      R_GEN_IO_ERROR				;Generate I/O error
    5454/    178D :                         MVI     A,02H
    5455/    178D :                         CALL    L_PAUSE						;pause
    5456/    178D :                         JMP     L_FINALIZE_FCB				;update FCBLAST_R and clean stack. E is File Open Mode
    5457/    178D : =>TRUE              	else								;HWMODEM
    5458/    178D : C3 DE 14                JMP     L_FINALIZE_FCB				;update FCBLAST_R and clean stack. E is File Open Mode
    5459/    1790 :                     	DS		14							;14 bytes FREE CODE SPACE if !HWMODEM
    5460/    179E : [5449]              	endif								;HWMODEM
    5461/    179E :                     ;
    5462/    179E :                     ; Close COM file
    5463/    179E :                     ;
    5464/    179E :                     R_COM_CLOSE:							;179EH
    5465/    179E : CD CB 6E                CALL    R_UNINIT_RS232_MDM       	;Deactivate RS232 or modem
    5466/    17A1 : AF                      XRA     A
    5467/    17A2 : 32 8F FA                STA     FILSTAT_R					;clear File Status
    5468/    17A5 : C3 59 4D                JMP     R_LCD_CLOSE_FUN				;LCD), CRT), and LPT file close routine
    5469/    17A8 :                     ;
    5470/    17A8 :                     ; Output to COM/MDM file
    5471/    17A8 :                     ;
    5472/    17A8 :                     R_COM_OUT:								;17A8H
    5473/    17A8 : F1                      POP     PSW
    5474/    17A9 : F5                      PUSH    PSW
    5475/    17AA : CD 32 6E                CALL    R_SEND_A_USING_XON       	;Send character in A to serial port using XON/XOFF
    5476/    17AD : C3 EA 14                JMP     L_PWR_POP_ALL				;pop ALL registers function
    5477/    17B0 :                     ;
    5478/    17B0 :                     ; Input from COM/MDM file
    5479/    17B0 :                     ;
    5480/    17B0 :                     ; BC, DE, HL pushed on stack
    5481/    17B0 :                     ;
    5482/    17B0 :                     ; Word registers and ultimate return address on Stack
    5483/    17B0 :                     ;
    5484/    17B0 :                     ;
    5485/    17B0 :                     R_COM_IN:								;17B0H
    5486/    17B0 : 21 8F FA                LXI     H,FILSTAT_R
    5487/    17B3 : CD C7 18                CALL    L_TSTFILSTAT
    5488/    17B6 : CD 7E 6D                CALL    R_READ_RS232_QUEUE       	;Get a character from RS232 receive queue
    5489/    17B9 : DA 94 14                JC      R_GEN_IO_ERROR				;Generate I/O error
    5490/    17BC : FE 1A                   CPI     1AH							;^Z
    5491/    17BE : 37                      STC									;clear Carry
    5492/    17BF : 3F                      CMC
    5493/    17C0 : C2 8A 4E                JNZ     L_POPDHBREGS				;brif not ^Z: Pops DE, HL, BC from stack and return
    5494/    17C3 : 32 8F FA                STA     FILSTAT_R					;store 1AH in File Status
    5495/    17C6 : 37                      STC
    5496/    17C7 : C3 8A 4E                JMP     L_POPDHBREGS				;Pops DE, HL, BC from stack and return
    5497/    17CA :                     ;
    5498/    17CA :                     ; Special COM/MDM file I/O
    5499/    17CA :                     ;
    5500/    17CA :                     ; IN:
    5501/    17CA :                     ;	C		Status byte
    5502/    17CA :                     ;
    5503/    17CA :                     R_COM_IO:								;17CAH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 93 - 9/5/2025 20:20:35


    5504/    17CA : 21 8F FA                LXI     H,FILSTAT_R
    5505/    17CD :                     L_COM_IO_1:
    5506/    17CD : 71                      MOV     M,C
    5507/    17CE : C3 23 50                JMP     L_LINE_IN_6
    5508/    17D1 :                     ;
    5509/    17D1 :                     ; MDM Device control block
    5510/    17D1 :                     ;
    5511/    17D1 :                     R_MDM_DCB:								;17D1H
    5512/    17D1 : 6C 17 DB 17 A8 17       DW      R_MDM_OPEN, R_MDM_CLOSE, R_COM_OUT
    5513/    17D7 : B0 17 CA 17             DW      R_COM_IN, R_COM_IO
    5514/    17DB :                     ;
    5515/    17DB :                     ; Close MDM file
    5516/    17DB :                     ;
    5517/    17DB :                     R_MDM_CLOSE:							;17DBH
    5518/    17DB : =>FALSE             	if		HWMODEM
    5519/    17DB :                         MVI     A,02H
    5520/    17DB :                         CALL    L_PAUSE						;pause
    5521/    17DB :                         CALL    R_DISCONNECT_PHONE       	;Disconnect phone line and disable modem carrier
    5522/    17DB : =>TRUE              	else
    5523/    17DB : 00 00 00 00 00 00   	DB		0,0,0,0,0,0,0,0				;8 bytes free if !HWMODEM
                    00 00 
    5524/    17E3 : [5518]              	endif
    5525/    17E3 : C3 9E 17                JMP     R_COM_CLOSE				    ;Close COM file
    5526/    17E6 :                     ;
    5527/    17E6 :                     ; Set RS232 parameters from string at M
    5528/    17E6 :                     ; IN: carry means RS232, else MODEM; no baud rate if MODEM
    5529/    17E6 :                     ;
    5530/    17E6 :                     R_SET_RS232_PARAMS:				    	;17E6H
    5531/    17E6 : F5                      PUSH    PSW							;save carry
    5532/    17E7 : 01 4E 50                LXI     B,R_GEN_NM_ERR_FUN			;error exit
    5533/    17EA : C5                      PUSH    B
    5534/    17EB : D2 F7 17                JNC		+							;brif modem
    5535/    17EE : 7E                      MOV     A,M
    5536/    17EF : D6 31                   SUI     '1'
    5537/    17F1 : FE 09                   CPI     09H
    5538/    17F3 : D0                      RNC									;digit > '9'
    5539/    17F4 : 3C                      INR     A							;base 1
    5540/    17F5 : 57                      MOV     D,A							;save baud rate 1..9
    5541/    17F6 : 23                      INX     H
    5542/    17F7 : 7E                  +	MOV     A,M
    5543/    17F8 : D6 36                   SUI     '6'
    5544/    17FA : FE 03                   CPI     03H
    5545/    17FC : D0                      RNC									;error: digit > '8'
    5546/    17FD : 3C                  	INR     A							;base 1
    5547/    17FE : 87                      ADD     A							;times 8 ->
    5548/    17FF : 87                      ADD     A							;08H, 10H, 18H
    5549/    1800 : 87                      ADD     A
    5550/    1801 : 5F                      MOV     E,A							;save word length in E, bits 3,4
    5551/    1802 : 23                      INX     H
    5552/    1803 : CD E8 0F                CALL    R_CONV_M_TOUPPER		  	;Get char at M and convert to uppercase
    5553/    1806 : FE 49                   CPI     'I'							;49H
    5554/    1808 : C2 1C 18                JNZ     L_SET_PARITY				;brif !'I'
    5555/    180B : 7B                      MOV     A,E							;word length
    5556/    180C : FE 18                   CPI     18H							;8 bits word length
    5557/    180E : C8                      RZ									;error: word length == 8 bits + ignore parity
    5558/    180F :                     ;
    5559/    180F :                     ; only 08H and 10H possible -> 14H, 1CH: change to 7,8 bits word length plus set 'N' parity.
    5560/    180F :                     ; AND 08H -> 00H, 08H SHL 3 -> 00H, 40H OR 3FH -> 3FH, 7FH Serial Ignore Parity Mask byte
    5561/    180F :                     ; 'I' parity changed to 'N' parity with 1 extra data bit. Sender will send an extra parity bit
    5562/    180F :                     ; but the extra bit will be ignored here. M100 will send an extra bit which should be ignored
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 94 - 9/5/2025 20:20:35


    5563/    180F :                     ; by other side.
    5564/    180F :                     ;
    5565/    180F : C6 0C                   ADI		0CH							;00001100
    5566/    1811 : 5F                      MOV     E,A							;save word length + no parity: 14H, 1CH
    5567/    1812 : E6 08                   ANI     08H							;00001000
    5568/    1814 : 87                      ADD     A							;shift left 3 bits
    5569/    1815 : 87                      ADD     A
    5570/    1816 : 87                      ADD     A
    5571/    1817 : F6 3F                   ORI     3FH							;00111111
    5572/    1819 : C3 32 18                JMP     L_STORE_IGNORE_PARITY
    5573/    181C :                     ; Parity 'O', 'E' or 'N'
    5574/    181C :                     L_SET_PARITY:
    5575/    181C : FE 45                   CPI     'E'
    5576/    181E : 06 02                   MVI     B,02H						;2 indicates 'E' parity
    5577/    1820 : CA 2D 18                JZ		+							;$$DONE
    5578/    1823 : D6 4E                   SUI     'N'
    5579/    1825 : 06 04                   MVI     B,04H						;4 indicates 'N' parity
    5580/    1827 : CA 2D 18                JZ		+
    5581/    182A : 3D                      DCR     A							;if parity was 'O', now 0
    5582/    182B : C0                      RNZ									;error: wrong parity
    5583/    182C : 47                      MOV     B,A							;0 indicates 'O' parity
    5584/    182D : 78                  +	MOV     A,B							;merge parity (0, 2, 4) with word length (08H, 10H, 18H)
    5585/    182E : B3                      ORA     E
    5586/    182F : 5F                      MOV     E,A							;save Word Length & Parity encoded byte
    5587/    1830 : 3E FF                   MVI     A,0FFH						;11111111B
    5588/    1832 :                     L_STORE_IGNORE_PARITY:
    5589/    1832 : 32 8D FF                STA     PARMSK_R					;Serial Ignore Parity Mask byte.
    5590/    1835 :                     										;	Used to remove bits if 'I' parity
    5591/    1835 : 23                      INX     H
    5592/    1836 : 7E                      MOV     A,M							;stop bits
    5593/    1837 : D6 31                   SUI     '1'							;0 means 1 stop bit, 1 means 2 stop bits
    5594/    1839 : FE 02                   CPI     02H
    5595/    183B : D0                      RNC									;error: stop bits > 2
    5596/    183C : B3                  	ORA     E							;merge stop bits with Word Length & Parity encoded byte
    5597/    183D : 5F                      MOV     E,A							;save
    5598/    183E : 23                      INX     H							;points to "Line Status"
    5599/    183F : CD E8 0F                CALL    R_CONV_M_TOUPPER		  	;Get char at M and convert to uppercase
    5600/    1842 : FE 44                   CPI     'D'
    5601/    1844 : CA 4E 18                JZ		+							;brif 'D'
    5602/    1847 : FE 45                   CPI     'E'
    5603/    1849 : C0                      RNZ									;error: invalid Line Status
    5604/    184A : CD 31 6F                CALL    R_ENABLE_XON_XOFF		  	;Enable XON/OFF when CTRL-S / CTRL-Q sent
    5605/    184D : 37                      STC   								;set carry so R_CLR_XON_XOFF call is skipped
    5606/    184E : D4 32 6F            +	CNC     R_CLR_XON_XOFF
    5607/    1851 : C1                      POP     B							;remove error return
    5608/    1852 : F1                      POP     PSW							;retrieve carry
    5609/    1853 : F5                      PUSH    PSW
    5610/    1854 : D5                      PUSH    D							;save encoded serial parameters
    5611/    1855 : 2B                      DCX     H							;backup M to beginning
    5612/    1856 : 2B                      DCX     H
    5613/    1857 : 2B                      DCX     H
    5614/    1858 : 2B                      DCX     H
    5615/    1859 : 11 5B F6                LXI     D,SERMOD_R					;Serial initialization string
    5616/    185C : 06 05                   MVI     B,05H						;length
    5617/    185E : 7E                      MOV     A,M							;baud rate
    5618/    185F : DA 64 18                JC		L_SET_RS232_1				;brif carry
    5619/    1862 : 3E 4D                   MVI     A,'M'						;Replace baud rate with 'M'
    5620/    1864 :                     L_SET_RS232_1:							;copy RS232 parameters
    5621/    1864 : 12                      STAX    D
    5622/    1865 : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 95 - 9/5/2025 20:20:35


    5623/    1866 : 13                      INX     D
    5624/    1867 : CD E8 0F                CALL    R_CONV_M_TOUPPER		  	;Get char at M and convert to uppercase
    5625/    186A : 05                      DCR     B
    5626/    186B : C2 64 18                JNZ     L_SET_RS232_1
    5627/    186E : EB                      XCHG								;move command ptr to DE 
    5628/    186F : E1                      POP     H							;restore encoded serial parameters
    5629/    1870 : F1                      POP     PSW							;restore carry (RS232 or MODEM)
    5630/    1871 : D5                      PUSH    D							;save command ptr
    5631/    1872 : CD A6 6E                CALL    R_INIT_RS232_MDM		  	;Initialize RS232 or modem
    5632/    1875 : E1                      POP     H							;restore command ptr to HL
    5633/    1876 : C9                      RET
    5634/    1877 :                     ;
    5635/    1877 :                     ; Wand device control block
    5636/    1877 :                     ;
    5637/    1877 :                     R_BCR_DCB:								;1877H
    5638/    1877 : 81 18 83 18 DB 08       DW      R_BCR_OPEN, R_BCR_CLOSE, R_GEN_FC_ERROR
    5639/    187D : 85 18 87 18             DW      R_BCR_IN, R_BCR_IO
    5640/    1881 :                     
    5641/    1881 :                     R_BCR_OPEN:
    5642/    1881 : (MACRO)             	RST38H	46H
    5643/    1883 :                     R_BCR_CLOSE:
    5644/    1883 : (MACRO)             	RST38H	48H
    5645/    1885 :                     R_BCR_IN:
    5646/    1885 : (MACRO)             	RST38H	4AH
    5647/    1887 :                     R_BCR_IO:
    5648/    1887 : (MACRO)             	RST38H	4CH
    5649/    1889 :                     ;
    5650/    1889 :                     ; EOF function
    5651/    1889 :                     ;
    5652/    1889 :                     ;
    5653/    1889 :                     R_EOF_FUN:								;1889H
    5654/    1889 : (MACRO)             	RST38H	26H
    5655/    188B : CD 81 4C                CALL    R_GET_FCB					;returns File Status in A
    5656/    188E : CA 5A 50                JZ      R_GEN_CF_ERR_FUN			;Generate CF error
    5657/    1891 : FE 01                   CPI     01H							;File open for Input?
    5658/    1893 : C2 4E 50                JNZ     R_GEN_NM_ERR_FUN			;brif FALSE: Generate NM error
    5659/    1896 : E5                      PUSH    H							;save FCB ptr
    5660/    1897 : CD BF 18                CALL    L_EOF_FUN_1					;read char from file
    5661/    189A : 4F                      MOV     C,A							;save char
    5662/    189B : 9F                      SBB     A							;test
    5663/    189C : CD 0A 34                CALL    L_SGN_EXTEND				;sign extend A to HL and FAC1
    5664/    189F : E1                      POP     H
    5665/    18A0 : 23                      INX     H							;HL += DEV_IN_FCB_OFS
    5666/    18A1 : 23                      INX     H
    5667/    18A2 : 23                      INX     H
    5668/    18A3 : 23                      INX     H
    5669/    18A4 : 7E                      MOV     A,M							;get Device Code
    5670/    18A5 : 21 8F FA                LXI     H,FILSTAT_R					;preload
    5671/    18A8 : FE FC                   CPI     COM_DEV						;Device Code COM
    5672/    18AA : CA BD 18                JZ      +
    5673/    18AD : FE F9                   CPI     MDM_DEV						;Device Code MDM
    5674/    18AF : CA BD 18                JZ      +
    5675/    18B2 : CD 75 16                CALL    R_GET_FILESTAT				;Get ptr to BASIC File Status
    5676/    18B5 : FE F8                   CPI     RAM_DEV						;Device Code RAM
    5677/    18B7 : CA BD 18                JZ      +
    5678/    18BA : 21 8E FA                LXI     H,CASFILSTAT_R				;ptr to Cassette File Status
    5679/    18BD : 71                  +	MOV     M,C
    5680/    18BE : C9                      RET
    5681/    18BF :                     
    5682/    18BF :                     L_EOF_FUN_1:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 96 - 9/5/2025 20:20:35


    5683/    18BF : C5                      PUSH    B							;save BC, DE, HL
    5684/    18C0 : E5                      PUSH    H
    5685/    18C1 : D5                      PUSH    D
    5686/    18C2 : 3E 06                   MVI     A,DCBIN_FUN					;DCB In function 
    5687/    18C4 : C3 23 51                JMP     L_EXEC_DCB_FUNC
    5688/    18C7 :                     ;
    5689/    18C7 :                     ; test and clear File Status
    5690/    18C7 :                     ;
    5691/    18C7 :                     ; BC, DE, HL pushed on stack
    5692/    18C7 :                     ;
    5693/    18C7 :                     ; IN:
    5694/    18C7 :                     ;	HL points to Device File Status
    5695/    18C7 :                     ; OUT:
    5696/    18C7 :                     ;	Z		set if success
    5697/    18C7 :                     ;
    5698/    18C7 :                     L_TSTFILSTAT:
    5699/    18C7 : 7E                      MOV     A,M							;get File Status
    5700/    18C8 : 36 00                   MVI     M,00H						;clear
    5701/    18CA : A7                      ANA     A							;test File Status
    5702/    18CB : C8                      RZ 									;retif File Status == 0    
    5703/    18CC : 33                      INX     SP							;remove return address
    5704/    18CD : 33                      INX     SP
    5705/    18CE : FE 1A                   CPI     1AH							;was File Status ^Z
    5706/    18D0 : 37                      STC									;preset clear carry
    5707/    18D1 : 3F                      CMC
    5708/    18D2 : C2 8A 4E                JNZ     L_POPDHBREGS				;brif File Status != ^Z: Pops DE, HL, BC from stack and return
    5709/    18D5 :                     ; TODO Looks like M still is ^Z
    5710/    18D5 : 77                      MOV     M,A							;update File Status
    5711/    18D6 : 37                      STC									;set carry
    5712/    18D7 : C3 8A 4E                JMP     L_POPDHBREGS				;Pops DE, HL, BC from stack and return
    5713/    18DA :                     	
    5714/    18DA :                     ; 
    5715/    18DA :                     ; This routine is walking up the BASIC execution stack and modifying
    5716/    18DA :                     ; the address of the control variable for FOR loop entries.
    5717/    18DA :                     ; Needed when memory before VARTAB_R area is moved
    5718/    18DA :                     ;
    5719/    18DA :                     ; 
    5720/    18DA :                     L_UPD_FOR_LOOPS:
    5721/    18DA : 01 01 00                LXI     B,0001H						;offset 1
    5722/    18DD :                     ;
    5723/    18DD :                     ; IN:
    5724/    18DD :                     ;	BC		offset to add to the address of the control variable (negative usually)
    5725/    18DD :                     ;
    5726/    18DD :                     L_UPD_FOR_LOOPS_1:						;entry point with BC preloaded
    5727/    18DD : 2A 9D FB                LHLD    BASSTK_R					;start of BASIC execution stack
    5728/    18E0 :                     L_UPD_FOR_LOOPS_2:
    5729/    18E0 : 7E                      MOV     A,M							;get A from stack chain
    5730/    18E1 : A7                      ANA     A
    5731/    18E2 : C8                      RZ									;retif [stack chain] == 0
    5732/    18E3 : EB                      XCHG
    5733/    18E4 : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer to DE
    5734/    18E7 : EB                      XCHG
    5735/    18E8 : (MACRO)                 COMPAR								;Compare STRBUF_R and stack chain: HL - DE
    5736/    18E9 : D0                      RNC									;retif stack chain >= STRBUF_R
    5737/    18EA : 7E                      MOV     A,M							;get marker again
    5738/    18EB : FE 81                   CPI     _FOR						;81H
    5739/    18ED : 11 07 00                LXI     D,0007H						;preload default length
    5740/    18F0 : C2 00 19                JNZ     +							;brif A != _FOR
    5741/    18F3 :                     ; _FOR marker found
    5742/    18F3 : 23                      INX     H							;next
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 97 - 9/5/2025 20:20:35


    5743/    18F4 : (MACRO)             	GETDEFROMMNOINC						;POINTER TO THE LOOP VARIABLE to DE
    5744/    18F7 : EB                      XCHG								;result to HL
    5745/    18F8 : 09                      DAD     B							;add offset in BC
    5746/    18F9 : EB                      XCHG								;result to DE
    5747/    18FA : 72                      MOV     M,D							;update POINTER TO THE LOOP VARIABLE: MSB
    5748/    18FB : 2B                      DCX     H
    5749/    18FC : 73                      MOV     M,E							;LSB
    5750/    18FD : 11 18 00                LXI     D,18H						;length 24 if _FOR marker
    5751/    1900 : 19                  +	DAD     D							;next stack chain entry
    5752/    1901 : C3 E0 18                JMP     L_UPD_FOR_LOOPS_2			;Loop
    5753/    1904 :                     ;
    5754/    1904 :                     ; TIME$ function
    5755/    1904 :                     ;
    5756/    1904 :                     R_TIME_FUN:								;1904H
    5757/    1904 : (MACRO)                 CHRGET								;Get next non-white char from M
    5758/    1905 : E5                      PUSH    H							;save text ptr
    5759/    1906 : CD 8D 19                CALL    L_PREP_8CHAR_STR
    5760/    1909 : CD 0F 19                CALL    R_READ_TIME				  	;Read time and store it at M
    5761/    190C : C3 8D 27                JMP     L_STRSTK_ADD				;add Transient String to String Stack
    5762/    190F :                     ;
    5763/    190F :                     ; Read time and store it at M
    5764/    190F :                     ;
    5765/    190F :                     R_READ_TIME:							;190FH
    5766/    190F : CD A0 19                CALL    R_UPDATE_CLK_VALUES      	;Update in-memory (F923H) clock values
    5767/    1912 : 11 28 F9                LXI     D,TIMBUF_R+5			    ;Hours (tens)
    5768/    1915 : CD 96 19                CALL    L_CVT_2DIGITS_DE_DEC
    5769/    1918 : 36 3A                   MVI     M,':'						;3AH
    5770/    191A : 23                      INX     H
    5771/    191B : CD 96 19                CALL    L_CVT_2DIGITS_DE_DEC
    5772/    191E : 36 3A                   MVI     M,':'						;3AH
    5773/    1920 :                     L_READ_TIME_1:
    5774/    1920 : 23                      INX     H
    5775/    1921 : C3 96 19                JMP     L_CVT_2DIGITS_DE_DEC
    5776/    1924 :                     
    5777/    1924 :                     R_DATE_FUN:
    5778/    1924 : (MACRO)                 CHRGET								;Get next non-white char from M
    5779/    1925 : E5                      PUSH    H							;save text ptr
    5780/    1926 : CD 8D 19                CALL    L_PREP_8CHAR_STR
    5781/    1929 : CD 2F 19                CALL    R_READ_DATE				    ;DATE$ function
    5782/    192C : C3 8D 27                JMP     L_STRSTK_ADD				;add Transient String to String Stack
    5783/    192F :                     ;
    5784/    192F :                     ; DATE$ function
    5785/    192F :                     ;
    5786/    192F :                     ; IN:
    5787/    192F :                     ;	HL		destination buffer
    5788/    192F :                     ;
    5789/    192F :                     R_READ_DATE:							;192FH
    5790/    192F : CD A0 19                CALL    R_UPDATE_CLK_VALUES      	;Update in-memory (TIMBUF_R) clock values
    5791/    1932 : 11 2C F9                LXI     D,TIMBUF_R+9			    ;Month (1..12)
    5792/    1935 : 1A                      LDAX    D
    5793/    1936 : FE 0A                   CPI     0AH
    5794/    1938 : 06 30                   MVI     B,'0'						;preload 30H
    5795/    193A : DA 41 19                JC      +							;;brif month < 10
    5796/    193D : 06 31                   MVI     B,'1'						;31H
    5797/    193F : D6 0A                   SUI     0AH							;rebase
    5798/    1941 : 70                  +	MOV     M,B							;leading month digit
    5799/    1942 : 23                      INX     H
    5800/    1943 : CD 9A 19                CALL    L_CVT_ONE_DIGIT
    5801/    1946 : 1B                      DCX     D
    5802/    1947 : 36 2F                   MVI     M,'/'						;2FH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 98 - 9/5/2025 20:20:35


    5803/    1949 : 23                      INX     H
    5804/    194A : CD 96 19                CALL    L_CVT_2DIGITS_DE_DEC
    5805/    194D : 36 2F                   MVI     M,'/'						;2FH
    5806/    194F : 11 2E F9                LXI     D,TIMYR1_R+1				;Year (tens)
    5807/    1952 : C3 20 19                JMP     L_READ_TIME_1
    5808/    1955 :                     ;
    5809/    1955 :                     ; DAY function
    5810/    1955 :                     ;
    5811/    1955 :                     R_DAY_FUN:								;1955H
    5812/    1955 : (MACRO)                 CHRGET								;Get next non-white char from M
    5813/    1956 : E5                      PUSH    H							;save text ptr
    5814/    1957 : 3E 03                   MVI     A,03H
    5815/    1959 : CD 8F 19                CALL    L_PREP_ACHAR_STR
    5816/    195C : CD 62 19                CALL    R_READ_DAY				    ;Read day and store at M
    5817/    195F : C3 8D 27                JMP     L_STRSTK_ADD				;add Transient String to String Stack
    5818/    1962 :                     ;
    5819/    1962 :                     ; Read day and store at M
    5820/    1962 :                     ;
    5821/    1962 :                     R_READ_DAY:								;1962H
    5822/    1962 : CD A0 19                CALL    R_UPDATE_CLK_VALUES        	;Update in-memory (F923H) clock values
    5823/    1965 : 3A 2B F9                LDA     TIMBUF_R+8					;Day of the week code (0=Sun), 1=Mon), etc.)
    5824/    1968 : 4F                      MOV     C,A							;save
    5825/    1969 : 87                      ADD     A							;*2
    5826/    196A : 81                      ADD     C							;*3
    5827/    196B : 4F                      MOV     C,A
    5828/    196C : 06 00                   MVI     B,00H						;zero extend
    5829/    196E : EB                      XCHG								;HL to DE 
    5830/    196F : 21 78 19                LXI     H,L_Weekdays_MSG			;Code Based. 
    5831/    1972 : 09                      DAD     B							;index with day
    5832/    1973 : 06 03                   MVI     B,03H						;copy 3 bytes
    5833/    1975 : C3 42 25                JMP     R_MOVE_B_BYTES				;Move B bytes from M to (DE)
    5834/    1978 :                     
    5835/    1978 :                     L_Weekdays_MSG:
    5836/    1978 : 53 75 6E                DB      "Sun"
    5837/    197B : 4D 6F 6E                DB      "Mon"
    5838/    197E : 54 75 65                DB      "Tue"
    5839/    1981 : 57 65 64                DB      "Wed"
    5840/    1984 : 54 68 75                DB      "Thu"
    5841/    1987 : 46 72 69                DB      "Fri"
    5842/    198A : 53 61 74                DB      "Sat"
    5843/    198D :                     	
    5844/    198D :                     L_PREP_8CHAR_STR:
    5845/    198D : 3E 08                   MVI     A,08H
    5846/    198F :                     L_PREP_ACHAR_STR:
    5847/    198F : CD 5D 27                CALL    L_PREP_STR					;Reserve String space and set Transitory String
    5848/    1992 : 2A 8A FB                LHLD    TRSNSTR_R+1					;Transitory String data ptr
    5849/    1995 : C9                      RET
    5850/    1996 :                     
    5851/    1996 :                     L_CVT_2DIGITS_DE_DEC:
    5852/    1996 : CD 99 19                CALL    L_CVT_ONE_DIGIT_DE			;twice
    5853/    1999 :                     ;
    5854/    1999 :                     ; convert digit at [DE] to ascii at M
    5855/    1999 :                     ;
    5856/    1999 :                     L_CVT_ONE_DIGIT_DE:
    5857/    1999 : 1A                      LDAX    D							;get char
    5858/    199A :                     L_CVT_ONE_DIGIT:
    5859/    199A : F6 30                   ORI     30H							;add '0'
    5860/    199C : 77                      MOV     M,A
    5861/    199D : 1B                      DCX     D
    5862/    199E : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 99 - 9/5/2025 20:20:35


    5863/    199F : C9                      RET
    5864/    19A0 :                     ;
    5865/    19A0 :                     ; Update in-memory (F923H) clock values
    5866/    19A0 :                     ;
    5867/    19A0 :                     R_UPDATE_CLK_VALUES:				  	;19A0H
    5868/    19A0 : E5                      PUSH    H
    5869/    19A1 : 21 23 F9                LXI     H,TIMBUF_R				  	;Seconds (ones)
    5870/    19A4 :                     ;
    5871/    19A4 :                     ; doing DI here is silly since L_DIS_INT_75_65() is called in R_GET_CLK_CHIP_REGS()
    5872/    19A4 :                     ;
    5873/    19A4 : F3                      DI 
    5874/    19A5 : CD 29 73                CALL    R_GET_CLK_CHIP_REGS       	;Copy clock chip regs to M
    5875/    19A8 : FB                      EI     
    5876/    19A9 : E1                      POP     H
    5877/    19AA : C9                      RET
    5878/    19AB :                     ;
    5879/    19AB :                     ; TIME$ statement
    5880/    19AB :                     ;
    5881/    19AB :                     R_TIME_STMT:							;19ABH
    5882/    19AB : FE DD                   CPI     _EQUAL_						;0DDH '=' token
    5883/    19AD : C2 A5 1A                JNZ     R_GET_TIME					;get current time
    5884/    19B0 : CD 42 1A                CALL    R_GET_TIME_STRING			;Get time string from command line
    5885/    19B3 :                     	
    5886/    19B3 :                     ;
    5887/    19B3 :                     ; Update clock chip from memory F923H
    5888/    19B3 :                     ;
    5889/    19B3 :                     R_UPDATE_CLK_CHIP:						;19B3H
    5890/    19B3 : 21 23 F9                LXI     H,TIMBUF_R					;Seconds (ones)
    5891/    19B6 :                     ;
    5892/    19B6 :                     ; doing DI here is silly since L_DIS_INT_75_65() is called in R_PUT_CLK_CHIP_REGS()
    5893/    19B6 :                     ;
    5894/    19B6 : F3                      DI 
    5895/    19B7 : CD 2A 73                CALL    R_PUT_CLK_CHIP_REGS      	;Update clock chip regs from M
    5896/    19BA : FB                      EI     
    5897/    19BB : E1                      POP     H
    5898/    19BC : C9                      RET
    5899/    19BD :                     ;
    5900/    19BD :                     ; DATE$ statement
    5901/    19BD :                     ; DATE$="mm/dd/yy"
    5902/    19BD :                     ;
    5903/    19BD :                     R_DATE_STMT:							;19BDH
    5904/    19BD : CD 2C 1A                CALL    L_CHK_STR_ASSIGN			;leaves ptr on stack
    5905/    19C0 : C2 46 04                JNZ     R_GEN_SN_ERROR				;brif string length != 8: Generate Syntax error
    5906/    19C3 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    5907/    19C6 : 3D                      DCR     A							;make 0 based
    5908/    19C7 : FE 0C                   CPI     12							;0CH
    5909/    19C9 : D2 46 04                JNC     R_GEN_SN_ERROR				;Generate Syntax error if month >= 12
    5910/    19CC : 3C                      INR     A							;make 1 based again
    5911/    19CD : 11 2C F9                LXI     D,TIMBUF_R+9				;&Month (1-12)
    5912/    19D0 : 12                      STAX    D							;update
    5913/    19D1 : (MACRO)             	SYNCHK	'/'
    5914/    19D3 : 1B                      DCX     D							;skip TIMBUF_R+8
    5915/    19D4 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE		;Day (tens)
    5916/    19D7 : FE 04                   CPI     04H
    5917/    19D9 : D2 46 04                JNC     R_GEN_SN_ERROR				;Generate Syntax error if high digit day >= 4
    5918/    19DC : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE		;Day (ones)
    5919/    19DF : (MACRO)             	SYNCHK	'/'
    5920/    19E1 : 11 2F F9                LXI     D,TIMYR1_R+2
    5921/    19E4 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE		;TIMYR1_R+1 Year (tens)
    5922/    19E7 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE		;TIMYR1_R Year(ones)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 100 - 9/5/2025 20:20:35


    5923/    19EA : AF                      XRA     A
    5924/    19EB : 32 55 F6                STA     TIMMON_R					;new date: reset TIMMON_R
    5925/    19EE : C3 B3 19                JMP     R_UPDATE_CLK_CHIP			;Update clock chip from memory TIMBUF_R
    5926/    19F1 :                     ;
    5927/    19F1 :                     ; DAY$ statement
    5928/    19F1 :                     ; DAY$="day" where "day" is 3 letter weekdays
    5929/    19F1 :                     ;
    5930/    19F1 :                     R_DAY_STMT:								;19F1H
    5931/    19F1 : CD 2C 1A                CALL    L_CHK_STR_ASSIGN			;check for '=' and get string ptr
    5932/    19F4 : FE 03                   CPI     03H							;length of string
    5933/    19F6 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    5934/    19F9 : 11 78 19                LXI     D,L_Weekdays_MSG			;Code Based.
    5935/    19FC : 0E 07                   MVI     C,07H						;7 days in a week
    5936/    19FE :                     L_DAY_STMT_1:
    5937/    19FE : E5                      PUSH    H							;save string ptr
    5938/    19FF : 06 03                   MVI     B,03H						;length of each weekday
    5939/    1A01 : 1A                  -	LDAX    D							;get weekday character
    5940/    1A02 : D5                      PUSH    D							;save weekdays ptr
    5941/    1A03 : CD E9 0F                CALL    R_CONV_A_TOUPPER			;Convert weekday char to uppercase
    5942/    1A06 : 5F                      MOV     E,A							;save it
    5943/    1A07 : CD E8 0F                CALL    R_CONV_M_TOUPPER			;Get day$ string char and convert to uppercase
    5944/    1A0A : BB                      CMP     E							;weekday char
    5945/    1A0B : D1                      POP     D							;restore weekdays ptr
    5946/    1A0C : C2 1F 1A                JNZ     L_DAY_STMT_2				;brif no match: skip this weekday string
    5947/    1A0F : 13                      INX     D							;next weekday char ptr
    5948/    1A10 : 23                      INX     H							;next string ptr
    5949/    1A11 : 05                      DCR     B							;length
    5950/    1A12 : C2 01 1A                JNZ     -							;brif more characters to compare
    5951/    1A15 :                     ;found a match
    5952/    1A15 : E1                      POP     H							;restore string ptr
    5953/    1A16 : 3E 07                   MVI     A,07H						;compute Day code
    5954/    1A18 : 91                      SUB     C							;weekday loop counter
    5955/    1A19 : 32 2B F9                STA     TIMBUF_R+8					;Day code (0=Sun), 1=Mon), etc.)
    5956/    1A1C : C3 B3 19                JMP     R_UPDATE_CLK_CHIP			;Update clock chip from memory F923H
    5957/    1A1F :                     ; skip current weekday string
    5958/    1A1F :                     L_DAY_STMT_2:
    5959/    1A1F : 13                      INX     D							;skip remainder of current day
    5960/    1A20 : 05                      DCR     B
    5961/    1A21 : C2 1F 1A                JNZ     L_DAY_STMT_2
    5962/    1A24 : E1                      POP     H							;restore string ptr
    5963/    1A25 : 0D                      DCR     C							;weekday loop counter
    5964/    1A26 : C2 FE 19                JNZ     L_DAY_STMT_1				;brif more days
    5965/    1A29 : C3 46 04                JMP     R_GEN_SN_ERROR				;no match. Generate Syntax error
    5966/    1A2C :                     ;
    5967/    1A2C :                     ; These 2 routines leave a string ptr on the Stack
    5968/    1A2C :                     ;
    5969/    1A2C :                     L_CHK_STR_ASSIGN:
    5970/    1A2C : (MACRO)             	SYNCHK	_EQUAL_						;'=' token
    5971/    1A2E :                     L_CHK_STR_CLK:
    5972/    1A2E : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    5973/    1A31 : E3                      XTHL								;save HL above return address
    5974/    1A32 : E5                      PUSH    H
    5975/    1A33 : CD A0 19                CALL    R_UPDATE_CLK_VALUES      	;Update in-memory (TIMBUF_R) clock values
    5976/    1A36 : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
    5977/    1A39 : 7E                      MOV     A,M							;String length to A
    5978/    1A3A : 23                      INX     H							;next
    5979/    1A3B : 5E                  	MOV     E,M							;LSB of string ptr
    5980/    1A3C : 23                  	INX     H
    5981/    1A3D : 66                  	MOV     H,M							;MSB of string ptr
    5982/    1A3E : 6B                      MOV     L,E							;string ptr to HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 101 - 9/5/2025 20:20:35


    5983/    1A3F : FE 08                   CPI     08H							;compare string length
    5984/    1A41 : C9                      RET
    5985/    1A42 :                     ;
    5986/    1A42 :                     ; Get time string from command line
    5987/    1A42 :                     ;
    5988/    1A42 :                     R_GET_TIME_STRING:						;1A42H
    5989/    1A42 : CD 2C 1A                CALL    L_CHK_STR_ASSIGN			;leaves ptr on stack
    5990/    1A45 : C2 46 04                JNZ     R_GEN_SN_ERROR				;brif string length != 8: Generate Syntax error
    5991/    1A48 : EB                      XCHG								;HL to DE
    5992/    1A49 : E1                      POP     H							;pushed ptr to HL
    5993/    1A4A : E3                      XTHL								;save HL above return address
    5994/    1A4B : E5                      PUSH    H
    5995/    1A4C : EB                      XCHG
    5996/    1A4D : 11 29 F9                LXI     D,TIMBUF_R+6				;Date (ones)
    5997/    1A50 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE
    5998/    1A53 : FE 03                   CPI     03H							;hours must be < 3
    5999/    1A55 : D2 46 04                JNC     R_GEN_SN_ERROR				;brif high hours digit >= 3: Generate Syntax error
    6000/    1A58 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE		;get low hours digit
    6001/    1A5B : (MACRO)             	SYNCHK	':'							;3AH
    6002/    1A5D : CD 62 1A                CALL    L_GET_TIME_STRING_1			;get minutes
    6003/    1A60 : (MACRO)             	SYNCHK	':'							;3AH
    6004/    1A62 :                     ; get seconds
    6005/    1A62 :                     L_GET_TIME_STRING_1:
    6006/    1A62 : CD 6A 1A                CALL    R_CVT_DIGIT_PREDEC_DE
    6007/    1A65 : FE 06                   CPI     06H
    6008/    1A67 : D2 46 04                JNC     R_GEN_SN_ERROR				;brif A >= 6: Generate Syntax error
    6009/    1A6A :                     ;
    6010/    1A6A :                     ; convert ascii digit at M and store in (DE)
    6011/    1A6A :                     ;
    6012/    1A6A :                     R_CVT_DIGIT_PREDEC_DE:
    6013/    1A6A : 1B                      DCX     D							;backup ptr
    6014/    1A6B : 7E                      MOV     A,M							;get digit
    6015/    1A6C : 23                      INX     H							;next digit
    6016/    1A6D : D6 30                   SUI     '0'							;convert to binary
    6017/    1A6F : FE 0A                   CPI     10							;0AH
    6018/    1A71 : D2 46 04                JNC     R_GEN_SN_ERROR				;Generate Syntax error if A >= 10
    6019/    1A74 : E6 0F                   ANI     0FH							;isolate low nibble. TODO Silly since A < 10
    6020/    1A76 : 12                      STAX    D
    6021/    1A77 : C9                      RET
    6022/    1A78 :                     ;
    6023/    1A78 :                     ; IPL statement
    6024/    1A78 :                     ;
    6025/    1A78 :                     R_IPL_STMT:								;1A78H
    6026/    1A78 : CA 96 1A                JZ      R_ERASE_IPL_PRGM			;Erase current IPL program if no argument
    6027/    1A7B : CD 2E 1A                CALL    L_CHK_STR_CLK				;get string, update clock. string ptr on stack
    6028/    1A7E : A7                      ANA     A							;check string length
    6029/    1A7F : CA 95 1A                JZ      +							;POP HL and Erase current IPL program
    6030/    1A82 : FE 0A                   CPI     0AH
    6031/    1A84 : D2 DB 08                JNC     R_GEN_FC_ERROR				;Generate FC error if >= 10 characters
    6032/    1A87 : 47                      MOV     B,A							;filename length
    6033/    1A88 : EB                      XCHG								;filename ptr to DE
    6034/    1A89 : 21 AF FA                LXI     H,IPLNAM_R				    ;Start of IPL filename
    6035/    1A8C : CD 69 34                CALL    R_MOVE_B_BYTES_INC       	;Move B bytes from (DE) to M with increment
    6036/    1A8F : 36 0D                   MVI     M,0DH						;end if CR
    6037/    1A91 : 23                      INX     H
    6038/    1A92 : 70                      MOV     M,B							;terminate
    6039/    1A93 : E1                      POP     H							;remove string ptr
    6040/    1A94 : C9                      RET
    6041/    1A95 :                     
    6042/    1A95 : E1                  +	POP     H							;remove string ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 102 - 9/5/2025 20:20:35


    6043/    1A96 :                     ;
    6044/    1A96 :                     ; Erase current IPL program
    6045/    1A96 :                     ;
    6046/    1A96 :                     ; OUT:
    6047/    1A96 :                     ;	A == 0
    6048/    1A96 :                     ;
    6049/    1A96 :                     R_ERASE_IPL_PRGM:						;1A96H
    6050/    1A96 : AF                      XRA     A
    6051/    1A97 : 32 AF FA                STA     IPLNAM_R					;IPL filename
    6052/    1A9A : 32 B0 FA                STA     IPLNAM_R+1
    6053/    1A9D : C9                      RET
    6054/    1A9E :                     ;
    6055/    1A9E :                     ; COM and MDM statements
    6056/    1A9E :                     ;
    6057/    1A9E :                     R_COM_MDM_STMT:							;1A9EH
    6058/    1A9E : E5                      PUSH    H
    6059/    1A9F : 21 44 F9                LXI     H,SYSINT_R				  	;On Com flag
    6060/    1AA2 : C3 A9 1A                JMP     +
    6061/    1AA5 :                     
    6062/    1AA5 :                     R_GET_TIME:
    6063/    1AA5 : E5                      PUSH    H
    6064/    1AA6 : 21 47 F9                LXI     H,SYSINT_R+3				;On Time flag
    6065/    1AA9 : CD EA 1A            +	CALL    R_DET_TIME_ARG				;Determine argument (ON/OFF/STOP) for TIME$ statement
    6066/    1AAC :                     L_GET_TIME_1:
    6067/    1AAC : E1                  	POP     H
    6068/    1AAD : F1                      POP     PSW
    6069/    1AAE : (MACRO)                 CHRGET								;Get next non-white char from M
    6070/    1AAF : C3 11 08                JMP     L_NEWSTT_1
    6071/    1AB2 :                     ;
    6072/    1AB2 :                     ; KEY() statement
    6073/    1AB2 :                     ;	KEY num,"value"
    6074/    1AB2 :                     ;	Assigns "value" to the given function key "num" (1-8).
    6075/    1AB2 :                     ;	Pressing the matching function key will pretend to type "value" on the keyboard.
    6076/    1AB2 :                     ;	Note: To reset the keys to their default, run these two instructions:
    6077/    1AB2 :                     ;	CALL 23164,0,23366	CALL R_SET_FKEYS,A=0,HL=R_BASIC_FKEYS_TBL
    6078/    1AB2 :                     ;	CALL 27795			CALL R_SET_BASIC_FKEYS
    6079/    1AB2 :                     ;
    6080/    1AB2 :                     R_KEY_FUN:								;1AB2H
    6081/    1AB2 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1. Result in A & E
    6082/    1AB5 : 3D                      DCR     A							;rebase to 0..7
    6083/    1AB6 : FE 08                   CPI     08H
    6084/    1AB8 : D2 DB 08                JNC     R_GEN_FC_ERROR				;Generate FC error if A >= 8
    6085/    1ABB : 7E                      MOV     A,M							;check for ','?
    6086/    1ABC : E5                      PUSH    H							;save src ptr
    6087/    1ABD : CD D4 1A                CALL    L_KEY_STMT					;needs E
    6088/    1AC0 : C3 AC 1A                JMP		L_GET_TIME_1
    6089/    1AC3 :                     ;
    6090/    1AC3 :                     ; KEY STOP/ON/OFF statements
    6091/    1AC3 :                     ;
    6092/    1AC3 :                     R_KEY_ON_OFF_STMT:						;1AC3H
    6093/    1AC3 : E5                      PUSH    H
    6094/    1AC4 : 1E 08                   MVI     E,08H
    6095/    1AC6 : D5                  -	PUSH    D
    6096/    1AC7 : F5                      PUSH    PSW
    6097/    1AC8 : CD D4 1A                CALL    L_KEY_STMT					;needs E
    6098/    1ACB : F1                      POP     PSW
    6099/    1ACC : D1                      POP     D
    6100/    1ACD : 1D                      DCR     E
    6101/    1ACE : C2 C6 1A                JNZ		-
    6102/    1AD1 : C3 AC 1A                JMP     L_GET_TIME_1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 103 - 9/5/2025 20:20:35


    6103/    1AD4 :                     ;
    6104/    1AD4 :                     ; Process KEY() statement key number
    6105/    1AD4 :                     ;
    6106/    1AD4 :                     ; IN:
    6107/    1AD4 :                     ;	E key number base 1
    6108/    1AD4 :                     ; OUT:
    6109/    1AD4 :                     ;	HL?
    6110/    1AD4 :                     ;
    6111/    1AD4 :                     L_KEY_STMT:
    6112/    1AD4 : 16 00                   MVI     D,00H
    6113/    1AD6 : 21 2F F6                LXI     H,FKEYSTAT_R-1				;0F62FH Load pointer to KEY ON enabled table
    6114/    1AD9 : 19                      DAD     D
    6115/    1ADA : E5                      PUSH    H							;save ptr
    6116/    1ADB : 21 47 F9                LXI     H,SYSINT_R+3				;0F947H &Basic Interrupt table[1]
    6117/    1ADE : 19                      DAD     D							;add 3 * DE
    6118/    1ADF : 19                      DAD     D
    6119/    1AE0 : 19                      DAD     D
    6120/    1AE1 : CD EA 1A                CALL    R_DET_TIME_ARG				;Determine argument (ON/OFF/STOP) for TIME$ statement
    6121/    1AE4 : 7E                      MOV     A,M
    6122/    1AE5 : E6 01                   ANI     01H							;isolate bit 0
    6123/    1AE7 : E1                      POP     H							;restore ptr
    6124/    1AE8 : 77                      MOV     M,A							;update KEY ON enabled table
    6125/    1AE9 : C9                      RET
    6126/    1AEA :                     ;
    6127/    1AEA :                     ; Determine argument (ON/OFF/STOP) for TIME$ statement
    6128/    1AEA :                     ; Actually:  Determine argument (ON/OFF/STOP) for any Interrupt statement
    6129/    1AEA :                     ;
    6130/    1AEA :                     R_DET_TIME_ARG:							;1AEAH
    6131/    1AEA : FE 97                   CPI     _ON
    6132/    1AEC : CA A0 3F                JZ      R_INT_ON_STMT				;TIME$ ON statement
    6133/    1AEF : FE CB                   CPI     _OFF
    6134/    1AF1 : CA B2 3F                JZ      R_TIME_OFF_STMT				;TIME$ OFF statement
    6135/    1AF4 : FE 8F                   CPI     _STOP
    6136/    1AF6 : CA B9 3F                JZ      R_INT_STOP_STMT				;TIME$ STOP statement
    6137/    1AF9 : C3 46 04                JMP     R_GEN_SN_ERROR				;Generate Syntax error
    6138/    1AFC :                     ;
    6139/    1AFC :                     ; Determine device (KEY/TIME/COM/MDM) for ON GOSUB
    6140/    1AFC :                     ;
    6141/    1AFC :                     R_DET_DEVICE_ARG:						;1AFCH
    6142/    1AFC : FE AD                   CPI     _COM
    6143/    1AFE : 01 01 00                LXI     B,0001H
    6144/    1B01 : C8                      RZ
    6145/    1B02 : FE AE                   CPI     _MDM
    6146/    1B04 : C8                      RZ
    6147/    1B05 : FE AF                   CPI     _KEY
    6148/    1B07 : 01 08 02                LXI     B,0208H
    6149/    1B0A : C8                      RZ
    6150/    1B0B : FE AA                   CPI     _TIME_
    6151/    1B0D : 37                      STC									;set error condition
    6152/    1B0E : C0                      RNZ
    6153/    1B0F :                     ;
    6154/    1B0F :                     ; ON TIME$ statement
    6155/    1B0F :                     ;
    6156/    1B0F :                     R_ONTIME_STMT:							;1B0FH
    6157/    1B0F : 23                      INX     H
    6158/    1B10 : CD 42 1A                CALL    R_GET_TIME_STRING			;Get time string from command line
    6159/    1B13 : 21 3D F9                LXI     H,TIMINT_R				    ;Time for ON TIME interrupt (SSHHMM or SSMMHH)
    6160/    1B16 : 06 06                   MVI     B,06H
    6161/    1B18 : CD 69 34                CALL    R_MOVE_B_BYTES_INC			;Move B bytes from (DE) to M with increment
    6162/    1B1B : E1                      POP     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 104 - 9/5/2025 20:20:35


    6163/    1B1C : 2B                      DCX     H
    6164/    1B1D : 01 01 01                LXI     B,0101H
    6165/    1B20 : A7                      ANA     A
    6166/    1B21 : C9                      RET
    6167/    1B22 :                     ;
    6168/    1B22 :                     ; ON COM handler
    6169/    1B22 :                     ;
    6170/    1B22 :                     R_ONCOM_STMT:							;1B22H
    6171/    1B22 : E5                      PUSH    H
    6172/    1B23 : 47                      MOV     B,A
    6173/    1B24 : 87                      ADD     A
    6174/    1B25 : 80                      ADD     B
    6175/    1B26 : 6F                      MOV     L,A
    6176/    1B27 : 26 00                   MVI     H,00H
    6177/    1B29 : 01 45 F9                LXI     B,SYSINT_R+1				;0F945H On Com routine address
    6178/    1B2C : 09                      DAD     B
    6179/    1B2D : 73                      MOV     M,E
    6180/    1B2E : 23                      INX     H
    6181/    1B2F : 72                      MOV     M,D
    6182/    1B30 : E1                      POP     H
    6183/    1B31 : C9                      RET
    6184/    1B32 :                     ;
    6185/    1B32 :                     ; RST 7.5 -- Timer background task
    6186/    1B32 :                     ;
    6187/    1B32 :                     R_TIMER_ISR:							;1B32H
    6188/    1B32 : CD FF F5                CALL    SYSHK_R
    6189/    1B35 : E5                      PUSH    H
    6190/    1B36 : D5                      PUSH    D
    6191/    1B37 : C5                      PUSH    B
    6192/    1B38 : F5                      PUSH    PSW
    6193/    1B39 : 3E 0D                   MVI     A,0DH						;00001101B. DO NOT Reset to 0 RST7.5 flip-flop.
    6194/    1B3B : 30                      SIM    
    6195/    1B3C : FB                      EI									;Allow other interrupts again
    6196/    1B3D : 21 2F F9                LXI     H,TIMCNT_R					;2Hz count-down value
    6197/    1B40 : 35                      DCR     M
    6198/    1B41 : C2 AE 1B                JNZ     L_RST7_5_2						;brif != 0. Could jump directly to L_BLINK_CURSOR_0
    6199/    1B44 :                     ; 250 mSecs mark
    6200/    1B44 : 36 7D                   MVI     M,125						;reset 2Hz count-down value
    6201/    1B46 : 23                      INX     H							;TIMCN2_R Counter (12 to 1)
    6202/    1B47 : 35                      DCR     M
    6203/    1B48 : C2 65 1B                JNZ     +							;brif != 0
    6204/    1B4B :                     ; 12 * 250 mSecs = 3 seconds mark
    6205/    1B4B : 36 0C                   MVI     M,12						;reset Counter (12 to 1)
    6206/    1B4D : 23                      INX     H							;PWRCNT_R Power down countdown value
    6207/    1B4E : E5                      PUSH    H							;save ptr to PWRCNT_R
    6208/    1B4F : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    6209/    1B52 : 23                      INX     H							;test CURLIN_R for 0FFFFH
    6210/    1B53 : 7C                      MOV     A,H
    6211/    1B54 : B5                      ORA     L
    6212/    1B55 : E1                      POP     H							;restore ptr to PWRCNT_R
    6213/    1B56 : C4 B1 1B                CNZ     R_KICK_PWR_OFF_WDT			;calif CURLIN_R != 0FFFFH: Renew automatic power-off counter
    6214/    1B59 : 7E                      MOV     A,M							;get PWRCNT_R
    6215/    1B5A : A7                      ANA     A
    6216/    1B5B : CA 65 1B                JZ		+							;brif PWRCNT_R == 0
    6217/    1B5E : 35                      DCR     M							;update PWRCNT_R
    6218/    1B5F : C2 65 1B                JNZ		+							;brif PWRCNT_R != 0
    6219/    1B62 : 23                      INX     H							;ptr to PWRDWN_R
    6220/    1B63 : 36 FF                   MVI     M,0FFH						;set Power Down Flag
    6221/    1B65 :                     ;
    6222/    1B65 :                     ; every 250 mSecs. TODO calling R_GET_CLK_CHIP_REGS this often seems too frequent
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 105 - 9/5/2025 20:20:35


    6223/    1B65 :                     ;
    6224/    1B65 : 21 33 F9            +	LXI     H,CLKCHP_R				    ;ptr to 10 bytes Clock Chip Buffer
    6225/    1B68 : E5                      PUSH    H							;save ptr
    6226/    1B69 : CD 29 73                CALL    R_GET_CLK_CHIP_REGS        	;Copy clock chip regs to M
    6227/    1B6C : D1                      POP     D							;restore ptr to Seconds (ones)
    6228/    1B6D : 21 3D F9                LXI     H,TIMINT_R				    ;Time for ON TIME interrupt (SSHHMM or SSMMHH)
    6229/    1B70 : 06 06                   MVI     B,06H						;size == 6 bytes
    6230/    1B72 : 1A                  -	LDAX    D							;compare Clk_Chip Time with ON TIME
    6231/    1B73 : 96                      SUB     M
    6232/    1B74 : C2 88 1B                JNZ		+							;brif different: store 0 in ONTIMETRIGD_R
    6233/    1B77 : 13                      INX     D							;next
    6234/    1B78 : 23                      INX     H
    6235/    1B79 : 05                      DCR     B							;loop counter
    6236/    1B7A : C2 72 1B                JNZ     -
    6237/    1B7D :                     	;DE now points to Unit of Days. HL now points to ONTIMETRIGD_R. A == 0
    6238/    1B7D :                     	; Clk_Chip Time and ON TIME are identical
    6239/    1B7D : B6                      ORA     M							;test ONTIMETRIGD_R
    6240/    1B7E : C2 8C 1B                JNZ     L_RST7_5_1					;brif ONTIMETRIGD_R != 0 (already triggered)
    6241/    1B81 : 21 47 F9                LXI     H,SYSINT_R+3				;On Time flag
    6242/    1B84 : CD D2 3F                CALL    R_TRIG_INTR				    ;Trigger interrupt.  HL points to interrupt table
    6243/    1B87 :                     ; store 0AFH in ONTIMETRIGD_R
    6244/    1B87 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    6245/    1B88 :                     ;:								;store 0 in ONTIMETRIGD_R
    6246/    1B88 : AF                  +	XRA     A
    6247/    1B89 : 32 43 F9                STA     ONTIMETRIGD_R				;store 0 or 0AFH
    6248/    1B8C :                     L_RST7_5_1:
    6249/    1B8C : 3A 3C F9                LDA     CLKCHP_R+9					;Month Clock Chip Buffer.
    6250/    1B8F : 21 55 F6                LXI     H,TIMMON_R
    6251/    1B92 : BE                      CMP     M
    6252/    1B93 : 77                      MOV     M,A							;update TIMMON_R with current month
    6253/    1B94 : D2 AB 1B                JNC     +							;brif [clock chip month] >= [current month]
    6254/    1B97 :                     ;
    6255/    1B97 :                     ; clock chip month < current month. Must have overflowed
    6256/    1B97 :                     ; Update Year
    6257/    1B97 :                     ;
    6258/    1B97 : 21 2D F9                LXI     H,TIMYR1_R				    ;Year (ones)
    6259/    1B9A : 34                      INR     M							;increment [TIMYR1_R]
    6260/    1B9B : 7E                      MOV     A,M							;get [TIMYR1_R]
    6261/    1B9C : D6 0A                   SUI     10							;0AH
    6262/    1B9E : C2 AB 1B                JNZ     +							;brif [TIMYR1_R] != 10
    6263/    1BA1 : 77                      MOV     M,A							;reset [TIMYR1_R] to 0
    6264/    1BA2 : 23                      INX     H							;to TIMYR1_R+1 Year (tens)
    6265/    1BA3 : 34                      INR     M							;update (tens)
    6266/    1BA4 : 7E                      MOV     A,M							;get [TIMYR1_R+1]
    6267/    1BA5 : D6 0A                   SUI     10							;0AH
    6268/    1BA7 : C2 AB 1B                JNZ     +							;brif [TIMYR1_R+1] != 10
    6269/    1BAA : 77                      MOV     M,A							;reset [TIMYR1_R+1] to 0 (99 -> 00)
    6270/    1BAB : CD 82 76            +	CALL    R_CHK_XTRNL_CNTRLER      	;Check for optional external controller
    6271/    1BAE :                     L_RST7_5_2:
    6272/    1BAE : C3 91 73                JMP     L_BLINK_CURSOR_0			;Continuation of RST 7.5 Background hook
    6273/    1BB1 :                     ;
    6274/    1BB1 :                     ; Renew automatic power-off counter
    6275/    1BB1 :                     ;
    6276/    1BB1 :                     R_KICK_PWR_OFF_WDT:						;1BB1H
    6277/    1BB1 : 3A 57 F6                LDA     TIMDWN_R					;POWER down time (1/10ths of a minute)
    6278/    1BB4 : 32 31 F9                STA     PWRCNT_R
    6279/    1BB7 : C9                      RET
    6280/    1BB8 :                     ;
    6281/    1BB8 :                     ; KEY statement
    6282/    1BB8 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 106 - 9/5/2025 20:20:35


    6283/    1BB8 :                     R_KEY_STMT:								;1BB8H
    6284/    1BB8 : FE A5                   CPI     _LIST						;0A5H
    6285/    1BBA : C2 F6 1B                JNZ     L_KEY_NOLIST
    6286/    1BBD :                     ;
    6287/    1BBD :                     ; KEY LIST statement
    6288/    1BBD :                     ;
    6289/    1BBD :                     R_KEY_LIST_STMT:						;1BBDH
    6290/    1BBD : (MACRO)                 CHRGET								;Get next non-white char from M
    6291/    1BBE : E5                      PUSH    H
    6292/    1BBF : 21 89 F7                LXI     H,FNKSTR_R				    ;Function key definition area
    6293/    1BC2 : 0E 04                   MVI     C,04H
    6294/    1BC4 : CD D3 1B            -	CALL    L_KEY_LIST_STMT_1			;2 keys per line
    6295/    1BC7 : CD D3 1B                CALL    L_KEY_LIST_STMT_1
    6296/    1BCA : CD 22 42                CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
    6297/    1BCD : 0D                      DCR     C
    6298/    1BCE : C2 C4 1B                JNZ     -
    6299/    1BD1 : E1                      POP     H
    6300/    1BD2 : C9                      RET
    6301/    1BD3 :                     ;
    6302/    1BD3 :                     ; IN:
    6303/    1BD3 :                     ;	HL		ptr to key text
    6304/    1BD3 :                     ;
    6305/    1BD3 :                     ; OUT
    6306/    1BD3 :                     ;	HL		ptr to next key text
    6307/    1BD3 :                     ;
    6308/    1BD3 :                     L_KEY_LIST_STMT_1:
    6309/    1BD3 : 06 10                   MVI     B,16						;10H
    6310/    1BD5 : CD E0 1B                CALL    R_SEND_CHARS_TO_LCD      	;Send 16 characters from M to the screen. Returns ' ' in A
    6311/    1BD8 : 06 03                   MVI     B,03H
    6312/    1BDA : (MACRO)             -	OUTCHR								;Send ' ' to screen/printer
    6313/    1BDB : 05                      DCR     B
    6314/    1BDC : C2 DA 1B                JNZ     -
    6315/    1BDF : C9                      RET
    6316/    1BE0 :                     ;
    6317/    1BE0 :                     ; Send B characters from M to the screen
    6318/    1BE0 :                     ;
    6319/    1BE0 :                     ; OUT
    6320/    1BE0 :                     ;	B		0
    6321/    1BE0 :                     ;
    6322/    1BE0 :                     R_SEND_CHARS_TO_LCD:				    ;1BE0H
    6323/    1BE0 : 7E                      MOV     A,M
    6324/    1BE1 : FE 7F                   CPI     7FH
    6325/    1BE3 : CA EB 1B                JZ		+							;brif A == 7FH
    6326/    1BE6 : FE 20                   CPI     ' '
    6327/    1BE8 : D2 ED 1B                JNC     L_SEND_CHARS_TO_LCD_1		;brif A printable
    6328/    1BEB : 3E 20               +	MVI     A,' '
    6329/    1BED :                     L_SEND_CHARS_TO_LCD_1:
    6330/    1BED : (MACRO)                 OUTCHR	  							;Send character in A to screen/printer
    6331/    1BEE : 23                      INX     H
    6332/    1BEF : 05                      DCR     B
    6333/    1BF0 : C2 E0 1B                JNZ     R_SEND_CHARS_TO_LCD			;Send characters from M to the screen
    6334/    1BF3 : 3E 20                   MVI     A,' '						;Return ' '
    6335/    1BF5 : C9                      RET
    6336/    1BF6 :                     
    6337/    1BF6 :                     L_KEY_NOLIST:
    6338/    1BF6 : FE 28                   CPI     '('
    6339/    1BF8 : CA B2 1A                JZ      R_KEY_FUN				  	;KEY() statement
    6340/    1BFB : FE 97                   CPI     _ON							;ON
    6341/    1BFD : CA C3 1A                JZ      R_KEY_ON_OFF_STMT			;KEY STOP/ON/OFF statements
    6342/    1C00 : FE CB                   CPI     0CBH						;OFF
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 107 - 9/5/2025 20:20:35


    6343/    1C02 : CA C3 1A                JZ      R_KEY_ON_OFF_STMT			;KEY STOP/ON/OFF statements
    6344/    1C05 : FE 8F                   CPI     8FH							;STOP
    6345/    1C07 : CA C3 1A                JZ      R_KEY_ON_OFF_STMT			;KEY STOP/ON/OFF statements
    6346/    1C0A : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    6347/    1C0D : 3D                      DCR     A
    6348/    1C0E : FE 08                   CPI     08H
    6349/    1C10 : D2 DB 08                JNC     R_GEN_FC_ERROR				;Generate FC error
    6350/    1C13 : EB                      XCHG
    6351/    1C14 : 6F                      MOV     L,A							;zero extend A to HL
    6352/    1C15 : 26 00                   MVI     H,00H
    6353/    1C17 : 29                      DAD     H							;*16
    6354/    1C18 : 29                      DAD     H
    6355/    1C19 : 29                      DAD     H
    6356/    1C1A : 29                      DAD     H
    6357/    1C1B : 01 89 F7                LXI     B,FNKSTR_R				  	;Function key definition area
    6358/    1C1E : 09                      DAD     B
    6359/    1C1F : E5                      PUSH    H
    6360/    1C20 : EB                      XCHG
    6361/    1C21 : (MACRO)             	SYNCHK	','
    6362/    1C23 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
    6363/    1C26 : E5                      PUSH    H
    6364/    1C27 : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
    6365/    1C2A : 46                      MOV     B,M
    6366/    1C2B : 23                      INX     H
    6367/    1C2C : (MACRO)             	GETDEFROMMNOINC
    6368/    1C2F : E1                      POP     H
    6369/    1C30 : E3                      XTHL
    6370/    1C31 : 0E 0F                   MVI     C,0FH
    6371/    1C33 : 78                      MOV     A,B
    6372/    1C34 : A7                      ANA     A
    6373/    1C35 : CA 48 1C                JZ      L_KEY_NOLIST_1
    6374/    1C38 : 1A                  -	LDAX    D
    6375/    1C39 : A7                      ANA     A
    6376/    1C3A : CA DB 08                JZ      R_GEN_FC_ERROR				 ;Generate FC error
    6377/    1C3D : 77                      MOV     M,A
    6378/    1C3E : 13                      INX     D
    6379/    1C3F : 23                      INX     H
    6380/    1C40 : 0D                      DCR     C
    6381/    1C41 : CA 4E 1C                JZ      +
    6382/    1C44 : 05                      DCR     B
    6383/    1C45 : C2 38 1C                JNZ		-
    6384/    1C48 :                     L_KEY_NOLIST_1:
    6385/    1C48 : 70                      MOV     M,B
    6386/    1C49 : 23                      INX     H
    6387/    1C4A : 0D                      DCR     C
    6388/    1C4B : C2 48 1C                JNZ     L_KEY_NOLIST_1
    6389/    1C4E : 71                  +	MOV     M,C
    6390/    1C4F : CD 9E 5A                CALL    R_DISP_FKEYS				;Display function keys on 8th line
    6391/    1C52 : CD 93 6C                CALL    R_SET_BASIC_FKEYS       	;Copy BASIC Function key table to key definition area
    6392/    1C55 : E1                      POP     H
    6393/    1C56 : C9                      RET
    6394/    1C57 :                     ;
    6395/    1C57 :                     ; PSET statement
    6396/    1C57 :                     ;
    6397/    1C57 :                     R_PSET_STMT:							;1C57H
    6398/    1C57 : CD 2E 1D                CALL    R_TOKENIZE_XY				;Get (X),Y) coordinate from tokenized string at M in DE, A
    6399/    1C5A :                     L_PSET_STMT_1:
    6400/    1C5A : 0F                      RRC
    6401/    1C5B : E5                      PUSH    H
    6402/    1C5C : F5                      PUSH    PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 108 - 9/5/2025 20:20:35


    6403/    1C5D : DC 4C 74                CC      R_PLOT_POINT				;Plot (set) point (D),E) on the LCD
    6404/    1C60 : F1                      POP     PSW
    6405/    1C61 : D4 4D 74                CNC     R_CLEAR_POINT				;Clear (reset) point (D),E) on the LCD
    6406/    1C64 : E1                      POP     H
    6407/    1C65 : C9                      RET
    6408/    1C66 :                     ;
    6409/    1C66 :                     ; PRESET statement
    6410/    1C66 :                     ;
    6411/    1C66 :                     R_PRESET_STMT:							;1C66H
    6412/    1C66 : CD 2E 1D                CALL    R_TOKENIZE_XY				;Get (X),Y) coordinate from tokenized string at M in DE,A
    6413/    1C69 : 2F                      CMA
    6414/    1C6A : C3 5A 1C                JMP     L_PSET_STMT_1
    6415/    1C6D :                     ;
    6416/    1C6D :                     ; LINE_1 statement
    6417/    1C6D :                     ;
    6418/    1C6D :                     R_LINE_STMT_1:							;1C6DH
    6419/    1C6D : FE D1                   CPI     _MINUS_						;token '-'
    6420/    1C6F : EB                      XCHG
    6421/    1C70 : 2A 4E F6                LHLD    XPLOT_R						;X coord of last point plotted
    6422/    1C73 : EB                      XCHG
    6423/    1C74 : C4 2E 1D                CNZ     R_TOKENIZE_XY				;Get (X),Y) coordinate from tokenized string at M in DE
    6424/    1C77 : D5                      PUSH    D							;save first coordinate pair
    6425/    1C78 : (MACRO)             	SYNCHK	_MINUS_						;token '-'
    6426/    1C7A : CD 2E 1D                CALL    R_TOKENIZE_XY				;Get (X),Y) coordinate from tokenized string at M in DE
    6427/    1C7D : D5                      PUSH    D							;save second coordinate pair
    6428/    1C7E : 11 4C 74                LXI     D,R_PLOT_POINT				;default plot function			
    6429/    1C81 : CA 94 1C                JZ      L_LINE_STMT_1_1
    6430/    1C84 : D5                      PUSH    D							;save default plot function
    6431/    1C85 : (MACRO)             	SYNCHK	','
    6432/    1C87 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    6433/    1C8A : D1                      POP     D							;restore default plot function
    6434/    1C8B : 0F                      RRC									;get odd-even bit 0 in carry
    6435/    1C8C : DA 92 1C                JC      +							;set a point
    6436/    1C8F : 11 4D 74                LXI     D,R_CLEAR_POINT				;change to clear plot function
    6437/    1C92 :                     ;:								;DE has plot function
    6438/    1C92 : 2B                  +	DCX     H
    6439/    1C93 : (MACRO)                 CHRGET								;Get next non-white char from M
    6440/    1C94 :                     L_LINE_STMT_1_1:
    6441/    1C94 : EB                      XCHG
    6442/    1C95 : 22 61 F6                SHLD    LSTCAL_R					;store plot function here
    6443/    1C98 : EB                      XCHG
    6444/    1C99 : CA D2 1C                JZ      L_DRAW_BOX_1				;brif no more chars
    6445/    1C9C : (MACRO)             	SYNCHK	','
    6446/    1C9E : (MACRO)             	SYNCHK	'B'
    6447/    1CA0 : CA BC 1C                JZ      R_DRAW_BOX				    ;Draw an unfilled box on LCD. Coords are on stack
    6448/    1CA3 : (MACRO)             	SYNCHK	'F'
    6449/    1CA5 : D1                      POP     D							;get second coordinate pair to DE
    6450/    1CA6 :                     ;
    6451/    1CA6 :                     ; Draw a filled box on LCD. Coords are on stack
    6452/    1CA6 :                     ;
    6453/    1CA6 :                     ; IN:
    6454/    1CA6 :                     ;	[LSTCAL_R]	plot function
    6455/    1CA6 :                     ;	[SP+0]		first coordinate pair
    6456/    1CA6 :                     ;	DE			second coordinate pair
    6457/    1CA6 :                     ;
    6458/    1CA6 :                     R_DRAW_FBOX:							;1CA6H
    6459/    1CA6 : E3                      XTHL								;swap first coordinate pair and text ptr
    6460/    1CA7 :                     ; HL is now first coordinate pair (x1, y1). DE is (x2, y2)
    6461/    1CA7 : 7B                      MOV     A,E							;Delta = y2-y1
    6462/    1CA8 : 95                      SUB     L
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 109 - 9/5/2025 20:20:35


    6463/    1CA9 : D2 AF 1C                JNC		+							;brif y2 >= y1
    6464/    1CAC : 2F                      CMA									;negate Delta
    6465/    1CAD : 3C                      INR     A
    6466/    1CAE : 6B                      MOV     L,E							;new y1
    6467/    1CAF :                     ; A is line count
    6468/    1CAF : 47                  +	MOV     B,A							;Delta to B: line count
    6469/    1CB0 : 04                      INR     B							;pre-increment
    6470/    1CB1 : 5D                  -	MOV     E,L							;D = x2, E = y
    6471/    1CB2 : CD D9 1C                CALL    L_DRAW_LINE					;HL is x1, y. DE = x2, y
    6472/    1CB5 : 2C                      INR     L							;next y
    6473/    1CB6 : 05                      DCR     B							;decrement line count
    6474/    1CB7 : C2 B1 1C                JNZ     -
    6475/    1CBA : E1                      POP     H							;restore text ptr
    6476/    1CBB : C9                      RET
    6477/    1CBC :                     ;
    6478/    1CBC :                     ; Draw an unfilled box on LCD. Coords are on stack
    6479/    1CBC :                     ; IN:
    6480/    1CBC :                     ;	[LSTCAL_R]	plot function
    6481/    1CBC :                     ;	[SP+0]		second coordinate pair
    6482/    1CBC :                     ;	[SP+2]		second coordinate pair
    6483/    1CBC :                     ;
    6484/    1CBC :                     R_DRAW_BOX:								;1CBCH
    6485/    1CBC : D1                      POP     D							;second coordinate pair
    6486/    1CBD : E3                      XTHL								;swap text ptr and first coordinate pair
    6487/    1CBE : D5                      PUSH    D							;save second coordinate pair
    6488/    1CBF : 5D                      MOV     E,L
    6489/    1CC0 : CD D9 1C                CALL    L_DRAW_LINE					;draw line
    6490/    1CC3 : D1                      POP     D							;retrieve second coordinate pair
    6491/    1CC4 : D5                      PUSH    D
    6492/    1CC5 : 54                      MOV     D,H
    6493/    1CC6 : CD D9 1C                CALL    L_DRAW_LINE					;draw line
    6494/    1CC9 : D1                      POP     D							;restore second coordinate pair
    6495/    1CCA : E5                      PUSH    H							;save first coordinate pair
    6496/    1CCB : 62                      MOV     H,D
    6497/    1CCC : CD D9 1C                CALL    L_DRAW_LINE					;draw line
    6498/    1CCF : E1                      POP     H							;restore first coordinate pair
    6499/    1CD0 : 6B                      MOV     L,E
    6500/    1CD1 : (MACRO)             	SKIP_2BYTES_INST_BC					;skip POP D & XTHL
    6501/    1CD2 :                     L_DRAW_BOX_1:
    6502/    1CD2 : D1                      POP     D
    6503/    1CD3 : E3                      XTHL
    6504/    1CD4 : CD D9 1C                CALL    L_DRAW_LINE					;draw line
    6505/    1CD7 : E1                      POP     H							;restore text ptr
    6506/    1CD8 : C9                      RET
    6507/    1CD9 :                     ;
    6508/    1CD9 :                     ; Bresenham line drawing function
    6509/    1CD9 :                     ;
    6510/    1CD9 :                     ; IN:
    6511/    1CD9 :                     ;	HL		x1,y1
    6512/    1CD9 :                     ;	DE		x2,y2
    6513/    1CD9 :                     ;
    6514/    1CD9 :                     L_DRAW_LINE:
    6515/    1CD9 : E5                      PUSH    H							;save all registers
    6516/    1CDA : D5                      PUSH    D
    6517/    1CDB : C5                      PUSH    B
    6518/    1CDC : 7D                      MOV     A,L							;y1-y2
    6519/    1CDD : 93                      SUB     E
    6520/    1CDE : D2 E4 1C                JNC     +
    6521/    1CE1 : EB                      XCHG								;swap coordinates
    6522/    1CE2 : 2F                      CMA									;negate row count
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 110 - 9/5/2025 20:20:35


    6523/    1CE3 : 3C                      INR     A
    6524/    1CE4 : 47                  +	MOV     B,A							;positive row count
    6525/    1CE5 : 0E 14                   MVI     C,14H						;opcode
    6526/    1CE7 : 7C                      MOV     A,H							;x1-x2
    6527/    1CE8 : 92                      SUB     D
    6528/    1CE9 : D2 EF 1C                JNC     +
    6529/    1CEC : 2F                      CMA									;negate column count
    6530/    1CED : 3C                      INR     A
    6531/    1CEE : 0C                      INR     C
    6532/    1CEF :                     ; A is positive column count
    6533/    1CEF : B8                  +	CMP     B
    6534/    1CF0 : DA FA 1C                JC      +							;brif column count < row count
    6535/    1CF3 : 67                      MOV     H,A
    6536/    1CF4 : 68                      MOV     L,B
    6537/    1CF5 : 3E 1C                   MVI     A,1CH						;INR E opcode
    6538/    1CF7 : C3 FF 1C                JMP     L_DRAW_LINE_1
    6539/    1CFA : 6F                  +	MOV     L,A
    6540/    1CFB : 60                      MOV     H,B
    6541/    1CFC : 79                      MOV     A,C
    6542/    1CFD : 0E 1C                   MVI     C,1CH						;INR E opcode
    6543/    1CFF :                     ;
    6544/    1CFF :                     ; A contains Increment Opcode, C contains Decrement Opcode
    6545/    1CFF :                     ;
    6546/    1CFF :                     L_DRAW_LINE_1:
    6547/    1CFF : 32 63 F6                STA     INRCODE_R					;RAM based instruction
    6548/    1D02 : 79                      MOV     A,C
    6549/    1D03 : 32 65 F6                STA     DCRCODE_R
    6550/    1D06 : 44                      MOV     B,H
    6551/    1D07 : 04                      INR     B
    6552/    1D08 : 7C                      MOV     A,H
    6553/    1D09 : A7                      ANA     A
    6554/    1D0A : 1F                      RAR
    6555/    1D0B : 4F                      MOV     C,A
    6556/    1D0C :                     L_DRAW_LINE_2:
    6557/    1D0C : E5                      PUSH    H							;save all registers
    6558/    1D0D : D5                      PUSH    D
    6559/    1D0E : C5                      PUSH    B
    6560/    1D0F : CD 60 F6                CALL    LSTCAL_R-1					;call pixel function. DE has coordinate pair
    6561/    1D12 : C1                      POP     B							;restore all registers
    6562/    1D13 : D1                      POP     D
    6563/    1D14 : E1                      POP     H
    6564/    1D15 : CD 65 F6                CALL    DCRCODE_R
    6565/    1D18 : 79                      MOV     A,C
    6566/    1D19 : 85                      ADD     L
    6567/    1D1A : 4F                      MOV     C,A
    6568/    1D1B : DA 22 1D                JC      +
    6569/    1D1E : BC                      CMP     H
    6570/    1D1F : DA 27 1D                JC      L_DRAW_LINE_3
    6571/    1D22 : 94                  +	SUB     H
    6572/    1D23 : 4F                      MOV     C,A
    6573/    1D24 : CD 63 F6                CALL    INRCODE_R
    6574/    1D27 :                     L_DRAW_LINE_3:
    6575/    1D27 : 05                      DCR     B
    6576/    1D28 : C2 0C 1D                JNZ     L_DRAW_LINE_2						;brif B != 0
    6577/    1D2B : C3 EE 14                JMP     R_POP_ALL_WREGS				;restore all registers and return
    6578/    1D2E :                     ;
    6579/    1D2E :                     ; Get (X,Y) pixel coordinate from tokenized string at M
    6580/    1D2E :                     ;
    6581/    1D2E :                     ; OUT:
    6582/    1D2E :                     ;	DE		(x,y)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 111 - 9/5/2025 20:20:35


    6583/    1D2E :                     ;
    6584/    1D2E :                     R_TOKENIZE_XY:							;1D2EH
    6585/    1D2E : (MACRO)             	SYNCHK	'('
    6586/    1D30 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1: X in A,E
    6587/    1D33 : FE F0                   CPI     MAXPIXCOLUMN				;240
    6588/    1D35 : D2 DB 08                JNC     R_GEN_FC_ERROR				;brif X >= MAXPIXCOLUMN: Generate FC error
    6589/    1D38 : F5                      PUSH    PSW							;save X
    6590/    1D39 : (MACRO)             	SYNCHK	','
    6591/    1D3B : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1: Y in A,E
    6592/    1D3E : FE 40                   CPI     MAXPIXROW					;64
    6593/    1D40 : D2 DB 08                JNC     R_GEN_FC_ERROR				;brif Y >= MAXPIXROW: Generate FC error
    6594/    1D43 : F1                      POP     PSW							;restore X
    6595/    1D44 : 57                      MOV     D,A							;move X to D. DE is not (x,y)
    6596/    1D45 : EB                      XCHG
    6597/    1D46 : 22 4E F6                SHLD    XPLOT_R						;move DE to X coord of last point plotted
    6598/    1D49 : EB                      XCHG
    6599/    1D4A : 7E                      MOV     A,M							;next char
    6600/    1D4B : FE 29                   CPI     ')'
    6601/    1D4D : C2 54 1D                JNZ     +
    6602/    1D50 : (MACRO)                 CHRGET								;Get next non-white char from M
    6603/    1D51 : 3E 01                   MVI     A,01H						;default plot ON
    6604/    1D53 : C9                      RET
    6605/    1D54 : D5                  +	PUSH    D							;save DE
    6606/    1D55 : (MACRO)             	SYNCHK	','
    6607/    1D57 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1: switch in A,E
    6608/    1D5A : (MACRO)             	SYNCHK	')'
    6609/    1D5C : 7B                      MOV     A,E							;plot switch
    6610/    1D5D : D1                      POP     D							;restore DE
    6611/    1D5E : C9                      RET
    6612/    1D5F :                     ;
    6613/    1D5F :                     ; print at display position
    6614/    1D5F :                     ;
    6615/    1D5F :                     L_PRINT_POS:
    6616/    1D5F : CD 12 11                CALL    L_GETINT					;Evaluate expression at M: Display Position to DE
    6617/    1D62 : (MACRO)             	SYNCHK	','
    6618/    1D64 : E5                      PUSH    H							;save text ptr
    6619/    1D65 : EB                      XCHG								;Display Position to HL. s.b. < 320
    6620/    1D66 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
    6621/    1D69 : 2F                      CMA									;negate
    6622/    1D6A : 3C                      INR     A
    6623/    1D6B : 4F                      MOV     C,A							;sign extend negative column count to BC
    6624/    1D6C : 06 FF                   MVI     B,0FFH
    6625/    1D6E : 58                      MOV     E,B							;set E to -1: line count
    6626/    1D6F : 1C                  -	INR     E							;increment line count
    6627/    1D70 : 55                      MOV     D,L							;save remainder of Display Position
    6628/    1D71 : 09                      DAD     B							;subtract column count from Display Position
    6629/    1D72 : DA 6F 1D                JC		-							;brif HL > 0
    6630/    1D75 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
    6631/    1D78 : 14                      INR     D							;increment remainder
    6632/    1D79 : BA                      CMP     D							;compare columns count with remainder
    6633/    1D7A : DA DB 08                JC      R_GEN_FC_ERROR				;brif columns count: Generate FC error
    6634/    1D7D : 3A 3B F6                LDA     LINCNT_R					;Console height
    6635/    1D80 : 1C                      INR     E							;increment line count
    6636/    1D81 : BB                      CMP     E							;LINCNT_R-line count
    6637/    1D82 : DA DB 08                JC      R_GEN_FC_ERROR				;brif : Generate FC error
    6638/    1D85 : EB                      XCHG								;DE to HL
    6639/    1D86 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
    6640/    1D89 : 7C                      MOV     A,H							;update new horizontal cursor position.
    6641/    1D8A : 3D                      DCR     A
    6642/    1D8B : 32 88 F7                STA     CURHPOS_R					;Horiz. position of cursor (0-39)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 112 - 9/5/2025 20:20:35


    6643/    1D8E : E1                      POP     H							;restore text ptr
    6644/    1D8F : C9                      RET
    6645/    1D90 :                     ;
    6646/    1D90 :                     ; CSRLIN function
    6647/    1D90 :                     ;
    6648/    1D90 :                     R_CSRLIN_FUN:							;1D90H
    6649/    1D90 : E5                      PUSH    H
    6650/    1D91 : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
    6651/    1D94 : 3D                      DCR     A
    6652/    1D95 :                     L_CSRLIN_FUN_1:
    6653/    1D95 : CD 0A 34                CALL    L_SGN_EXTEND				;sign extend A to HL and FAC1
    6654/    1D98 : E1                      POP     H
    6655/    1D99 : (MACRO)                 CHRGET								;Get next non-white char from M
    6656/    1D9A : C9                      RET
    6657/    1D9B :                     ;
    6658/    1D9B :                     ; MAX function
    6659/    1D9B :                     ;	MAXFILES or MAXRAM
    6660/    1D9B :                     ;
    6661/    1D9B :                     R_MAX_FUN:								;1D9BH
    6662/    1D9B : (MACRO)                 CHRGET								;Get next non-white char from M
    6663/    1D9C : FE 9D                   CPI     _FILES						;FILES token
    6664/    1D9E : CA B2 1D                JZ      R_MAXFILES_FUN				;MAXFILES function
    6665/    1DA1 : (MACRO)             	SYNCHK	'R'
    6666/    1DA3 : (MACRO)             	SYNCHK	'A'
    6667/    1DA5 : (MACRO)             	SYNCHK	'M'
    6668/    1DA7 :                     ;
    6669/    1DA7 :                     ; MAXRAM function
    6670/    1DA7 :                     ;
    6671/    1DA7 :                     R_MAXRAM_FUN:							;1DA7H
    6672/    1DA7 : E5                      PUSH    H							;save txt ptr
    6673/    1DA8 : (MACRO)             	RST38H	02H
    6674/    1DAA : 21 F0 F5                LXI     H,SYSRAM_R					;Address of RAM used by ROM
    6675/    1DAD :                     R_MAXRAM_FUN2:							;used by vt100.asm
    6676/    1DAD : CD DB 37                CALL    L_CONV_UNSGND_HL_SNGL		;Convert unsigned integer HL to single precision FAC1
    6677/    1DB0 : E1                      POP     H							;restore txt ptr
    6678/    1DB1 : C9                      RET
    6679/    1DB2 :                     ;
    6680/    1DB2 :                     ; MAXFILES function
    6681/    1DB2 :                     ;
    6682/    1DB2 :                     ; MAXFILES or MAXFILES=num
    6683/    1DB2 :                     ;
    6684/    1DB2 :                     R_MAXFILES_FUN:							;1DB2H
    6685/    1DB2 : E5                      PUSH    H							;save text ptr
    6686/    1DB3 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
    6687/    1DB6 : C3 95 1D                JMP     L_CSRLIN_FUN_1
    6688/    1DB9 :                     ;
    6689/    1DB9 :                     ; HIMEM function
    6690/    1DB9 :                     ;
    6691/    1DB9 :                     R_HIMEM_FUN:							;1DB9H
    6692/    1DB9 : E5                      PUSH    H							;save txt ptr
    6693/    1DBA : 2A F4 F5                LHLD    HIMEM_R						;HIMEM
    6694/    1DBD : CD DB 37                CALL    L_CONV_UNSGND_HL_SNGL		;Convert unsigned integer HL to single precision FAC1
    6695/    1DC0 : E1                      POP     H							;restore txt ptr
    6696/    1DC1 : (MACRO)                 CHRGET								;Get next non-white char from M
    6697/    1DC2 : C9                      RET
    6698/    1DC3 :                     ;
    6699/    1DC3 :                     ; WIDTH statement
    6700/    1DC3 :                     ;
    6701/    1DC3 :                     R_WIDTH_STMT:							;1DC3H
    6702/    1DC3 : (MACRO)             	RST38H	3AH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 113 - 9/5/2025 20:20:35


    6703/    1DC5 :                     ;
    6704/    1DC5 :                     ; SOUND statement
    6705/    1DC5 :                     ;
    6706/    1DC5 :                     R_SOUND_STMT:							;1DC5H
    6707/    1DC5 : FE 97                   CPI     _ON							;ON
    6708/    1DC7 : CA E6 1D                JZ      R_SOUND_ON_STMT				;SOUND ON statement
    6709/    1DCA : FE CB                   CPI     _OFF 						;OFF
    6710/    1DCC : CA E5 1D                JZ      R_SOUND_OFF_STMT			;SOUND OFF statement
    6711/    1DCF : CD 97 12                CALL    R_EVAL_EXPR_2				;Evaluate expression at M_2
    6712/    1DD2 : 7A                      MOV     A,D
    6713/    1DD3 : E6 C0                   ANI     0C0H						;11000000B
    6714/    1DD5 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;Generate FC error
    6715/    1DD8 : D5                      PUSH    D
    6716/    1DD9 : (MACRO)             	SYNCHK	','
    6717/    1DDB : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    6718/    1DDE : A7                      ANA     A
    6719/    1DDF : 47                      MOV     B,A
    6720/    1DE0 : D1                      POP     D
    6721/    1DE1 : C2 C5 72                JNZ     R_GEN_TONE				  	;Produce a tone of DE freq and B duration
    6722/    1DE4 : C9                      RET
    6723/    1DE5 :                     ;
    6724/    1DE5 :                     ; SOUND OFF statement
    6725/    1DE5 :                     ;
    6726/    1DE5 :                     R_SOUND_OFF_STMT:						;1DE5H
    6727/    1DE5 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    6728/    1DE6 :                     ;
    6729/    1DE6 :                     ; SOUND ON statement
    6730/    1DE6 :                     ;
    6731/    1DE6 :                     R_SOUND_ON_STMT:						;1DE6H
    6732/    1DE6 : AF                      XRA     A
    6733/    1DE7 : 32 44 FF                STA     SNDFLG_R					;Sound flag
    6734/    1DEA : (MACRO)                 CHRGET								;Get next non-white char from M
    6735/    1DEB : C9                      RET
    6736/    1DEC :                     ;
    6737/    1DEC :                     ; MOTOR statement
    6738/    1DEC :                     ;
    6739/    1DEC :                     R_MOTOR_STMT:							;1DECH
    6740/    1DEC : D6 CB                   SUI     _OFF 						;OFF
    6741/    1DEE : CA F5 1D                JZ      R_MOTOR_OFF_STMT			;MOTOR OFF statement
    6742/    1DF1 :                     ;
    6743/    1DF1 :                     ; MOTOR ON statement
    6744/    1DF1 :                     ;
    6745/    1DF1 :                     R_MOTOR_ON_STMT:						;1DF1H
    6746/    1DF1 : (MACRO)             	SYNCHK	_ON							;97H
    6747/    1DF3 : 2B                      DCX     H
    6748/    1DF4 : 7C                      MOV     A,H
    6749/    1DF5 :                     ;
    6750/    1DF5 :                     ; MOTOR OFF statement
    6751/    1DF5 :                     ;
    6752/    1DF5 :                     R_MOTOR_OFF_STMT:						;1DF5H
    6753/    1DF5 : 5F                      MOV     E,A
    6754/    1DF6 : (MACRO)                 CHRGET								;Get next non-white char from M
    6755/    1DF7 : C3 43 70                JMP     R_CAS_REMOTE_FUN			;Cassette REMOTE routine - turn motor on or off
    6756/    1DFA :                     ;
    6757/    1DFA :                     ; CALL statement
    6758/    1DFA :                     ;
    6759/    1DFA :                     R_CALL_STMT:							;1DFAH
    6760/    1DFA : CD 97 12                CALL    R_EVAL_EXPR_2				;Evaluate expression at M_2
    6761/    1DFD : EB                      XCHG
    6762/    1DFE : 22 61 F6                SHLD    LSTCAL_R					;Address last called
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 114 - 9/5/2025 20:20:35


    6763/    1E01 : EB                      XCHG
    6764/    1E02 : 2B                      DCX     H
    6765/    1E03 : (MACRO)                 CHRGET								;Get next non-white char from M
    6766/    1E04 : CA 1B 1E                JZ      L_CALL_STMT_1
    6767/    1E07 : (MACRO)             	SYNCHK	','
    6768/    1E09 : FE 2C                   CPI     ','
    6769/    1E0B : CA 14 1E                JZ		+
    6770/    1E0E : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    6771/    1E11 : CA 1B 1E                JZ      L_CALL_STMT_1
    6772/    1E14 : F5                  +	PUSH    PSW
    6773/    1E15 : (MACRO)             	SYNCHK	','
    6774/    1E17 : CD 97 12                CALL    R_EVAL_EXPR_2				;Evaluate expression at M_2
    6775/    1E1A : F1                      POP     PSW
    6776/    1E1B :                     L_CALL_STMT_1:
    6777/    1E1B : E5                      PUSH    H
    6778/    1E1C : EB                      XCHG
    6779/    1E1D : CD 60 F6                CALL    LSTCAL_R-1					;0F660H contains JMP to Address last called
    6780/    1E20 : E1                      POP     H
    6781/    1E21 : C9                      RET
    6782/    1E22 :                     ;
    6783/    1E22 :                     ; SCREEN statement
    6784/    1E22 :                     ;  SCREEN [0/1][,0/1]
    6785/    1E22 :                     ;	at least one operand required
    6786/    1E22 :                     ; VT100:
    6787/    1E22 :                     ;	potentially SCREEN 2
    6788/    1E22 :                     ; IN:
    6789/    1E22 :                     ;	A		first char after SCREEN
    6790/    1E22 :                     ;
    6791/    1E22 :                     R_SCREEN_STMT:							;1E22H
    6792/    1E22 : FE 2C                   CPI     ','
    6793/    1E24 : 3A 38 F6                LDA     CONDEV_R					;New Console device flag
    6794/    1E27 : C4 2E 11                CNZ     L_GETBYT					;Evaluate byte expression at M-1
    6795/    1E2A : CD 3C 1E                CALL    L_SCREEN_STMT_1				;process first 0/1 operand
    6796/    1E2D : 2B                      DCX     H							;backup
    6797/    1E2E : (MACRO)                 CHRGET								;Get next non-white char from M
    6798/    1E2F : C8                      RZ									;retif done
    6799/    1E30 : (MACRO)             	SYNCHK	','
    6800/    1E32 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    6801/    1E35 : E5                      PUSH    H
    6802/    1E36 : A7                      ANA     A							;test for 0 or 1
    6803/    1E37 : CD AF 13                CALL    L_SET_LABEL_LINE			;Z is argument
    6804/    1E3A : E1                      POP     H
    6805/    1E3B : C9                      RET
    6806/    1E3C :                     ;
    6807/    1E3C :                     ; ======================================================
    6808/    1E3C :                     ; Process SCREEN statement including calling SCREEN RST7 Hook
    6809/    1E3C :                     ; A has New Console Device flag
    6810/    1E3C :                     ; IN:
    6811/    1E3C :                     ;	A		New Console device code (0, 1 or 2)
    6812/    1E3C :                     ; ======================================================
    6813/    1E3C :                     ;
    6814/    1E3C :                     L_SCREEN_STMT_1:
    6815/    1E3C : E5                      PUSH    H							;Preserve HL on stack
    6816/    1E3D : 32 38 F6                STA     CONDEV_R					;Set new Console device flag (0, 1 or 2)
    6817/    1E40 : A7                      ANA     A							;test it
    6818/    1E41 : 11 08 28                LXI     D,2808H						;preload 40 columns by 8 rows: console size
    6819/    1E44 : 2A 40 F6                LHLD    LCDCSY_R					;Cursor row (1-8) + cursor column (1..40)
    6820/    1E47 : 3E 0E                   MVI     A,14						;Value of last column before wrap for PRINT ,
    6821/    1E49 : CA 52 1E                JZ      +							;Jump over RST7 if not New Console Device
    6822/    1E4C :                     ; CONDEV_R != 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 115 - 9/5/2025 20:20:35


    6823/    1E4C : AF                      XRA     A
    6824/    1E4D : 32 38 F6                STA     CONDEV_R					;Clear New Console device flag
    6825/    1E50 : (MACRO)             	RST38H	3EH							;intercepted by DVI/VT100. 
    6826/    1E52 : 22 39 F6            +	SHLD    CSRY_R						;Update cursor row (1-8) + column (1-40)
    6827/    1E55 : EB                      XCHG								;DE has active ROWS,COLS (for LCD or DVI)
    6828/    1E56 : 22 3B F6                SHLD    LINCNT_R					;Console height + Console width
    6829/    1E59 : 32 76 F6                STA     COLWRAP_R					;Store value of column wrap for PRINT , (14 or 56 if 80 COL mode)
    6830/    1E5C : E1                      POP     H							;Restore HL from stack
    6831/    1E5D : C9                      RET
    6832/    1E5E :                     ;
    6833/    1E5E :                     ; LCOPY statement
    6834/    1E5E :                     ;
    6835/    1E5E :                     R_LCOPY_STMT:						   	;1E5EH
    6836/    1E5E : E5                      PUSH    H
    6837/    1E5F : CD A0 4B                CALL    L_LPT_NEWLINE				;send CR to printer
    6838/    1E62 : 21 00 FE                LXI     H,LCD_R				       	;Start of LCD character buffer
    6839/    1E65 : 1E 08                   MVI     E,08H						;max Row
    6840/    1E67 :                     L_LCOPY_STMT_1:
    6841/    1E67 : 16 28                   MVI     D,40						;max column (28H)
    6842/    1E69 : 7E                  -	MOV     A,M
    6843/    1E6A : CD 70 14                CALL    R_OUT_CH_TO_LPT				;Output character to printer
    6844/    1E6D : 23                      INX     H
    6845/    1E6E : 15                      DCR     D
    6846/    1E6F : C2 69 1E                JNZ		-							;column loop
    6847/    1E72 : CD A0 4B                CALL    L_LPT_NEWLINE				;send CR to printer
    6848/    1E75 : 1D                      DCR     E
    6849/    1E76 : C2 67 1E                JNZ     L_LCOPY_STMT_1				;row loop
    6850/    1E79 : E1                      POP     H
    6851/    1E7A : C9                      RET
    6852/    1E7B :                     
    6853/    1E7B :                     L_RAMFILE:
    6854/    1E7B : E5                      PUSH    H
    6855/    1E7C : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    6856/    1E7F : 2A 99 FC                LHLD    FILNAM_R+6					;Get Filename extension
    6857/    1E82 : 11 20 20                LXI     D,2020H						;"  "
    6858/    1E85 : (MACRO)                 COMPAR								;Compare extension with "  ": HL - DE
    6859/    1E86 : F5                      PUSH    PSW
    6860/    1E87 : CA 91 1E                JZ      +
    6861/    1E8A : 11 42 41                LXI     D,4142H						;"BA"
    6862/    1E8D : (MACRO)                 COMPAR								;Compare extension with "BA": HL - DE
    6863/    1E8E : C2 C7 1E                JNZ     L_RAMFILE_1
    6864/    1E91 : CD A6 20            +	CALL    L_SET_EXT_BA				;set "BA" extension and find file
    6865/    1E94 : CA C7 1E                JZ      L_RAMFILE_1
    6866/    1E97 : F1                      POP     PSW							;stack cleanup
    6867/    1E98 : C1                      POP     B
    6868/    1E99 : F1                      POP     PSW							;new Z flag
    6869/    1E9A : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
    6870/    1E9D : 3E 00                   MVI     A,00H						;save flags
    6871/    1E9F : F5                      PUSH    PSW
    6872/    1EA0 : C5                      PUSH    B
    6873/    1EA1 : 22 8C FA                SHLD    RAMDIRPTR_R
    6874/    1EA4 : EB                      XCHG
    6875/    1EA5 : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
    6876/    1EA8 : CD F0 05                CALL    R_UPDATE_LINE_ADDR       	;Update line addresses for current BASIC program
    6877/    1EAB : E1                      POP     H							;text ptr
    6878/    1EAC : 7E                      MOV     A,M							;next char
    6879/    1EAD : FE 2C                   CPI     ','
    6880/    1EAF : C2 BA 1E                JNZ     +
    6881/    1EB2 : (MACRO)                 CHRGET								;Get next non-white char from M
    6882/    1EB3 : (MACRO)             	SYNCHK	'R'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 116 - 9/5/2025 20:20:35


    6883/    1EB5 : F1                      POP     PSW
    6884/    1EB6 : 3E 80                   MVI     A,80H
    6885/    1EB8 : 37                      STC
    6886/    1EB9 : F5                      PUSH    PSW
    6887/    1EBA : F1                  +	POP     PSW
    6888/    1EBB : 32 A7 FC                STA     OPNFIL_R
    6889/    1EBE : DA 28 3F                JC      R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
    6890/    1EC1 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
    6891/    1EC4 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
    6892/    1EC7 :                     
    6893/    1EC7 :                     L_RAMFILE_1:
    6894/    1EC7 : F1                      POP     PSW
    6895/    1EC8 : E1                      POP     H
    6896/    1EC9 : 16 F8                   MVI     D,RAM_DEV					;0F8H 
    6897/    1ECB : C2 8D 4D                JNZ     L_MERGE_1
    6898/    1ECE : E5                      PUSH    H
    6899/    1ECF : 21 20 20                LXI     H,2020H						;"  "
    6900/    1ED2 : 22 99 FC                SHLD    FILNAM_R+6					;set Filename extension to blank
    6901/    1ED5 : E1                      POP     H
    6902/    1ED6 : C3 8D 4D                JMP     L_MERGE_1
    6903/    1ED9 :                     ;
    6904/    1ED9 :                     ; BASIC SAVE "file"[,A]
    6905/    1ED9 :                     ;
    6906/    1ED9 :                     L_SAVE_RAM:
    6907/    1ED9 : E5                      PUSH    H							;save txt ptr
    6908/    1EDA : 2A 99 FC                LHLD    FILNAM_R+6					;HL = Filename extension chars
    6909/    1EDD : 11 44 4F                LXI     D,4F44H						;"DO"
    6910/    1EE0 : (MACRO)                 COMPAR								;HL - DE
    6911/    1EE1 : 06 00                   MVI     B,00H						;preload DO extension code
    6912/    1EE3 : CA F8 1E                JZ		+							;brif if extension == "DO"
    6913/    1EE6 : 11 42 41                LXI     D,4142H						;"BA"
    6914/    1EE9 : (MACRO)                 COMPAR								;HL - DE
    6915/    1EEA : 06 01                   MVI     B,01H						;preload BA extension code
    6916/    1EEC : CA F8 1E                JZ		+							;brif extension == "BA"
    6917/    1EEF : 11 20 20                LXI     D,2020H						;"  "
    6918/    1EF2 : (MACRO)                 COMPAR								;HL - DE
    6919/    1EF3 : 06 02                   MVI     B,02H						;no extension code
    6920/    1EF5 : C2 4E 50                JNZ     R_GEN_NM_ERR_FUN			;Generate NM error
    6921/    1EF8 :                     ; B holds 0 (DO), 1 (BA) or 2 ("  ").
    6922/    1EF8 : E1                  +	POP     H							;restore txt ptr
    6923/    1EF9 : C5                      PUSH    B							;save extension code
    6924/    1EFA : 2B                      DCX     H							;pre-decrement
    6925/    1EFB : (MACRO)                 CHRGET								;Get next non-white char from M
    6926/    1EFC : CA 10 1F                JZ      L_SAVE_RAM_1				;brif done
    6927/    1EFF : (MACRO)             	SYNCHK	','
    6928/    1F01 : (MACRO)             	SYNCHK	'A'
    6929/    1F03 : C1                      POP     B							;reload extension code
    6930/    1F04 : 05                      DCR     B
    6931/    1F05 : CA 4E 50                JZ      R_GEN_NM_ERR_FUN			;brif not BASIC: Generate NM error (Bad Filename)
    6932/    1F08 : AF                  -	XRA     A
    6933/    1F09 : 11 02 F8                LXI     D,0F802H					;E == Marker 2: Open for Output. D == RAM_DEV
    6934/    1F0C : F5                      PUSH    PSW
    6935/    1F0D : C3 0B 4E                JMP     L_SAVE_ASC
    6936/    1F10 :                     L_SAVE_RAM_1:
    6937/    1F10 : C1                      POP     B
    6938/    1F11 : 05                      DCR     B
    6939/    1F12 : FA 08 1F                JM      -
    6940/    1F15 : CD 81 20                CALL    L_IS_SUZUKI_DIR
    6941/    1F18 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;brif != 0: Generate FC error
    6942/    1F1B : CD A6 20                CALL    L_SET_EXT_BA				;set "BA" extension and find file
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 117 - 9/5/2025 20:20:35


    6943/    1F1E : C4 17 20                CNZ     R_KILL_BA_FILE_2
    6944/    1F21 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    6945/    1F24 : CD E4 20                CALL    L_FindFreeDirEntry
    6946/    1F27 : 22 8C FA                SHLD    RAMDIRPTR_R					;store available directory entry ptr
    6947/    1F2A : 3E 80                   MVI     A,80H
    6948/    1F2C : EB                      XCHG
    6949/    1F2D : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    6950/    1F30 : EB                      XCHG								;DE = Start of BASIC program pointer
    6951/    1F31 : CD 39 22                CALL    R_SAVE_TO_DIRECTORY			;Save new entry to Directory
    6952/    1F34 : CD D4 21                CALL    L_SET_MEM_TABLES
    6953/    1F37 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
    6954/    1F3A :                     ;
    6955/    1F3A :                     ; FILES statement
    6956/    1F3A :                     ;
    6957/    1F3A :                     R_FILES_STMT:							;1F3AH
    6958/    1F3A : E5                      PUSH    H
    6959/    1F3B : CD 42 1F                CALL    R_DISPLAY_DIR				;Display Directory
    6960/    1F3E : E1                      POP     H
    6961/    1F3F : C3 B8 4B                JMP     R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
    6962/    1F42 :                     ;
    6963/    1F42 :                     ; Display Directory while in BASIC
    6964/    1F42 :                     ;
    6965/    1F42 :                     R_DISPLAY_DIR:							;1F42H
    6966/    1F42 : 21 57 F9                LXI     H,RAMDIR_R-RAMDIRLEN		;Load address of RAM Directory (-1 entry, or 11 bytes)
    6967/    1F45 :                     L_DISPLAY_DIR_1:
    6968/    1F45 : 0E 03                   MVI     C,03H						;3 or 6 files per line
    6969/    1F47 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
    6970/    1F4A : FE 28                   CPI     28H
    6971/    1F4C : CA 51 1F                JZ      L_DISPLAY_DIR_2
    6972/    1F4F : 0E 06                   MVI     C,06H
    6973/    1F51 :                     L_DISPLAY_DIR_2:
    6974/    1F51 : CD D5 20            	CALL    L_FindNextDirEntry			;Find Non-Empty directory entry
    6975/    1F54 : C8                      RZ									;end of directory
    6976/    1F55 : E6 18                   ANI     _DIR_INROM|_DIR_INVIS		;00011000B 18H
    6977/    1F57 : C2 51 1F                JNZ     L_DISPLAY_DIR_2				;skip if file in ROM or INVISIBLE
    6978/    1F5A : E5                      PUSH    H							;save directory ptr
    6979/    1F5B : 23                      INX     H							;get Filestart ptr to DE
    6980/    1F5C : (MACRO)             	GETDEFROMM
    6981/    1F60 : D5                      PUSH    D							;save Filestart ptr
    6982/    1F61 : 06 06                   MVI     B,06H						;Filename length (base part)
    6983/    1F63 : 7E                  -	MOV     A,M
    6984/    1F64 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    6985/    1F65 : 23                      INX     H							;next char
    6986/    1F66 : 05                      DCR     B
    6987/    1F67 : C2 63 1F                JNZ		-							;loop if not done
    6988/    1F6A : 3E 2E                   MVI     A,'.'						
    6989/    1F6C : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    6990/    1F6D : 7E                      MOV     A,M							;first extension char
    6991/    1F6E : (MACRO)                 OUTCHR						    	;Send character in A to screen/printer
    6992/    1F6F : 23                      INX     H
    6993/    1F70 : 7E                      MOV     A,M							;second extension char
    6994/    1F71 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    6995/    1F72 : D1                      POP     D							;reload Filestart ptr
    6996/    1F73 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    6997/    1F76 : (MACRO)                 COMPAR								;HL - DE
    6998/    1F77 : 3E 2A                   MVI     A,'*'						;2AH preload
    6999/    1F79 : 06 20                   MVI     B,' '
    7000/    1F7B : CA 7F 1F                JZ		+							;brif Filestart ptr is BASIC program pointer
    7001/    1F7E : 78                      MOV     A,B							;use ' ' is FALSE
    7002/    1F7F : (MACRO)             +	OUTCHR								;Send character in A to screen/printer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 118 - 9/5/2025 20:20:35


    7003/    1F80 : 78                      MOV     A,B
    7004/    1F81 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    7005/    1F82 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    7006/    1F83 : E1                      POP     H							;reload directory ptr
    7007/    1F84 : 0D                      DCR     C							;max number of files per line
    7008/    1F85 : C2 51 1F                JNZ     L_DISPLAY_DIR_2						;brif not max
    7009/    1F88 : CD 22 42                CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
    7010/    1F8B : CD F3 13                CALL    L_CHK_KEY_CTRL				;Test for CTRL-C or CTRL-S
    7011/    1F8E : C3 45 1F                JMP     L_DISPLAY_DIR_1						;continue
    7012/    1F91 :                     ;
    7013/    1F91 :                     ; KILL statement
    7014/    1F91 :                     ;
    7015/    1F91 :                     ;
    7016/    1F91 :                     R_KILL_STMT:							;1F91H
    7017/    1F91 : CD 7A 20                CALL    L_DEV_FILNAM				;process a filename. Returns device code in D
    7018/    1F94 : 2B                      DCX     H							;backup text ptr
    7019/    1F95 : (MACRO)                 CHRGET								;Get next non-white char from M
    7020/    1F96 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error if more chars
    7021/    1F99 : 7A                      MOV     A,D							;device code
    7022/    1F9A : FE F8                   CPI     RAM_DEV						;0F8H
    7023/    1F9C : CA A1 1F                JZ      +							;brif RAM device
    7024/    1F9F : (MACRO)             	RST38H	58H
    7025/    1FA1 : E5                  +	PUSH    H							;save text ptr
    7026/    1FA2 : AF                      XRA     A
    7027/    1FA3 : 32 A7 FC                STA     OPNFIL_R
    7028/    1FA6 : CD 22 4E                CALL    R_CLSALL					;Close Files
    7029/    1FA9 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7030/    1FAC : CD AF 20                CALL    L_FND_DIR_ENTRY				;find directory entry for FILNAM_R
    7031/    1FAF : CA 57 50                JZ      R_GEN_FF_ERR_FUN			;brif not found: Generate FF error
    7032/    1FB2 :                     ; DE == Filestart ptr
    7033/    1FB2 : 47                      MOV     B,A							;save file type
    7034/    1FB3 : E6 20                   ANI     _DIR_COFILE					;20H isolate bit 5
    7035/    1FB5 : C2 DA 1F                JNZ     L_KILL_CO_FILE_2			;kill a CO file if bit 5 set. text ptr on stack
    7036/    1FB8 : 78                      MOV     A,B							;restore file type
    7037/    1FB9 : E6 40                   ANI     _DIR_DOFILE					;40H isolate bit 6
    7038/    1FBB : CA 05 20                JZ      R_KILL_BA_FILE				;brif bit 6 clear: BASIC file
    7039/    1FBE : (MACRO)             	SKIP_BYTE_INST						;HL already pushed
    7040/    1FBF :                     ;
    7041/    1FBF :                     ; Kill a text file
    7042/    1FBF :                     ;
    7043/    1FBF :                     ; IN:
    7044/    1FBF :                     ;	HL ptr to Directory Entry
    7045/    1FBF :                     ;	DE ptr to file data
    7046/    1FBF :                     ;
    7047/    1FBF :                     KILASC:
    7048/    1FBF : E5                      PUSH    H							;save Directory Entry ptr
    7049/    1FC0 : 01 00 00                LXI     B,0							;clear file size
    7050/    1FC3 : 71                      MOV     M,C							;clear File type
    7051/    1FC4 :                     ; determine file size by finding EOF
    7052/    1FC4 : 6B                      MOV     L,E							;store ptr to file data in HL
    7053/    1FC5 : 62                      MOV     H,D
    7054/    1FC6 : 1A                  -	LDAX    D							;get byte from file
    7055/    1FC7 : 13                      INX     D							;next
    7056/    1FC8 : 03                      INX     B							;file count
    7057/    1FC9 : FE 1A                   CPI     1AH							;EOF
    7058/    1FCB : C2 C6 1F                JNZ     -
    7059/    1FCE : CD 9F 6B                CALL    MASDEL						;Delete BC bytes at M (start of file data). BC negated on exit.
    7060/    1FD1 :                     ;
    7061/    1FD1 :                     ; Update FOR loop chain with BC offset, fix up directory start pointers
    7062/    1FD1 :                     ; HL pushed
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 119 - 9/5/2025 20:20:35


    7063/    1FD1 :                     ; IN:
    7064/    1FD1 :                     ;	BC		offset to add
    7065/    1FD1 :                     ;
    7066/    1FD1 :                     KILASC_TAIL:
    7067/    1FD1 : CD DD 18                CALL    L_UPD_FOR_LOOPS_1			;update FOR loop stack chain. BC is (negative) offset to add
    7068/    1FD4 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7069/    1FD7 : E1                      POP     H							;restore Directory ptr or txt ptr
    7070/    1FD8 : C9                      RET
    7071/    1FD9 :                     ;
    7072/    1FD9 :                     ; Kill a CO file
    7073/    1FD9 :                     ;
    7074/    1FD9 :                     ; IN:
    7075/    1FD9 :                     ;	DE			ptr to File Data
    7076/    1FD9 :                     ;	HL
    7077/    1FD9 :                     ;
    7078/    1FD9 :                     R_KILL_CO_FILE:
    7079/    1FD9 : E5                      PUSH    H
    7080/    1FDA :                     L_KILL_CO_FILE_2:
    7081/    1FDA : 36 00                   MVI     M,00H
    7082/    1FDC : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer
    7083/    1FDF : E5                      PUSH    H							;save it. restore in KILASC_TAIL()
    7084/    1FE0 : EB                      XCHG								;DE to HL
    7085/    1FE1 : E5                      PUSH    H							;save ptr to file data (header + co file)
    7086/    1FE2 : 23                      INX     H							;advance to file size
    7087/    1FE3 : 23                      INX     H
    7088/    1FE4 : 4E                      MOV     C,M							;BC = file size
    7089/    1FE5 : 23                      INX     H
    7090/    1FE6 : 46                      MOV     B,M
    7091/    1FE7 : 21 06 00                LXI     H,0006H						;CO file header size
    7092/    1FEA : 09                      DAD     B							;add file header size
    7093/    1FEB : 44                      MOV     B,H							;result to BC
    7094/    1FEC : 4D                      MOV     C,L
    7095/    1FED : E1                      POP     H							;ptr to file data
    7096/    1FEE : CD 9F 6B                CALL    MASDEL						;Delete BC characters at M. BC negated on exit
    7097/    1FF1 : E1                      POP     H							;Directory entry ptr
    7098/    1FF2 : 22 B0 FB                SHLD    COSTRT_R					;Update CO files pointer
    7099/    1FF5 : C3 D1 1F                JMP     KILASC_TAIL					;exit with HL pushed
    7100/    1FF8 :                     ;
    7101/    1FF8 :                     ; Clear selection
    7102/    1FF8 :                     ;
    7103/    1FF8 :                     L_CLR_SELECTION:
    7104/    1FF8 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7105/    1FFB : 2A B0 F9                LHLD    RICKY_R+1					;File data ptr to DE
    7106/    1FFE : EB                      XCHG
    7107/    1FFF : 21 AF F9                LXI     H,RICKY_R					;Ricky part of directory to HL
    7108/    2002 : C3 BF 1F                JMP     KILASC						;kill text file: DE & HL are inputs
    7109/    2005 :                     ;
    7110/    2005 :                     ; IN:
    7111/    2005 :                     ;
    7112/    2005 :                     ;	DE		Filestart ptr
    7113/    2005 :                     ;
    7114/    2005 :                     R_KILL_BA_FILE:
    7115/    2005 : E5                      PUSH    H
    7116/    2006 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7117/    2009 : (MACRO)                 COMPAR								;HL - DE
    7118/    200A : E1                      POP     H
    7119/    200B : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error if current program
    7120/    200E : CD 17 20                CALL    R_KILL_BA_FILE_2
    7121/    2011 : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2
    7122/    2014 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 120 - 9/5/2025 20:20:35


    7123/    2017 :                     ;
    7124/    2017 :                     ;  kill a BA file
    7125/    2017 :                     ;
    7126/    2017 :                     ; IN:
    7127/    2017 :                     ;	HL		ptr to Directory Entry
    7128/    2017 :                     ;	DE		Filestart ptr
    7129/    2017 :                     ;
    7130/    2017 :                     R_KILL_BA_FILE_2:
    7131/    2017 : 36 00                   MVI     M,00H						;clear File type
    7132/    2019 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7133/    201C : (MACRO)                 COMPAR								;HL - DE
    7134/    201D : F5                      PUSH    PSW							;save result
    7135/    201E : D5                      PUSH    D							;save Filestart ptr/BASIC program line ptr
    7136/    201F : CD F4 05                CALL    R_CHEAD						;Fixup all links. Find end of BASIC program.
    7137/    2022 :                     ; HL now points to 0000 next pointer
    7138/    2022 : D1                      POP     D							;restore Filestart ptr
    7139/    2023 : 23                      INX     H
    7140/    2024 : CD 34 21                CALL    L_DEL_BYTES					;Delete Bytes between HL and DE
    7141/    2027 : C5                      PUSH    B							;save negated delete count
    7142/    2028 : CD 46 21                CALL    LNKFIL					;Fix up the directory start pointers
    7143/    202B : C1                      POP     B							;restore negated delete count
    7144/    202C : F1                      POP     PSW							;COMPAR result
    7145/    202D : C8                      RZ									;return if DE == HL at COMPAR
    7146/    202E : D8                      RC
    7147/    202F : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7148/    2032 : 09                      DAD     B
    7149/    2033 : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
    7150/    2036 : C9                      RET
    7151/    2037 :                     ;
    7152/    2037 :                     ; NAME statement (rename a RAM file)
    7153/    2037 :                     ; NAME FILE1 AS FILE2
    7154/    2037 :                     ;
    7155/    2037 :                     R_NAME_STMT:							;2037H
    7156/    2037 : CD 7A 20                CALL    L_DEV_FILNAM				;process a filename to FILNAM_R.  Returns device code in D
    7157/    203A : D5                      PUSH    D							;save FILE1 file type
    7158/    203B : CD 4C 22                CALL    L_SWAPFILENAMES				;move FILNAM_R to FILNM2_R
    7159/    203E : (MACRO)             	SYNCHK	'A'							;41H
    7160/    2040 : (MACRO)             	SYNCHK	'S'							;53H
    7161/    2042 : CD 7A 20                CALL    L_DEV_FILNAM				;process a filename to FILNAM_R.  Returns file type in D
    7162/    2045 : 7A                      MOV     A,D							;FILE2 file type
    7163/    2046 : D1                      POP     D							;restore FILE1 file type
    7164/    2047 : BA                      CMP     D
    7165/    2048 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;brif file types differ: Generate FC error
    7166/    204B : FE F8                   CPI     RAM_DEV						;0F8H
    7167/    204D : CA 52 20                JZ      +							;brif file type == 0F8H
    7168/    2050 : (MACRO)             	RST38H	5AH
    7169/    2052 : E5                  +	PUSH    H							;save Basic program ptr
    7170/    2053 : CD AF 20                CALL    L_FND_DIR_ENTRY				;find directory entry for FILE2
    7171/    2056 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;brif found: Generate FC error
    7172/    2059 : CD 4C 22                CALL    L_SWAPFILENAMES				;swap FILNAM_R and FILNM2_R
    7173/    205C : CD AF 20                CALL    L_FND_DIR_ENTRY				;find directory entry for FILE1
    7174/    205F : CA 57 50                JZ      R_GEN_FF_ERR_FUN			;brif not found: Generate FF error
    7175/    2062 : E5                      PUSH    H							;save directory entry
    7176/    2063 : 2A 99 FC                LHLD    FILNAM_R+6					;Filename extension FILE1
    7177/    2066 : EB                      XCHG
    7178/    2067 : 2A A2 FC                LHLD    FILNM2_R+6					;Filename extension FILE2
    7179/    206A : (MACRO)                 COMPAR								;HL - DE
    7180/    206B : C2 DB 08                JNZ     R_GEN_FC_ERROR			 	;Generate FC error
    7181/    206E : E1                      POP     H							;restore directory entry
    7182/    206F : CD 4C 22                CALL    L_SWAPFILENAMES				;swap FILNAM_R and FILNM2_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 121 - 9/5/2025 20:20:35


    7183/    2072 : 23                      INX     H							;skip File type, ptr
    7184/    2073 : 23                      INX     H
    7185/    2074 : 23                      INX     H
    7186/    2075 : CD 41 22                CALL    L_COPY_FILNAM
    7187/    2078 : E1                      POP     H							;restore Basic program ptr
    7188/    2079 : C9                      RET
    7189/    207A :                     ;
    7190/    207A :                     ; process a filename. Return device code
    7191/    207A :                     ;
    7192/    207A :                     ; OUT:
    7193/    207A :                     ;	D		file type/device code
    7194/    207A :                     ;
    7195/    207A :                     L_DEV_FILNAM:
    7196/    207A : CD 0F 4C                CALL    L_EVAL_FILNAM				;Evaluate arguments to RUN/OPEN/SAVE commands
    7197/    207D : C0                      RNZ									;retif Device was specified
    7198/    207E : 16 F8                   MVI     D,RAM_DEV					;default file type/device code
    7199/    2080 : C9                      RET
    7200/    2081 :                     
    7201/    2081 :                     L_IS_SUZUKI_DIR:
    7202/    2081 : 2A 8C FA                LHLD    RAMDIRPTR_R
    7203/    2084 : 11 99 F9                LXI     D,SUZUKI_R					;Suzuki Directory Entry
    7204/    2087 : (MACRO)                 COMPAR								;HL - DE
    7205/    2088 : C9                      RET
    7206/    2089 :                     ;
    7207/    2089 :                     ; set CO extension and find file
    7208/    2089 :                     ;
    7209/    2089 :                     L_SET_EXT_CO:
    7210/    2089 : 01 4F 43                LXI     B,434FH						;"CO"
    7211/    208C : C3 A9 20                JMP     L_SET_EXT_FROM_BC
    7212/    208F :                     ;
    7213/    208F :                     ; R_FINDFILE
    7214/    208F :                     ;	Find Directory Entry for 
    7215/    208F :                     ;
    7216/    208F :                     ; First Test for "  " or "DO" extension
    7217/    208F :                     ;
    7218/    208F :                     R_FINDFILE:
    7219/    208F : 2A 99 FC                LHLD    FILNAM_R+6					;Filename extension
    7220/    2092 : 11 20 20                LXI     D,2020H						;"  "
    7221/    2095 : (MACRO)                 COMPAR								;HL - DE
    7222/    2096 : CA A0 20                JZ		+							;brif extension == "  "
    7223/    2099 : 11 44 4F                LXI     D,4F44H						;"DO"
    7224/    209C : (MACRO)                 COMPAR								;HL - DE
    7225/    209D : C2 4E 50                JNZ     R_GEN_NM_ERR_FUN			; Generate NM error if extension != "DO"
    7226/    20A0 : 01 4F 44            +	LXI     B,444FH						;"DO" extension
    7227/    20A3 : C3 A9 20            	JMP     L_SET_EXT_FROM_BC
    7228/    20A6 :                     ;
    7229/    20A6 :                     ; set extension to "BA" and find file
    7230/    20A6 :                     ;
    7231/    20A6 :                     L_SET_EXT_BA:
    7232/    20A6 : 01 41 42                LXI     B,4241H						;"BA" extension
    7233/    20A9 :                     ;
    7234/    20A9 :                     ; set extension from BC and find file
    7235/    20A9 :                     ;
    7236/    20A9 :                     L_SET_EXT_FROM_BC:
    7237/    20A9 : 21 99 FC                LXI     H,FILNAM_R+6				;Filename extension
    7238/    20AC : 70                      MOV     M,B							;update
    7239/    20AD : 23                      INX     H
    7240/    20AE : 71                      MOV     M,C
    7241/    20AF :                     ;
    7242/    20AF :                     ; L_FND_DIR_ENTRY for FILNAM_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 122 - 9/5/2025 20:20:35


    7243/    20AF :                     ;
    7244/    20AF :                     ; OUT:
    7245/    20AF :                     ;	Z		Entry not found
    7246/    20AF :                     ;	A		File type
    7247/    20AF :                     ;	DE		Filestart ptr
    7248/    20AF :                     ;	HL		Directory Entry
    7249/    20AF :                     ;
    7250/    20AF :                     L_FND_DIR_ENTRY:
    7251/    20AF : 21 57 F9                LXI     H,RAMDIR_R-RAMDIRLEN		;Load address of RAM Directory (-1 entry, or 11 bytes)
    7252/    20B2 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    7253/    20B3 :                     L_FND_DIR_ENTRY_1:
    7254/    20B3 : E1                      POP     H							;Previously found Non-Empty directory entry
    7255/    20B4 : CD D5 20                CALL    L_FindNextDirEntry			;Find next Non-Empty directory entry
    7256/    20B7 : C8                      RZ									;end of directory
    7257/    20B8 : E5                      PUSH    H							;save ptr for next iteration
    7258/    20B9 : 23                      INX     H							;skip Filestart ptr
    7259/    20BA : 23                      INX     H
    7260/    20BB : 11 92 FC                LXI     D,FILNAM_R-1
    7261/    20BE : 06 08                   MVI     B,08H
    7262/    20C0 :                     ;compare filenames
    7263/    20C0 : 13                  -	INX     D							;next filename to find
    7264/    20C1 : 23                  	INX     H							;next directory entry
    7265/    20C2 : 1A                      LDAX    D							;compare characters
    7266/    20C3 : BE                      CMP     M
    7267/    20C4 : C2 B3 20                JNZ     L_FND_DIR_ENTRY_1			;brif different: next entry
    7268/    20C7 : 05                      DCR     B							;count
    7269/    20C8 : C2 C0 20                JNZ     -							;loop if not done
    7270/    20CB :                     ; filenames match
    7271/    20CB : E1                      POP     H							;pop Directory Entry ptr
    7272/    20CC : 7E                      MOV     A,M							;Filetype
    7273/    20CD : 23                      INX     H							;to Filestart ptr
    7274/    20CE : (MACRO)             	GETDEFROMMNOINC						;Filestart ptr to DE
    7275/    20D1 : 2B                      DCX     H							;back to directory entry
    7276/    20D2 : 2B                      DCX     H
    7277/    20D3 : A7                      ANA     A							;test Filetype
    7278/    20D4 : C9                      RET
    7279/    20D5 :                     ; ====================================================
    7280/    20D5 :                     ; Find Non-Empty directory entry
    7281/    20D5 :                     ; IN:
    7282/    20D5 :                     ;	HL points to previous Entry
    7283/    20D5 :                     ; OUT:
    7284/    20D5 :                     ;
    7285/    20D5 :                     ;	new entry ptr in HL, type in A
    7286/    20D5 :                     ;	Z if end of directory
    7287/    20D5 :                     ; saves BC
    7288/    20D5 :                     ; ====================================================
    7289/    20D5 :                     L_FindNextDirEntry:
    7290/    20D5 : C5                      PUSH    B
    7291/    20D6 : 01 0B 00                LXI     B,RAMDIRLEN					;000BH
    7292/    20D9 : 09                      DAD     B							;next entry
    7293/    20DA : C1                      POP     B
    7294/    20DB : 7E                      MOV     A,M
    7295/    20DC : FE FF                   CPI     0FFH						;end of directory?
    7296/    20DE : C8                      RZ									;return if TRUE
    7297/    20DF : A7                      ANA     A
    7298/    20E0 : F2 D5 20                JP      L_FindNextDirEntry			;loop if A >= 0 (bit 7 clear)
    7299/    20E3 : C9                      RET
    7300/    20E4 :                     ;
    7301/    20E4 :                     ; Find a bit 7 clear directory Entry: File killed, meaning entry available.
    7302/    20E4 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 123 - 9/5/2025 20:20:35


    7303/    20E4 :                     ; OUT:
    7304/    20E4 :                     ;	HL points to directory entry
    7305/    20E4 :                     ;
    7306/    20E4 :                     L_FindFreeDirEntry:
    7307/    20E4 : 3A 51 F6                LDA     EDITFLG_R
    7308/    20E7 : A7                      ANA     A
    7309/    20E8 : 21 AF F9                LXI     H,RICKY_R					;Ricky part of directory, 1 entry before User Part
    7310/    20EB : C0                      RNZ									;return if editting
    7311/    20EC : 21 AF F9                LXI     H,USRRAM_R-RAMDIRLEN		;Same value as RICKY_R! Preload
    7312/    20EF : 01 0B 00                LXI     B,RAMDIRLEN					;000BH
    7313/    20F2 : 09                  -	DAD     B							;next entry
    7314/    20F3 : 7E                      MOV     A,M							;file type
    7315/    20F4 : FE FF                   CPI     0FFH						;end of directory?
    7316/    20F6 : CA 66 50                JZ      R_GEN_FL_ERR_FUN			;Generate FL error if TRUE
    7317/    20F9 : 87                      ADD     A							;double
    7318/    20FA : DA F2 20                JC		-							;loop if bit 7 was set (entry not available)
    7319/    20FD : C9                      RET
    7320/    20FE :                     ;
    7321/    20FE :                     ; NEW statement
    7322/    20FE :                     ;
    7323/    20FE :                     R_NEW_STMT:								;20FEH
    7324/    20FE : C0                      RNZ									;MAKE SURE THERE IS A TERMINATOR
    7325/    20FF :                     ; A == 0
    7326/    20FF :                     SCRTCH:
    7327/    20FF : CD 81 20                CALL    L_IS_SUZUKI_DIR
    7328/    2102 : C4 46 21                CNZ     LNKFIL						;Fix up the directory start pointers
    7329/    2105 : 21 99 F9                LXI     H,SUZUKI_R					;Suzuki Directory Entry
    7330/    2108 : 22 8C FA                SHLD    RAMDIRPTR_R
    7331/    210B : 2A 9A F9                LHLD    SUZUKI_R+1					;BASIC program not saved pointer
    7332/    210E : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
    7333/    2111 : AF                      XRA     A
    7334/    2112 : 77                      MOV     M,A
    7335/    2113 : 23                      INX     H
    7336/    2114 : 77                      MOV     M,A
    7337/    2115 : 23                      INX     H
    7338/    2116 : EB                      XCHG
    7339/    2117 : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7340/    211A : CD 34 21                CALL    L_DEL_BYTES					;Delete Bytes between HL and DE
    7341/    211D : 2A D8 FA                LHLD    XXSTRT_R					;update XXSTRT_R
    7342/    2120 : 09                      DAD     B
    7343/    2121 : 22 D8 FA                SHLD    XXSTRT_R
    7344/    2124 : 21 FF FF                LXI     H,0FFFFH					;TODO call L_INSRT_FFFF
    7345/    2127 : 22 2E F6                SHLD    PBUFIDX_R					;reset Paste Buffer Index
    7346/    212A : C3 28 3F                JMP     R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
    7347/    212D :                     ;
    7348/    212D :                     L_DEL_LINES:
    7349/    212D : 2A BA FA                LHLD    LASTLST_R					;Address where last BASIC list started
    7350/    2130 : EB                      XCHG								;lower address to DE
    7351/    2131 : 2A BC FA                LHLD    NXTLINE_R					;higher address
    7352/    2134 :                     ;
    7353/    2134 :                     ; Delete Bytes between HL and DE
    7354/    2134 :                     ;
    7355/    2134 :                     L_DEL_BYTES:
    7356/    2134 : 7D                      MOV     A,L							;BC = HL - DE
    7357/    2135 : 93                      SUB     E
    7358/    2136 : 4F                      MOV     C,A
    7359/    2137 : 7C                      MOV     A,H
    7360/    2138 : 9A                      SBB     D
    7361/    2139 : 47                      MOV     B,A
    7362/    213A : EB                      XCHG								;Put lower address in HL for the delete
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 124 - 9/5/2025 20:20:35


    7363/    213B : CD 9F 6B                CALL    MASDEL 						;Delete BC characters at M. BC negated on exit.
    7364/    213E : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7365/    2141 : 09                      DAD     B							;Update DO files pointer by negative delete length
    7366/    2142 : 22 AE FB                SHLD    DOSTRT_R					;DO files pointer
    7367/    2145 : C9                      RET
    7368/    2146 :                     ;
    7369/    2146 :                     ; Fix up the directory start pointers
    7370/    2146 :                     ;
    7371/    2146 :                     ; This routine fixes up all pointers from directory table entries 
    7372/    2146 :                     ; to the start of the associated file. To avoid overhead of 
    7373/    2146 :                     ; constantly updating these pointers, many operations defer
    7374/    2146 :                     ; calling LNKFIL to the end of the operation. It is the
    7375/    2146 :                     ; programmer's responsibility to ensure that LNKFIL is called
    7376/    2146 :                     ; when required. For instance, when a file is deleted, all link 
    7377/    2146 :                     ; pointers should be fixed up before performing further I/O.
    7378/    2146 :                     ;
    7379/    2146 :                     ; Mark the all valid directory flag (turn 0 bit of all valid directory flag)
    7380/    2146 :                     ; Get the lowest file address
    7381/    2146 :                     ; Get the lowest link pointer in the valid file's directory
    7382/    2146 :                     ; Save the link pointer
    7383/    2146 :                     ; Search the lowest link pointer in the marked files in directory area
    7384/    2146 :                     ; Save the saved link pointer at this marked filesm link pointer field
    7385/    2146 :                     ; Clear the mark from the directory flag of that file (turn off bit 0)
    7386/    2146 :                     ; Get next lowest file address from the bottom of RAM
    7387/    2146 :                     ; Go back to step 5 unless the mark been removed from all directory flags?
    7388/    2146 :                     ; Return
    7389/    2146 :                     ;
    7390/    2146 :                     ; When the top address of the next file is searched, the pointers
    7391/    2146 :                     ; ASCTAB and BINTAB are useful to know what kind of file is currently being searched.
    7392/    2146 :                     ;
    7393/    2146 :                     LNKFIL:									;2146H
    7394/    2146 : AF                      XRA     A							;preload BASIC file type (BA=0)
    7395/    2147 : 32 09 F8                STA     FILTYP_R					
    7396/    214A : 2A C0 FA                LHLD    LOMEM_R						;Lowest RAM address used by system
    7397/    214D : 23                      INX     H
    7398/    214E :                     ; HL is "Min address"
    7399/    214E :                     LNKFIL_LOOP:
    7400/    214E : E5                      PUSH    H							;save "Min address" 
    7401/    214F : 21 8E F9                LXI     H,RAMDIR_R+4*RAMDIRLEN		;skip ROM entries
    7402/    2152 : 11 FF FF                LXI     D,0FFFFH					;end of memory
    7403/    2155 : CD D5 20            -	CALL    L_FindNextDirEntry			;Find Non-Empty directory entry
    7404/    2158 : CA 75 21                JZ      LNKFIL_2					;end of directory
    7405/    215B : 0F                      RRC									;bit 0 of type to carry
    7406/    215C :                     ;Jump to get next entry if LSBit of file type is set - skip these.
    7407/    215C : DA 55 21                JC      -							;brif bit 0 was set
    7408/    215F : E5                      PUSH    H							;save ptr to Directory Entry
    7409/    2160 : 23                      INX     H							;skip File Type
    7410/    2161 : (MACRO)             	GETHLFROMM							;get File Data ptr to HL
    7411/    2165 : (MACRO)                 COMPAR								;HL - DE
    7412/    2166 : E1                      POP     H							;restore ptr to Directory Entry
    7413/    2167 : D2 55 21                JNC     -							;brif HL >= DE
    7414/    216A : 44                      MOV     B,H							;Save address of file with lowest address in BC
    7415/    216B : 4D                      MOV     C,L
    7416/    216C : 23                      INX     H
    7417/    216D : (MACRO)             	GETDEFROMMNOINC						;get File Data ptr to DE (again)
    7418/    2170 : 2B                      DCX     H							;backup ptr to Directory Entry
    7419/    2171 : 2B                      DCX     H
    7420/    2172 : C3 55 21                JMP     -
    7421/    2175 :                     ; 
    7422/    2175 :                     ; Catalog entry with the lowest File RAM address found.
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 125 - 9/5/2025 20:20:35


    7423/    2175 :                     ; Mark the LSBit of that file's directory entry type byte.
    7424/    2175 :                     ; 
    7425/    2175 :                     LNKFIL_2:
    7426/    2175 : 7B                      MOV     A,E							;test DE for 0FFFFH
    7427/    2176 : A2                      ANA     D
    7428/    2177 : 3C                      INR     A
    7429/    2178 : D1                      POP     D							;restore "Min address" address
    7430/    2179 :                     ;If FFFFH, Clear LSBit of File Type byte for all Directory entries.
    7431/    2179 : CA 8D 21                JZ      LNKFIL_3									
    7432/    217C : 60                      MOV     H,B							;saved Directory Entry Ptr to HL
    7433/    217D : 69                      MOV     L,C
    7434/    217E : 7E                      MOV     A,M							;get File Type
    7435/    217F : F6 01                   ORI     01H							;set bit 0: File Data ptr updated
    7436/    2181 : 77                      MOV     M,A							;update
    7437/    2182 :                     ; Update File Data ptr for this Directory Entry with "Min address" address
    7438/    2182 : 23                      INX     H
    7439/    2183 : 73                      MOV     M,E
    7440/    2184 : 23                      INX     H
    7441/    2185 : 72                      MOV     M,D
    7442/    2186 : EB                      XCHG								;"Min address" address to HL
    7443/    2187 : CD 9A 21                CALL    L_FIND_EOF
    7444/    218A : C3 4E 21                JMP     LNKFIL_LOOP						;scan again
    7445/    218D :                     ;
    7446/    218D :                     ; clear bit 0 of type for every directory entry
    7447/    218D :                     ;
    7448/    218D :                     LNKFIL_3:
    7449/    218D : 21 57 F9                LXI     H,RAMDIR_R-RAMDIRLEN		;Load address of RAM Directory (-1 entry, or 11 bytes)
    7450/    2190 : CD D5 20            -	CALL    L_FindNextDirEntry			;Find Non-Empty directory entry
    7451/    2193 : C8                      RZ									;end of directory
    7452/    2194 : E6 FE                   ANI     0FEH						;clear bit 0 of type
    7453/    2196 : 77                      MOV     M,A							;update
    7454/    2197 : C3 90 21                JMP     -
    7455/    219A :                     ; 
    7456/    219A :                     ; Advance HL past end of current file based on type
    7457/    219A :                     ;
    7458/    219A :                     ; IN:
    7459/    219A :                     ;	HL		File Data Ptr
    7460/    219A :                     ; OUT:
    7461/    219A :                     ;	HL		ptr past EOF
    7462/    219A :                     ; 
    7463/    219A :                     L_FIND_EOF:
    7464/    219A : 3A 09 F8                LDA     FILTYP_R					
    7465/    219D : 3D                      DCR     A
    7466/    219E : FA C2 21                JM      L_BA_EOF					;Jump if BA (BA=0)
    7467/    21A1 : CA AE 21                JZ      L_DO_EOF					;Jump if DO (DO=1)
    7468/    21A4 :                     ; 
    7469/    21A4 :                     ; Advance HL past end of CO file
    7470/    21A4 :                     ; 
    7471/    21A4 : 23                      INX     H							;Skip load address of CO file
    7472/    21A5 : 23                      INX     H
    7473/    21A6 : (MACRO)             	GETDEFROMM							;Get length of CO file
    7474/    21AA : 23                      INX     H							;Skip entry of CO file
    7475/    21AB : 23                      INX     H							;Increment again to get past end of file
    7476/    21AC : 19                      DAD     D							;Offset to end of file by adding length
    7477/    21AD : C9                      RET
    7478/    21AE :                     ; 
    7479/    21AE :                     ; Advance HL past end of DO file
    7480/    21AE :                     ; 
    7481/    21AE :                     L_DO_EOF:
    7482/    21AE : 3E 1A                   MVI     A,1AH						;Find end of file
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 126 - 9/5/2025 20:20:35


    7483/    21B0 : BE                  -	CMP     M
    7484/    21B1 : 23                      INX     H
    7485/    21B2 : C2 B0 21                JNZ     -
    7486/    21B5 : EB                      XCHG
    7487/    21B6 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer to DE
    7488/    21B9 : EB                      XCHG
    7489/    21BA : (MACRO)                 COMPAR								;Compare CO files pointer and ptr past EOF: HL - DE
    7490/    21BB : C0                      RNZ									;retif not the same
    7491/    21BC : 3E 02                   MVI     A,02H						;At end of DO. Change type to CO
    7492/    21BE : 32 09 F8                STA     FILTYP_R					;and save it
    7493/    21C1 : C9                      RET
    7494/    21C2 :                     ; 
    7495/    21C2 :                     ; Update line addresses for BA and advance HL to end of file
    7496/    21C2 :                     ; 
    7497/    21C2 :                     L_BA_EOF:
    7498/    21C2 : EB                      XCHG								;BASIC program line ptr to DE
    7499/    21C3 : CD F4 05                CALL    R_CHEAD						;Fix Basic Lines structure, find EOF
    7500/    21C6 : 23                      INX     H
    7501/    21C7 : EB                      XCHG
    7502/    21C8 : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer to DE
    7503/    21CB : EB                      XCHG
    7504/    21CC : (MACRO)                 COMPAR								;Compare DO files pointer and end of Basic program ptr: HL - DE
    7505/    21CD : C0                      RNZ									;retif not the same
    7506/    21CE : 3E 01                   MVI     A,01H						;Indicate we are now in DO file space
    7507/    21D0 : 32 09 F8                STA     FILTYP_R					;and save it		
    7508/    21D3 : C9                      RET
    7509/    21D4 :                     
    7510/    21D4 :                     L_SET_MEM_TABLES:
    7511/    21D4 : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
    7512/    21D7 : 22 B4 FB                SHLD    ARYTAB_R					;ptr to Start of array table
    7513/    21DA : 22 B6 FB                SHLD    STRGEND_R					;Unused memory pointer
    7514/    21DD : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7515/    21E0 : 2B                      DCX     H
    7516/    21E1 : 22 9A F9                SHLD    SUZUKI_R+1					;BASIC program not saved pointer
    7517/    21E4 : 23                      INX     H
    7518/    21E5 : 01 02 00                LXI     B,0002H
    7519/    21E8 : EB                      XCHG
    7520/    21E9 : CD 7F 6B                CALL    L_MOV_DATA					;Move all files / variables after this file
    7521/    21EC : AF                      XRA     A
    7522/    21ED : 77                      MOV     M,A
    7523/    21EE : 23                      INX     H
    7524/    21EF : 77                      MOV     M,A
    7525/    21F0 : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7526/    21F3 : 09                      DAD     B
    7527/    21F4 : 22 AE FB                SHLD    DOSTRT_R					;DO files pointer
    7528/    21F7 : C3 46 21                JMP     LNKFIL						;Fix up the directory start pointers
    7529/    21FA :                     ;
    7530/    21FA :                     ; Count length of string at M
    7531/    21FA :                     ;
    7532/    21FA :                     ; OUT:
    7533/    21FA :                     ;	E		string length
    7534/    21FA :                     ;
    7535/    21FA :                     R_STRLEN:								;21FAH
    7536/    21FA : E5                      PUSH    H							;save string ptr
    7537/    21FB : 1E FF                   MVI     E,0FFH						;pre-decrement
    7538/    21FD : 1C                  -	INR     E
    7539/    21FE : 7E                      MOV     A,M
    7540/    21FF : 23                      INX     H
    7541/    2200 : A7                      ANA     A
    7542/    2201 : C2 FD 21                JNZ     -
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 127 - 9/5/2025 20:20:35


    7543/    2204 : E1                      POP     H							;restore string ptr
    7544/    2205 : C9                      RET
    7545/    2206 :                     ;
    7546/    2206 :                     ; Get .DO filename and locate in RAM directory
    7547/    2206 :                     ;
    7548/    2206 :                     R_GET_FIND_DO_FILE:						;2206H
    7549/    2206 : CD FA 21                CALL    R_STRLEN				    ;Count length of string at M
    7550/    2209 : CD 0B 4C                CALL    L_PSH_HL_EVAL_FILNAM		;push HL and eval Filename
    7551/    220C : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    7552/    220F :                     ;
    7553/    220F :                     ; Open a text file at FILNAM_R for OUTPUT
    7554/    220F :                     ;
    7555/    220F :                     ; OUT:
    7556/    220F :                     ;	DE
    7557/    220F :                     ;	carry		Set if file already exists
    7558/    220F :                     ;
    7559/    220F :                     R_MAKTXT:
    7560/    220F :                     R_OPEN_TXT_FILE_OUTPUT:					;220FH
    7561/    220F : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7562/    2212 : CD 8F 20                CALL    R_FINDFILE
    7563/    2215 : EB                      XCHG								;Directory ptr to DE
    7564/    2216 : 37                      STC									;set carry
    7565/    2217 : C0                      RNZ									;retif File exists
    7566/    2218 : CD E4 20                CALL    L_FindFreeDirEntry
    7567/    221B : E5                      PUSH    H							;save ptr to free directory entry
    7568/    221C : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7569/    221F : E5                      PUSH    H							;save
    7570/    2220 : 3E 1A                   MVI     A,1AH						;^Z
    7571/    2222 : CD 61 6B                CALL    R_INSERT_A_INTO_FILE		;Insert A into text file at M
    7572/    2225 : DA 17 3F                JC      L_OUTOFMEMORY
    7573/    2228 : D1                      POP     D							;DO files pointer		
    7574/    2229 : E1                      POP     H							;ptr to free directory entry
    7575/    222A : E5                      PUSH    H							;save again
    7576/    222B : D5                      PUSH    D
    7577/    222C : 3E C0                   MVI     A,0C0H						;filetype 11000000: busy|DO file
    7578/    222E : 1B                      DCX     D
    7579/    222F : CD 39 22                CALL    R_SAVE_TO_DIRECTORY			;Save new entry to Directory
    7580/    2232 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7581/    2235 : E1                      POP     H
    7582/    2236 : D1                      POP     D
    7583/    2237 : A7                      ANA     A
    7584/    2238 : C9                      RET
    7585/    2239 :                     ;
    7586/    2239 :                     ; Save new entry to Directory
    7587/    2239 :                     ;
    7588/    2239 :                     ; IN:
    7589/    2239 :                     ;	HL		Directory Entry Pointer
    7590/    2239 :                     ;	A		File type
    7591/    2239 :                     ;	DE		File start address
    7592/    2239 :                     ;
    7593/    2239 :                     R_SAVE_TO_DIRECTORY:					;2239H
    7594/    2239 : D5                      PUSH    D
    7595/    223A : 77                      MOV     M,A							;store A, DE to M
    7596/    223B : 23                      INX     H
    7597/    223C : 73                      MOV     M,E
    7598/    223D : 23                      INX     H
    7599/    223E : 72                      MOV     M,D
    7600/    223F : 23                      INX     H
    7601/    2240 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    7602/    2241 :                     L_COPY_FILNAM:							;HL Directory Entry Pointer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 128 - 9/5/2025 20:20:35


    7603/    2241 : D5                      PUSH    D
    7604/    2242 : 11 93 FC                LXI     D,FILNAM_R					;Current Filename
    7605/    2245 : 06 08                   MVI     B,08H						;Filename length incl. extension
    7606/    2247 : CD 69 34                CALL    R_MOVE_B_BYTES_INC       	;Move B bytes from (DE) to M with increment
    7607/    224A : D1                      POP     D
    7608/    224B : C9                      RET
    7609/    224C :                     
    7610/    224C :                     L_SWAPFILENAMES:
    7611/    224C : E5                      PUSH    H
    7612/    224D : 06 09                   MVI     B,09H
    7613/    224F : 11 93 FC                LXI     D,FILNAM_R				   	;Current Filename
    7614/    2252 : 21 9C FC                LXI     H,FILNM2_R				    ;Filename of last program loaded from tape
    7615/    2255 : 4E                  -	MOV     C,M
    7616/    2256 : 1A                      LDAX    D
    7617/    2257 : 77                      MOV     M,A
    7618/    2258 : 79                      MOV     A,C
    7619/    2259 : 12                      STAX    D
    7620/    225A : 13                      INX     D
    7621/    225B : 23                      INX     H
    7622/    225C : 05                      DCR     B
    7623/    225D : C2 55 22                JNZ     -
    7624/    2260 : E1                      POP     H
    7625/    2261 : C9                      RET
    7626/    2262 :                     ;
    7627/    2262 :                     ; Clear Paste Buffer
    7628/    2262 :                     ;
    7629/    2262 :                     L_CLR_PASTE_BUF:
    7630/    2262 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7631/    2265 : 21 FF FF                LXI     H,0FFFFH					;TODO call L_INSRT_FFFF
    7632/    2268 : 22 2E F6                SHLD    PBUFIDX_R					;set Paste Buffer Index
    7633/    226B : 44                      MOV     B,H							;set BC to 0FFFFH preinc value
    7634/    226C : 4D                      MOV     C,L
    7635/    226D : 2A A5 F9                LHLD    HAYASHI_R+1					;Start of Paste Buffer
    7636/    2270 : E5                      PUSH    H							;save Start of Paste Buffer
    7637/    2271 : 3E 1A                   MVI     A,1AH						;^Z
    7638/    2273 : BE                  -	CMP     M							;locate ^Z
    7639/    2274 : 03                      INX     B							;count
    7640/    2275 : 23                      INX     H							;next
    7641/    2276 : C2 73 22                JNZ     -
    7642/    2279 : E1                      POP     H							;reload Start of Paste Buffer
    7643/    227A : CD 9F 6B                CALL    MASDEL						;Delete BC characters at M. BC negated on exit.
    7644/    227D : C3 46 21                JMP     LNKFIL						;Fix up the directory start pointers
    7645/    2280 :                     ;
    7646/    2280 :                     ; CSAVE statement
    7647/    2280 :                     ;
    7648/    2280 :                     ; CSAVE "filename"[,A]
    7649/    2280 :                     ; CSAVEM "filename",start,end[,entry]
    7650/    2280 :                     ; 
    7651/    2280 :                     ;
    7652/    2280 :                     R_CSAVE_STMT:							;2280H
    7653/    2280 : FE 4D                   CPI     'M'							;4DH
    7654/    2282 : CA DD 22                JZ      R_CSAVEM_STMT				;CSAVEM statement CO file
    7655/    2285 : CD FC 25                CALL    L_CLOAD_ARGS_2				;Filename required
    7656/    2288 :                     L_CSAVE_BAS:
    7657/    2288 : 2B                      DCX     H							;backup txt ptr
    7658/    2289 : (MACRO)                 CHRGET								;Get next non-white char from M
    7659/    228A : CA 98 22                JZ      L_CSAVE_CRUNCHED			;brif done
    7660/    228D : (MACRO)             	SYNCHK	','
    7661/    228F : (MACRO)             	SYNCHK	'A'
    7662/    2291 : 1E 02                   MVI     E,02H						;set File Mode to output. D must be device type
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 129 - 9/5/2025 20:20:35


    7663/    2293 : A7                      ANA     A							;set flags
    7664/    2294 : F5                      PUSH    PSW
    7665/    2295 : C3 0B 4E                JMP     L_SAVE_ASC
    7666/    2298 :                     
    7667/    2298 :                     L_CSAVE_CRUNCHED:
    7668/    2298 : CD F0 05                CALL    R_UPDATE_LINE_ADDR         	;Update line addresses for current BASIC program
    7669/    229B : EB                      XCHG								;to DE
    7670/    229C : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7671/    229F : 7B                      MOV     A,E							;HL = DE - HL
    7672/    22A0 : 95                      SUB     L
    7673/    22A1 : 6F                      MOV     L,A
    7674/    22A2 : 7A                      MOV     A,D
    7675/    22A3 : 9C                      SBB     H
    7676/    22A4 : 67                      MOV     H,A
    7677/    22A5 : 2B                      DCX     H
    7678/    22A6 : 7C                      MOV     A,H							;test HL
    7679/    22A7 : B5                      ORA     L
    7680/    22A8 : CA 01 05                JZ      R_POP_GO_BASIC_RDY         	;if HL == 0 => Pop stack and vector to BASIC ready
    7681/    22AB : 22 D0 FA                SHLD    LASTLEN_R					;Length of last program loaded/saved
    7682/    22AE : E5                      PUSH    H
    7683/    22AF : CD 0B 26                CALL    R_CAS_OPEN_OUT_BA			;Open CAS for output of BASIC files
    7684/    22B2 : CD 48 26                CALL    L_PREP_DATA_BLK				;prepare cassette sync header
    7685/    22B5 : D1                      POP     D
    7686/    22B6 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7687/    22B9 :                     ;
    7688/    22B9 :                     ; Save buffer at M to tape
    7689/    22B9 :                     ;
    7690/    22B9 :                     R_CAS_WRITE_BUF:						;22B9H
    7691/    22B9 : 0E 00                   MVI     C,00H						;new checksum
    7692/    22BB : 7E                  -	MOV     A,M
    7693/    22BC : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write byte to tape & update checksum
    7694/    22BF : 23                      INX     H
    7695/    22C0 : 1B                      DCX     D
    7696/    22C1 : 7A                      MOV     A,D
    7697/    22C2 : B3                      ORA     E
    7698/    22C3 : C2 BB 22                JNZ     -
    7699/    22C6 : CD 35 26                CALL    L_CAS_FIN_BLK				;finish cassette block
    7700/    22C9 : C3 01 05                JMP     R_POP_GO_BASIC_RDY       	;Pop stack and vector to BASIC ready
    7701/    22CC :                     ;
    7702/    22CC :                     ; SAVEM statement
    7703/    22CC :                     ;
    7704/    22CC :                     ; SAVEM "filespec", start, end [,entry] 
    7705/    22CC :                     ;
    7706/    22CC :                     R_SAVEM_STMT:							;22CCH
    7707/    22CC : (MACRO)                 CHRGET								;Get next non-white char from M
    7708/    22CD : CD 7A 20                CALL    L_DEV_FILNAM				;process a filename. Returns device code in D
    7709/    22D0 : 7A                      MOV     A,D							;device code
    7710/    22D1 : FE FD                   CPI     CAS_DEV						;0FDH
    7711/    22D3 : CA E1 22                JZ      L_CSAVE_2					;brif file type == CAS_DEV to CSAVEM
    7712/    22D6 : FE F8                   CPI     RAM_DEV						;0F8H	device code
    7713/    22D8 : CA F4 22                JZ      L_SAVEM_RAMFILE				;brif file type == RAM_DEV
    7714/    22DB : (MACRO)             	RST38H	5CH
    7715/    22DD :                     ;
    7716/    22DD :                     ; CSAVEM statement
    7717/    22DD :                     ;
    7718/    22DD :                     ; CSAVEM "filespec", start, end [,entry] 
    7719/    22DD :                     ;
    7720/    22DD :                     R_CSAVEM_STMT:							;22DDH
    7721/    22DD : (MACRO)                 CHRGET								;Get next non-white char from M
    7722/    22DE : CD FC 25                CALL    L_CLOAD_ARGS_2				;Filename required
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 130 - 9/5/2025 20:20:35


    7723/    22E1 :                     L_CSAVE_2:
    7724/    22E1 : CD 46 23                CALL    R_PROC_SAVEM_ARGS			;Process SAVEM Arguments to LOADADR_R, LASTLEN_R and LASTSTRT_R
    7725/    22E4 : CD 11 26                CALL    R_CAS_OPEN_OUT_CO			;Open CAS for output of CO files
    7726/    22E7 : CD 48 26                CALL    L_PREP_DATA_BLK				;prepare cassette sync header
    7727/    22EA : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    7728/    22ED : EB                      XCHG								;to DE
    7729/    22EE : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    7730/    22F1 : C3 B9 22                JMP     R_CAS_WRITE_BUF				;Save buffer at M to tape
    7731/    22F4 :                     ;
    7732/    22F4 :                     ; SAVEM to RAM file
    7733/    22F4 :                     ;
    7734/    22F4 :                     L_SAVEM_RAMFILE:
    7735/    22F4 : CD 46 23                CALL    R_PROC_SAVEM_ARGS			;Process SAVEM Arguments to LOADADR_R,
    7736/    22F7 :                     										;	LASTLEN_R and LASTSTRT_R
    7737/    22F7 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    7738/    22FA : CD 89 20                CALL    L_SET_EXT_CO				;set CO extension and find file
    7739/    22FD : C4 D9 1F                CNZ     R_KILL_CO_FILE				;calif file already exist: delete file. HL & DE args
    7740/    2300 : CD E4 20                CALL    L_FindFreeDirEntry
    7741/    2303 : E5                      PUSH    H							;save available directory entry ptr
    7742/    2304 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer
    7743/    2307 : E5                      PUSH    H							;save CO files pointer
    7744/    2308 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    7745/    230B : 7C                      MOV     A,H							;test HL
    7746/    230C : B5                      ORA     L
    7747/    230D : CA 17 3F                JZ      L_OUTOFMEMORY				;brif LASTLEN_R == 0
    7748/    2310 : E5                      PUSH    H							;save LASTLEN_R
    7749/    2311 : 01 06 00                LXI     B,0006H						;size of file header
    7750/    2314 : 09                      DAD     B							;HL = LASTLEN_R + 6
    7751/    2315 : 44                      MOV     B,H							;BC = HL
    7752/    2316 : 4D                      MOV     C,L
    7753/    2317 : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
    7754/    231A : 22 99 FB                SHLD    LSTVAR_R					;Address of last variable assigned
    7755/    231D : D4 6D 6B                CNC     MAKHOL						;Insert BC spaces at M (create hole)
    7756/    2320 : DA 17 3F                JC      L_OUTOFMEMORY				;brif if no space
    7757/    2323 : EB                      XCHG								;hole ptr to DE
    7758/    2324 : 21 CE FA                LXI     H,LOADADR_R				    ;'Load address' of current program
    7759/    2327 : CD 40 25                CALL    R_MOVE_6_BYTES				;header from M to (DE)
    7760/    232A : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program: source
    7761/    232D : C1                      POP     B							;LASTLEN_R
    7762/    232E : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC         ;Move BC bytes from M to (DE) with increment
    7763/    2331 : E1                      POP     H							;restore CO files pointer
    7764/    2332 : 22 B0 FB                SHLD    COSTRT_R					;CO files pointer
    7765/    2335 : E1                      POP     H							;restore available directory entry ptr
    7766/    2336 : 3E A0                   MVI     A,0A0H						;file type
    7767/    2338 : EB                      XCHG
    7768/    2339 : 2A 99 FB                LHLD    LSTVAR_R					;DE = file start address
    7769/    233C : EB                      XCHG
    7770/    233D : CD 39 22                CALL    R_SAVE_TO_DIRECTORY			;Save new entry to Directory
    7771/    2340 : CD 46 21                CALL    LNKFIL					;Fix up the directory start pointers
    7772/    2343 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
    7773/    2346 :                     ;
    7774/    2346 :                     ; Process SAVEM Arguments
    7775/    2346 :                     ;
    7776/    2346 :                     ; ,start, end [,entry]
    7777/    2346 :                     ;
    7778/    2346 :                     ; Store args in LOADADR_R, LASTLEN_R and LASTSTRT_R
    7779/    2346 :                     ;
    7780/    2346 :                     R_PROC_SAVEM_ARGS:						;2346H
    7781/    2346 : CD 72 23                CALL    L_GET_ADDRESS				;get start address to DE
    7782/    2349 : D5                      PUSH    D							;save
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 131 - 9/5/2025 20:20:35


    7783/    234A : CD 72 23                CALL    L_GET_ADDRESS				;get end address to DE
    7784/    234D : D5                      PUSH    D							;save
    7785/    234E : 2B                      DCX     H
    7786/    234F : (MACRO)                 CHRGET								;Get next non-white char from M
    7787/    2350 : 11 00 00                LXI     D,0							;preset entry address
    7788/    2353 : C4 72 23                CNZ     L_GET_ADDRESS				;if chars, get entry address to DE
    7789/    2356 : 2B                      DCX     H
    7790/    2357 : (MACRO)                 CHRGET								;Get next non-white char from M
    7791/    2358 : C2 46 04                JNZ     R_GEN_SN_ERROR				;if more characters, Generate Syntax error
    7792/    235B : EB                      XCHG								;entry address to HL
    7793/    235C : 22 D2 FA                SHLD    LASTSTRT_R					;store entry address
    7794/    235F : D1                      POP     D							;end address
    7795/    2360 : E1                      POP     H							;start address
    7796/    2361 : 22 CE FA                SHLD    LOADADR_R					;save 'Load address'
    7797/    2364 : 7B                      MOV     A,E							;compute length = end address - start address + 1
    7798/    2365 : 95                      SUB     L
    7799/    2366 : 6F                      MOV     L,A
    7800/    2367 : 7A                      MOV     A,D
    7801/    2368 : 9C                      SBB     H
    7802/    2369 : 67                      MOV     H,A
    7803/    236A : DA DB 08                JC      R_GEN_FC_ERROR				;if negative length, Generate FC error
    7804/    236D : 23                      INX     H
    7805/    236E : 22 D0 FA                SHLD    LASTLEN_R					;Length of last program loaded/saved
    7806/    2371 : C9                      RET
    7807/    2372 :                     
    7808/    2372 :                     L_GET_ADDRESS:
    7809/    2372 : (MACRO)             	SYNCHK	','
    7810/    2374 : C3 97 12                JMP     R_EVAL_EXPR_2				;Evaluate expression at M_2, return to caller
    7811/    2377 :                     ;
    7812/    2377 :                     ; CLOAD statement
    7813/    2377 :                     ;
    7814/    2377 :                     R_CLOAD_STMT:							;2377H
    7815/    2377 : FE 4D                   CPI     'M'							;4DH
    7816/    2379 : CA A7 24                JZ      R_CLOADM_STMT				;CLOADM statement
    7817/    237C : FE A3                   CPI     _PRINT						;? token
    7818/    237E : CA 56 24                JZ      L_CLOAD_VERIFY
    7819/    2381 : CD E7 25                CALL    L_CLOAD_ARGS				;Evaluate arguments to CLOAD/CLOADM & Clear current BASIC program
    7820/    2384 : F6 FF                   ORI     0FFH						;set A to 0FFH, set flags
    7821/    2386 : F5                      PUSH    PSW
    7822/    2387 :                     L_CLOAD_STMT_1:
    7823/    2387 : F1                      POP     PSW							;retrieve mode
    7824/    2388 : F5                      PUSH    PSW
    7825/    2389 : C2 91 23                JNZ     +							;brif called from R_CLOAD_STMT
    7826/    238C : 2B                      DCX     H
    7827/    238D : (MACRO)                 CHRGET								;Get next non-white char from M
    7828/    238E : C2 DB 08                JNZ     R_GEN_FC_ERROR				;Generate FC error
    7829/    2391 : 2B                  +	DCX     H
    7830/    2392 : (MACRO)                 CHRGET								;Get next non-white char from M
    7831/    2393 : 3E 00                   MVI     A,00H
    7832/    2395 : 37                      STC									;clear carry
    7833/    2396 : 3F                      CMC
    7834/    2397 : CA A6 23                JZ      +							;brif CHRGET returned 0
    7835/    239A : (MACRO)             	SYNCHK	','
    7836/    239C : (MACRO)             	SYNCHK	'R'							;run program after loading
    7837/    239E : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
    7838/    23A1 : F1                      POP     PSW							;retrieve mode
    7839/    23A2 : 37                      STC									;set carry to indicate run program after loading
    7840/    23A3 : F5                      PUSH    PSW							;save mode
    7841/    23A4 : 3E 80                   MVI     A,80H
    7842/    23A6 : F5                  +	PUSH    PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 132 - 9/5/2025 20:20:35


    7843/    23A7 : 32 A7 FC                STA     OPNFIL_R
    7844/    23AA :                     L_CLOAD_STMT_3:
    7845/    23AA : CD 67 26                CALL    R_CAS_OPEN_IN				;
    7846/    23AD : FE D3                   CPI     0D3H						;BA marker
    7847/    23AF : CA BD 23                JZ      +
    7848/    23B2 : FE 9C                   CPI     9CH							;DO marker
    7849/    23B4 : CA 32 24                JZ      L_CLOAD_DO_FILE
    7850/    23B7 :                     L_CLOAD_STMT_4:
    7851/    23B7 : CD DD 26                CALL    L_CAS_PRINT_SKIP			;Print program on tape being skipped
    7852/    23BA : C3 AA 23                JMP     L_CLOAD_STMT_3				;continue
    7853/    23BD :                     ;
    7854/    23BD :                     ; BASIC File
    7855/    23BD :                     ;
    7856/    23BD : C1                  +	POP     B
    7857/    23BE : F1                      POP     PSW
    7858/    23BF : F5                      PUSH    PSW
    7859/    23C0 : C5                      PUSH    B
    7860/    23C1 : CA B7 23                JZ      L_CLOAD_STMT_4
    7861/    23C4 : F1                      POP     PSW
    7862/    23C5 : F1                      POP     PSW
    7863/    23C6 : 9F                      SBB     A
    7864/    23C7 : 32 92 FC                STA     EXCFLG_R
    7865/    23CA : CD E3 26                CALL    L_CAS_PRINT_FOUND			;print name of program found
    7866/    23CD : CD FF 20                CALL    SCRTCH						;do NEW
    7867/    23D0 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    7868/    23D3 : E5                      PUSH    H							;length to read
    7869/    23D4 : 44                      MOV     B,H
    7870/    23D5 : 4D                      MOV     C,L
    7871/    23D6 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7872/    23D9 : E5                      PUSH    H							;buffer ptr to store
    7873/    23DA : CD 6D 6B                CALL    MAKHOL						;Insert BC spaces at M
    7874/    23DD : DA 17 3F                JC      L_OUTOFMEMORY
    7875/    23E0 : 21 26 24                LXI     H,R_CLOAD_ONERR
    7876/    23E3 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
    7877/    23E6 : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
    7878/    23E9 : 09                      DAD     B							;add length of hole
    7879/    23EA : 22 AE FB                SHLD    DOSTRT_R					;update DO files pointer
    7880/    23ED : CD D1 26                CALL    L_FND_CAS_DATA_BLK
    7881/    23F0 : E1                      POP     H							;buffer ptr to store
    7882/    23F1 : D1                      POP     D							;length to read
    7883/    23F2 : CD 13 24                CALL    R_CAS_READ_REC				;Load record from tape and store at M
    7884/    23F5 : C2 26 24                JNZ     R_CLOAD_ONERR				;On-error return handler for CLOAD statement
    7885/    23F8 : 6F                      MOV     L,A
    7886/    23F9 : 67                      MOV     H,A
    7887/    23FA : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
    7888/    23FD : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    7889/    2400 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
    7890/    2403 : CD F0 05                CALL    R_UPDATE_LINE_ADDR         	;Update line addresses for current BASIC program
    7891/    2406 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
    7892/    2409 : 3A 92 FC                LDA     EXCFLG_R
    7893/    240C : A7                      ANA     A
    7894/    240D : C2 04 08                JNZ     L_NEWSTT					;Execute BASIC program
    7895/    2410 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
    7896/    2413 :                     ;
    7897/    2413 :                     ; Load record from tape and store at M, length DE
    7898/    2413 :                     ;
    7899/    2413 :                     R_CAS_READ_REC:							;2413H
    7900/    2413 : 0E 00                   MVI     C,00H
    7901/    2415 : CD B0 14            -	CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    7902/    2418 : 77                      MOV     M,A							;store
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 133 - 9/5/2025 20:20:35


    7903/    2419 : 23                      INX     H							;next
    7904/    241A : 1B                      DCX     D							;count
    7905/    241B : 7A                      MOV     A,D
    7906/    241C : B3                      ORA     E
    7907/    241D : C2 15 24                JNZ     -							;loop
    7908/    2420 : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    7909/    2423 : 79                      MOV     A,C
    7910/    2424 : A7                      ANA     A
    7911/    2425 : C9                      RET
    7912/    2426 :                     ;
    7913/    2426 :                     ; On-error return handler for CLOAD statement
    7914/    2426 :                     ;
    7915/    2426 :                     R_CLOAD_ONERR:							;2426H
    7916/    2426 : CD FF 20                CALL    SCRTCH
    7917/    2429 : 21 00 00                LXI     H,0
    7918/    242C : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
    7919/    242F : C3 91 14                JMP     L_CAS_IO_ERROR
    7920/    2432 :                     ;
    7921/    2432 :                     ; DO marker found.
    7922/    2432 :                     ; 2 times PSW on stack
    7923/    2432 :                     ;
    7924/    2432 :                     L_CLOAD_DO_FILE:
    7925/    2432 : CD E3 26                CALL    L_CAS_PRINT_FOUND			;Print selected program/file "Found" on tape
    7926/    2435 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
    7927/    2438 : 2A 83 FC                LHLD    FCBTBL_R					;File number description table pointer
    7928/    243B : (MACRO)             	GETHLFROMM							;get first ptr to HL
    7929/    243F : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
    7930/    2442 : 36 01                   MVI     M,01H						;set "open for input"
    7931/    2444 : 23                      INX     H							;+4 to File device
    7932/    2445 : 23                      INX     H
    7933/    2446 : 23                      INX     H 
    7934/    2447 : 23                      INX     H
    7935/    2448 : 36 FD                   MVI     M,CAS_DEV					;0FDH device code
    7936/    244A : 23                      INX     H							;+6
    7937/    244B : 23                      INX     H
    7938/    244C : AF                      XRA     A							;clear Offset from buffer start
    7939/    244D : 77                      MOV     M,A
    7940/    244E : 23                      INX     H							;+7 (FILPOS_IN_FCB_OFS)
    7941/    244F : 77                      MOV     M,A							;clear LSB of Relative position of next block
    7942/    2450 : 32 8E FA                STA     CASFILSTAT_R				;clear
    7943/    2453 : C3 A6 4D                JMP     L_MERGE_3
    7944/    2456 :                     ;
    7945/    2456 :                     ; CLOAD VERIFY
    7946/    2456 :                     ;
    7947/    2456 :                     L_CLOAD_VERIFY:
    7948/    2456 : CD E8 25                CALL    L_CLOAD_ARGS_1
    7949/    2459 : E5                      PUSH    H
    7950/    245A : CD 50 26                CALL    R_CAS_OPEN_IN_BA			;Open CAS for input of BASIC files
    7951/    245D : CD D1 26                CALL    L_FND_CAS_DATA_BLK
    7952/    2460 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    7953/    2463 : EB                      XCHG
    7954/    2464 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    7955/    2467 : CD 90 25                CALL    L_CMP_CAS_DATA
    7956/    246A : C2 78 24                JNZ     R_GEN_VERIFY_FAIL_ERR     	;Generate Verify Failed error
    7957/    246D : 7E                      MOV     A,M
    7958/    246E : 23                      INX     H
    7959/    246F : B6                      ORA     M
    7960/    2470 : C2 78 24                JNZ     R_GEN_VERIFY_FAIL_ERR     	;Generate Verify Failed error
    7961/    2473 : CD AA 14            -	CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    7962/    2476 : E1                      POP     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 134 - 9/5/2025 20:20:35


    7963/    2477 : C9                      RET
    7964/    2478 :                     ;
    7965/    2478 :                     ; Generate Verify Failed error
    7966/    2478 :                     ;
    7967/    2478 :                     R_GEN_VERIFY_FAIL_ERR:				    ;2478H
    7968/    2478 : 21 81 24                LXI     H,L_VERIFY_ERR				;Code Based. 
    7969/    247B : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
    7970/    247E : C3 73 24                JMP     -
    7971/    2481 :                     
    7972/    2481 :                     L_VERIFY_ERR:
    7973/    2481 : 56 65 72 69 66 79       DB      "Verify failed",0DH,0AH,00H
                    20 66 61 69 6C 65 
                    64 0D 0A 00 
    7974/    2491 :                     ;
    7975/    2491 :                     ; LOADM and RUNM statement
    7976/    2491 :                     ;
    7977/    2491 :                     ; Load or Run a Machine Language program
    7978/    2491 :                     ;
    7979/    2491 :                     ; IN:
    7980/    2491 :                     ;	marker on top of stack
    7981/    2491 :                     ;
    7982/    2491 :                     R_LOADM_STMT:							;2491H
    7983/    2491 : (MACRO)                 CHRGET								;Get next non-white char from M
    7984/    2492 : F1                      POP     PSW							;get marker
    7985/    2493 : F5                      PUSH    PSW							;save marker again
    7986/    2494 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
    7987/    2497 : CD 7A 20                CALL    L_DEV_FILNAM				;process a filename.  Returns device code in D
    7988/    249A : 7A                      MOV     A,D							;get Device Code
    7989/    249B : FE FD                   CPI     CAS_DEV						;0FDH
    7990/    249D : CA B3 24                JZ      L_CLOADM_2
    7991/    24A0 : FE F8                   CPI     RAM_DEV						;0F8H
    7992/    24A2 : CA E7 24                JZ      L_LOADM_RAM
    7993/    24A5 : (MACRO)             	RST38H	5EH
    7994/    24A7 :                     ;
    7995/    24A7 :                     ; LOADM "file" with no Device Specification (like CAS: or RAM:)
    7996/    24A7 :                     ; Treat as cassette load but allow PRINT???
    7997/    24A7 :                     ;
    7998/    24A7 :                     ;
    7999/    24A7 :                     ; CLOADM statement
    8000/    24A7 :                     ; also CLOADM?
    8001/    24A7 :                     ;
    8002/    24A7 :                     R_CLOADM_STMT:							;24A7H
    8003/    24A7 : (MACRO)                 CHRGET								;Get next non-white char from M
    8004/    24A8 : FE A3                   CPI     _PRINT						;? token
    8005/    24AA : CA 73 25                JZ      L_CMP_CAS_PROG
    8006/    24AD : CD E7 25                CALL    L_CLOAD_ARGS				;Evaluate arguments to CLOAD/CLOADM & Clear current BASIC program
    8007/    24B0 : F6 FF                   ORI     0FFH						;set A == 0FFH
    8008/    24B2 : F5                      PUSH    PSW							;marker
    8009/    24B3 :                     L_CLOADM_2:
    8010/    24B3 : 2B                      DCX     H							;backup text ptr
    8011/    24B4 : (MACRO)                 CHRGET								;Get next non-white char from M
    8012/    24B5 : C2 46 04                JNZ     R_GEN_SN_ERROR				;brif not end_of_line: Generate Syntax error
    8013/    24B8 : E5                      PUSH    H
    8014/    24B9 : CD 56 26                CALL    R_CAS_OPEN_IN_CO			;Open CAS for input of CO files
    8015/    24BC : 2A D2 FA                LHLD    LASTSTRT_R					;Start of last program
    8016/    24BF : 7C                      MOV     A,H							;test it
    8017/    24C0 : B5                      ORA     L
    8018/    24C1 : C2 CB 24                JNZ     +							;brif LASTSTRT_R != NULL
    8019/    24C4 : E1                      POP     H							;retrieve LASTSTRT_R
    8020/    24C5 : F1                      POP     PSW							;marker
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 135 - 9/5/2025 20:20:35


    8021/    24C6 : F5                      PUSH    PSW
    8022/    24C7 : E5                      PUSH    H
    8023/    24C8 : DA DB 08                JC      R_GEN_FC_ERROR				;Generate FC error
    8024/    24CB : CD 31 25            +	CALL    L_PRNT_HDR_CMP_HIMEM		;print .CO file header and check memory
    8025/    24CE : DA 17 3F                JC      L_OUTOFMEMORY				;brif 'Load address' < HIMEM
    8026/    24D1 : CD D1 26                CALL    L_FND_CAS_DATA_BLK
    8027/    24D4 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    8028/    24D7 : EB                      XCHG
    8029/    24D8 : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    8030/    24DB : CD 13 24                CALL    R_CAS_READ_REC				;Load program from tape and store at M
    8031/    24DE : C2 91 14                JNZ     L_CAS_IO_ERROR
    8032/    24E1 : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    8033/    24E4 : C3 1A 25                JMP     L_LOADM_END					;clean-up stack
    8034/    24E7 :                     ;
    8035/    24E7 :                     ; LOADM or RUNM a RAM file
    8036/    24E7 :                     ;
    8037/    24E7 :                     L_LOADM_RAM:
    8038/    24E7 : E5                      PUSH    H
    8039/    24E8 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
    8040/    24EB : CD 89 20                CALL    L_SET_EXT_CO				;set CO extension and find file
    8041/    24EE : CA 57 50                JZ      R_GEN_FF_ERR_FUN			;Generate FF error if no file
    8042/    24F1 : EB                      XCHG
    8043/    24F2 : CD 3D 25                CALL    R_LOAD_CO_HEADER			;Copy .CO 6-byte header to Current Program Area
    8044/    24F5 : E5                      PUSH    H
    8045/    24F6 : 2A D2 FA                LHLD    LASTSTRT_R					;Start of last program
    8046/    24F9 : 7C                      MOV     A,H							;test HL
    8047/    24FA : B5                      ORA     L
    8048/    24FB : C2 07 25                JNZ     +							;brif HL != 0
    8049/    24FE : D1                      POP     D							;reload + push again
    8050/    24FF : E1                      POP     H
    8051/    2500 : F1                      POP     PSW
    8052/    2501 : F5                      PUSH    PSW
    8053/    2502 : E5                      PUSH    H
    8054/    2503 : D5                      PUSH    D
    8055/    2504 : DA DB 08                JC      R_GEN_FC_ERROR				;Generate FC error
    8056/    2507 : CD 31 25            +	CALL    L_PRNT_HDR_CMP_HIMEM		;print .CO file header and check memory
    8057/    250A : DA 17 3F                JC      L_OUTOFMEMORY				;brif 'Load address' < HIMEM
    8058/    250D : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    8059/    2510 : 44                      MOV     B,H
    8060/    2511 : 4D                      MOV     C,L
    8061/    2512 : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    8062/    2515 : EB                      XCHG
    8063/    2516 : E1                      POP     H
    8064/    2517 : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC        	;Move BC bytes from M to (DE) with increment
    8065/    251A :                     L_LOADM_END:
    8066/    251A : E1                      POP     H
    8067/    251B : F1                      POP     PSW
    8068/    251C : D2 2C 3F                JNC     R_INIT_BASIC_VARS_2
    8069/    251F : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2
    8070/    2522 : 2A D2 FA                LHLD    LASTSTRT_R					;Start of last program
    8071/    2525 : 22 61 F6                SHLD    LSTCAL_R					;Address last called
    8072/    2528 : CD 60 F6                CALL    LSTCAL_R-1					;0F660H contains JMP to Address last called
    8073/    252B : 2A 99 FB                LHLD    LSTVAR_R					;Address of last variable assigned
    8074/    252E : C3 04 08                JMP     L_NEWSTT					;Execute BASIC program
    8075/    2531 :                     
    8076/    2531 :                     L_PRNT_HDR_CMP_HIMEM:
    8077/    2531 : CD A4 25                CALL    L_PRINT_CO_INFO
    8078/    2534 :                     R_CMP_HIMEM:
    8079/    2534 : 2A F4 F5                LHLD    HIMEM_R						;HIMEM
    8080/    2537 : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 136 - 9/5/2025 20:20:35


    8081/    2538 : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    8082/    253B : (MACRO)                 COMPAR								;Compare HIMEM (DE) and 'Load address' (HL): HL - DE
    8083/    253C : C9                      RET
    8084/    253D :                     ;
    8085/    253D :                     ; Copy .CO 6-byte header to Current Program Area
    8086/    253D :                     ;
    8087/    253D :                     R_LOAD_CO_HEADER:						;253DH
    8088/    253D : 11 CE FA                LXI     D,LOADADR_R				  	;'Load address' of current program
    8089/    2540 :                     R_MOVE_6_BYTES:
    8090/    2540 : 06 06                   MVI     B,06H
    8091/    2542 :                     ;
    8092/    2542 :                     ;Move B bytes from M to (DE)
    8093/    2542 :                     ; Could use XCHG call R_MOVE_B_BYTES_INC XCHG
    8094/    2542 :                     ; Updates DE, HL.
    8095/    2542 :                     ;
    8096/    2542 :                     ; OUT:
    8097/    2542 :                     ;	B		0
    8098/    2542 :                     ;
    8099/    2542 :                     R_MOVE_B_BYTES:							;2542H
    8100/    2542 : 7E                      MOV     A,M
    8101/    2543 : 12                      STAX    D
    8102/    2544 : 23                      INX     H
    8103/    2545 : 13                      INX     D
    8104/    2546 : 05                      DCR     B
    8105/    2547 : C2 42 25                JNZ     R_MOVE_B_BYTES				;Move B bytes from M to (DE)
    8106/    254A : C9                      RET
    8107/    254B :                     ;
    8108/    254B :                     ; Launch .CO files from MENU
    8109/    254B :                     ;
    8110/    254B :                     ; Allows VT100 initializer to be loaded without CLEAR statement
    8111/    254B :                     ;
    8112/    254B :                     ; TODO: allow Position Independent .CO file to be run from RAM file directly
    8113/    254B :                     ;
    8114/    254B :                     ;
    8115/    254B :                     R_EXEC_CO_FILE:							;254BH
    8116/    254B : CD 3D 25                CALL    R_LOAD_CO_HEADER			;Copy .CO 6-byte header to Current Program Area
    8117/    254E : E5                      PUSH    H
    8118/    254F : CD 34 25            	call	R_CMP_HIMEM
    8119/    2552 : DA 6D 25                JC      L_BELOW_HIMEM				;brif 'Load address' < HIMEM
    8120/    2555 : EB                      XCHG
    8121/    2556 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    8122/    2559 : 44                      MOV     B,H
    8123/    255A : 4D                      MOV     C,L
    8124/    255B : E1                      POP     H
    8125/    255C : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC        	;Move BC bytes from M to (DE) with increment
    8126/    255F : 2A D2 FA                LHLD    LASTSTRT_R					;Start of last program
    8127/    2562 : 7C                      MOV     A,H
    8128/    2563 : B5                      ORA     L
    8129/    2564 : 22 61 F6                SHLD    LSTCAL_R					;Address last called
    8130/    2567 : C4 60 F6                CNZ     LSTCAL_R-1					;0F660H contains JMP to Address last called
    8131/    256A : C3 97 57                JMP     R_MENU_ENTRY				;MENU Program
    8132/    256D :                     
    8133/    256D :                     L_BELOW_HIMEM:
    8134/    256D : CD 29 42                CALL    R_BEEP_STMT				  	;BEEP statement
    8135/    2570 : C3 97 57                JMP     R_MENU_ENTRY				;MENU Program
    8136/    2573 :                     
    8137/    2573 :                     L_CMP_CAS_PROG:
    8138/    2573 : (MACRO)                 CHRGET								;Get next non-white char from M
    8139/    2574 : CD E7 25                CALL    L_CLOAD_ARGS				;Evaluate arguments to CLOAD/CLOADM & Clear current BASIC program
    8140/    2577 : E5                      PUSH    H							;save txt ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 137 - 9/5/2025 20:20:35


    8141/    2578 : CD 56 26                CALL    R_CAS_OPEN_IN_CO			;Open CAS for input of CO files
    8142/    257B : CD D1 26                CALL    L_FND_CAS_DATA_BLK
    8143/    257E : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved to DE
    8144/    2581 : EB                      XCHG
    8145/    2582 : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    8146/    2585 : CD 90 25                CALL    L_CMP_CAS_DATA
    8147/    2588 : C2 78 24                JNZ     R_GEN_VERIFY_FAIL_ERR     	;Generate Verify Failed error
    8148/    258B : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    8149/    258E : E1                      POP     H							;restore txt ptr
    8150/    258F : C9                      RET
    8151/    2590 :                     
    8152/    2590 :                     L_CMP_CAS_DATA:
    8153/    2590 : 0E 00                   MVI     C,00H
    8154/    2592 : CD B0 14            -	CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    8155/    2595 : BE                      CMP     M
    8156/    2596 : C0                      RNZ
    8157/    2597 : 23                      INX     H							;next data
    8158/    2598 : 1B                      DCX     D							;count
    8159/    2599 : 7A                      MOV     A,D							;test DE
    8160/    259A : B3                      ORA     E
    8161/    259B : C2 92 25                JNZ		-							;brif DE != 0
    8162/    259E : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    8163/    25A1 : 79                      MOV     A,C
    8164/    25A2 : A7                      ANA     A
    8165/    25A3 : C9                      RET
    8166/    25A4 :                     
    8167/    25A4 :                     ; 
    8168/    25A4 :                     ; Print .CO information to LCD (start address, etc.)
    8169/    25A4 :                     ; 
    8170/    25A4 :                     L_PRINT_CO_INFO:
    8171/    25A4 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    8172/    25A7 : 23                      INX     H							;test for 0FFFFH
    8173/    25A8 : 7C                      MOV     A,H							;test HL
    8174/    25A9 : B5                      ORA     L
    8175/    25AA : C0                      RNZ									;return if CURLIN_R  != 0FFFFH
    8176/    25AB : 2A CE FA                LHLD    LOADADR_R					;'Load address' of current program
    8177/    25AE : E5                      PUSH    H							;save Load address
    8178/    25AF : EB                      XCHG								;to DE
    8179/    25B0 : 21 D5 25                LXI     H,L_Top_MSG					;Code Based. 
    8180/    25B3 : CD CD 25                CALL    L_PRINT_PROPS
    8181/    25B6 : 2A D0 FA                LHLD    LASTLEN_R					;Length of last program loaded/saved
    8182/    25B9 : 2B                      DCX     H							;Adjust for last position
    8183/    25BA : D1                      POP     D							;restore Load address
    8184/    25BB : 19                      DAD     D							;compute End address
    8185/    25BC : EB                      XCHG								;to DE
    8186/    25BD : 21 DB 25                LXI     H,L_End_MSG					;Code Based. 
    8187/    25C0 : CD CD 25                CALL    L_PRINT_PROPS
    8188/    25C3 : 2A D2 FA                LHLD    LASTSTRT_R					;Start of last program
    8189/    25C6 : 7C                      MOV     A,H							;test HL
    8190/    25C7 : B5                      ORA     L
    8191/    25C8 : C8                      RZ									;return if HL == 0
    8192/    25C9 : EB                      XCHG								;to DE
    8193/    25CA : 21 E1 25                LXI     H,L_Exe_MSG					;Code Based. 
    8194/    25CD :                     ; DE contains address to print
    8195/    25CD :                     L_PRINT_PROPS:
    8196/    25CD : D5                      PUSH    D
    8197/    25CE : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
    8198/    25D1 : E1                      POP     H
    8199/    25D2 : C3 D4 39                JMP     R_PRINT_HL_ON_LCD			;Print binary number in HL at current position
    8200/    25D5 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 138 - 9/5/2025 20:20:35


    8201/    25D5 :                     L_Top_MSG:
    8202/    25D5 : 54 6F 70 3A 20 00       DB      "Top: ",00H
    8203/    25DB :                     
    8204/    25DB :                     L_End_MSG:
    8205/    25DB : 45 6E 64 3A 20 00       DB      "End: ",00H
    8206/    25E1 :                     
    8207/    25E1 :                     L_Exe_MSG:
    8208/    25E1 : 45 78 65 3A 20 00       DB      "Exe: ",00H
    8209/    25E7 :                     ;
    8210/    25E7 :                     ; Evaluate arguments to CLOAD/CLOADM & Clear current BASIC program
    8211/    25E7 :                     ;
    8212/    25E7 :                     L_CLOAD_ARGS:
    8213/    25E7 : 2B                      DCX     H							;backup txt ptr
    8214/    25E8 :                     L_CLOAD_ARGS_1:
    8215/    25E8 : (MACRO)                 CHRGET								;Get next non-white char from M
    8216/    25E9 : C2 FC 25                JNZ     L_CLOAD_ARGS_2				;brif possible filename
    8217/    25EC :                     ; no filename. Set FILNAM_R to blanks
    8218/    25EC : 06 06                   MVI     B,06H
    8219/    25EE : 11 93 FC                LXI     D,FILNAM_R				    ;Current Filename
    8220/    25F1 : 3E 20                   MVI     A,' '
    8221/    25F3 : 12                  -	STAX    D
    8222/    25F4 : 13                      INX     D
    8223/    25F5 : 05                      DCR     B
    8224/    25F6 : C2 F3 25                JNZ     -							;brif not done
    8225/    25F9 : C3 02 26                JMP     L_CLOAD_ARGS_3
    8226/    25FC :                     
    8227/    25FC :                     L_CLOAD_ARGS_2:
    8228/    25FC : CD 0F 4C                CALL    L_EVAL_FILNAM				;Evaluate arguments to RUN/OPEN/SAVE commands
    8229/    25FF : C2 04 26                JNZ     +							;brif Device was specified
    8230/    2602 :                     L_CLOAD_ARGS_3:
    8231/    2602 : 16 FD                   MVI     D,CAS_DEV					;0FDH set device code
    8232/    2604 : 7A                  +	MOV     A,D
    8233/    2605 : FE FD                   CPI     CAS_DEV						;0FDH
    8234/    2607 : C2 DB 08                JNZ     R_GEN_FC_ERROR				;Generate FC error if not cassette
    8235/    260A : C9                      RET
    8236/    260B :                     ;
    8237/    260B :                     ; Open CAS for output of BASIC files
    8238/    260B :                     ;
    8239/    260B :                     R_CAS_OPEN_OUT_BA:						;260BH
    8240/    260B : 3E D3                   MVI     A,0D3H
    8241/    260D : (MACRO)             	SKIP_2BYTES_INST_BC
    8242/    260E :                     ;
    8243/    260E :                     ; Open CAS for output of TEXT files
    8244/    260E :                     ; 1 byte 09CH marker
    8245/    260E :                     ; rest as R_CAS_OPEN_OUT_CO
    8246/    260E :                     ;
    8247/    260E :                     R_CAS_OPEN_OUT_DO:						;260EH
    8248/    260E : 3E 9C                   MVI     A,9CH						;DO file marker
    8249/    2610 : (MACRO)             	SKIP_2BYTES_INST_BC
    8250/    2611 :                     ;
    8251/    2611 :                     ; Open CAS for output of CO files
    8252/    2611 :                     ;
    8253/    2611 :                     ; 1 byte 0D0H marker
    8254/    2611 :                     ; 6 byte filename
    8255/    2611 :                     ; 10 byte header (load data)
    8256/    2611 :                     ; 1 byte checksum
    8257/    2611 :                     ; 20 bytes 0 padding
    8258/    2611 :                     ;
    8259/    2611 :                     R_CAS_OPEN_OUT_CO:						;2611H
    8260/    2611 : 3E D0                   MVI     A,0D0H						;CO file marker
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 139 - 9/5/2025 20:20:35


    8261/    2613 : F5                      PUSH    PSW							;save file marker
    8262/    2614 : CD 99 14                CALL    R_DET_CAS_SYNC_HDR       	;Turn cassette motor on and detect sync header
    8263/    2617 : F1                      POP     PSW							;restore file marker
    8264/    2618 : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write file marker to tape & update checksum
    8265/    261B : 0E 00                   MVI     C,00H						;clear checksum
    8266/    261D :                     ; first loop
    8267/    261D : 21 93 FC                LXI     H,FILNAM_R				  	;Current Filename
    8268/    2620 : 11 02 06                LXI     D,0602H						;D == 6 filename chars E == 2 loops
    8269/    2623 : 7E                  -	MOV     A,M
    8270/    2624 : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write byte to tape & update checksum
    8271/    2627 : 23                      INX     H
    8272/    2628 : 15                      DCR     D
    8273/    2629 : C2 23 26                JNZ     -
    8274/    262C :                     ; second loop
    8275/    262C : 21 CE FA                LXI     H,LOADADR_R				  	;'Load address' of current program
    8276/    262F : 16 0A                   MVI     D,0AH						;10 bytes load address
    8277/    2631 : 1D                      DCR     E
    8278/    2632 : C2 23 26                JNZ     -
    8279/    2635 :                     ; finish cassette block
    8280/    2635 :                     L_CAS_FIN_BLK:							;C is argument for this entry point
    8281/    2635 : 79                      MOV     A,C							;checksum
    8282/    2636 : 2F                      CMA									;two's complement
    8283/    2637 : 3C                      INR     A
    8284/    2638 : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write checksum to tape
    8285/    263B : 06 14                   MVI     B,20						;14H padding
    8286/    263D : AF                  -	XRA     A
    8287/    263E : CD C1 14                CALL    R_CAS_WRITE_BYTE			;Write byte to tape & update checksum
    8288/    2641 : 05                      DCR     B
    8289/    2642 : C2 3D 26                JNZ     -
    8290/    2645 : C3 AA 14                JMP     R_CAS_MOTOR_OFF				;Turn cassette motor off & return
    8291/    2648 :                     
    8292/    2648 :                     L_PREP_DATA_BLK:						;prepare cassette sync header
    8293/    2648 : CD 99 14                CALL    R_DET_CAS_SYNC_HDR       	;Turn cassette motor on and detect sync header
    8294/    264B : 3E 8D                   MVI     A,8DH						;Data Block marker
    8295/    264D : C3 C1 14                JMP     R_CAS_WRITE_BYTE			;Write byte to tape & update checksum
    8296/    2650 :                     ;
    8297/    2650 :                     ; Open CAS for input of BASIC files
    8298/    2650 :                     ;
    8299/    2650 :                     R_CAS_OPEN_IN_BA:						;2650H
    8300/    2650 : 06 D3                   MVI     B,0D3H						;BA marker
    8301/    2652 : (MACRO)             	SKIP_2BYTES_INST_DE
    8302/    2653 :                     ;
    8303/    2653 :                     ; Open CAS for input of TEXT files
    8304/    2653 :                     ;
    8305/    2653 :                     R_CAS_OPEN_IN_DO:						;2653H
    8306/    2653 : 06 9C                   MVI     B,9CH						;DO marker
    8307/    2655 : (MACRO)             	SKIP_2BYTES_INST_DE
    8308/    2656 :                     ;
    8309/    2656 :                     ; Open CAS for input of CO files
    8310/    2656 :                     ;
    8311/    2656 :                     R_CAS_OPEN_IN_CO:						;2656H
    8312/    2656 : 06 D0                   MVI     B,0D0H						;CO marker
    8313/    2658 : C5                  -	PUSH    B
    8314/    2659 : CD 67 26                CALL    R_CAS_OPEN_IN				;. Returns marker found
    8315/    265C : C1                      POP     B
    8316/    265D : B8                      CMP     B							;compare file type
    8317/    265E : CA E3 26                JZ      L_CAS_PRINT_FOUND			;brif file types match
    8318/    2661 : CD DD 26                CALL    L_CAS_PRINT_SKIP			;Print program on tape being skipped
    8319/    2664 : C3 58 26                JMP     -
    8320/    2667 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 140 - 9/5/2025 20:20:35


    8321/    2667 :                     R_CAS_OPEN_IN:
    8322/    2667 : CD 8A 14                CALL    R_LOAD_CAS_HDR				;Start tape and load tape header
    8323/    266A : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    8324/    266D : FE D3                   CPI     0D3H						;BA marker
    8325/    266F : CA 7C 26                JZ      +
    8326/    2672 : FE 9C                   CPI     9CH							;DO marker
    8327/    2674 : CA 7C 26                JZ      +
    8328/    2677 : FE D0                   CPI     0D0H						;CO marker
    8329/    2679 : C2 67 26                JNZ     R_CAS_OPEN_IN				;
    8330/    267C :                     ; BA, DO or CO file type found
    8331/    267C : F5                  +	PUSH    PSW
    8332/    267D : 21 9C FC                LXI     H,FILNM2_R				    ;Filename of last program loaded from tape
    8333/    2680 : 11 02 06                LXI     D,0602H						;D = first loop count 6, E = loop count 2
    8334/    2683 : 0E 00                   MVI     C,00H
    8335/    2685 : CD B0 14            -	CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    8336/    2688 : 77                      MOV     M,A							;store in FILNM2_R
    8337/    2689 : 23                      INX     H
    8338/    268A : 15                      DCR     D							;decrement
    8339/    268B : C2 85 26                JNZ     -
    8340/    268E : 21 CE FA                LXI     H,LOADADR_R				  	;'Load address' of current program
    8341/    2691 : 16 0A                   MVI     D,0AH						;count 10 in second loop
    8342/    2693 : 1D                      DCR     E							;loop count
    8343/    2694 : C2 85 26                JNZ     -
    8344/    2697 : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
    8345/    269A : 79                      MOV     A,C
    8346/    269B : A7                      ANA     A
    8347/    269C : C2 CD 26                JNZ     L_CAS_OPEN_2
    8348/    269F : CD AA 14                CALL    R_CAS_MOTOR_OFF				;Turn cassette motor off
    8349/    26A2 : 21 93 FC                LXI     H,FILNAM_R				    ;Current Filename
    8350/    26A5 : 06 06                   MVI     B,06H						;loop count
    8351/    26A7 : 3E 20                   MVI     A,' '
    8352/    26A9 : BE                  -	CMP     M
    8353/    26AA : C2 B5 26                JNZ     +							;brif no match
    8354/    26AD : 23                      INX     H
    8355/    26AE : 05                      DCR     B
    8356/    26AF : C2 A9 26                JNZ     -
    8357/    26B2 : C3 C8 26                JMP     L_CAS_OPEN_1				;TODO POP PSW, RET shorter
    8358/    26B5 :                     
    8359/    26B5 : 11 93 FC            +	LXI     D,FILNAM_R				    ;Current Filename
    8360/    26B8 : 21 9C FC                LXI     H,FILNM2_R				    ;Filename of last program loaded from tape
    8361/    26BB : 06 06                   MVI     B,06H
    8362/    26BD : 1A                  -	LDAX    D
    8363/    26BE : BE                      CMP     M
    8364/    26BF : C2 CA 26                JNZ		+							;brif no match
    8365/    26C2 : 13                      INX     D
    8366/    26C3 : 23                      INX     H
    8367/    26C4 : 05                      DCR     B
    8368/    26C5 : C2 BD 26                JNZ     -
    8369/    26C8 :                     L_CAS_OPEN_1:
    8370/    26C8 : F1                      POP     PSW
    8371/    26C9 : C9                      RET
    8372/    26CA :                     
    8373/    26CA : CD DD 26            +	CALL    L_CAS_PRINT_SKIP			;Print program on tape being skipped
    8374/    26CD :                     L_CAS_OPEN_2:
    8375/    26CD : F1                      POP     PSW
    8376/    26CE : C3 67 26                JMP     R_CAS_OPEN_IN				;
    8377/    26D1 :                     
    8378/    26D1 :                     L_FND_CAS_DATA_BLK:
    8379/    26D1 : CD 8A 14                CALL    R_LOAD_CAS_HDR				;Start tape and load tape header
    8380/    26D4 : CD B0 14                CALL    R_CAS_READ_BYTE				;Read byte from tape & update checksum
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 141 - 9/5/2025 20:20:35


    8381/    26D7 : FE 8D                   CPI     8DH							;Data Block marker
    8382/    26D9 : C2 91 14                JNZ     L_CAS_IO_ERROR
    8383/    26DC : C9                      RET
    8384/    26DD :                     
    8385/    26DD :                     L_CAS_PRINT_SKIP:						;Print program on tape being skipped
    8386/    26DD : 11 05 27                LXI     D,L_CAS_SKIP_TXT			;Code Based. 
    8387/    26E0 : C3 E6 26                JMP     L_CAS_PRINT_TXT				;no trick?
    8388/    26E3 :                     
    8389/    26E3 :                     L_CAS_PRINT_FOUND:
    8390/    26E3 : 11 FE 26                LXI     D,L_CAS_FOUND_TXT			;Code Based. 
    8391/    26E6 :                     L_CAS_PRINT_TXT:
    8392/    26E6 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
    8393/    26E9 : 23                      INX     H
    8394/    26EA : 7C                      MOV     A,H
    8395/    26EB : B5                      ORA     L
    8396/    26EC : C0                      RNZ
    8397/    26ED : EB                      XCHG
    8398/    26EE : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
    8399/    26F1 : AF                      XRA     A
    8400/    26F2 : 32 A2 FC                STA     FILNM2_R+6					;extension
    8401/    26F5 : 21 9C FC                LXI     H,FILNM2_R				  	;Filename of last program loaded from tape
    8402/    26F8 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
    8403/    26FB : C3 5D 42                JMP     R_ERASE_TO_EOL				;Erase from cursor to end of line
    8404/    26FE :                     
    8405/    26FE :                     L_CAS_FOUND_TXT:
    8406/    26FE : 46 6F 75 6E 64 3A       DB      "Found:",00H
                    00 
    8407/    2705 :                     
    8408/    2705 :                     L_CAS_SKIP_TXT:
    8409/    2705 : 53 6B 69 70 20 3A       DB      "Skip :",00H
                    00 
    8410/    270C :                     	
    8411/    270C :                     ;
    8412/    270C :                     ;BASIC expression evaluation operator vector for String Compare
    8413/    270C :                     ;
    8414/    270C :                     ; String ptr on stack
    8415/    270C :                     ;
    8416/    270C :                     L_STR_CMP:
    8417/    270C : CD 16 29                CALL    L_FRESTR					;Get pointer to most recently used string (Len + address): string 1
    8418/    270F : 7E                      MOV     A,M							;string length
    8419/    2710 : 23                      INX     H
    8420/    2711 : 4E                      MOV     C,M							;string data ptr to BC
    8421/    2712 : 23                      INX     H
    8422/    2713 : 46                      MOV     B,M
    8423/    2714 : D1                      POP     D							;string ptr to DE: string 2
    8424/    2715 : C5                      PUSH    B							;string data ptr
    8425/    2716 : F5                      PUSH    PSW							;string length
    8426/    2717 : CD 1D 29                CALL    L_FRETMP					;Get pointer to stack string (Len + address). POP based on DE
    8427/    271A : F1                      POP     PSW
    8428/    271B : 57                      MOV     D,A
    8429/    271C : 5E                      MOV     E,M
    8430/    271D : 23                      INX     H
    8431/    271E : 4E                      MOV     C,M
    8432/    271F : 23                      INX     H
    8433/    2720 : 46                      MOV     B,M
    8434/    2721 : E1                      POP     H
    8435/    2722 : 7B                  -	MOV     A,E							;test DE for 0
    8436/    2723 : B2                      ORA     D
    8437/    2724 : C8                      RZ
    8438/    2725 : 7A                      MOV     A,D
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 142 - 9/5/2025 20:20:35


    8439/    2726 : D6 01                   SUI     01H							;sets carry
    8440/    2728 : D8                      RC
    8441/    2729 : AF                      XRA     A							;preset A to 0
    8442/    272A : BB                      CMP     E
    8443/    272B : 3C                      INR     A
    8444/    272C : D0                      RNC
    8445/    272D : 15                      DCR     D
    8446/    272E : 1D                      DCR     E
    8447/    272F : 0A                      LDAX    B
    8448/    2730 : 03                      INX     B
    8449/    2731 : BE                      CMP     M
    8450/    2732 : 23                      INX     H
    8451/    2733 : CA 22 27                JZ		-							;brif same
    8452/    2736 : 3F                      CMC									;complement carry
    8453/    2737 : C3 E9 33                JMP     L_EVAL_CARRY_IN_A
    8454/    273A :                     ;
    8455/    273A :                     ; STR$ function
    8456/    273A :                     ;	STR$(num)
    8457/    273A :                     ;
    8458/    273A :                     R_STR_FUN:								;273AH
    8459/    273A : CD E8 39                CALL    R_PRINT_FAC1_ZERO			;Convert binary number in FAC1 to ASCII at MBUFFER_R
    8460/    273D : CD 6B 27                CALL    R_STRLTI_PREDEC_HL			;find end of string
    8461/    2740 : CD 19 29                CALL    L_FREFAC
    8462/    2743 : 01 69 29                LXI     B,L_CHR_2					;continuation function
    8463/    2746 : C5                      PUSH    B
    8464/    2747 :                     L_STR_1:
    8465/    2747 : 7E                      MOV     A,M							;string length
    8466/    2748 : 23                      INX     H							;increment string ptr
    8467/    2749 : E5                      PUSH    H							;save string descriptor ptr
    8468/    274A : CD C8 27                CALL    L_RESERVE_STRBUF			;Reserve space in BASIC string buffer. Returns ptr in DE
    8469/    274D : E1                      POP     H							;restore string descriptor ptr
    8470/    274E : 4E                      MOV     C,M							;get string value ptr to BC
    8471/    274F : 23                      INX     H
    8472/    2750 : 46                      MOV     B,M
    8473/    2751 : CD 60 27                CALL    L_SET_TRSNSTR				;Save A and DE to transient string storage
    8474/    2754 : E5                      PUSH    H							;save ptr to transient string storage
    8475/    2755 : 6F                      MOV     L,A
    8476/    2756 : CD 0C 29                CALL    R_MOVE_L_BYTES				;move L bytes from BC to DE
    8477/    2759 : D1                      POP     D							;restore ptr to transient string storage
    8478/    275A : C9                      RET									;to continuation function
    8479/    275B :                     
    8480/    275B :                     L_PREP_STR_LEN1:
    8481/    275B : 3E 01                   MVI     A,01H
    8482/    275D :                     L_PREP_STR:
    8483/    275D : CD C8 27                CALL    L_RESERVE_STRBUF			;Reserve space in BASIC string buffer. Returns ptr in DE
    8484/    2760 :                     ;
    8485/    2760 :                     ; Move String Descriptor in A, DE to TRSNSTR_R
    8486/    2760 :                     ;
    8487/    2760 :                     ; IN:
    8488/    2760 :                     ;	A, DE
    8489/    2760 :                     ; OUT:
    8490/    2760 :                     ;	A		Length
    8491/    2760 :                     ;	HL		TRSNSTR_R
    8492/    2760 :                     ;
    8493/    2760 :                     L_SET_TRSNSTR:							;Save A and DE to transient string storage
    8494/    2760 : 21 89 FB                LXI     H,TRSNSTR_R					;transient string storage
    8495/    2763 : E5                      PUSH    H							;save it
    8496/    2764 : 77                      MOV     M,A							;string length
    8497/    2765 : 23                      INX     H
    8498/    2766 : 73                      MOV     M,E							;string data
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 143 - 9/5/2025 20:20:35


    8499/    2767 : 23                      INX     H
    8500/    2768 : 72                      MOV     M,D
    8501/    2769 : E1                      POP     H							;HL == TRSNSTR_R
    8502/    276A : C9                      RET
    8503/    276B :                     ;
    8504/    276B :                     ; Search string at M until DBL QUOTE found
    8505/    276B :                     ;
    8506/    276B :                     R_STRLTI_PREDEC_HL:
    8507/    276B : 2B                      DCX     H							;Pre Decrement HL
    8508/    276C :                     R_STRLTI:								;look for end of string
    8509/    276C : 06 22                   MVI     B,'"'						;22H
    8510/    276E :                     ;
    8511/    276E :                     ; Search string at M until CHAR in B found
    8512/    276E :                     ;
    8513/    276E :                     R_STRLTI_FOR_B:
    8514/    276E : 50                      MOV     D,B
    8515/    276F :                     ;
    8516/    276F :                     ; Search string at M until CHAR in B or D found and push to String Stack
    8517/    276F :                     ;
    8518/    276F :                     L_STR_LOOP:
    8519/    276F : E5                      PUSH    H							;save string ptr
    8520/    2770 : 0E FF                   MVI     C,0FFH						;preset to -1
    8521/    2772 : 23                  -	INX     H
    8522/    2773 : 7E                      MOV     A,M							;get next char
    8523/    2774 : 0C                      INR     C							;count - 1
    8524/    2775 : B7                      ORA     A
    8525/    2776 : CA 81 27                JZ      +							;brif end of line
    8526/    2779 : BA                      CMP     D
    8527/    277A : CA 81 27                JZ      +							;brif D found
    8528/    277D : B8                      CMP     B
    8529/    277E : C2 72 27                JNZ     -							;loop back if B not found
    8530/    2781 :                     ; A == 0 or A == D or A == B
    8531/    2781 : FE 22               +	CPI     '"'
    8532/    2783 : CC 58 08                CZ      L_CHRGTR					;Get next non-white char from M
    8533/    2786 : E3                      XTHL								;text ptr to stack. string ptr to HL
    8534/    2787 : 23                      INX     H							;skip '"'
    8535/    2788 : EB                      XCHG
    8536/    2789 : 79                      MOV     A,C							;string length
    8537/    278A : CD 60 27                CALL    L_SET_TRSNSTR				;Save A and DE to transient string storage
    8538/    278D :                     ;
    8539/    278D :                     ; Store transient string ptr to integer FAC and add to String Stack.
    8540/    278D :                     ;
    8541/    278D :                     ; text ptr on stack.	
    8542/    278D :                     ;
    8543/    278D :                     L_STRSTK_ADD:
    8544/    278D : 11 89 FB                LXI     D,TRSNSTR_R					;transient string storage
    8545/    2790 : 3E D5                   MVI     A,0D5H						;TODO A unused?
    8546/    2792 : 2A 69 FB                LHLD    TEMPPT_R					;current String Stack ptr (points to next free entry)
    8547/    2795 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
    8548/    2798 : 3E 03                   MVI     A,03H						;type STRING
    8549/    279A : 32 65 FB                STA     VALTYP_R					;Type of last expression used
    8550/    279D : CD 65 34                CALL    R_MOVE_TYP_BYTES_INC		;3 bytes from (DE) to M. DE & HL incremented by 3
    8551/    27A0 :                     ; HL is new TEMPPT_R 
    8552/    27A0 :                     ; TODO DE already is TEMPST_R+33 since TRSNSTR_R+3 == TEMPST_R+33
    8553/    27A0 : 11 8C FB                LXI     D,TEMPST_R+33				;0FB8CH: String Stack Area upper limit
    8554/    27A3 : (MACRO)                 COMPAR								;Compare HL and TRSNSTR_R+3: HL - DE
    8555/    27A4 : 22 69 FB                SHLD    TEMPPT_R					;set new String Stack ptr
    8556/    27A7 : E1                      POP     H							;restore text ptr
    8557/    27A8 : 7E                      MOV     A,M							;get next char
    8558/    27A9 : C0                      RNZ									;COMPAR result
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 144 - 9/5/2025 20:20:35


    8559/    27AA : 11 10 00                LXI     D,0010H						;String Stack Overflow if TRSNSTR_R+3 reached
    8560/    27AD : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 16
    8561/    27B0 :                     
    8562/    27B0 :                     R_PRINT_STRING_PREINC_HL:
    8563/    27B0 : 23                      INX     H
    8564/    27B1 :                     ;
    8565/    27B1 :                     ; Print buffer at M until NULL or '"'
    8566/    27B1 :                     ;
    8567/    27B1 :                     R_PRINT_STRING:							;27B1H
    8568/    27B1 : CD 6B 27                CALL    R_STRLTI_PREDEC_HL
    8569/    27B4 :                     L_PRINT_LST_STR:
    8570/    27B4 : CD 19 29                CALL    L_FREFAC
    8571/    27B7 : CD 52 34                CALL    L_LOAD_STR_M				;load D & BC
    8572/    27BA : 14                      INR     D							;pre-increment length
    8573/    27BB : 15                  -	DCR     D							;length
    8574/    27BC : C8                      RZ    								;retif 0 
    8575/    27BD : 0A                      LDAX    B							;get string char
    8576/    27BE : (MACRO)                 OUTCHR								;Send character in A to screen/printer
    8577/    27BF : FE 0D                   CPI     0DH							;CR
    8578/    27C1 : CC D1 4B                CZ      L_RECORD_CR
    8579/    27C4 : 03                      INX     B
    8580/    27C5 : C3 BB 27                JMP     -
    8581/    27C8 :                     ;
    8582/    27C8 :                     ; Reserve space in BASIC string buffer
    8583/    27C8 :                     ;
    8584/    27C8 :                     ; STRBUF_R holds a pointer to the start of the String Buffer Area
    8585/    27C8 :                     ; MEMSIZ_R holds a pointer to the end of the String Buffer Area
    8586/    27C8 :                     ; String buffer area grows from top to bottom
    8587/    27C8 :                     ; FRETOP_R holds a pointer to the free area of the String Buffer Area
    8588/    27C8 :                     ;
    8589/    27C8 :                     ; IN:
    8590/    27C8 :                     ;	A		string length
    8591/    27C8 :                     ;
    8592/    27C8 :                     ; OUT:
    8593/    27C8 :                     ;	DE		ptr to reserved string space
    8594/    27C8 :                     ;
    8595/    27C8 :                     L_GETSPA:
    8596/    27C8 :                     L_RESERVE_STRBUF:
    8597/    27C8 : B7                      ORA     A							;set flags for string length
    8598/    27C9 : (MACRO)             	SKIP_BYTE_INST_C					;skip POP PSW
    8599/    27CA :                     L_TRYGI2:								;used as continuation function w/ PSW pushed
    8600/    27CA : F1                      POP     PSW
    8601/    27CB : F5                      PUSH    PSW							;save length and flags
    8602/    27CC : 2A 78 F6                LHLD    STRBUF_R					;ptr to start of BASIC string buffer to DE
    8603/    27CF : EB                      XCHG
    8604/    27D0 : 2A 8C FB                LHLD    FRETOP_R					;Pointer to free area in BASIC string buffer to HL
    8605/    27D3 : 2F                      CMA  								;negate length 
    8606/    27D4 : 4F                      MOV     C,A							;sign extend to BC
    8607/    27D5 : 06 FF                   MVI     B,0FFH
    8608/    27D7 : 09                      DAD     B							;subtract length+1 from FRETOP_R
    8609/    27D8 : 23                      INX     H							;correct for +1
    8610/    27D9 : (MACRO)                 COMPAR								;Compare new FRETOP_R with buffer start: HL - DE
    8611/    27DA : DA E4 27                JC      L_GARBAG					;brif buffer overflow
    8612/    27DD : 22 8C FB                SHLD    FRETOP_R					;update Pointer to current location in BASIC string buffer
    8613/    27E0 : 23                      INX     H							;ptr to string value ptr
    8614/    27E1 : EB                      XCHG								;BASIC string buffer pointer back to HL
    8615/    27E2 :                     L_POP_PSW_RET:							;tail merge entry
    8616/    27E2 : F1                      POP     PSW							;remove length and flags
    8617/    27E3 : C9                      RET
    8618/    27E4 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 145 - 9/5/2025 20:20:35


    8619/    27E4 :                     ; no space for requested string length in BASIC string buffer area
    8620/    27E4 :                     ; do garbage collection
    8621/    27E4 :                     ;
    8622/    27E4 :                     L_GARBAG:
    8623/    27E4 : F1                  	POP     PSW							;get length and flags back
    8624/    27E5 : 11 0E 00                LXI     D,000EH
    8625/    27E8 : CA 5D 04                JZ      R_GEN_ERR_IN_E				;brif length == 0: Generate out of string space error
    8626/    27EB : BF                      CMP     A
    8627/    27EC : F5                      PUSH    PSW
    8628/    27ED : 01 CA 27                LXI     B,L_TRYGI2					;continuation function
    8629/    27F0 : C5                      PUSH    B
    8630/    27F1 :                     L_GARBA2:
    8631/    27F1 : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer. Also end of dynamic Strings Buffer
    8632/    27F4 :                     L_FNDVAR:
    8633/    27F4 : 22 8C FB                SHLD    FRETOP_R					;reset free ptr in BASIC string buffer
    8634/    27F7 : 21 00 00                LXI     H,0							;0 on stack
    8635/    27FA : E5                      PUSH    H
    8636/    27FB : 2A B6 FB                LHLD    STRGEND_R  					;Unused memory pointer
    8637/    27FE : E5                      PUSH    H
    8638/    27FF : 21 6B FB                LXI     H,TEMPST_R					;String Temp Area
    8639/    2802 :                     L_TVAR:									;used as continuation function
    8640/    2802 : EB                      XCHG
    8641/    2803 : 2A 69 FB                LHLD    TEMPPT_R					;DE = String Stack ptr
    8642/    2806 : EB                      XCHG
    8643/    2807 : (MACRO)                 COMPAR								;Compare TEMPPT_R with init value: HL - DE
    8644/    2808 : 01 02 28                LXI     B,L_TVAR					;continuation function
    8645/    280B : C2 87 28                JNZ     L_DVAR2						;DO TEMP VAR GARBAGE COLLECT
    8646/    280E :                     ; String Temps empty
    8647/    280E : 21 D9 FB                LXI     H,PRMPRV_R					;SETUP ITERATION FOR PARAMETER BLOCKS
    8648/    2811 : 22 E2 FB                SHLD    TEMP9_R
    8649/    2814 : 2A B4 FB                LHLD    ARYTAB_R					;GET STOPPING POINT IN HL
    8650/    2817 : 22 DF FB                SHLD    ARYTA2_R					;STORE IN STOP LOCATION
    8651/    281A : 2A B2 FB                LHLD    VARTAB_R					;GET STARTING POINT IN HL
    8652/    281D :                     L_SVAR:
    8653/    281D : EB                      XCHG
    8654/    281E : 2A DF FB                LHLD    ARYTA2_R					;GET STOPPING LOCATION
    8655/    2821 : EB                      XCHG
    8656/    2822 : (MACRO)                 COMPAR								;SEE IF AT END OF SIMPS
    8657/    2823 : CA 3A 28                JZ      L_ARYVAR					;brif equal
    8658/    2826 : 7E                      MOV     A,M							;GET VALTYP
    8659/    2827 : 23                      INX     H							;BUMP POINTER TWICE
    8660/    2828 : 23                      INX     H
    8661/    2829 : 23                      INX     H							;POINT AT THE VALUE
    8662/    282A :                     ;
    8663/    282A :                     ; From mbasic 5.2
    8664/    282A :                     ;	PUSH	PSW							;SAVE VALTYP
    8665/    282A :                     ;	CALL	L_IADAHL					;AND SKIP OVER EXTRA CHARACTERS AND COUNT
    8666/    282A :                     ;	POP	PSW
    8667/    282A :                     ;
    8668/    282A : FE 03                   CPI     03H
    8669/    282C : C2 33 28                JNZ     +
    8670/    282F : CD 88 28                CALL    L_DVARS						;COLLECT IT
    8671/    2832 : AF                      XRA     A
    8672/    2833 : 5F                  +	MOV     E,A							;zero extend A to DE
    8673/    2834 : 16 00                   MVI     D,00H
    8674/    2836 : 19                      DAD     D							;add to HL
    8675/    2837 : C3 1D 28                JMP     L_SVAR						;loop
    8676/    283A :                     
    8677/    283A :                     L_ARYVAR:
    8678/    283A : 2A E2 FB                LHLD    TEMP9_R						;ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 146 - 9/5/2025 20:20:35


    8679/    283D : (MACRO)             	GETDEFROMMNOINC
    8680/    2840 : 7A                      MOV     A,D							;test DE
    8681/    2841 : B3                      ORA     E
    8682/    2842 : 2A B4 FB                LHLD    ARYTAB_R					;ptr to Start of array table
    8683/    2845 : CA 5C 28                JZ      L_ARYVA4					;brif DE == 0: GARBAGE COLLECT ARRAYS
    8684/    2848 : EB                      XCHG
    8685/    2849 : 22 E2 FB                SHLD    TEMP9_R
    8686/    284C : 23                      INX     H							;SKIP CHAIN POINTER
    8687/    284D : 23                      INX     H
    8688/    284E : (MACRO)             	GETDEFROMM							;PICK UP THE LENGTH
    8689/    2852 : EB                      XCHG								;SET DE= ACTUAL END ADDRESS BY ADDING BASE TO LENGTH
    8690/    2853 : 19                      DAD     D
    8691/    2854 : 22 DF FB                SHLD    ARYTA2_R					;SET UP STOP LOCATION
    8692/    2857 : EB                      XCHG
    8693/    2858 : C3 1D 28                JMP     L_SVAR
    8694/    285B :                     ;
    8695/    285B :                     ; loop back point from below
    8696/    285B :                     ;
    8697/    285B :                     L_ARYVA2:
    8698/    285B : C1                      POP     B							;cleanup stack
    8699/    285C :                     ;
    8700/    285C :                     ; IN:
    8701/    285C :                     ;	HL
    8702/    285C :                     ;
    8703/    285C :                     L_ARYVA4:
    8704/    285C : EB                      XCHG								;SAVE ARYVAR IN DE
    8705/    285D : 2A B6 FB                LHLD    STRGEND_R					;GET END OF ARRAYS
    8706/    2860 : EB                      XCHG
    8707/    2861 : (MACRO)                 COMPAR								;Compare Unused memory pointer and HL: HL - DE
    8708/    2862 : CA A8 28                JZ      L_GRBPAS					;brif equal
    8709/    2865 : 7E                      MOV     A,M							;GET THE VALUE TYPE INTO A
    8710/    2866 :                     ; Code differs from mbasic 5.2
    8711/    2866 : 23                      INX     H
    8712/    2867 : CD 50 34                CALL    R_SNGL_DECB_EQ_M			;Reverse load single precision at M to DEBC
    8713/    286A :                     ; end of code difference
    8714/    286A : E5                      PUSH    H							;SAVE POINTER TO DIMS
    8715/    286B : 09                      DAD     B							;ADD TO CURRENT POINTER POSITION
    8716/    286C : FE 03                   CPI     03H							;SEE IF ITS A STRING
    8717/    286E : C2 5B 28                JNZ     L_ARYVA2					;loop back
    8718/    2871 : 22 90 FB                SHLD    TEMP8_R						;SAVE END OF ARRAY
    8719/    2874 : E1                      POP     H							;GET BACK CURRENT POSITION
    8720/    2875 : 4E                      MOV     C,M							;PICK UP NUMBER OF DIMS
    8721/    2876 : 06 00                   MVI     B,00H
    8722/    2878 : 09                      DAD     B							;GO PAST DIMS BY ADDING ON TWICE #DIMS (2 BYTE GUYS)
    8723/    2879 : 09                      DAD     B
    8724/    287A : 23                      INX     H							;ONE MORE TO ACCOUNT FOR #DIMS
    8725/    287B :                     L_ARYSTR:								;used as continuation function
    8726/    287B : EB                      XCHG								;SAVE CURRENT POSIT IN [D,E]
    8727/    287C : 2A 90 FB                LHLD    TEMP8_R						;GET END OF ARRAY
    8728/    287F : EB                      XCHG								;FIX HL BACK TO CURRENT
    8729/    2880 : (MACRO)                 COMPAR								;HL - DE
    8730/    2881 : CA 5C 28                JZ      L_ARYVA4						;brif equal
    8731/    2884 : 01 7B 28                LXI     B,L_ARYSTR					;ADDR OF WHERE TO RETURN TO
    8732/    2887 :                     L_DVAR2:
    8733/    2887 : C5                      PUSH    B							;GOES ON STACK
    8734/    2888 :                     L_DVARS:
    8735/    2888 : AF                      XRA     A							;test length
    8736/    2889 : B6                      ORA     M							;SEE IF ITS THE NULL STRING
    8737/    288A : 23                      INX     H
    8738/    288B : (MACRO)             	GETDEFROMM							;DE=POINTER AT THE VALUE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 147 - 9/5/2025 20:20:35


    8739/    288F : C8                      RZ									;NULL STRING, RETURN
    8740/    2890 : 44                      MOV     B,H							;save HL
    8741/    2891 : 4D                      MOV     C,L
    8742/    2892 : 2A 8C FB                LHLD    FRETOP_R					;Pointer to current location in BASIC string buffer
    8743/    2895 : (MACRO)                 COMPAR								;HL - DE
    8744/    2896 : 60                      MOV     H,B							;restore HL
    8745/    2897 : 69                      MOV     L,C
    8746/    2898 : D8                      RC									;IF NOT, NO NEED TO MESS WITH IT FURTHUR
    8747/    2899 : E1                      POP     H							;GET RETURN ADDRESS OFF STACK
    8748/    289A : E3                      XTHL								;GET MAX SEEN SO FAR & SAVE RETURN ADDRESS
    8749/    289B : (MACRO)                 COMPAR								;Compare DE and HL reversed: HL - DE
    8750/    289C : E3                      XTHL								;SAVE MAX SEEN & GET RETURN ADDRESS OFF STACK
    8751/    289D : E5                      PUSH    H							;SAVE RETURN ADDRESS BACK
    8752/    289E : 60                      MOV     H,B							;HL = BC
    8753/    289F : 69                      MOV     L,C
    8754/    28A0 : D0                      RNC									;IF NOT, LETS LOOK AT NEXT VAR
    8755/    28A1 : C1                      POP     B							;GET RETURN ADDR OFF STACK
    8756/    28A2 : F1                      POP     PSW							;POP OFF MAX SEEN AND VARIABLE POINTER
    8757/    28A3 : F1                      POP     PSW
    8758/    28A4 : E5                      PUSH    H							;SAVE NEW VARIABLE POINTER
    8759/    28A5 : D5                      PUSH    D							;AND NEW MAX POINTER
    8760/    28A6 : C5                      PUSH    B							;SAVE RETURN ADDRESS BACK
    8761/    28A7 : C9                      RET									;AND RETURN
    8762/    28A8 :                     ;
    8763/    28A8 :                     ; HERE WHEN MADE ONE COMPLETE PASS THRU STRING VARS
    8764/    28A8 :                     ;
    8765/    28A8 :                     L_GRBPAS:
    8766/    28A8 : D1                      POP     D							;POP OFF MAX POINTER
    8767/    28A9 : E1                      POP     H							;AND GET VARIABLE POINTER
    8768/    28AA : 7C                      MOV     A,H							;test HL
    8769/    28AB : B5                      ORA     L							;SEE IF ZERO POINTER
    8770/    28AC : C8                      RZ									;IF END OF COLLECTION, THEN MAYBE RETURN TO GETSPA
    8771/    28AD : 2B                      DCX     H							;CURRENTLY JUST PAST THE DESCRIPTOR
    8772/    28AE : 46                      MOV     B,M							;get BC from M
    8773/    28AF : 2B                      DCX     H
    8774/    28B0 : 4E                      MOV     C,M							;BC=POINTER AT STRING DATA
    8775/    28B1 : E5                      PUSH    H							;SAVE THIS LOCATION SO THE POINTER
    8776/    28B2 :                     										;CAN BE UPDATED AFTER THE STRING IS MOVED
    8777/    28B2 : 2B                      DCX     H
    8778/    28B3 : 6E                      MOV     L,M							;L=STRING LENGTH
    8779/    28B4 : 26 00                   MVI     H,00H
    8780/    28B6 : 09                      DAD     B							;HL=POINTER BEYOND STRING
    8781/    28B7 : 50                      MOV     D,B							;copy BC to DE
    8782/    28B8 : 59                      MOV     E,C							;DE=ORIGINAL POINTER
    8783/    28B9 : 2B                      DCX     H							;DON'T MOVE ONE BEYOND STRING
    8784/    28BA : 44                      MOV     B,H							;GET TOP OF STRING IN BC
    8785/    28BB : 4D                      MOV     C,L
    8786/    28BC : 2A 8C FB                LHLD    FRETOP_R					;GET TOP OF FREE SPACE
    8787/    28BF : CD F3 3E                CALL    L_CPY_BC_TO_HL				;L_BLTUC MOVE STRING
    8788/    28C2 : E1                      POP     H							;GET BACK POINTER TO DESC.
    8789/    28C3 : 71                      MOV     M,C							;SAVE FIXED ADDR
    8790/    28C4 : 23                      INX     H							;MOVE POINTER
    8791/    28C5 : 70                      MOV     M,B							;HIGH PART
    8792/    28C6 : 60                      MOV     H,B							;HL=NEW POINTER
    8793/    28C7 : 69                      MOV     L,C
    8794/    28C8 : 2B                      DCX     H							;FIX UP FRETOP
    8795/    28C9 : C3 F4 27                JMP     L_FNDVAR					;AND TRY TO FIND HIGH AGAIN
    8796/    28CC :                     ;
    8797/    28CC :                     ;string concatenation
    8798/    28CC :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 148 - 9/5/2025 20:20:35


    8799/    28CC :                     L_STR_CONCAT:
    8800/    28CC : C5                      PUSH    B
    8801/    28CD : E5                      PUSH    H
    8802/    28CE : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    8803/    28D1 : E3                      XTHL
    8804/    28D2 : CD 1C 0F                CALL    L_EVAL				  	  ;Evaluate function at M
    8805/    28D5 : E3                      XTHL
    8806/    28D6 : CD D9 35                CALL    L_CHKSTR
    8807/    28D9 : 7E                      MOV     A,M
    8808/    28DA : E5                      PUSH    H
    8809/    28DB : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
    8810/    28DE : E5                      PUSH    H
    8811/    28DF : 86                      ADD     M							;new string length
    8812/    28E0 : 11 0F 00                LXI     D,000FH
    8813/    28E3 : DA 5D 04                JC      R_GEN_ERR_IN_E				;Generate error 15. if overflow
    8814/    28E6 : CD 5D 27                CALL    L_PREP_STR					;Reserve String space and set Transitory String
    8815/    28E9 : D1                      POP     D
    8816/    28EA : CD 1D 29                CALL    L_FRETMP					;Get pointer to stack string (Len + address). POP based on DE
    8817/    28ED : E3                      XTHL
    8818/    28EE : CD 1C 29                CALL    L_FRETM2
    8819/    28F1 : E5                      PUSH    H
    8820/    28F2 : 2A 8A FB                LHLD    TRSNSTR_R+1
    8821/    28F5 : EB                      XCHG
    8822/    28F6 : CD 04 29                CALL    R_MEMCPY_CALL_ARGS       	;Memory copy using args following the CALL statement
    8823/    28F9 : CD 04 29                CALL    R_MEMCPY_CALL_ARGS       	;Memory copy using args following the CALL statement
    8824/    28FC : 21 B7 0D                LXI     H,L_TSTOP					;continuation function
    8825/    28FF : E3                      XTHL								;eval entry point to stack. value on stack (textptr?) to HL
    8826/    2900 : E5                      PUSH    H							;text ptr
    8827/    2901 : C3 8D 27                JMP     L_STRSTK_ADD				;add Transient String to String Stack
    8828/    2904 :                     ;
    8829/    2904 :                     ; Memory copy using args following the CALL statement
    8830/    2904 :                     ;
    8831/    2904 :                     ; IN:
    8832/    2904 :                     ;	DE		memory ptr
    8833/    2904 :                     ;
    8834/    2904 :                     R_MEMCPY_CALL_ARGS:						;2904H
    8835/    2904 : E1                      POP     H							;return address
    8836/    2905 : E3                      XTHL								;previously pushed ptr to HL, return address to stack
    8837/    2906 : 7E                      MOV     A,M							;length
    8838/    2907 : 23                      INX     H
    8839/    2908 : 4E                      MOV     C,M							;string data ptr to BC
    8840/    2909 : 23                      INX     H
    8841/    290A : 46                      MOV     B,M
    8842/    290B : 6F                      MOV     L,A							;store length
    8843/    290C :                     ;
    8844/    290C :                     ;Move L bytes from (BC) to (DE)
    8845/    290C :                     ;
    8846/    290C :                     ;
    8847/    290C :                     ; IN:
    8848/    290C :                     ;	L		String Length
    8849/    290C :                     ;	BC		source
    8850/    290C :                     ;	DE		destination
    8851/    290C :                     ;
    8852/    290C :                     R_MOVE_L_BYTES:
    8853/    290C : 2C                      INR     L							;test length
    8854/    290D : 2D                  -	DCR     L							;decrement length
    8855/    290E : C8                      RZ									;retif length now 0
    8856/    290F : 0A                      LDAX    B							;char from string
    8857/    2910 : 12                      STAX    D
    8858/    2911 : 03                      INX     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 149 - 9/5/2025 20:20:35


    8859/    2912 : 13                      INX     D
    8860/    2913 : C3 0D 29                JMP     -
    8861/    2916 :                     
    8862/    2916 :                     ; 
    8863/    2916 :                     ;
    8864/    2916 :                     ; FRETMP IS PASSED A POINTER TO A STRING DESCRIPTOR IN DE
    8865/    2916 :                     ; THIS VALUE IS RETURNED IN HL. ALL THE OTHER REGISTERS ARE MODIFIED.
    8866/    2916 :                     ; A CHECK TO IS MADE TO SEE IF THE STRING DESCRIPTOR DE POINTS
    8867/    2916 :                     ; TO IS THE LAST TEMPORARY DESCRIPTOR ALLOCATED BY PUTNEW.
    8868/    2916 :                     ; IF SO, THE TEMPORARY IS FREED UP BY THE UPDATING OF TEMPPT.
    8869/    2916 :                     ; IF A TEMPORARY IS FREED UP, A FURTHER CHECK IS MADE TO SEE IF THE
    8870/    2916 :                     ; STRING DATA THAT THAT STRING TEMPORARY POINTED TO IS THE
    8871/    2916 :                     ; THE LOWEST PART OF STRING SPACE IN USE.
    8872/    2916 :                     ; IF SO, FRETMP IS UPDATED TO REFLECT THE FACT THAT THAT SPACE IS NO
    8873/    2916 :                     ; LONGER IN USE.
    8874/    2916 :                     ;
    8875/    2916 :                     ; Get pointer to most recently used string (Len + address)
    8876/    2916 :                     ; This may be pointed to by FAC1 or may from from the string stack
    8877/    2916 :                     ; 
    8878/    2916 :                     L_FRESTR:								;FREE UP TEMP & CHECK STRING
    8879/    2916 : CD D9 35                CALL    L_CHKSTR
    8880/    2919 :                     L_FREFAC:
    8881/    2919 : 2A 1A FC                LHLD    IFACLO_R					;[FAC1]
    8882/    291C :                     L_FRETM2:
    8883/    291C : EB                      XCHG								;to DE
    8884/    291D :                     ; 
    8885/    291D :                     ; Get pointer to stack string (Len + address). POP based on DE
    8886/    291D :                     ; This may point to FAC1 or may be from the string stack
    8887/    291D :                     ; 
    8888/    291D :                     L_FRETMP:
    8889/    291D : CD 35 29                CALL    L_FRETMS					;POP string from string stack if same as DE
    8890/    2920 : EB                      XCHG								;HL = [FAC1]
    8891/    2921 : C0                      RNZ									;Return if last pushed string descriptor not same as DE
    8892/    2922 :                     ; L_FRETMS returned string data ptr on top of stack in BC. String descriptor was removed from String Stack
    8893/    2922 : D5                      PUSH    D							;Save address of "POPed" string to stack
    8894/    2923 : 50                      MOV     D,B							;move string data ptr to DE
    8895/    2924 : 59                      MOV     E,C
    8896/    2925 : 1B                      DCX     D
    8897/    2926 : 4E                      MOV     C,M							;string length
    8898/    2927 : 2A 8C FB                LHLD    FRETOP_R					;Pointer to current location in BASIC string buffer
    8899/    292A : (MACRO)                 COMPAR								;[FRETOP_R] - DE
    8900/    292B : C2 33 29                JNZ     +							;brif not identical
    8901/    292E :                     ;A 0 if COMPAR returns Z
    8902/    292E : 47                      MOV     B,A							;zero extend C to BC
    8903/    292F : 09                      DAD     B
    8904/    2930 : 22 8C FB                SHLD    FRETOP_R					;update current location in BASIC string buffer
    8905/    2933 : E1                  +	POP     H
    8906/    2934 : C9                      RET
    8907/    2935 :                     ; 
    8908/    2935 :                     ; POP string from string stack if same as String Descriptor in DE
    8909/    2935 :                     ; TEMPST_R grows up. TEMPPT_R points to first free entry
    8910/    2935 :                     ; each entry is 3 bytes. Max 10 entries.
    8911/    2935 :                     ;
    8912/    2935 :                     ; IN:
    8913/    2935 :                     ;	DE		Target String Descriptor
    8914/    2935 :                     ;
    8915/    2935 :                     ; OUT:
    8916/    2935 :                     ;	Z		Clr if stack empty
    8917/    2935 :                     ;	BC		string data ptr on top of stack
    8918/    2935 :                     ;	HL		ptr to most recently pushed string descriptor
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 150 - 9/5/2025 20:20:35


    8919/    2935 :                     ; 
    8920/    2935 :                     L_FRETMS:
    8921/    2935 : 2A 69 FB                LHLD    TEMPPT_R					;String Stack address (first free)
    8922/    2938 :                     ; HL points past last pushed string descriptor
    8923/    2938 : 2B                      DCX     H							;Pre-decrement to get MSB of string address
    8924/    2939 : 46                      MOV     B,M							;Get MSB string data ptr of top entry
    8925/    293A : 2B                      DCX     H							;Decrement to LSB of string address
    8926/    293B : 4E                      MOV     C,M							;Get LSB string data ptr of top entry
    8927/    293C : 2B                      DCX     H							;Decrement again to point to string length of top entry
    8928/    293D : (MACRO)                 COMPAR								;[TEMPPT_R] - 3 - DE
    8929/    293E : C0                      RNZ									;Don't update string stack ptr if not same as target String Descriptor
    8930/    293F : 22 69 FB                SHLD    TEMPPT_R					;update String Stack ptr
    8931/    2942 : C9                      RET									;return with Z set
    8932/    2943 :                     ;
    8933/    2943 :                     ; LEN function
    8934/    2943 :                     ;
    8935/    2943 :                     R_LEN_FUN:								;2943H
    8936/    2943 : 01 D1 10                LXI     B,L_LD_FAC1_BYTE			;insert continuation function
    8937/    2946 : C5                      PUSH    B
    8938/    2947 :                     L_GET_STR:
    8939/    2947 : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
    8940/    294A : AF                      XRA     A
    8941/    294B : 57                      MOV     D,A							;clear D
    8942/    294C : 7E                      MOV     A,M							;get length
    8943/    294D : B7                      ORA     A							;set flags
    8944/    294E : C9                      RET
    8945/    294F :                     ;
    8946/    294F :                     ; ASC function
    8947/    294F :                     ;
    8948/    294F :                     ; int = ASC(STRING)
    8949/    294F :                     ;
    8950/    294F :                     R_ASC_FUN:								;294FH
    8951/    294F : 01 D1 10                LXI     B,L_LD_FAC1_BYTE				;insert continuation function
    8952/    2952 : C5                      PUSH    B
    8953/    2953 :                     L_GET_FIRST_CHAR:
    8954/    2953 : CD 47 29                CALL    L_GET_STR					;get string. Returns length in A
    8955/    2956 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error if empty string
    8956/    2959 : 23                      INX     H							;get ptr to string data in DE
    8957/    295A : (MACRO)             	GETDEFROMMNOINC
    8958/    295D : 1A                      LDAX    D							;load first char
    8959/    295E : C9                      RET
    8960/    295F :                     ;
    8961/    295F :                     ; CHR$ function
    8962/    295F :                     ;
    8963/    295F :                     ; txt ptr on stack
    8964/    295F :                     ;
    8965/    295F :                     R_CHR_FUN:								;295FH
    8966/    295F : CD 5B 27                CALL    L_PREP_STR_LEN1
    8967/    2962 : CD 31 11                CALL    L_CONINT					;result in E
    8968/    2965 :                     L_CHR_1:
    8969/    2965 : 2A 8A FB                LHLD    TRSNSTR_R+1					;Transitory String data ptr
    8970/    2968 : 73                      MOV     M,E							;store char value
    8971/    2969 :                     L_CHR_2:
    8972/    2969 : C1                      POP     B							;remove return address
    8973/    296A : C3 8D 27                JMP     L_STRSTK_ADD
    8974/    296D :                     ;
    8975/    296D :                     ; STRING$ function
    8976/    296D :                     ;
    8977/    296D :                     ; STRING$(length, char): Creates a string of length "length" made up exclusively of "char"
    8978/    296D :                     ;	char can be a string or a number
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 151 - 9/5/2025 20:20:35


    8979/    296D :                     ;
    8980/    296D :                     R_STRING_FUN:							;296DH
    8981/    296D : (MACRO)                 CHRGET								;Get next non-white char from M
    8982/    296E : (MACRO)             	SYNCHK	'('
    8983/    2970 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1: length to E
    8984/    2973 : D5                      PUSH    D							;save length
    8985/    2974 : (MACRO)             	SYNCHK	','
    8986/    2976 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine: char
    8987/    2979 : (MACRO)             	SYNCHK	')'
    8988/    297B : E3                      XTHL								;txt ptr to stack Length to HL
    8989/    297C : E5                      PUSH    H							;save length
    8990/    297D : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    8991/    297E : CA 87 29                JZ      +							;brif STRING type
    8992/    2981 : CD 31 11                CALL    L_CONINT					;evaluate char as an ascii code to A
    8993/    2984 : C3 8A 29                JMP     L_STRING_1
    8994/    2987 :                     
    8995/    2987 : CD 53 29            +	CALL    L_GET_FIRST_CHAR			;get first char of string to A
    8996/    298A :                     L_STRING_1:
    8997/    298A : D1                      POP     D							;restore length
    8998/    298B : CD 93 29                CALL    L_FILL_STR
    8999/    298E :                     ;
    9000/    298E :                     ; SPACE$ function
    9001/    298E :                     ;	SPACE$(num):  Returns a string of length "num" that's entirely made up of spaces.
    9002/    298E :                     ;
    9003/    298E :                     R_SPACE_FUN:							;298EH
    9004/    298E : CD 31 11                CALL    L_CONINT					;evaluate num to E
    9005/    2991 : 3E 20                   MVI     A,' '
    9006/    2993 :                     L_FILL_STR:
    9007/    2993 : F5                      PUSH    PSW							;save ' ' or char from STRING$
    9008/    2994 : 7B                      MOV     A,E							;length
    9009/    2995 : CD 5D 27                CALL    L_PREP_STR					;Reserve String space and set Transitory String
    9010/    2998 : 47                      MOV     B,A							;length to B
    9011/    2999 : F1                      POP     PSW							;restore char
    9012/    299A : 04                      INR     B							;test B
    9013/    299B : 05                      DCR     B
    9014/    299C : CA 69 29                JZ      L_CHR_2						;brif B == 0
    9015/    299F : 2A 8A FB                LHLD    TRSNSTR_R+1					;Transitory String data ptr to HL
    9016/    29A2 :                     ; fill Transitory String with char in A
    9017/    29A2 : 77                  -	MOV     M,A							;store space
    9018/    29A3 : 23                      INX     H							;next
    9019/    29A4 : 05                      DCR     B							;count
    9020/    29A5 : C2 A2 29                JNZ     -
    9021/    29A8 : C3 69 29                JMP     L_CHR_2						;remove return address and jmp to L_STRSTK_ADD
    9022/    29AB :                     ;
    9023/    29AB :                     ; LEFT$ function
    9024/    29AB :                     ;	 LEFT$(str,count): Returns the leftmost "count" characters from "str"
    9025/    29AB :                     ;
    9026/    29AB :                     R_LEFT_FUN:								;29ABH
    9027/    29AB : CD 2F 2A                CALL    L_PROCESS_STR_ARG1			;process (str,count)
    9028/    29AE : AF                      XRA     A
    9029/    29AF :                     L_LEFT_STR_1:
    9030/    29AF : E3                      XTHL
    9031/    29B0 : 4F                      MOV     C,A
    9032/    29B1 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
    9033/    29B2 :                     L_LEFT_STR_2:
    9034/    29B2 : E5                      PUSH    H
    9035/    29B3 :                     L_LEFT_STR_3:							;continuation function
    9036/    29B3 : E5                      PUSH    H
    9037/    29B4 : 7E                      MOV     A,M
    9038/    29B5 : B8                      CMP     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 152 - 9/5/2025 20:20:35


    9039/    29B6 : DA BB 29                JC      +							;brif M < B
    9040/    29B9 : 78                      MOV     A,B							;set minimum B bytes
    9041/    29BA : (MACRO)             	SKIP_2BYTES_INST_DE
    9042/    29BB : 0E 00               +	MVI     C,00H
    9043/    29BD : C5                      PUSH    B
    9044/    29BE : CD C8 27                CALL    L_RESERVE_STRBUF			;Reserve space in BASIC string buffer. Returns ptr in DE
    9045/    29C1 : C1                      POP     B
    9046/    29C2 : E1                      POP     H
    9047/    29C3 : E5                      PUSH    H
    9048/    29C4 : 23                      INX     H
    9049/    29C5 : 46                      MOV     B,M
    9050/    29C6 : 23                      INX     H
    9051/    29C7 : 66                      MOV     H,M
    9052/    29C8 : 68                      MOV     L,B
    9053/    29C9 : 06 00                   MVI     B,00H
    9054/    29CB : 09                      DAD     B
    9055/    29CC : 44                      MOV     B,H							;Src ptr to BC
    9056/    29CD : 4D                      MOV     C,L
    9057/    29CE : CD 60 27                CALL    L_SET_TRSNSTR				;Save A and DE to transient string storage
    9058/    29D1 : 6F                      MOV     L,A							;length
    9059/    29D2 : CD 0C 29                CALL    R_MOVE_L_BYTES				;move L bytes from BC to DE
    9060/    29D5 : D1                      POP     D
    9061/    29D6 : CD 1D 29                CALL    L_FRETMP					;Get pointer to stack string (Len + address). POP based on DE
    9062/    29D9 : C3 8D 27                JMP     L_STRSTK_ADD
    9063/    29DC :                     ;
    9064/    29DC :                     ; RIGHT$ function
    9065/    29DC :                     ;	RIGHT$(str,count): Returns the "count" rightmost characters of "str"
    9066/    29DC :                     ;
    9067/    29DC :                     R_RIGHT_FUN:							;29DCH
    9068/    29DC : CD 2F 2A                CALL    L_PROCESS_STR_ARG1			;process (str,count)
    9069/    29DF : D1                      POP     D
    9070/    29E0 : D5                      PUSH    D
    9071/    29E1 : 1A                      LDAX    D
    9072/    29E2 : 90                      SUB     B
    9073/    29E3 : C3 AF 29                JMP     L_LEFT_STR_1				;join R_LEFT_FUN
    9074/    29E6 :                     ;
    9075/    29E6 :                     ; MID$ function in expression
    9076/    29E6 :                     ;	MID$(str,pos)
    9077/    29E6 :                     ;	MID$(str,pos,length)
    9078/    29E6 :                     ;
    9079/    29E6 :                     ; Returns "length" characters of "str" beginning at "pos".
    9080/    29E6 :                     ; Reads to the end of the string if "length" is not supplied.
    9081/    29E6 :                     ;
    9082/    29E6 :                     ; See also LHSMID()
    9083/    29E6 :                     ;
    9084/    29E6 :                     R_MID_FUN:								;29E6H
    9085/    29E6 : EB                      XCHG
    9086/    29E7 : 7E                      MOV     A,M
    9087/    29E8 : CD 32 2A                CALL    L_PROCESS_STR_ARG2
    9088/    29EB : 04                      INR     B							;test B
    9089/    29EC : 05                      DCR     B
    9090/    29ED : CA DB 08                JZ      R_GEN_FC_ERROR				;brif B == 0: Generate FC error
    9091/    29F0 : C5                      PUSH    B
    9092/    29F1 : CD 3D 2B                CALL    L_GET_OPT_LEN				;get an optional length argument
    9093/    29F4 : F1                      POP     PSW
    9094/    29F5 : E3                      XTHL
    9095/    29F6 : 01 B3 29                LXI     B,L_LEFT_STR_3				;continuation function
    9096/    29F9 : C5                      PUSH    B
    9097/    29FA : 3D                      DCR     A
    9098/    29FB : BE                      CMP     M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 153 - 9/5/2025 20:20:35


    9099/    29FC : 06 00                   MVI     B,00H
    9100/    29FE : D0                      RNC
    9101/    29FF : 4F                      MOV     C,A
    9102/    2A00 : 7E                      MOV     A,M
    9103/    2A01 : 91                      SUB     C
    9104/    2A02 : BB                      CMP     E
    9105/    2A03 : 47                      MOV     B,A
    9106/    2A04 : D8                      RC
    9107/    2A05 : 43                      MOV     B,E
    9108/    2A06 : C9                      RET
    9109/    2A07 :                     ;
    9110/    2A07 :                     ; VAL function
    9111/    2A07 :                     ;
    9112/    2A07 :                     ;	Format: VAL(str)
    9113/    2A07 :                     ;
    9114/    2A07 :                     R_VAL_FUN:								;2A07H
    9115/    2A07 : CD 47 29                CALL    L_GET_STR					;get string. Returns length in A
    9116/    2A0A : CA D1 10                JZ      L_LD_FAC1_BYTE			  	;brif empty string: Load 0 (A) into FAC1
    9117/    2A0D : 5F                      MOV     E,A							;length. 
    9118/    2A0E : 23                      INX     H
    9119/    2A0F : (MACRO)             	GETHLFROMM							;get string data ptr to HL
    9120/    2A13 : E5                      PUSH    H							;save string data ptr
    9121/    2A14 : 19                      DAD     D							;index to ptr past string data. TODO Assumes D==0
    9122/    2A15 : 46                      MOV     B,M
    9123/    2A16 :                     ;
    9124/    2A16 :                     ; we temporarily modify memory past string data
    9125/    2A16 :                     ; record it in case an error occurs
    9126/    2A16 :                     ;
    9127/    2A16 : 22 7E F6                SHLD    VALSTRPTR_R					;save ptr past string data
    9128/    2A19 : 78                      MOV     A,B							;value of memory past string data
    9129/    2A1A : 32 E6 FB                STA     VALSTRDAT_R					;store 
    9130/    2A1D : 72                      MOV     M,D							;zero terminate string
    9131/    2A1E : E3                      XTHL								;end of string ptr to stack. String data ptr to HL
    9132/    2A1F : C5                      PUSH    B							;save BC (value of memory past string data)
    9133/    2A20 : 2B                      DCX     H							;pre-decrement
    9134/    2A21 : (MACRO)                 CHRGET								;Get next non-white char from M
    9135/    2A22 : CD 40 38                CALL    R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
    9136/    2A25 : 21 00 00                LXI     H,0
    9137/    2A28 : 22 7E F6                SHLD    VALSTRPTR_R					;clear ptr past string data
    9138/    2A2B : C1                      POP     B							;restore BC
    9139/    2A2C : E1                      POP     H							;restore string data ptr
    9140/    2A2D : 70                      MOV     M,B							;restore original value to location past string data
    9141/    2A2E : C9                      RET
    9142/    2A2F :                     ;
    9143/    2A2F :                     ; process (str,count)
    9144/    2A2F :                     ;
    9145/    2A2F :                     ; OUT:
    9146/    2A2F :                     ;	B
    9147/    2A2F :                     ;
    9148/    2A2F :                     L_PROCESS_STR_ARG1:
    9149/    2A2F : EB                      XCHG
    9150/    2A30 : (MACRO)             	SYNCHK	')'	
    9151/    2A32 :                     L_PROCESS_STR_ARG2:
    9152/    2A32 : C1                      POP     B
    9153/    2A33 : D1                      POP     D
    9154/    2A34 : C5                      PUSH    B
    9155/    2A35 : 43                      MOV     B,E
    9156/    2A36 : C9                      RET
    9157/    2A37 :                     ;
    9158/    2A37 :                     ; INSTR function
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 154 - 9/5/2025 20:20:35


    9159/    2A37 :                     ;	INSTR(source,search)
    9160/    2A37 :                     ;	INSTR(start,source,search)
    9161/    2A37 :                     ;
    9162/    2A37 :                     ; THIS IS THE INSTR FUNCTION. IT TAKES ONE OF TWO
    9163/    2A37 :                     ; FORMS: INSTR(I%,S1$,S2$) OR INSTR(S1$,S2$)
    9164/    2A37 :                     ; IN THE FIRST FORM THE STRING S1$ IS SEARCHED FOR THE
    9165/    2A37 :                     ; CHARACTER S2$ STARTING AT CHARACTER POSITION I%.
    9166/    2A37 :                     ; THE SECOND FORM IS IDENTICAL, EXCEPT THAT THE SEARCH
    9167/    2A37 :                     ; STARTS AT POSITION 1. INSTR RETURNS THE CHARACTER
    9168/    2A37 :                     ; POSITION OF THE FIRST OCCURANCE OF S2$ IN S1$.
    9169/    2A37 :                     ; IF S1$ IS NULL, 0 IS RETURNED. IF S2$ IS NULL, THEN
    9170/    2A37 :                     ; I% IS RETURNED, UNLESS I% .GT. LEN(S1$) IN WHICH
    9171/    2A37 :                     ; CASE 0 IS RETURNED.
    9172/    2A37 :                     ;
    9173/    2A37 :                     R_INSTR_FUN:							;2A37H
    9174/    2A37 : (MACRO)                 CHRGET								;Get next non-white char from M
    9175/    2A38 : CD A9 0D                CALL    L_FRMPRN					;EVALUATE FIRST ARG
    9176/    2A3B : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    9177/    2A3C : 3E 01                   MVI     A,01H						;set default start position on stack
    9178/    2A3E : F5                      PUSH    PSW
    9179/    2A3F : CA 53 2A                JZ      +							;brif first argument is string
    9180/    2A42 : F1                      POP     PSW							;remove default start position from stack
    9181/    2A43 : CD 31 11                CALL    L_CONINT					;FORCE ARG1 (I%) TO BE INTEGER
    9182/    2A46 : B7                      ORA     A
    9183/    2A47 : CA DB 08                JZ      R_GEN_FC_ERROR				;brif start == 0: Generate FC error
    9184/    2A4A : F5                      PUSH    PSW							;start position on stack
    9185/    2A4B : (MACRO)             	SYNCHK	','							;EAT THE COMMA
    9186/    2A4D : CD AB 0D                CALL    L_FRMEVL					;EAT FIRST STRING ARG
    9187/    2A50 : CD D9 35                CALL    L_CHKSTR					;BLOW UP IF NOT STRING
    9188/    2A53 : (MACRO)             +	SYNCHK	','							;EAT COMMA AFTER ARG
    9189/    2A55 : E5                      PUSH    H							;save txt ptr
    9190/    2A56 : 2A 1A FC                LHLD    IFACLO_R					;GET DESCRIPTOR POINTER
    9191/    2A59 : E3                      XTHL								;PUT ON STACK & GET BACK TEXT PTR
    9192/    2A5A : CD AB 0D                CALL    L_FRMEVL					;GET LAST ARG
    9193/    2A5D : (MACRO)             	SYNCHK	')'							;EAT RIGHT PAREN
    9194/    2A5F : E5                      PUSH    H							;save txt ptr
    9195/    2A60 : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
    9196/    2A63 : EB                      XCHG								;SAVE 2ND DESC. POINTER IN DE
    9197/    2A64 : C1                      POP     B							;saved txt ptr to BC (temp)
    9198/    2A65 : E1                      POP     H							;DESC. POINTER FOR S1$
    9199/    2A66 : F1                      POP     PSW							;offset
    9200/    2A67 : C5                      PUSH    B							;PUT TEXT POINTER ON BOTTOM
    9201/    2A68 : 01 3E 38                LXI     B,L_POP_HL					;"POP H & return" continuation function
    9202/    2A6B : C5                      PUSH    B							;set continuation function L_POP_HL
    9203/    2A6C : 01 D1 10                LXI     B,L_LD_FAC1_BYTE			;continuation function
    9204/    2A6F : C5                      PUSH    B							;set continuation function L_LD_FAC1_BYTE
    9205/    2A70 : F5                      PUSH    PSW							;save offset again
    9206/    2A71 : D5                      PUSH    D							;SAVE DESC. OF S2$
    9207/    2A72 : CD 1C 29                CALL    L_FRETM2					;FREE UP S1 DESC.
    9208/    2A75 : D1                      POP     D							;RESTORE DESC. S2
    9209/    2A76 : F1                      POP     PSW							;restore offset
    9210/    2A77 : 47                      MOV     B,A							;SAVE UNMODIFIED OFFSET
    9211/    2A78 : 3D                      DCR     A							;rebase
    9212/    2A79 : 4F                      MOV     C,A							;move to C
    9213/    2A7A : BE                      CMP     M							;IS IT BEYOND LENGTH OF S1?
    9214/    2A7B : 3E 00                   MVI     A,00H						;preset return value (no flags affected)
    9215/    2A7D : D0                      RNC									;retif A >= M: start position beyond length. Load A into FAC1, POP H & return
    9216/    2A7E : 1A                      LDAX    D							;GET LENGTH OF S2$
    9217/    2A7F : B7                      ORA     A							;NULL string
    9218/    2A80 : 78                      MOV     A,B							;GET OFFSET BACK
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 155 - 9/5/2025 20:20:35


    9219/    2A81 : C8                      RZ									;IF S2 NULL, RETURN OFFSET: load A into FAC1, POP H & return
    9220/    2A82 :                     ; HL points to source string descriptor
    9221/    2A82 : 7E                      MOV     A,M							;GET LENGTH OF S1$
    9222/    2A83 : 23                      INX     H							;next ptr in string
    9223/    2A84 : 46                      MOV     B,M							;get string data ptr to HL
    9224/    2A85 : 23                      INX     H
    9225/    2A86 : 66                      MOV     H,M
    9226/    2A87 : 68                      MOV     L,B
    9227/    2A88 : 06 00                   MVI     B,00H						;zero extend C (0 based starting position) to BC
    9228/    2A8A : 09                      DAD     B							;ptr to start in source string
    9229/    2A8B : 91                      SUB     C							;MAKE LENGTH OF STRING S1$ RIGHT
    9230/    2A8C : 47                      MOV     B,A							;SAVE LENGTH OF 1ST STRING IN B
    9231/    2A8D : C5                      PUSH    B							;SAVE COUNTER, OFFSET
    9232/    2A8E : D5                      PUSH    D							;PUT 2ND DESC (S2$) ON STACK
    9233/    2A8F : E3                      XTHL								;GET 2ND DESC. POINTER
    9234/    2A90 : 4E                      MOV     C,M							;SET UP LENGTH
    9235/    2A91 : 23                      INX     H							;BUMP POINTER
    9236/    2A92 : (MACRO)             	GETDEFROMMNOINC						;get address
    9237/    2A95 : E1                      POP     H							;RESTORE POINTER FOR 1ST STRING
    9238/    2A96 :                     L_INSTR_SEARCH:
    9239/    2A96 : E5                      PUSH    H							;SAVE POSITION IN SEARCH STRING
    9240/    2A97 : D5                      PUSH    D							;SAVE START OF SUBSTRING
    9241/    2A98 : C5                      PUSH    B							;SAVE WHERE WE STARTED SEARCH
    9242/    2A99 :                     ;
    9243/    2A99 :                     ; compare search string with source string, adjusted for start
    9244/    2A99 :                     ;
    9245/    2A99 : 1A                  -	LDAX    D							;GET CHAR FROM SUBSTRING
    9246/    2A9A : BE                      CMP     M							;= CHAR POINTER TO BY HL
    9247/    2A9B : C2 B7 2A                JNZ     L_INSTR_NOMATCH				;brif characters ate not equal
    9248/    2A9E : 13                      INX     D							;BUMP COMPARE POINTER
    9249/    2A9F : 0D                      DCR     C							;END OF SEARCH STRING?
    9250/    2AA0 : CA AE 2A                JZ      L_INSTR_MATCH				;brif C == 0: Found it
    9251/    2AA3 : 23                      INX     H							;BUMP POINTER INTO STRING BEING SEARCHED
    9252/    2AA4 : 05                      DCR     B							;DECREMENT LENGTH OF SEARCH STRING
    9253/    2AA5 : C2 99 2A                JNZ     -							;brif B != 0
    9254/    2AA8 :                     ;
    9255/    2AA8 :                     ; no match
    9256/    2AA8 :                     ;
    9257/    2AA8 : D1                      POP     D							;GET RID OF POINTERS
    9258/    2AA9 : D1                      POP     D							;GET RID OF GARB
    9259/    2AAA : C1                      POP     B							;idem
    9260/    2AAB :                     L_INSTR_TAIL:							;tail merge for no gain
    9261/    2AAB : D1                      POP     D
    9262/    2AAC : AF                      XRA     A							;return value
    9263/    2AAD : C9                      RET									;Load A into FAC1, POP H & return 
    9264/    2AAE :                     
    9265/    2AAE :                     L_INSTR_MATCH:
    9266/    2AAE : E1                  	POP     H							;GET RID OF GARB
    9267/    2AAF : D1                      POP     D							;GET RID OF EXCESS STACK
    9268/    2AB0 : D1                      POP     D							;idem
    9269/    2AB1 : C1                      POP     B							;GET COUNTER, OFFSET
    9270/    2AB2 : 78                      MOV     A,B							;GET ORIGINAL SOURCE COUNTER
    9271/    2AB3 : 94                      SUB     H							;SUBTRACT FINAL COUNTER
    9272/    2AB4 : 81                      ADD     C							;ADD ORIGINAL OFFSET (N1%)
    9273/    2AB5 : 3C                      INR     A							;result needs to be 1 based.
    9274/    2AB6 : C9                      RET									;Load A into FAC1, POP H & return 
    9275/    2AB7 :                     ;
    9276/    2AB7 :                     ; string characters didn't match
    9277/    2AB7 :                     ;
    9278/    2AB7 :                     L_INSTR_NOMATCH:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 156 - 9/5/2025 20:20:35


    9279/    2AB7 : C1                      POP     B							;restore all registers
    9280/    2AB8 : D1                      POP     D							;POINT TO START OF SUBSTRING
    9281/    2AB9 : E1                      POP     H							;GET BACK WHERE WE STARTED TO COMPARE
    9282/    2ABA : 23                      INX     H							;AND POINT TO NEXT CHAR
    9283/    2ABB : 05                      DCR     B							;DECR. # CHAR LEFT IN SOURCE STRING
    9284/    2ABC : C2 96 2A                JNZ     L_INSTR_SEARCH				;search some more
    9285/    2ABF : C3 AB 2A                JMP     L_INSTR_TAIL				;tail merge for no gain
    9286/    2AC2 :                     ;
    9287/    2AC2 :                     ; MID$(str, pos) = value
    9288/    2AC2 :                     ;	MID$(str,pos)=value
    9289/    2AC2 :                     ;	MID$(str,pos,length)=value
    9290/    2AC2 :                     ;
    9291/    2AC2 :                     ; Overwrites the substring defined by pos with "value".
    9292/    2AC2 :                     ; This mode always ignores "length" and simply overwrites as many
    9293/    2AC2 :                     ; characters as "value" is long. "str" is never extended.
    9294/    2AC2 :                     ; If "value" is too long, it's truncated to fit.
    9295/    2AC2 :                     ;
    9296/    2AC2 :                     LHSMID:
    9297/    2AC2 : (MACRO)             	SYNCHK	'('							;28H
    9298/    2AC4 : CD 90 47                CALL    R_FIND_VAR_ADDR				;address of str to DE
    9299/    2AC7 : CD D9 35                CALL    L_CHKSTR
    9300/    2ACA : E5                      PUSH    H							;text ptr
    9301/    2ACB : D5                      PUSH    D							;address of string
    9302/    2ACC : EB                      XCHG								;address of string to HL
    9303/    2ACD : 23                      INX     H							;skip length
    9304/    2ACE : (MACRO)             	GETDEFROMMNOINC						;string value ptr to DE
    9305/    2AD1 : 2A B6 FB                LHLD    STRGEND_R					;Get Unused memory pointer
    9306/    2AD4 : (MACRO)                 COMPAR								;HL - DE
    9307/    2AD5 : DA E9 2A                JC      +							;brif STRGEND_R < String value ptr
    9308/    2AD8 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
    9309/    2ADB : (MACRO)                 COMPAR								;HL - DE
    9310/    2ADC : D2 E9 2A                JNC     +							;brif TXTTAB_R < String value ptr
    9311/    2ADF : E1                      POP     H							;retrieve text ptr
    9312/    2AE0 : E5                      PUSH    H
    9313/    2AE1 : CD 47 27                CALL    L_STR_1
    9314/    2AE4 : E1                      POP     H							;retrieve text ptr
    9315/    2AE5 : E5                      PUSH    H
    9316/    2AE6 : CD 65 34                CALL    R_MOVE_TYP_BYTES_INC		;from (DE) to M
    9317/    2AE9 : E1                  +	POP     H
    9318/    2AEA : E3                      XTHL
    9319/    2AEB : (MACRO)             	SYNCHK	','
    9320/    2AED : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
    9321/    2AF0 : B7                      ORA     A
    9322/    2AF1 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
    9323/    2AF4 : F5                      PUSH    PSW
    9324/    2AF5 : 7E                      MOV     A,M
    9325/    2AF6 : CD 3D 2B                CALL    L_GET_OPT_LEN				;get an optional length argument
    9326/    2AF9 : D5                      PUSH    D
    9327/    2AFA : CD A4 0D                CALL    L_FRMEQL					;check for '=' and evaluate next expression
    9328/    2AFD : E5                      PUSH    H
    9329/    2AFE : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
    9330/    2B01 : EB                      XCHG
    9331/    2B02 : E1                      POP     H
    9332/    2B03 : C1                      POP     B
    9333/    2B04 : F1                      POP     PSW
    9334/    2B05 : 47                      MOV     B,A
    9335/    2B06 : E3                      XTHL
    9336/    2B07 : E5                      PUSH    H
    9337/    2B08 : 21 3E 38                LXI     H,L_POP_HL					;POP H & return continuation function
    9338/    2B0B : E3                      XTHL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 157 - 9/5/2025 20:20:35


    9339/    2B0C : 79                      MOV     A,C
    9340/    2B0D : B7                      ORA     A
    9341/    2B0E : C8                      RZ
    9342/    2B0F : 7E                      MOV     A,M
    9343/    2B10 : 90                      SUB     B
    9344/    2B11 : DA DB 08                JC      R_GEN_FC_ERROR				;Generate FC error
    9345/    2B14 : 3C                      INR     A
    9346/    2B15 : B9                      CMP     C
    9347/    2B16 : DA 1A 2B                JC      +
    9348/    2B19 : 79                      MOV     A,C
    9349/    2B1A : 48                  +	MOV     C,B
    9350/    2B1B : 0D                      DCR     C
    9351/    2B1C : 06 00                   MVI     B,00H
    9352/    2B1E : D5                      PUSH    D
    9353/    2B1F : 23                      INX     H
    9354/    2B20 : 5E                      MOV     E,M
    9355/    2B21 : 23                      INX     H
    9356/    2B22 : 66                      MOV     H,M
    9357/    2B23 : 6B                      MOV     L,E
    9358/    2B24 : 09                      DAD     B
    9359/    2B25 : 47                      MOV     B,A
    9360/    2B26 : D1                      POP     D
    9361/    2B27 : EB                      XCHG
    9362/    2B28 : 4E                      MOV     C,M
    9363/    2B29 : 23                      INX     H
    9364/    2B2A : (MACRO)             	GETHLFROMM							;get ptr to HL
    9365/    2B2E : EB                      XCHG
    9366/    2B2F : 79                      MOV     A,C
    9367/    2B30 : B7                      ORA     A
    9368/    2B31 : C8                      RZ
    9369/    2B32 : 1A                  -	LDAX    D
    9370/    2B33 : 77                      MOV     M,A
    9371/    2B34 : 13                      INX     D
    9372/    2B35 : 23                      INX     H
    9373/    2B36 : 0D                      DCR     C
    9374/    2B37 : C8                      RZ
    9375/    2B38 : 05                      DCR     B
    9376/    2B39 : C2 32 2B                JNZ     -
    9377/    2B3C : C9                      RET
    9378/    2B3D :                     ;
    9379/    2B3D :                     ; get an optional length argument
    9380/    2B3D :                     ;
    9381/    2B3D :                     ; OUT:
    9382/    2B3D :                     ;	E		Length. -1 if not present
    9383/    2B3D :                     ;
    9384/    2B3D :                     L_GET_OPT_LEN:
    9385/    2B3D : 1E FF                   MVI     E,0FFH						;preset
    9386/    2B3F : FE 29                   CPI     ')'
    9387/    2B41 : CA 49 2B                JZ      +
    9388/    2B44 : (MACRO)             	SYNCHK	','
    9389/    2B46 : CD 2E 11                CALL    L_GETBYT    				;Evaluate byte expression at M-1
    9390/    2B49 : (MACRO)             +	SYNCHK	')'	
    9391/    2B4B : C9                      RET
    9392/    2B4C :                     ;
    9393/    2B4C :                     ; FRE function
    9394/    2B4C :                     ;
    9395/    2B4C :                     ;
    9396/    2B4C :                     R_FRE_FUN:								;2B4CH
    9397/    2B4C : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer to DE
    9398/    2B4F : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 158 - 9/5/2025 20:20:35


    9399/    2B50 : 21 00 00                LXI     H,0
    9400/    2B53 : 39                      DAD     SP							;current SP to HL
    9401/    2B54 :                     ;If not string, Subtract SP - [STRGEND_R] and unsigned convert to SNGL in FAC1
    9402/    2B54 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
    9403/    2B55 : C2 BF 10                JNZ     L_SUB_DE_FROM_HL			;brif !string type: return SP - [STRGEND_R]	
    9404/    2B58 :                     ; last variable was a string
    9405/    2B58 : CD 19 29                CALL    L_FREFAC
    9406/    2B5B : CD F1 27                CALL    L_GARBA2
    9407/    2B5E : EB                      XCHG
    9408/    2B5F : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer to DE
    9409/    2B62 : EB                      XCHG
    9410/    2B63 : 2A 8C FB                LHLD    FRETOP_R					;Pointer to current location in BASIC string buffer
    9411/    2B66 : C3 BF 10                JMP     L_SUB_DE_FROM_HL			;Subtract HL - DE and unsigned convert to SNGL in FAC1
    9412/    2B69 :                     ;
    9413/    2B69 :                     ; Double precision subtract (FAC1=FAC1-FAC2)
    9414/    2B69 :                     ;
    9415/    2B69 :                     R_DBL_SUB:								;2B69H
    9416/    2B69 : 21 69 FC                LXI     H,DFACLO2_R				    ;Start of FAC2
    9417/    2B6C : 7E                      MOV     A,M							;get FAC2 exponent
    9418/    2B6D : B7                      ORA     A
    9419/    2B6E : C8                      RZ									;retif FAC2 == 0
    9420/    2B6F : EE 80                   XRI     80H							;flip sign bit
    9421/    2B71 : 77                      MOV     M,A
    9422/    2B72 : C3 7E 2B                JMP     R_DBL_ADD_1
    9423/    2B75 :                     ;
    9424/    2B75 :                     ; Double precision addition (FAC1=FAC1+M)
    9425/    2B75 :                     ;
    9426/    2B75 :                     R_DBL_ADD_M:
    9427/    2B75 : CD 61 34                CALL    R_LOAD_FAC2_FROM_M       	;Move M to FAC2 using precision at (VALTYP_R)
    9428/    2B78 :                     ;
    9429/    2B78 :                     ; Double precision addition (FAC1=FAC1+FAC2)
    9430/    2B78 :                     ;
    9431/    2B78 :                     R_DBL_ADD:								;2B78H
    9432/    2B78 : 21 69 FC                LXI     H,DFACLO2_R				    ;Start of FAC2
    9433/    2B7B : 7E                      MOV     A,M							;get FAC2 exponent
    9434/    2B7C : B7                      ORA     A
    9435/    2B7D : C8                      RZ									;retif FAC2 == 0
    9436/    2B7E :                     R_DBL_ADD_1:
    9437/    2B7E : E6 7F                   ANI     7FH							;clear sign bit FAC2
    9438/    2B80 : 47                      MOV     B,A							;save in B
    9439/    2B81 : 11 18 FC                LXI     D,DFACLO_R				    ;FAC1
    9440/    2B84 : 1A                      LDAX    D							;get FAC1 exponent
    9441/    2B85 : B7                      ORA     A
    9442/    2B86 : CA 7B 34                JZ      L_CPY_FAC2_TO_1				;brif FAC1 == 0: FAC2 is result of addition
    9443/    2B89 : E6 7F                   ANI     7FH							;clear sign bit FAC1
    9444/    2B8B : 90                      SUB     B
    9445/    2B8C : D2 A2 2B                JNC     R_DBL_ADD_2					;brif FAC1 exponent >= FAC2 exponent
    9446/    2B8F :                     ;
    9447/    2B8F :                     ; FAC1 exponent < FAC2 exponent: swap FAC1 and FAC2
    9448/    2B8F :                     ;
    9449/    2B8F : 2F                      CMA									;negate exponent delta
    9450/    2B90 : 3C                      INR     A
    9451/    2B91 : F5                      PUSH    PSW							;save exponent delta
    9452/    2B92 : E5                      PUSH    H							;save FAC2 ptr
    9453/    2B93 : 06 08                   MVI     B,08H						;8 digits
    9454/    2B95 : 1A                  -	LDAX    D							;swap [DE] & M using C
    9455/    2B96 : 4E                      MOV     C,M
    9456/    2B97 : 77                      MOV     M,A							
    9457/    2B98 : 79                      MOV     A,C
    9458/    2B99 : 12                      STAX    D							
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 159 - 9/5/2025 20:20:35


    9459/    2B9A : 13                      INX     D							;update ptrs
    9460/    2B9B : 23                      INX     H
    9461/    2B9C : 05                      DCR     B							;decrement digit count
    9462/    2B9D : C2 95 2B                JNZ     -							;brif more digits
    9463/    2BA0 : E1                      POP     H							;restore FAC2 ptr
    9464/    2BA1 : F1                      POP     PSW							;restore exponent delta
    9465/    2BA2 :                     R_DBL_ADD_2:
    9466/    2BA2 : FE 10                   CPI     10H							;compare exponent delta with 16
    9467/    2BA4 : D0                      RNC									;retif exponent delta >= 16
    9468/    2BA5 : F5                      PUSH    PSW							;save exponent delta
    9469/    2BA6 : AF                      XRA     A
    9470/    2BA7 : 32 20 FC                STA     DFACLO_R+8					;Point to extended precision portion of FAC1
    9471/    2BAA : 32 71 FC                STA     DFACLO2_R+8
    9472/    2BAD : 21 6A FC                LXI     H,DFACLO2_R+1				;point to FAC2 mantissa TODO could do INX H
    9473/    2BB0 : F1                      POP     PSW							;restore exponent delta
    9474/    2BB1 : CD AD 2C                CALL    L_SHIFT_BCD					;Shift FAC2 BCD digits based on exponent delta
    9475/    2BB4 : 21 69 FC                LXI     H,DFACLO2_R					;Start of FAC2
    9476/    2BB7 : 3A 18 FC                LDA     DFACLO_R					;exponent FAC1 
    9477/    2BBA : AE                      XRA     M							;check sign bits
    9478/    2BBB : FA DB 2B                JM      L_SUB_BCD_FAC1				;brif sign bit set: FAC1 and FAC2 have opposite signs
    9479/    2BBE : 3A 71 FC                LDA     DFACLO2_R+8
    9480/    2BC1 : 32 20 FC                STA     DFACLO_R+8					;Point to extended precision portion of FAC1
    9481/    2BC4 : CD 46 2C                CALL    R_BCD_ADD					;Add FAC2 to FAC1
    9482/    2BC7 : D2 27 2C                JNC     L_ROUND_FAC1				;Round FAC1 using extended precision portion at end of FAC1
    9483/    2BCA : EB                      XCHG
    9484/    2BCB : 7E                      MOV     A,M
    9485/    2BCC : 34                      INR     M
    9486/    2BCD : AE                      XRA     M
    9487/    2BCE : FA 55 04                JM      R_GEN_OV_ERROR				;Generate OV error
    9488/    2BD1 : CD F2 2C                CALL    L_ROTATER_FAC1				;Rotate FAC1 BCD digits right
    9489/    2BD4 : 7E                      MOV     A,M
    9490/    2BD5 : F6 10                   ORI     10H							;set bit 4
    9491/    2BD7 : 77                      MOV     M,A
    9492/    2BD8 : C3 27 2C                JMP     L_ROUND_FAC1				;Round FAC1 using extended precision portion at end of FAC1
    9493/    2BDB :                     ; 
    9494/    2BDB :                     ; FAC1 and FAC2 have opposite signs. Add using Ten's complement of FAC2
    9495/    2BDB :                     ; Normalize FAC1 such that the 1st BCD digit isn't zero
    9496/    2BDB :                     ; 
    9497/    2BDB :                     L_SUB_BCD_FAC1:
    9498/    2BDB : CD 5A 2C                CALL    L_TEN_COMPLEMENT			;Part of Normalize FAC1 routine.
    9499/    2BDE :                     L_NORM_BCD_FAC1_1:
    9500/    2BDE : 21 19 FC                LXI     H,DFACLO_R+1				;Point to BCD portion of FAC1
    9501/    2BE1 : 01 00 08                LXI     B,0800H						;Prepare to process 8 bytes, C = 0 = BCD Shift distance
    9502/    2BE4 : 7E                  -	MOV     A,M							;Test next 2 digits from FAC1
    9503/    2BE5 : B7                      ORA     A							;Test for digits "00"
    9504/    2BE6 : C2 F3 2B                JNZ     +							;brif not "00"
    9505/    2BE9 : 23                      INX     H							;Increment to next 2 digits in FAC1 - Skip this byte
    9506/    2BEA : 0D                      DCR     C							;Decrement Digit counter
    9507/    2BEB : 0D                      DCR     C							;Decrement Digit counter
    9508/    2BEC : 05                      DCR     B							;Decrement byte counter
    9509/    2BED : C2 E4 2B                JNZ     -							;brif not all bytes processed
    9510/    2BF0 :                     ; all 8 BCD digit pairs were 0
    9511/    2BF0 : C3 ED 33                JMP     L_SET_FAC_ZERO				;Initialize FAC1 to zero
    9512/    2BF3 :                     	
    9513/    2BF3 :                     ; 
    9514/    2BF3 :                     ; First non "00" BCD digit found. Test MSB for zero & adjust
    9515/    2BF3 :                     ; 
    9516/    2BF3 : E6 F0               +	ANI     0F0H						;Mask off the lower digit to see if BCD shift needed (4-bit shift)
    9517/    2BF5 : C2 FE 2B                JNZ     +							;Jump ahead if not zero MSB of this byte isn't zero
    9518/    2BF8 : E5                      PUSH    H							;Save pointer to current location in FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 160 - 9/5/2025 20:20:35


    9519/    2BF9 : CD 94 2C                CALL    L_ROTATEL_FAC1				;Rotate FAC1 1 BCD digit left to normalize starting at HL for B bytes
    9520/    2BFC : E1                      POP     H							;Restore current pointer into FAC1
    9521/    2BFD : 0D                      DCR     C                           ;Decrement the digit counter
    9522/    2BFE : 3E 08               +	MVI     A,08H         				;Prepare to calculate number of bytes with "00" that were skipped              
    9523/    2C00 : 90                      SUB     B                           ;Subtract 8 from the byte counter to test if first set of digits
    9524/    2C01 : CA 17 2C                JZ      L_SET_DEC_PNT               ;Skip copying bytes to FAC1 if no bytes	to copy (already normalized)
    9525/    2C04 : F5                      PUSH    PSW                         ;Preserve count of bytes skipped on stack
    9526/    2C05 : C5                      PUSH    B                           ;Preserve BC on stack
    9527/    2C06 : 48                      MOV     C,B                         ;Move number of bytes to copy to C
    9528/    2C07 : 11 19 FC                LXI     D,DFACLO_R+1				;Point to BCD portion of FAC1
    9529/    2C0A : CD DD 2E                CALL    R_MOVE_C_BYTES_UP			;Move C bytes from M to (DE) going UP
    9530/    2C0D : C1                      POP     B							;Restore byte counter from stack
    9531/    2C0E : F1                      POP     PSW                         ;Restore A from stack
    9532/    2C0F : 47                      MOV     B,A                         ;Move count of bytes skipped to B to use as a count to zero out the end
    9533/    2C10 : AF                      XRA     A                           ;Prepare to zero out B bytes from end of FAC1 that were shifted left
    9534/    2C11 : 12                  -	STAX    D                           ;Zero out next LSB from BCD
    9535/    2C12 : 13                      INX     D                           ;Increment to next lower BCD value in FAC1
    9536/    2C13 : 05                      DCR     B                           ;Decrement the counter
    9537/    2C14 : C2 11 2C                JNZ     -							;Loop until all bytes zeroed
    9538/    2C17 :                     ; 
    9539/    2C17 :                     ; BCD portion of FAC1 normalized. Update Decimal point location and round
    9540/    2C17 :                     ; 
    9541/    2C17 :                     L_SET_DEC_PNT:
    9542/    2C17 : 79                      MOV     A,C							;Get digit count from normalize
    9543/    2C18 : B7                      ORA     A							;Test if no bytes copied from normalize (don't need to adjust decimal point)
    9544/    2C19 : CA 27 2C                JZ      L_ROUND_FAC1				;Jump to round if BCD value was not shifted / normalized
    9545/    2C1C : 21 18 FC                LXI     H,DFACLO_R				 	;FAC1
    9546/    2C1F : 46                      MOV     B,M							;Get current sign / decimal point location
    9547/    2C20 : 86                      ADD     M							;Add number of BCD digits shifted to calcu
    9548/    2C21 : 77                      MOV     M,A                         ;Save new decimal point location
    9549/    2C22 : A8                      XRA     B                           ;Test for overflow in shift (too small)
    9550/    2C23 : FA 55 04                JM      R_GEN_OV_ERROR				;Generate OV error if 1e-66 or less
    9551/    2C26 : C8                      RZ                          		;Return if FAC1 is zero -- no need to round
    9552/    2C27 :                     ; 
    9553/    2C27 :                     ; Round FAC1 using extended precision portion at end of FAC1
    9554/    2C27 :                     ; 
    9555/    2C27 :                     L_ROUND_FAC1:
    9556/    2C27 : 21 20 FC                LXI     H,DFACLO_R+8				;Point to extended precision portion of FAC1
    9557/    2C2A : 06 07                   MVI     B,07H						;Prepare to perform rounding operation on 7 byte of BCD
    9558/    2C2C :                     L_ROUND_FAC1_1:
    9559/    2C2C : 7E                      MOV     A,M							;Get "fraction portion" of FAC1
    9560/    2C2D : FE 50                   CPI     50H							;Test for value 0.50 decimal (this is BCD)
    9561/    2C2F : D8                      RC									;Return if less than 0.50 - no rounding needed
    9562/    2C30 : 2B                      DCX     H							;Decrement to next higher BCD pair
    9563/    2C31 : AF                      XRA     A							;Clear A to perform ADD of 1 to FAC1 (to perform round up)
    9564/    2C32 : 37                      STC									;Set the carry (this is our "1")
    9565/    2C33 : 8E                  -	ADC     M							;Add Zero with carry to the next BCD pair
    9566/    2C34 : 27                      DAA                             	;Decimal adjust for BCD calculations
    9567/    2C35 : 77                      MOV     M,A                         ;Save this byte of BCD data
    9568/    2C36 : D0                      RNC                             	;Return if no more carry to additional bytes
    9569/    2C37 : 2B                      DCX     H                           ;Decrement to next higher BCD pair
    9570/    2C38 : 05                      DCR     B                           ;Decrement byte count
    9571/    2C39 : C2 33 2C                JNZ     -							;Loop until all bytes rounded (or no carry)
    9572/    2C3C : 7E                      MOV     A,M                         ;We rounded to the last byte and had Carry. Must shift decimal point.
    9573/    2C3D : 34                      INR     M                           ;Increment the decimal point position to account for carry
    9574/    2C3E : AE                      XRA     M                           ;Test for overflow during rounding
    9575/    2C3F : FA 55 04                JM      R_GEN_OV_ERROR				;Generate OV error
    9576/    2C42 : 23                      INX     H							;Increment to 1st BCD pair to change from .99 to 1.00
    9577/    2C43 : 36 10                   MVI     M,10H						;Change value to 1.0 since our "carry" was really a decimal point shift
    9578/    2C45 : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 161 - 9/5/2025 20:20:35


    9579/    2C46 :                     
    9580/    2C46 :                     ; 
    9581/    2C46 :                     ; Add FAC2 to FAC1
    9582/    2C46 :                     ; 
    9583/    2C46 :                     R_BCD_ADD:
    9584/    2C46 : 21 70 FC                LXI     H,DFACLO2_R+7				;Point to end of FAC2
    9585/    2C49 : 11 1F FC                LXI     D,DFACLO_R+7				;Point to end of FAC1
    9586/    2C4C : 06 07                   MVI     B,07H
    9587/    2C4E :                     ;
    9588/    2C4E :                     ; Add the BCD num in M to the one in (DE)
    9589/    2C4E :                     ;
    9590/    2C4E :                     R_BCD_ADD_M_TO_DE:
    9591/    2C4E : AF                      XRA     A							;Clear carry for 1st ADD
    9592/    2C4F :                     ; 
    9593/    2C4F :                     ; Add next bytes of FAC2 to FAC1
    9594/    2C4F :                     ; 
    9595/    2C4F : 1A                  -	LDAX    D							;Load first byte into A
    9596/    2C50 : 8E                      ADC     M							;ADD with carry the next byte from M
    9597/    2C51 : 27                      DAA									;preserve Carry until next ADC
    9598/    2C52 : 12                      STAX    D							;Store sum at (DE)
    9599/    2C53 : 1B                      DCX     D							;Decrement to next higher position of DE
    9600/    2C54 : 2B                      DCX     H							;Decrement to next higher position of HL
    9601/    2C55 : 05                      DCR     B							;Decrement byte counter
    9602/    2C56 : C2 4F 2C                JNZ     -							;Keep looping until byte count = 0
    9603/    2C59 : C9                      RET
    9604/    2C5A :                     	
    9605/    2C5A :                     ; 
    9606/    2C5A :                     ; FAC1 and FAC2 have opposite signs.
    9607/    2C5A :                     ; Take Ten's Complement of FAC2 and add it to FAC1
    9608/    2C5A :                     ; 
    9609/    2C5A :                     L_TEN_COMPLEMENT:
    9610/    2C5A : 21 71 FC                LXI     H,DFACLO2_R+8				;Point to extended precision portion of FAC2
    9611/    2C5D : 7E                      MOV     A,M							;Get extended precision portion to test for rounding
    9612/    2C5E : FE 50                   CPI     50H							;Compare with 50 BCD (represent 0.50)
    9613/    2C60 : C2 64 2C                JNZ     +							;brif extended precision portion of FAC2 != 0.50
    9614/    2C63 : 34                      INR     M							;Increment extended precision portion of FAC2 to 51
    9615/    2C64 : 11 20 FC            +	LXI     D,DFACLO_R+8				;Point to extended precision portion of FAC1
    9616/    2C67 : 06 08                   MVI     B,08H						;Prepare to compute ten's complement of FAC2
    9617/    2C69 : 37                      STC									;Set carry to initiate no-borrow
    9618/    2C6A : 3E 99               -	MVI     A,99H						;Load 99 BCD into A
    9619/    2C6C : CE 00                   ACI     00H							;Add carry
    9620/    2C6E : 96                      SUB     M							;Subtract extended precision portion of FAC2 from 99 BCD
    9621/    2C6F : 4F                      MOV     C,A							;Save difference in C
    9622/    2C70 : 1A                      LDAX    D							;Load next byte from FAC1
    9623/    2C71 : 81                      ADD     C							;Add difference of 99-FAC2
    9624/    2C72 : 27                      DAA									;Decimal adjust for BCD value
    9625/    2C73 : 12                      STAX    D							;Store in FAC1 (FAC1 = FAC1 + (999999999 - FAC2))
    9626/    2C74 : 1B                      DCX     D							;Decrement to next higher BCD pair for FAC1
    9627/    2C75 : 2B                      DCX     H							;Decrement to next higher BCD pair for FAC2
    9628/    2C76 : 05                      DCR     B							;Decrement byte count
    9629/    2C77 : C2 6A 2C                JNZ     -							;Keep looping until count = 0
    9630/    2C7A : D8                      RC									;Return if no borrow
    9631/    2C7B :                     ; borrow happened so negate FAC1 using Ten's Complement
    9632/    2C7B : EB                      XCHG
    9633/    2C7C : 7E                      MOV     A,M							;get exponent
    9634/    2C7D : EE 80                   XRI     80H							;flip sign bit
    9635/    2C7F : 77                      MOV     M,A							;update exponent
    9636/    2C80 : 21 20 FC                LXI     H,DFACLO_R+8				;Point to extended precision portion of FAC1
    9637/    2C83 : 06 08                   MVI     B,08H						;BCD count
    9638/    2C85 : AF                      XRA     A							;clear carry
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 162 - 9/5/2025 20:20:35


    9639/    2C86 : 3E 9A               -	MVI     A,9AH
    9640/    2C88 : 9E                      SBB     M
    9641/    2C89 : CE 00                   ACI     00H
    9642/    2C8B : 27                      DAA									;Decimal adjust
    9643/    2C8C : 3F                      CMC									;complement carry
    9644/    2C8D : 77                      MOV     M,A							;update memory
    9645/    2C8E : 2B                      DCX     H							;next
    9646/    2C8F : 05                      DCR     B							;count
    9647/    2C90 : C2 86 2C                JNZ     -
    9648/    2C93 : C9                      RET
    9649/    2C94 :                     ; 
    9650/    2C94 :                     ; Rotate FAC1 1 BCD digit left to normalize starting at HL for B bytes
    9651/    2C94 :                     ; 
    9652/    2C94 :                     L_ROTATEL_FAC1:
    9653/    2C94 : 21 20 FC                LXI     H,DFACLO_R+8				;Point to end of FAC1 (+1 to rotate in a "0")
    9654/    2C97 :                     ; 
    9655/    2C97 :                     ; Rotate M 1 BCD digit left to normalize starting at HL for B bytes
    9656/    2C97 :                     ; 
    9657/    2C97 :                     L_ROTATEL_M:
    9658/    2C97 : C5                      PUSH    B							;Preserve byte & digit count on stack
    9659/    2C98 : 50                      MOV     D,B							;save inner loop counter in D
    9660/    2C99 : 0E 04                   MVI     C,04H						;outer loop counter
    9661/    2C9B :                     L_ROTATE_LEFT_1:
    9662/    2C9B : E5                      PUSH    H							;save M ptr
    9663/    2C9C : B7                      ORA     A							;clear carry
    9664/    2C9D : 7E                  -	MOV     A,M							;rotate M left
    9665/    2C9E : 17                      RAL
    9666/    2C9F : 77                      MOV     M,A
    9667/    2CA0 : 2B                      DCX     H							;backup ptr
    9668/    2CA1 : 05                      DCR     B							;decrement counter
    9669/    2CA2 : C2 9D 2C                JNZ     -
    9670/    2CA5 : 42                      MOV     B,D							;reset inner loop counter
    9671/    2CA6 : E1                      POP     H							;restore M ptr
    9672/    2CA7 : 0D                      DCR     C							;decrement counter
    9673/    2CA8 : C2 9B 2C                JNZ     L_ROTATE_LEFT_1
    9674/    2CAB : C1                      POP     B							;restore byte & digit count 
    9675/    2CAC : C9                      RET
    9676/    2CAD :                     ;
    9677/    2CAD :                     ; Shift BCD digits of DBL BCD number pointed to by HL
    9678/    2CAD :                     ;
    9679/    2CAD :                     ; IN:
    9680/    2CAD :                     ;	A		exponent delta between FAC1 and FAC2
    9681/    2CAD :                     ;	HL		FAC2 mantissa ptr
    9682/    2CAD :                     ;
    9683/    2CAD :                     L_SHIFT_BCD:
    9684/    2CAD : B7                      ORA     A							;clear carry
    9685/    2CAE : 1F                      RAR									;bit 0 to carry. bit 7 now 0
    9686/    2CAF :                     ; A is now exponent delta /2
    9687/    2CAF : F5                      PUSH    PSW							;first save
    9688/    2CB0 : B7                      ORA     A							;test A
    9689/    2CB1 : CA FA 2C                JZ      L_POP_ROTATER_M				;brif no more exponent delta.
    9690/    2CB4 : F5                      PUSH    PSW							;second save
    9691/    2CB5 : 2F                      CMA									;negate exponent delta /2 
    9692/    2CB6 : 3C                      INR     A
    9693/    2CB7 : 4F                      MOV     C,A							;sign extend to BC
    9694/    2CB8 : 06 FF                   MVI     B,0FFH
    9695/    2CBA : 11 07 00                LXI     D,0007H						;make HL point to last mantissa position
    9696/    2CBD : 19                      DAD     D
    9697/    2CBE : 54                      MOV     D,H							;DE points to last mantissa position
    9698/    2CBF : 5D                      MOV     E,L
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 163 - 9/5/2025 20:20:35


    9699/    2CC0 : 09                      DAD     B							;HL points to delta mantissa position
    9700/    2CC1 : 3E 08                   MVI     A,08H						;compute # of BCD digits to move
    9701/    2CC3 : 81                      ADD     C
    9702/    2CC4 : 4F                      MOV     C,A							;result to C
    9703/    2CC5 : C5                      PUSH    B							;save BC
    9704/    2CC6 : CD E6 2E                CALL    R_MOVE_C_BYTES_DEC			;Move C bytes from M to (DE) going down
    9705/    2CC9 : C1                      POP     B							;restore BC
    9706/    2CCA : F1                      POP     PSW							;last pushed A
    9707/    2CCB : 23                      INX     H							;update ptrs
    9708/    2CCC : 13                      INX     D
    9709/    2CCD : D5                      PUSH    D							;save DE
    9710/    2CCE : 47                      MOV     B,A
    9711/    2CCF : AF                      XRA     A							;clear moved BCD digits
    9712/    2CD0 : 77                  -	MOV     M,A
    9713/    2CD1 : 23                      INX     H
    9714/    2CD2 : 05                      DCR     B
    9715/    2CD3 : C2 D0 2C                JNZ     -
    9716/    2CD6 : E1                      POP     H							;load HL from saved DE
    9717/    2CD7 : F1                      POP     PSW							;first pushed A
    9718/    2CD8 : D0                      RNC									;retif no carry: done
    9719/    2CD9 : 79                      MOV     A,C
    9720/    2CDA :                     ; 
    9721/    2CDA :                     ; Rotate M 1 BCD digit right to normalize starting at HL for A bytes
    9722/    2CDA :                     ; 
    9723/    2CDA :                     L_ROTATE_RIGHT:
    9724/    2CDA : C5                      PUSH    B							;save BC
    9725/    2CDB : D5                      PUSH    D							;save DE
    9726/    2CDC : 57                      MOV     D,A							;store inner loop counter in D
    9727/    2CDD : 0E 04                   MVI     C,04H						;outer loop counter
    9728/    2CDF :                     L_ROTATE_RIGHT_1:
    9729/    2CDF : 42                      MOV     B,D							;inner loop counter
    9730/    2CE0 : E5                      PUSH    H							;save HL
    9731/    2CE1 : B7                      ORA     A							;clear carry
    9732/    2CE2 : 7E                  -	MOV     A,M							;rotate M right
    9733/    2CE3 : 1F                      RAR
    9734/    2CE4 : 77                      MOV     M,A
    9735/    2CE5 : 23                      INX     H							;next
    9736/    2CE6 : 05                      DCR     B							;decrement counter
    9737/    2CE7 : C2 E2 2C                JNZ     -
    9738/    2CEA : E1                      POP     H							;restore HL
    9739/    2CEB : 0D                      DCR     C							;decrement counter
    9740/    2CEC : C2 DF 2C                JNZ     L_ROTATE_RIGHT_1
    9741/    2CEF : D1                      POP     D							;restore DE
    9742/    2CF0 : C1                      POP     B							;restore BC
    9743/    2CF1 : C9                      RET
    9744/    2CF2 :                     
    9745/    2CF2 :                     ; 
    9746/    2CF2 :                     ; Rotate FAC1 1 BCD digit right to normalize starting at HL for 8 bytes
    9747/    2CF2 :                     ; 
    9748/    2CF2 :                     L_ROTATER_FAC1:
    9749/    2CF2 : 21 19 FC                LXI     H,DFACLO_R+1				;Point to BCD portion of FAC1
    9750/    2CF5 :                     L_ROTATER_M:
    9751/    2CF5 : 3E 08                   MVI     A,08H
    9752/    2CF7 : C3 DA 2C                JMP     L_ROTATE_RIGHT
    9753/    2CFA :                     
    9754/    2CFA :                     L_POP_ROTATER_M:
    9755/    2CFA : F1                      POP     PSW
    9756/    2CFB : D0                      RNC
    9757/    2CFC : C3 F5 2C                JMP     L_ROTATER_M					;rotate right M 8 BCD digits
    9758/    2CFF :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 164 - 9/5/2025 20:20:35


    9759/    2CFF :                     ; Double precision multiply (FAC1=FAC1*FAC2)
    9760/    2CFF :                     ;
    9761/    2CFF :                     R_DBL_MULT:								;2CFFH
    9762/    2CFF : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
    9763/    2D00 : C8                      RZ									;retif FAC1 == 0.0
    9764/    2D01 : 3A 69 FC                LDA     DFACLO2_R					;Start of FAC2
    9765/    2D04 : B7                      ORA     A
    9766/    2D05 : CA ED 33                JZ      L_SET_FAC_ZERO				;brif FAC2 == 0: Initialize FAC1 for SGL & DBL precision to zero
    9767/    2D08 : 47                      MOV     B,A							;FAC2 exponent
    9768/    2D09 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
    9769/    2D0C : AE                      XRA     M							;xor both exponents
    9770/    2D0D : E6 80                   ANI     80H							;isolate sign bit
    9771/    2D0F : 4F                      MOV     C,A							;save sign bit or result
    9772/    2D10 : 78                      MOV     A,B
    9773/    2D11 : E6 7F                   ANI     7FH
    9774/    2D13 : 47                      MOV     B,A
    9775/    2D14 : 7E                      MOV     A,M
    9776/    2D15 : E6 7F                   ANI     7FH
    9777/    2D17 : 80                      ADD     B
    9778/    2D18 : 47                      MOV     B,A
    9779/    2D19 : 36 00                   MVI     M,00H
    9780/    2D1B : E6 C0                   ANI     0C0H
    9781/    2D1D : C8                      RZ
    9782/    2D1E : FE C0                   CPI     0C0H
    9783/    2D20 : C2 26 2D                JNZ     +
    9784/    2D23 : C3 55 04                JMP     R_GEN_OV_ERROR				;Generate OV error
    9785/    2D26 :                     	
    9786/    2D26 :                     ; 
    9787/    2D26 :                     ; Multiply BCD portion of FAC1*FAC2
    9788/    2D26 :                     ; 
    9789/    2D26 : 78                  +	MOV     A,B							;Reload the sum of the decimal points
    9790/    2D27 : C6 40                   ADI		40H							;Add 40H to it (the "zero" point)
    9791/    2D29 : E6 7F                   ANI     7FH							;Mask off the upper bit (where sign bit goes)
    9792/    2D2B : C8                      RZ									;retif the product generates zero
    9793/    2D2C : B1                      ORA     C							;OR in the sign of the product
    9794/    2D2D : 2B                      DCX     H							;Decrement HL to save decimal point & sign temporarily
    9795/    2D2E : 77                      MOV     M,A							;Save decimal & sign
    9796/    2D2F : 11 67 FC                LXI     D,BCDTMP8_R					;Temp BCD value for computation
    9797/    2D32 : 01 08 00                LXI     B,08H						;Prepare to copy 8 bytes of BCD
    9798/    2D35 : 21 1F FC                LXI     H,DFACLO_R+7				;Point to end of FAC1
    9799/    2D38 : D5                      PUSH    D							;save ptr to BCDTMP8_R
    9800/    2D39 : CD E6 2E                CALL    R_MOVE_C_BYTES_DEC			;Move C bytes from M to (DE) going down: Copy FAC1 to BCDTMP8_R
    9801/    2D3C : 23                      INX     H							;Increment to beginning of FAC1
    9802/    2D3D : AF                      XRA     A							;Clear A
    9803/    2D3E : 06 08                   MVI     B,08H						;Prepare to clear 8 bytes of FAC1
    9804/    2D40 : 77                  -	MOV     M,A							;Zero out next byte of FAC1
    9805/    2D41 : 23                      INX     H							;next
    9806/    2D42 : 05                      DCR     B							;counter
    9807/    2D43 : C2 40 2D                JNZ     -							;brif not done
    9808/    2D46 : D1                      POP     D							;restore ptr to BCDTMP8_R
    9809/    2D47 : 01 A8 2D                LXI     B,L_SET_SIGN_NORM			;Load continuation function to retrieve saved Decimal/sign byte and normalize FAC1
    9810/    2D4A : C5                      PUSH    B							;new return address
    9811/    2D4B :                     ;
    9812/    2D4B :                     ; Multiply BCD at (HL) times BCD at (DE)
    9813/    2D4B :                     ; DE must be ptr to BCDTMP8_R
    9814/    2D4B :                     ;
    9815/    2D4B :                     L_MULTBCD_DE_HL:
    9816/    2D4B : CD AF 2D                CALL    L_BCDx248					;Multiply BCD at (DE) x2, x4 and x8 into BCD_TEMP7, BCD_TEMP6, BCD_TEMP5. Uses HL
    9817/    2D4E : E5                      PUSH    H							;Push address of BCD_TEMP4 to stack
    9818/    2D4F : 01 08 00                LXI     B,08H						;B=0 C=8
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 165 - 9/5/2025 20:20:35


    9819/    2D52 : EB                      XCHG								;BCD_TEMP4 to DE. BCD_TEMP5 to HL
    9820/    2D53 : CD E6 2E                CALL    R_MOVE_C_BYTES_DEC			;Move 8 bytes from M (BCD_TEMP5) to (DE BCD_TEMP4) going down
    9821/    2D56 : EB                      XCHG								;BCD_TEMP4 to DE
    9822/    2D57 : 21 5F FC                LXI     H,BCDTMP7_R					;Point to BCD_TEMP7 (x2)
    9823/    2D5A : 06 08                   MVI     B,08H						;Prepare to add 8 bytes of BCD (Add BCD_TEMP3 to BCD_TEMP7)
    9824/    2D5C : CD 4E 2C                CALL    R_BCD_ADD_M_TO_DE			;Add BCD value at (HL) to the one at (DE) -- BCD_TEMP4 = x8 + x2 = x10
    9825/    2D5F : D1                      POP     D							;POP address of BCD_TEMP4 from stack
    9826/    2D60 :                     ; DE is BCD_TEMP4 here
    9827/    2D60 : CD AF 2D                CALL    L_BCDx248					;Multiply BCD_TEMP4 (x10) times 2, 4 and 8 into BCD_TEMP3, BCD_TEMP2, BCD_TEMP1
    9828/    2D63 : 0E 07                   MVI     C,07H						;Prepare to multiply 7 bytes of BCD from FAC2?
    9829/    2D65 : 11 70 FC                LXI     D,DFACLO2_R+7				;Point to end of FAC2
    9830/    2D68 : 1A                  -	LDAX    D							;Load next BCD pair from FAC2
    9831/    2D69 : B7                      ORA     A							;Test if byte pair is "00"
    9832/    2D6A : C2 72 2D                JNZ     L_MULTBCD_1						;Jump to start multiply when first non "00" BCD found
    9833/    2D6D : 1B                      DCX     D							;Decrement to next higher BCD pair
    9834/    2D6E : 0D                      DCR     C							;Decrement byte counter (no need to test for zero - we won't be here if FAC2=0.0000)
    9835/    2D6F : C3 68 2D                JMP		-							;Jump to test next byte of FAC2
    9836/    2D72 :                     ;
    9837/    2D72 :                     ; First non "00" BCD in FAC2 found. Perform multiply?
    9838/    2D72 :                     ;
    9839/    2D72 :                     L_MULTBCD_1:
    9840/    2D72 : 1A                      LDAX    D							;Load next byte of BCD from FAC2
    9841/    2D73 : 1B                      DCX     D							;Decrement to next higher BCD pair in FAC2
    9842/    2D74 : D5                      PUSH    D							;Save address of BCD pair being processed in FAC2 to stack
    9843/    2D75 : 21 2F FC                LXI     H,BCDTMP1_R					;Point to BCD_TEMP1 (this is FAC1 x 80)
    9844/    2D78 :                     L_MULTBCD_2:
    9845/    2D78 : 87                      ADD     A							;Multiply BCD from FAC2 x 2
    9846/    2D79 : DA 86 2D                JC      +							;Add BCD value at (HL) to FAC1
    9847/    2D7C : CA 95 2D                JZ      L_DIV_EXTFAC1_BY_100		;If zero (overflow to 100H), then jump to divide by 100
    9848/    2D7F : 11 08 00            -	LXI     D,08H						;Prepare to point to next BCD_TEMPx value
    9849/    2D82 : 19                      DAD     D							;Advance HL to next BCD_TEMPx value
    9850/    2D83 : C3 78 2D                JMP     L_MULTBCD_2					;Jump to test if this BCD_TEMPx value should be added to FAC1
    9851/    2D86 :                     ; 
    9852/    2D86 :                     ; Add BCD value at (HL) to FAC1
    9853/    2D86 :                     ; 
    9854/    2D86 : F5                  +	PUSH    PSW							;save A
    9855/    2D87 : 06 08                   MVI     B,08H						;BCD count
    9856/    2D89 : 11 1F FC                LXI     D,DFACLO_R+7				;Point to end of FAC1
    9857/    2D8C : E5                      PUSH    H							;save HL
    9858/    2D8D : CD 4E 2C                CALL    R_BCD_ADD_M_TO_DE			;Add BCD value at (HL) to the one at FAC1
    9859/    2D90 : E1                      POP     H							;restore HL
    9860/    2D91 : F1                      POP     PSW							;restore A
    9861/    2D92 : C3 7F 2D                JMP     -							;Jump to test if next BCD_TEMPx value should be added to FAC1
    9862/    2D95 :                     ;
    9863/    2D95 :                     ; Divide extended precision FAC1 by 100 and test for end of multiply
    9864/    2D95 :                     ;
    9865/    2D95 :                     L_DIV_EXTFAC1_BY_100:
    9866/    2D95 : 06 0F                   MVI     B,0FH						;Prepare to shift 15 bytes (extended precision) of FAC1
    9867/    2D97 : 11 26 FC                LXI     D,DFACLO_R+14				;Start 1 byte from end of FAC1 (extended precision)
    9868/    2D9A : 21 27 FC                LXI     H,DFACLO_R+15				;Move to last byte of FAC1 (this is /100 because of BCD)
    9869/    2D9D : CD 72 34                CALL    R_MOVE_B_BYTES_DEC 			;Move B bytes from (DE) to M with decrement
    9870/    2DA0 : 36 00                   MVI     M,00H						;Set the 1st byte (sign / decimal point) to zero
    9871/    2DA2 : D1                      POP     D							;Restore pointer to current BCD pair in FAC2
    9872/    2DA3 : 0D                      DCR     C							;Decrement BCD count for FAC2
    9873/    2DA4 : C2 72 2D                JNZ     L_MULTBCD_1					;Jump to process next byte
    9874/    2DA7 : C9                      RET									;Return to our hook (below) to retrieve the Decimal/sign & normalize
    9875/    2DA8 :                     ;
    9876/    2DA8 :                     ; retrieve saved Decimal/sign byte and normalize FAC1
    9877/    2DA8 :                     ;
    9878/    2DA8 :                     L_SET_SIGN_NORM:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 166 - 9/5/2025 20:20:35


    9879/    2DA8 : 2B                      DCX     H
    9880/    2DA9 : 7E                      MOV     A,M
    9881/    2DAA : 23                      INX     H
    9882/    2DAB : 77                      MOV     M,A
    9883/    2DAC : C3 DE 2B                JMP     L_NORM_BCD_FAC1_1
    9884/    2DAF :                     ;
    9885/    2DAF :                     ; BCD numbers are processed right to left.
    9886/    2DAF :                     ; each BCD number is 8 bytes (16 decimal digits)
    9887/    2DAF :                     ; Multiply BCD at (DE) x2, x4 and x8 into 3 BCD values before (DE)
    9888/    2DAF :                     ; Achieved by adding BCD to itself (x2), then adding new BCD to itself (x4)
    9889/    2DAF :                     ; then adding newest BCD to itself (x8).
    9890/    2DAF :                     ; e.g. DE points to BCDTMP8_R, store products in BCDTMP7_R (x2), BCDTMP6_R (x4),
    9891/    2DAF :                     ; BCDTMP5_R (x8), then returns address of BCD_TEMP4 in HL (lowest digit is at the end)
    9892/    2DAF :                     ; DE points to BCD_TEMP5 (HL+8)
    9893/    2DAF :                     ;
    9894/    2DAF :                     L_BCDx248:
    9895/    2DAF : 21 F8 FF                LXI     H,0FFF8H					;Load -8 into HL
    9896/    2DB2 : 19                      DAD     D							;HL=DE-8 -- Point to next lower temp BCD value
    9897/    2DB3 : 0E 03                   MVI     C,03H						;Prepare to process 3 floating point values
    9898/    2DB5 :                     L_BCDx248_1:
    9899/    2DB5 : 06 08                   MVI     B,08H						;Load byte counter for 1 floating point value
    9900/    2DB7 : B7                      ORA     A							;clear carry
    9901/    2DB8 : 1A                  -	LDAX    D
    9902/    2DB9 : 8F                      ADC     A
    9903/    2DBA : 27                      DAA									;preserve Carry until next ADC
    9904/    2DBB : 77                      MOV     M,A
    9905/    2DBC : 2B                      DCX     H							;destination
    9906/    2DBD : 1B                      DCX     D							;source
    9907/    2DBE : 05                      DCR     B
    9908/    2DBF : C2 B8 2D                JNZ     -
    9909/    2DC2 : 0D                      DCR     C
    9910/    2DC3 : C2 B5 2D                JNZ     L_BCDx248_1
    9911/    2DC6 : C9                      RET
    9912/    2DC7 :                     ;
    9913/    2DC7 :                     ; Double precision divide (FAC1=FAC1/FAC2)
    9914/    2DC7 :                     ;
    9915/    2DC7 :                     R_DBL_DIV:								;2DC7H
    9916/    2DC7 : 3A 69 FC                LDA     DFACLO2_R					;Start of FAC2
    9917/    2DCA : B7                      ORA     A
    9918/    2DCB : CA 49 04                JZ      R_GEN_D0_ERROR				;Generate /0 error
    9919/    2DCE : 47                      MOV     B,A
    9920/    2DCF : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
    9921/    2DD2 : 7E                      MOV     A,M
    9922/    2DD3 : B7                      ORA     A
    9923/    2DD4 : CA ED 33                JZ      L_SET_FAC_ZERO				;Initialize FAC1 for SGL & DBL precision to zero
    9924/    2DD7 : A8                      XRA     B
    9925/    2DD8 : E6 80                   ANI     80H
    9926/    2DDA : 4F                      MOV     C,A
    9927/    2DDB : 78                      MOV     A,B
    9928/    2DDC : E6 7F                   ANI     7FH
    9929/    2DDE : 47                      MOV     B,A
    9930/    2DDF : 7E                      MOV     A,M
    9931/    2DE0 : E6 7F                   ANI     7FH
    9932/    2DE2 : 90                      SUB     B
    9933/    2DE3 : 47                      MOV     B,A
    9934/    2DE4 : 1F                      RAR
    9935/    2DE5 : A8                      XRA     B
    9936/    2DE6 : E6 40                   ANI     40H
    9937/    2DE8 : 36 00                   MVI     M,00H
    9938/    2DEA : CA F4 2D                JZ      L_DBL_DIV_1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 167 - 9/5/2025 20:20:35


    9939/    2DED : 78                      MOV     A,B
    9940/    2DEE : E6 80                   ANI     80H
    9941/    2DF0 : C0                      RNZ
    9942/    2DF1 : C3 55 04            -	JMP     R_GEN_OV_ERROR				;Generate OV error
    9943/    2DF4 :                     
    9944/    2DF4 :                     L_DBL_DIV_1:
    9945/    2DF4 : 78                      MOV     A,B
    9946/    2DF5 : C6 41                   ADI		41H
    9947/    2DF7 : E6 7F                   ANI     7FH
    9948/    2DF9 : 77                      MOV     M,A
    9949/    2DFA : CA F1 2D                JZ      -
    9950/    2DFD : B1                      ORA     C
    9951/    2DFE : 36 00                   MVI     M,00H
    9952/    2E00 : 2B                      DCX     H
    9953/    2E01 : 77                      MOV     M,A
    9954/    2E02 : 11 1F FC                LXI     D,DFACLO_R+7				;Point to end of FAC1
    9955/    2E05 : 21 70 FC                LXI     H,DFACLO2_R+7				;Point to end of FAC2
    9956/    2E08 : 06 07                   MVI     B,07H
    9957/    2E0A : 7E                  -	MOV     A,M
    9958/    2E0B : B7                      ORA     A							;Test if byte pair is "00"
    9959/    2E0C : C2 15 2E                JNZ     +
    9960/    2E0F : 1B                      DCX     D
    9961/    2E10 : 2B                      DCX     H
    9962/    2E11 : 05                      DCR     B
    9963/    2E12 : C2 0A 2E                JNZ     -
    9964/    2E15 : 22 14 FC            +	SHLD    FPTMP5_R
    9965/    2E18 : EB                      XCHG
    9966/    2E19 : 22 12 FC                SHLD    FPTMP4_R
    9967/    2E1C : 78                      MOV     A,B
    9968/    2E1D : 32 16 FC                STA     FPTMP6_R
    9969/    2E20 : 21 60 FC                LXI     H,FPTMP2_R				    ;Floating Point Temp 2
    9970/    2E23 :                     L_DBL_DIV_3:
    9971/    2E23 : 06 0F                   MVI     B,0FH
    9972/    2E25 :                     L_DBL_DIV_4:
    9973/    2E25 : E5                      PUSH    H
    9974/    2E26 : C5                      PUSH    B
    9975/    2E27 : 2A 14 FC                LHLD    FPTMP5_R
    9976/    2E2A : EB                      XCHG
    9977/    2E2B : 2A 12 FC                LHLD    FPTMP4_R
    9978/    2E2E : 3A 16 FC                LDA     FPTMP6_R
    9979/    2E31 : 0E FF                   MVI     C,0FFH
    9980/    2E33 :                     L_DBL_DIV_5:
    9981/    2E33 : 37                      STC
    9982/    2E34 : 0C                      INR     C
    9983/    2E35 : 47                      MOV     B,A
    9984/    2E36 : E5                      PUSH    H
    9985/    2E37 : D5                      PUSH    D
    9986/    2E38 : 3E 99               -	MVI     A,99H
    9987/    2E3A : CE 00                   ACI     00H
    9988/    2E3C : EB                      XCHG
    9989/    2E3D : 96                      SUB     M
    9990/    2E3E : EB                      XCHG
    9991/    2E3F : 86                      ADD     M
    9992/    2E40 : 27                      DAA
    9993/    2E41 : 77                      MOV     M,A
    9994/    2E42 : 2B                      DCX     H
    9995/    2E43 : 1B                      DCX     D
    9996/    2E44 : 05                      DCR     B
    9997/    2E45 : C2 38 2E                JNZ     -
    9998/    2E48 : 7E                      MOV     A,M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 168 - 9/5/2025 20:20:35


    9999/    2E49 : 3F                      CMC
   10000/    2E4A : DE 00                   SBI     00H
   10001/    2E4C : 77                      MOV     M,A
   10002/    2E4D : D1                      POP     D
   10003/    2E4E : E1                      POP     H
   10004/    2E4F : 3A 16 FC                LDA     FPTMP6_R
   10005/    2E52 : D2 33 2E                JNC     L_DBL_DIV_5
   10006/    2E55 : 47                      MOV     B,A
   10007/    2E56 : EB                      XCHG
   10008/    2E57 : CD 4E 2C                CALL    R_BCD_ADD_M_TO_DE
   10009/    2E5A : D2 5F 2E                JNC     +
   10010/    2E5D : EB                      XCHG
   10011/    2E5E : 34                      INR     M
   10012/    2E5F : 79                  +	MOV     A,C
   10013/    2E60 : C1                      POP     B
   10014/    2E61 : 4F                      MOV     C,A
   10015/    2E62 : C5                      PUSH    B
   10016/    2E63 : 78                      MOV     A,B
   10017/    2E64 : B7                      ORA     A							;clear carry
   10018/    2E65 : 1F                      RAR
   10019/    2E66 : 47                      MOV     B,A
   10020/    2E67 : 04                      INR     B
   10021/    2E68 : 58                      MOV     E,B
   10022/    2E69 : 16 00                   MVI     D,00H
   10023/    2E6B : 21 17 FC                LXI     H,FPTMP7_R
   10024/    2E6E : 19                      DAD     D
   10025/    2E6F : CD 97 2C                CALL    L_ROTATEL_M					;Rotate M 1 BCD digit left for B bytes
   10026/    2E72 : C1                      POP     B
   10027/    2E73 : E1                      POP     H
   10028/    2E74 : 78                      MOV     A,B
   10029/    2E75 : 0C                      INR     C
   10030/    2E76 : 0D                      DCR     C
   10031/    2E77 : C2 BB 2E                JNZ     L_DBL_DIV_8
   10032/    2E7A : FE 0F                   CPI     0FH
   10033/    2E7C : CA AC 2E                JZ      L_DBL_DIV_7
   10034/    2E7F : 0F                      RRC
   10035/    2E80 : 07                      RLC    
   10036/    2E81 : D2 BB 2E                JNC     L_DBL_DIV_8
   10037/    2E84 : C5                      PUSH    B
   10038/    2E85 : E5                      PUSH    H
   10039/    2E86 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10040/    2E89 : 06 08                   MVI     B,08H
   10041/    2E8B : 7E                  -	MOV     A,M
   10042/    2E8C : B7                      ORA     A
   10043/    2E8D : C2 A6 2E                JNZ     L_DBL_DIV_6
   10044/    2E90 : 23                      INX     H
   10045/    2E91 : 05                      DCR     B
   10046/    2E92 : C2 8B 2E                JNZ     -
   10047/    2E95 : E1                      POP     H
   10048/    2E96 : C1                      POP     B
   10049/    2E97 : 78                      MOV     A,B
   10050/    2E98 : B7                      ORA     A							;clear carry
   10051/    2E99 : 1F                      RAR
   10052/    2E9A : 3C                      INR     A
   10053/    2E9B : 47                      MOV     B,A
   10054/    2E9C : AF                      XRA     A
   10055/    2E9D : 77                  -	MOV     M,A
   10056/    2E9E : 23                      INX     H
   10057/    2E9F : 05                      DCR     B
   10058/    2EA0 : C2 9D 2E                JNZ     -
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 169 - 9/5/2025 20:20:35


   10059/    2EA3 : C3 CF 2E                JMP     L_DBL_DIV_10
   10060/    2EA6 :                     
   10061/    2EA6 :                     L_DBL_DIV_6:
   10062/    2EA6 : E1                      POP     H
   10063/    2EA7 : C1                      POP     B
   10064/    2EA8 : 78                      MOV     A,B
   10065/    2EA9 : C3 BB 2E                JMP     L_DBL_DIV_8
   10066/    2EAC :                     
   10067/    2EAC :                     L_DBL_DIV_7:
   10068/    2EAC : 3A 17 FC                LDA     FPTMP7_R
   10069/    2EAF : 5F                      MOV     E,A
   10070/    2EB0 : 3D                      DCR     A
   10071/    2EB1 : 32 17 FC                STA     FPTMP7_R
   10072/    2EB4 : AB                      XRA     E
   10073/    2EB5 : F2 23 2E                JP      L_DBL_DIV_3
   10074/    2EB8 : C3 ED 33                JMP     L_SET_FAC_ZERO				;Initialize FAC1 for SGL & DBL precision to zero
   10075/    2EBB :                     ; A contains index in BCD digits number
   10076/    2EBB :                     L_DBL_DIV_8:
   10077/    2EBB : 1F                      RAR									;bit 0 (odd or even) to carry
   10078/    2EBC : 79                      MOV     A,C							;restore A
   10079/    2EBD : DA C6 2E                JC      +							;brif odd digit
   10080/    2EC0 : B6                      ORA     M
   10081/    2EC1 : 77                      MOV     M,A
   10082/    2EC2 : 23                      INX     H
   10083/    2EC3 : C3 CB 2E                JMP     L_DBL_DIV_9
   10084/    2EC6 :                     ; move upper nibble into lower nibble
   10085/    2EC6 : 87                  +	ADD     A							;x2
   10086/    2EC7 : 87                      ADD     A							;x4
   10087/    2EC8 : 87                      ADD     A							;x8
   10088/    2EC9 : 87                      ADD     A							;x16
   10089/    2ECA : 77                      MOV     M,A
   10090/    2ECB :                     L_DBL_DIV_9:
   10091/    2ECB : 05                      DCR     B
   10092/    2ECC : C2 25 2E                JNZ     L_DBL_DIV_4
   10093/    2ECF :                     L_DBL_DIV_10:
   10094/    2ECF : 21 20 FC                LXI     H,DFACLO_R+8				;Point to extended precision portion of FAC1
   10095/    2ED2 : 11 67 FC                LXI     D,BCDTMP8_R
   10096/    2ED5 : 06 08                   MVI     B,08H
   10097/    2ED7 : CD 72 34                CALL    R_MOVE_B_BYTES_DEC       	;Move B bytes from (DE) to M with decrement
   10098/    2EDA : C3 A8 2D                JMP     L_SET_SIGN_NORM				;retrieve saved Decimal/sign byte and normalize FAC1
   10099/    2EDD :                     	
   10100/    2EDD :                     ;
   10101/    2EDD :                     ;Move C bytes from M to (DE) going UP
   10102/    2EDD :                     ;
   10103/    2EDD :                     R_MOVE_C_BYTES_UP:
   10104/    2EDD : 7E                      MOV     A,M
   10105/    2EDE : 12                      STAX    D
   10106/    2EDF : 23                      INX     H
   10107/    2EE0 : 13                      INX     D
   10108/    2EE1 : 0D                      DCR     C
   10109/    2EE2 : C2 DD 2E                JNZ     R_MOVE_C_BYTES_UP
   10110/    2EE5 : C9                      RET
   10111/    2EE6 :                     	
   10112/    2EE6 :                     ;
   10113/    2EE6 :                     ;Move C bytes from M to (DE) going DOWN
   10114/    2EE6 :                     ;
   10115/    2EE6 :                     R_MOVE_C_BYTES_DEC:						;2EE6H
   10116/    2EE6 : 7E                      MOV     A,M
   10117/    2EE7 : 12                      STAX    D
   10118/    2EE8 : 2B                      DCX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 170 - 9/5/2025 20:20:35


   10119/    2EE9 : 1B                      DCX     D
   10120/    2EEA : 0D                      DCR     C
   10121/    2EEB : C2 E6 2E                JNZ     R_MOVE_C_BYTES_DEC			;Move C bytes from M to (DE)
   10122/    2EEE : C9                      RET
   10123/    2EEF :                     ;
   10124/    2EEF :                     ; COS function
   10125/    2EEF :                     ;
   10126/    2EEF :                     R_COS_FUN:								;2EEFH
   10127/    2EEF : 21 CE 32                LXI     H,R_FP_NUMBERS_11			;Code Based. 
   10128/    2EF2 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10129/    2EF5 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10130/    2EF8 : E6 7F                   ANI     7FH
   10131/    2EFA : 32 18 FC                STA     DFACLO_R					;FAC1
   10132/    2EFD : 21 8E 32                LXI     H,R_DL_PNT25				;0.25 DBL constant
   10133/    2F00 : CD 9A 31                CALL    R_SUB_M_FAC1
   10134/    2F03 : CD FD 33                CALL    L_NEG						;Negate FAC1
   10135/    2F06 : C3 0F 2F                JMP     L_SIN_1						;join SIN code
   10136/    2F09 :                     ;
   10137/    2F09 :                     ; SIN function
   10138/    2F09 :                     ;
   10139/    2F09 :                     R_SIN_FUN:								;2F09H
   10140/    2F09 : 21 CE 32                LXI     H,R_FP_NUMBERS_11			;Code Based. 
   10141/    2F0C : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10142/    2F0F :                     L_SIN_1:
   10143/    2F0F : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10144/    2F12 : B7                      ORA     A
   10145/    2F13 : FC E3 31                CM      L_NEG_NEG					;Take NEG(FAC1) and push return address to NEG(FAC1)
   10146/    2F16 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10147/    2F19 : CD 54 36                CALL    R_INT_FUN				    ;INT function
   10148/    2F1C : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10149/    2F1F : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   10150/    2F22 : CD 69 2B                CALL    R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10151/    2F25 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10152/    2F28 : FE 40                   CPI     40H
   10153/    2F2A : DA 52 2F                JC      L_SIN_2
   10154/    2F2D : 3A 19 FC                LDA     DFACLO_R+1					;Point to BCD portion of FAC1
   10155/    2F30 : FE 25                   CPI     25H
   10156/    2F32 : DA 52 2F                JC      L_SIN_2
   10157/    2F35 : FE 75                   CPI     75H
   10158/    2F37 : D2 49 2F                JNC     +
   10159/    2F3A : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10160/    2F3D : 21 7C 32                LXI     H,R_DBL_PNT5				;Code Based. 0.500000000000
   10161/    2F40 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10162/    2F43 : CD 69 2B                CALL    R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10163/    2F46 : C3 52 2F                JMP     L_SIN_2
   10164/    2F49 :                     
   10165/    2F49 : 21 86 32            +	LXI     H,R_DBL_ONE					;Code Based. 1.0
   10166/    2F4C : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10167/    2F4F : CD 69 2B                CALL    R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10168/    2F52 :                     L_SIN_2:
   10169/    2F52 : 21 5A 33                LXI     H,R_SIN_MATH_TBL			;Code Based. 
   10170/    2F55 : C3 F7 31                JMP     R_MULT_FAC1_PWR2_TBL		;FAC1 = FAC1 * (FAC1^2 * table based math)
   10171/    2F58 :                     ;
   10172/    2F58 :                     ; TAN function
   10173/    2F58 :                     ; TAN(X)=SIN(X)/COS(X)
   10174/    2F58 :                     ;
   10175/    2F58 :                     R_TAN_FUN:								;2F58H
   10176/    2F58 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10177/    2F5B : CD EF 2E                CALL    R_COS_FUN				    ;COS function
   10178/    2F5E : CD D2 31                CALL    L_SWP_FAC_SP
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 171 - 9/5/2025 20:20:35


   10179/    2F61 : CD 09 2F                CALL    R_SIN_FUN				    ;SIN function
   10180/    2F64 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10181/    2F67 : 3A 69 FC                LDA     DFACLO2_R					;Start of FAC2
   10182/    2F6A : B7                      ORA     A
   10183/    2F6B : C2 C7 2D                JNZ     R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10184/    2F6E : C3 55 04                JMP     R_GEN_OV_ERROR				;Generate OV error
   10185/    2F71 :                     ;
   10186/    2F71 :                     ; ATN function
   10187/    2F71 :                     ;
   10188/    2F71 :                     R_ATN_FUN:								;2F71H
   10189/    2F71 : 3A 18 FC                LDA     DFACLO_R					;get exponent from FAC1
   10190/    2F74 : B7                      ORA     A
   10191/    2F75 : C8                      RZ									;retif number == 0
   10192/    2F76 : FC E3 31                CM      L_NEG_NEG					;Take NEG(FAC1) and push return address to NEG(FAC1)
   10193/    2F79 : FE 41                   CPI     41H
   10194/    2F7B : DA 99 2F                JC      L_ATN_1						;brif A < 41H
   10195/    2F7E : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10196/    2F81 : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   10197/    2F84 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10198/    2F87 : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10199/    2F8A : CD 99 2F                CALL    L_ATN_1
   10200/    2F8D : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10201/    2F90 : 21 AE 32                LXI     H,R_FP_NUMBERS_7			;Code Based. 
   10202/    2F93 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10203/    2F96 : C3 69 2B                JMP     R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10204/    2F99 :                     
   10205/    2F99 :                     ; 
   10206/    2F99 :                     ; Perform series approximation for ATN
   10207/    2F99 :                     ; 
   10208/    2F99 :                     L_ATN_1:
   10209/    2F99 : 21 B6 32                LXI     H,R_FP_NUMBERS_8			;Code Based. 
   10210/    2F9C : CD AF 31                CALL    R_CMP_FAC1_M
   10211/    2F9F : FA C9 2F                JM      L_ATN_TBL
   10212/    2FA2 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10213/    2FA5 : 21 BE 32                LXI     H,R_FP_NUMBERS_9			;Code Based. 
   10214/    2FA8 : CD 94 31                CALL    R_ADD_M_FAC1
   10215/    2FAB : CD D2 31                CALL    L_SWP_FAC_SP
   10216/    2FAE : 21 BE 32                LXI     H,R_FP_NUMBERS_9			;Code Based. 
   10217/    2FB1 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10218/    2FB4 : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   10219/    2FB7 : CD 9A 31                CALL    R_SUB_M_FAC1
   10220/    2FBA : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10221/    2FBD : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10222/    2FC0 : CD C9 2F                CALL    L_ATN_TBL
   10223/    2FC3 : 21 C6 32                LXI     H,R_FP_NUMBERS_10			;Code Based. 
   10224/    2FC6 : C3 94 31                JMP     R_ADD_M_FAC1
   10225/    2FC9 :                     	
   10226/    2FC9 :                     ; 
   10227/    2FC9 :                     ; Do table based math for ATN
   10228/    2FC9 :                     ; 
   10229/    2FC9 :                     L_ATN_TBL:
   10230/    2FC9 : 21 9B 33                LXI     H,R_ATN_MATH_TBL			;Code Based. 
   10231/    2FCC : C3 F7 31                JMP     R_MULT_FAC1_PWR2_TBL		;FAC1 = FAC1 * (FAC1^2 * table based math)
   10232/    2FCF :                     ;
   10233/    2FCF :                     ; LOG function
   10234/    2FCF :                     ;
   10235/    2FCF :                     R_LOG_FUN:								;2FCFH
   10236/    2FCF : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   10237/    2FD0 : FA DB 08                JM      R_GEN_FC_ERROR				;brif FAC1 is negative: Generate FC error
   10238/    2FD3 : CA DB 08                JZ      R_GEN_FC_ERROR				;brif FAC1 is 0.0: Generate FC error
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 172 - 9/5/2025 20:20:35


   10239/    2FD6 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10240/    2FD9 : 7E                      MOV     A,M							;get FAC1 exponent
   10241/    2FDA : F5                      PUSH    PSW							;save it
   10242/    2FDB : 36 41                   MVI     M,41H						;set exponent
   10243/    2FDD : 21 96 32                LXI     H,R_FP_NUMBERS_4			;Code Based. 3.1622776601684
   10244/    2FE0 : CD AF 31                CALL    R_CMP_FAC1_M
   10245/    2FE3 : FA ED 2F                JM      +
   10246/    2FE6 : F1                      POP     PSW
   10247/    2FE7 : 3C                      INR     A
   10248/    2FE8 : F5                      PUSH    PSW
   10249/    2FE9 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10250/    2FEC : 35                      DCR     M
   10251/    2FED : F1                  +	POP     PSW
   10252/    2FEE : 32 8E FB                STA     TEMP3_R
   10253/    2FF1 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10254/    2FF4 : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   10255/    2FF7 : CD 94 31                CALL    R_ADD_M_FAC1
   10256/    2FFA : CD D2 31                CALL    L_SWP_FAC_SP
   10257/    2FFD : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   10258/    3000 : CD 9A 31                CALL    R_SUB_M_FAC1
   10259/    3003 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10260/    3006 : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10261/    3009 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10262/    300C : CD A0 31                CALL    R_DBL_SQR				    ;Double precision Square (FAC1=SQR(FAC1))
   10263/    300F : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10264/    3012 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10265/    3015 : 21 31 33                LXI     H,R_LOG_MATH_TBL_1			;Code Based. 
   10266/    3018 : CD 09 32                CALL    R_TBL_BASED_MATH			;Table based math (FAC1=(((FAC1*M)+(M+1))*(M+2)+(M+3)...
   10267/    301B : CD D2 31                CALL    L_SWP_FAC_SP
   10268/    301E : 21 10 33                LXI     H,R_LOG_MATH_TBL			;Code Based. 
   10269/    3021 : CD 09 32                CALL    R_TBL_BASED_MATH			;Table based math (FAC1=(((FAC1*M)+(M+1))*(M+2)+(M+3)...
   10270/    3024 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10271/    3027 : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10272/    302A : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10273/    302D : CD FF 2C                CALL    R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   10274/    3030 : 21 9E 32                LXI     H,R_FP_NUMBERS_5			;Code Based. 
   10275/    3033 : CD 94 31                CALL    R_ADD_M_FAC1
   10276/    3036 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10277/    3039 : CD FF 2C                CALL    R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   10278/    303C : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10279/    303F : 3A 8E FB                LDA     TEMP3_R
   10280/    3042 : D6 41                   SUI     41H
   10281/    3044 : 6F                      MOV     L,A
   10282/    3045 : 87                      ADD     A
   10283/    3046 : 9F                      SBB     A
   10284/    3047 : 67                      MOV     H,A
   10285/    3048 : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   10286/    304B : CD C2 35                CALL    L_CONDS
   10287/    304E : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10288/    3051 : CD 78 2B                CALL    R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   10289/    3054 : 21 A6 32                LXI     H,R_FP_NUMBERS_6			;Code Based. 
   10290/    3057 : C3 A3 31                JMP     R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10291/    305A :                     ;
   10292/    305A :                     ; SQR function
   10293/    305A :                     ;
   10294/    305A :                     R_SQR_FUN:								;305AH
   10295/    305A : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   10296/    305B : C8                      RZ
   10297/    305C : FA DB 08                JM      R_GEN_FC_ERROR				;Generate FC error
   10298/    305F : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 173 - 9/5/2025 20:20:35


   10299/    3062 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10300/    3065 : B7                      ORA     A							;clear carry
   10301/    3066 : 1F                      RAR
   10302/    3067 : CE 20                   ACI     20H
   10303/    3069 : 32 69 FC                STA     DFACLO2_R					;Start of FAC2
   10304/    306C : 3A 19 FC                LDA     DFACLO_R+1					;Point to BCD portion of FAC1
   10305/    306F : B7                      ORA     A							;clear carry
   10306/    3070 : 0F                      RRC
   10307/    3071 : B7                      ORA     A							;clear carry
   10308/    3072 : 0F                      RRC
   10309/    3073 : E6 33                   ANI     33H
   10310/    3075 : C6 10                   ADI		10H
   10311/    3077 : 32 6A FC                STA     DFACLO2_R+1
   10312/    307A : 3E 07                   MVI     A,07H
   10313/    307C : 32 8E FB            -	STA     TEMP3_R
   10314/    307F : CD 34 32                CALL    R_PUSH_FAC1				   	;Push FAC1 on stack
   10315/    3082 : CD 2E 32                CALL    R_PUSH_FAC2				    ;Push FAC2 on stack
   10316/    3085 : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10317/    3088 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10318/    308B : CD 78 2B                CALL    R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   10319/    308E : 21 7C 32                LXI     H,R_DBL_PNT5				;Code Based. 0.500000000000
   10320/    3091 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10321/    3094 : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10322/    3097 : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   10323/    309A : 3A 8E FB                LDA     TEMP3_R
   10324/    309D : 3D                      DCR     A
   10325/    309E : C2 7C 30                JNZ     -
   10326/    30A1 : C3 C1 31                JMP     R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   10327/    30A4 :                     ;
   10328/    30A4 :                     ; EXP function
   10329/    30A4 :                     ;
   10330/    30A4 :                     R_EXP_FUN:								;30A4H
   10331/    30A4 : 21 74 32                LXI     H,R_FP_NUMBERS+24			;Code Based. 
   10332/    30A7 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10333/    30AA : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10334/    30AD : CD 01 35                CALL    R_CINT_FUN				    ;CINT function
   10335/    30B0 : 7D                      MOV     A,L
   10336/    30B1 : 17                      RAL
   10337/    30B2 : 9F                      SBB     A
   10338/    30B3 : BC                      CMP     H
   10339/    30B4 : CA CB 30                JZ      L_EXP_1
   10340/    30B7 : 7C                      MOV     A,H
   10341/    30B8 : B7                      ORA     A
   10342/    30B9 : F2 C8 30                JP      +							;TODO jump directly to R_GEN_OV_ERROR
   10343/    30BC : CD CF 35                CALL    L_VALDBL
   10344/    30BF : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   10345/    30C2 : 21 7E 32                LXI     H,R_DBL_ZERO				;Code Based. 
   10346/    30C5 : C3 C4 31                JMP     R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10347/    30C8 :                     
   10348/    30C8 : C3 55 04            +	JMP     R_GEN_OV_ERROR				;Generate OV error
   10349/    30CB :                     
   10350/    30CB :                     L_EXP_1:
   10351/    30CB : 22 8E FB                SHLD    TEMP3_R
   10352/    30CE : CD BA 35                CALL    L_FRCDBL				    ;CDBL function
   10353/    30D1 : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   10354/    30D4 : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   10355/    30D7 : CD 69 2B                CALL    R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10356/    30DA : 21 7C 32                LXI     H,R_DBL_PNT5				;Code Based. 0.500000000000
   10357/    30DD : CD AF 31                CALL    R_CMP_FAC1_M
   10358/    30E0 : F5                      PUSH    PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 174 - 9/5/2025 20:20:35


   10359/    30E1 : CA ED 30                JZ      +
   10360/    30E4 : DA ED 30                JC      +
   10361/    30E7 : 21 7C 32                LXI     H,R_DBL_PNT5				;Code Based. 0.500000000000
   10362/    30EA : CD 9A 31                CALL    R_SUB_M_FAC1
   10363/    30ED : CD 34 32            +	CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10364/    30F0 : 21 F7 32                LXI     H,R_EXP_MATH_TBL_1			;Code Based. 
   10365/    30F3 : CD F7 31                CALL    R_MULT_FAC1_PWR2_TBL		;FAC1 = FAC1 * (FAC1^2 * table based math)
   10366/    30F6 : CD D2 31                CALL    L_SWP_FAC_SP
   10367/    30F9 : 21 D6 32                LXI     H,R_EXP_MATH_TBL			;Code Based. 
   10368/    30FC : CD EB 31                CALL    R_SQR_FAC1_MULT_TBL      	;Square FAC1 & do table based math
   10369/    30FF : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10370/    3102 : CD 2E 32                CALL    R_PUSH_FAC2				    ;Push FAC2 on stack
   10371/    3105 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10372/    3108 : CD 69 2B                CALL    R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10373/    310B : 21 60 FC                LXI     H,FPTMP2_R					;Floating Point Temp 2
   10374/    310E : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   10375/    3111 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10376/    3114 : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   10377/    3117 : CD 78 2B                CALL    R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   10378/    311A : 21 60 FC                LXI     H,FPTMP2_R				    ;Floating Point Temp 2
   10379/    311D : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10380/    3120 : CD C7 2D                CALL    R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10381/    3123 : F1                      POP     PSW
   10382/    3124 : DA 30 31                JC      +
   10383/    3127 : CA 30 31                JZ      +
   10384/    312A : 21 96 32                LXI     H,R_FP_NUMBERS_4			;Code Based. 3.1622776601684
   10385/    312D : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10386/    3130 : 3A 8E FB            +	LDA     TEMP3_R
   10387/    3133 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10388/    3136 : 4E                      MOV     C,M
   10389/    3137 : 86                      ADD     M
   10390/    3138 : 77                      MOV     M,A
   10391/    3139 : A9                      XRA     C
   10392/    313A : F0                      RP     
   10393/    313B : C3 55 04                JMP     R_GEN_OV_ERROR				;Generate OV error
   10394/    313E :                     ;
   10395/    313E :                     ; RND function
   10396/    313E :                     ;
   10397/    313E :                     R_RND_FUN:								;313EH
   10398/    313E : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   10399/    313F : 21 79 FC                LXI     H,FPRND_R				    ;ptr to Floating Point Random
   10400/    3142 : CA 73 31                JZ      +							;brif FAC1 == 0.0: return last value
   10401/    3145 : FC CA 31                CM      R_MOVE_FAC1_TO_M			;If argument is negative, seed FP_RND (Move FAC1 to M)
   10402/    3148 : 21 60 FC                LXI     H,FPTMP2_R				    ;Floating Point Temp 2
   10403/    314B : 11 79 FC                LXI     D,FPRND_R				    ;ptr to Floating Point Random
   10404/    314E : CD CD 31                CALL    R_MOVE_8_BYTES_INC			;Move Floating point at (DE) to M
   10405/    3151 : 21 64 32                LXI     H,R_FP_NUMBERS+8			;Code Based. 
   10406/    3154 : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2 
   10407/    3157 : 21 5C 32                LXI     H,R_FP_NUMBERS				;Code Based. 
   10408/    315A : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10409/    315D : 11 67 FC                LXI     D,BCDTMP8_R					;Load pointer to BCDTMP8_R
   10410/    3160 : CD 4B 2D                CALL    L_MULTBCD_DE_HL				;Multiply BCD at BCDTMP8_R times FAC2
   10411/    3163 : 11 20 FC                LXI     D,DFACLO_R+8				;Point to extended precision portion of FAC1
   10412/    3166 : 21 7A FC                LXI     H,FPRND_R+1					;0FC7AH Point to BCD portion of Floating point number
   10413/    3169 : 06 07               	MVI		B,7							;Prepare to move BCD portion of floating point
   10414/    316B : CD 69 34                CALL    R_MOVE_B_BYTES_INC			;Move 7 bytes from (DE) to M with increment
   10415/    316E : 21 79 FC                LXI     H,FPRND_R				    ;ptr to Floating Point Random
   10416/    3171 : 36 00                   MVI     M,00H						;Make RND seed exponent "e-65"
   10417/    3173 :                     ; 
   10418/    3173 :                     ; Return value from RND generator (FP_RND) in FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 175 - 9/5/2025 20:20:35


   10419/    3173 :                     ; 
   10420/    3173 : CD C4 31            +	CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10421/    3176 : 21 18 FC                LXI     H,DFACLO_R				    ;ptr to FAC1
   10422/    3179 : 36 40                   MVI     M,40H						;Make RND number a sane value < 1 (vs 1.332e-65, etc)
   10423/    317B : AF                      XRA     A							;clr A
   10424/    317C : 32 20 FC                STA     DFACLO_R+8					;Zero out 1st byte of extended precision portion of FAC1
   10425/    317F : C3 DE 2B                JMP     L_NORM_BCD_FAC1_1
   10426/    3182 :                     ;
   10427/    3182 :                     ; Initialize FPRND_R for new program
   10428/    3182 :                     ;
   10429/    3182 :                     R_INIT_TEMP3:							;3182H
   10430/    3182 : 11 6C 32                LXI     D,R_FP_NUMBERS+16			;Code Based. 
   10431/    3185 : 21 79 FC                LXI     H,FPRND_R				    ;ptr to Floating Point Random
   10432/    3188 : C3 CD 31                JMP     R_MOVE_8_BYTES_INC
   10433/    318B :                     
   10434/    318B :                     ; 
   10435/    318B :                     ; Seed FPRND_R with signed integer HL -- TODO unreachable code
   10436/    318B :                     ; 
   10437/    318B : CD 43 35                CALL    R_CONV_SINT_HL_SNGL         ;Convert signed integer HL to single precision FAC1
   10438/    318E : 21 79 FC                LXI     H,FPRND_R				    ;ptr to Floating Point Random
   10439/    3191 : C3 CA 31                JMP     R_MOVE_FAC1_TO_M			;Move FAC1 to M
   10440/    3194 :                     
   10441/    3194 :                     ; 
   10442/    3194 :                     ; Double precision add FP at (HL) to FAC1
   10443/    3194 :                     ; 
   10444/    3194 :                     R_ADD_M_FAC1:
   10445/    3194 : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10446/    3197 : C3 78 2B                JMP     R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   10447/    319A :                     
   10448/    319A :                     ; 
   10449/    319A :                     ; Double precision subtract FP at (HL) from FAC1
   10450/    319A :                     ; 
   10451/    319A :                     R_SUB_M_FAC1:
   10452/    319A : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10453/    319D : C3 69 2B                JMP     R_DBL_SUB				    ;Double precision subtract (FAC1=FAC1-FAC2)
   10454/    31A0 :                     ;
   10455/    31A0 :                     ; Double precision Square (FAC1=SQR(FAC1))
   10456/    31A0 :                     ;
   10457/    31A0 :                     R_DBL_SQR:								;31A0H
   10458/    31A0 : 21 18 FC                LXI     H,DFACLO_R					;FAC1
   10459/    31A3 :                     ;
   10460/    31A3 :                     ; Double precision math (FAC1=M * FAC2))
   10461/    31A3 :                     ;
   10462/    31A3 :                     R_MULT_M_FAC2:							;31A3H
   10463/    31A3 : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10464/    31A6 : C3 FF 2C                JMP     R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   10465/    31A9 :                     
   10466/    31A9 :                     ; 
   10467/    31A9 :                     ; Double precision math (FAC1=M / FAC2)) -- TODO unreachable
   10468/    31A9 :                     ; 
   10469/    31A9 : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10470/    31AC : C3 C7 2D                JMP     R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   10471/    31AF :                     
   10472/    31AF :                     ; 
   10473/    31AF :                     ; Double precision compare FAC1 with floating point at HL
   10474/    31AF :                     ; 
   10475/    31AF :                     R_CMP_FAC1_M:
   10476/    31AF : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10477/    31B2 : C3 D2 34                JMP     L_CMP_DBL_FAC1_2			;Double precision compare FAC1 with FAC2
   10478/    31B5 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 176 - 9/5/2025 20:20:35


   10479/    31B5 :                     ;Move FAC1 to FAC2
   10480/    31B5 :                     ;
   10481/    31B5 :                     R_FAC2_EQ_FAC1:							;31B5H
   10482/    31B5 : 21 18 FC                LXI     H,DFACLO_R					;FAC1
   10483/    31B8 :                     ;
   10484/    31B8 :                     ;Move floating point number M to FAC2
   10485/    31B8 :                     ;
   10486/    31B8 :                     R_FAC2_EQ_FP:							;31B8H
   10487/    31B8 : 11 69 FC                LXI     D,DFACLO2_R					;Start of FAC2
   10488/    31BB :                     ; 
   10489/    31BB :                     ; Move floating point number at (HL) to the one at (DE)
   10490/    31BB :                     ; 
   10491/    31BB :                     L_MOVE_8_BYTES_HL_DE:
   10492/    31BB : EB                      XCHG
   10493/    31BC : CD CD 31                CALL    R_MOVE_8_BYTES_INC
   10494/    31BF : EB                      XCHG
   10495/    31C0 : C9                      RET
   10496/    31C1 :                     ;
   10497/    31C1 :                     ;Move FAC2 to FAC1
   10498/    31C1 :                     ;
   10499/    31C1 :                     R_FAC1_EQ_FAC2:							;31C1H
   10500/    31C1 : 21 69 FC                LXI     H,DFACLO2_R					;Start of FAC2
   10501/    31C4 :                     ;
   10502/    31C4 :                     ;Move floating point number M to FAC1
   10503/    31C4 :                     ;
   10504/    31C4 :                     R_FAC1_EQ_FP:							;31C4H
   10505/    31C4 : 11 18 FC                LXI     D,DFACLO_R					;FAC1
   10506/    31C7 : C3 BB 31                JMP     L_MOVE_8_BYTES_HL_DE
   10507/    31CA :                     ;
   10508/    31CA :                     ; Move FAC1 to M
   10509/    31CA :                     ;
   10510/    31CA :                     R_MOVE_FAC1_TO_M:						;31CAH
   10511/    31CA : 11 18 FC                LXI     D,DFACLO_R					;FAC1
   10512/    31CD :                     R_MOVE_8_BYTES_INC:
   10513/    31CD : 06 08                   MVI     B,08H
   10514/    31CF : C3 69 34                JMP     R_MOVE_B_BYTES_INC			;Move B bytes from (DE) to M with increment
   10515/    31D2 :                     
   10516/    31D2 :                     ; 
   10517/    31D2 :                     ; Swap FAC1 with Floating Point number on stack
   10518/    31D2 :                     ; 
   10519/    31D2 :                     L_SWP_FAC_SP:
   10520/    31D2 : E1                      POP     H							;return address
   10521/    31D3 : 22 E7 FB                SHLD    FPTMP1_R					;save it
   10522/    31D6 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10523/    31D9 : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10524/    31DC : CD C1 31                CALL    R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   10525/    31DF : 2A E7 FB                LHLD    FPTMP1_R				    ;retrieve return address
   10526/    31E2 : E9                      PCHL   
   10527/    31E3 :                     
   10528/    31E3 :                     ; 
   10529/    31E3 :                     ; Take NEG(FAC1) and push return address to NEG(FAC1)
   10530/    31E3 :                     ; 
   10531/    31E3 :                     L_NEG_NEG:
   10532/    31E3 : CD FD 33                CALL    L_NEG						;Negate FAC1
   10533/    31E6 : 21 FD 33                LXI     H,L_NEG
   10534/    31E9 : E3                      XTHL								;swap L_NEG and return address
   10535/    31EA : E9                      PCHL								;return
   10536/    31EB :                     ;
   10537/    31EB :                     ; Square FAC1 & do table based math
   10538/    31EB :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 177 - 9/5/2025 20:20:35


   10539/    31EB :                     R_SQR_FAC1_MULT_TBL:					;31EBH
   10540/    31EB : 22 E7 FB                SHLD    FPTMP1_R				    ;Floating Point Temp 1
   10541/    31EE : CD A0 31                CALL    R_DBL_SQR				    ;Double precision Square (FAC1=SQR(FAC1))
   10542/    31F1 : 2A E7 FB                LHLD    FPTMP1_R				    ;Floating Point Temp 1
   10543/    31F4 : C3 09 32                JMP     R_TBL_BASED_MATH			;Table based math (FAC1=(((FAC1*M)+(M+1))*(M+2)+(M+3)...
   10544/    31F7 :                     
   10545/    31F7 :                     ; 
   10546/    31F7 :                     ; FAC1 = FAC1 * (FAC1^2 * table based math)
   10547/    31F7 :                     ;
   10548/    31F7 :                     ; IN:
   10549/    31F7 :                     ;	HL		table ptr (Code Based.)
   10550/    31F7 :                     ; 
   10551/    31F7 :                     R_MULT_FAC1_PWR2_TBL:
   10552/    31F7 : 22 E7 FB                SHLD    FPTMP1_R				    ;Floating Point Temp 1
   10553/    31FA : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   10554/    31FD : 2A E7 FB                LHLD    FPTMP1_R				    ;Floating Point Temp 1
   10555/    3200 : CD EB 31                CALL    R_SQR_FAC1_MULT_TBL         ;Square FAC1 & do table based math
   10556/    3203 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   10557/    3206 : C3 FF 2C                JMP     R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   10558/    3209 :                     ;
   10559/    3209 :                     ; Table based math (FAC1=(((FAC1*M)+(M+1))*(M+2)+(M+3)...
   10560/    3209 :                     ;
   10561/    3209 :                     R_TBL_BASED_MATH:						;3209H
   10562/    3209 : 7E                      MOV     A,M							;number of entries in table
   10563/    320A : F5                      PUSH    PSW							;save it
   10564/    320B : 23                      INX     H							;bump ptr
   10565/    320C : E5                      PUSH    H							;save table ptr
   10566/    320D : 21 E7 FB                LXI     H,FPTMP1_R				    ;Floating Point Temp 1
   10567/    3210 : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   10568/    3213 : E1                      POP     H							;restore table ptr
   10569/    3214 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   10570/    3217 : F1                  -	POP     PSW							;restore number of entries in table
   10571/    3218 : 3D                      DCR     A
   10572/    3219 : C8                      RZ
   10573/    321A : F5                      PUSH    PSW							;update number of entries in table
   10574/    321B : E5                      PUSH    H							;save table ptr
   10575/    321C : 21 E7 FB                LXI		H,FPTMP1_R
   10576/    321F : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   10577/    3222 : E1                      POP     H							;restore table ptr
   10578/    3223 : CD B8 31                CALL    R_FAC2_EQ_FP				;Move floating point number M to FAC2
   10579/    3226 : E5                      PUSH    H
   10580/    3227 : CD 78 2B                CALL    R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   10581/    322A : E1                      POP     H
   10582/    322B : C3 17 32                JMP     -							;loop
   10583/    322E :                     ;
   10584/    322E :                     ; Push FAC2 on stack
   10585/    322E :                     ;
   10586/    322E :                     R_PUSH_FAC2:							;322EH
   10587/    322E : 21 70 FC                LXI     H,DFACLO2_R+7				;Point to end of FAC2
   10588/    3231 : C3 37 32                JMP     L_PUSH_FAC1_1
   10589/    3234 :                     ;
   10590/    3234 :                     ; Push FAC1 on stack
   10591/    3234 :                     ;
   10592/    3234 :                     R_PUSH_FAC1:							;3234H
   10593/    3234 : 21 1F FC                LXI     H,DFACLO_R+7				;Point to end of FAC1
   10594/    3237 :                     L_PUSH_FAC1_1:
   10595/    3237 : 3E 04                   MVI     A,04H						;push 4 words from M to Stack
   10596/    3239 : D1                      POP     D							;get return address
   10597/    323A : 46                  -	MOV     B,M
   10598/    323B : 2B                      DCX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 178 - 9/5/2025 20:20:35


   10599/    323C : 4E                      MOV     C,M
   10600/    323D : 2B                      DCX     H
   10601/    323E : C5                      PUSH    B
   10602/    323F : 3D                      DCR     A
   10603/    3240 : C2 3A 32                JNZ     -
   10604/    3243 : EB                      XCHG								;return address to HL
   10605/    3244 : E9                  	PCHL								;jump to return address
   10606/    3245 :                     
   10607/    3245 :                     ;
   10608/    3245 :                     ; Pop FAC2 from stack
   10609/    3245 :                     ;
   10610/    3245 :                     R_POP_FAC2:								;3245H
   10611/    3245 : 21 69 FC                LXI     H,DFACLO2_R					;Start of FAC2
   10612/    3248 : C3 4E 32                JMP     R_POP_FAC1_2
   10613/    324B :                     ;
   10614/    324B :                     ; Pop FAC1 from stack
   10615/    324B :                     ;
   10616/    324B :                     R_POP_FAC1:								;324BH
   10617/    324B : 21 18 FC                LXI     H,DFACLO_R					;FAC1
   10618/    324E :                     R_POP_FAC1_2:
   10619/    324E : 3E 04                   MVI     A,04H						;pop 4 words from Stack to M
   10620/    3250 : D1                      POP     D							;return address
   10621/    3251 : C1                  -	POP     B							;next word
   10622/    3252 : 71                      MOV     M,C
   10623/    3253 : 23                      INX     H
   10624/    3254 : 70                      MOV     M,B
   10625/    3255 : 23                      INX     H
   10626/    3256 : 3D                      DCR     A							;count
   10627/    3257 : C2 51 32                JNZ     -
   10628/    325A : EB                      XCHG								;return address to HL
   10629/    325B : E9                  	PCHL								;jump to return address
   10630/    325C :                     ;
   10631/    325C :                     ; Floating point numbers for math operations
   10632/    325C :                     ; Keep these 4 numbers together
   10633/    325C :                     ;
   10634/    325C :                     R_FP_NUMBERS:							;325CH
   10635/    325C : 00 14 38 98 20 42       DB      00H,14H,38H,98H,20H,42H,08H,21H	;1.4389820420821e-65 - RND
                    08 21 
   10636/    3264 : 00 21 13 24 86 54       DB      00H,21H,13H,24H,86H,54H,05H,19H	;2.1132486540519e-65
                    05 19 
   10637/    326C : 00 40 64 96 51 37       DB      00H,40H,64H,96H,51H,37H,23H,58H	;4.0649651372358e-65 - BASIC initialize
                    23 58 
   10638/    3274 : 40 43 42 94 48 19       DB      40H,43H,42H,94H,48H,19H,03H,24H	;0.43429448190324 - EXP
                    03 24 
   10639/    327C :                     ;
   10640/    327C :                     ; Floating point num-shares 6 bytes from next number
   10641/    327C :                     ;
   10642/    327C :                     R_DBL_PNT5:				    			;327CH
   10643/    327C : 40 50                   DB      40H,50H						;0.500000000000 - SIN, SQR, EXP
   10644/    327E :                     ;
   10645/    327E :                     ; Floating point numbers_1 for math operations 
   10646/    327E :                     ;
   10647/    327E :                     R_DBL_ZERO:								;327EH
   10648/    327E : 00 00 00 00 00 00       DB      00H,00H,00H,00H,00H,00H,00H,00H	;0.0000000000000 - Various
                    00 00 
   10649/    3286 :                     R_DBL_ONE:
   10650/    3286 : 41 10 00 00 00 00       DB      41H,10H,00H,00H,00H,00H,00H,00H	;1.0000000000000 - Various
                    00 00 
   10651/    328E :                     R_DL_PNT25:
   10652/    328E : 40 25 00 00 00 00       DB      40H,25H,00H,00H,00H,00H,00H,00H	;0.2500000000000 - COS
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 179 - 9/5/2025 20:20:35


                    00 00 
   10653/    3296 :                     R_FP_NUMBERS_4:
   10654/    3296 : 41 31 62 27 76 60       DB      41H,31H,62H,27H,76H,60H,16H,84H	;3.1622776601684 - LOG & EXP
                    16 84 
   10655/    329E :                     R_FP_NUMBERS_5:
   10656/    329E : 40 86 85 88 96 38       DB      40H,86H,85H,88H,96H,38H,06H,50H	;0.86858896380650 - LOG
                    06 50 
   10657/    32A6 :                     R_FP_NUMBERS_6:
   10658/    32A6 : 41 23 02 58 50 92       DB      41H,23H,02H,58H,50H,92H,99H,40H	;2.3025850929940 - LOG
                    99 40 
   10659/    32AE :                     R_FP_NUMBERS_7:
   10660/    32AE : 41 15 70 79 63 26       DB      41H,15H,70H,79H,63H,26H,79H,49H	;1.5707963267949 - ATN
                    79 49 
   10661/    32B6 :                     R_FP_NUMBERS_8:
   10662/    32B6 : 40 26 79 49 19 24       DB      40H,26H,79H,49H,19H,24H,31H,12H	;0.26794919243112 - ATN
                    31 12 
   10663/    32BE :                     R_FP_NUMBERS_9:
   10664/    32BE : 41 17 32 05 08 07       DB      41H,17H,32H,05H,08H,07H,56H,89H	;1.7320508075689 - ATN
                    56 89 
   10665/    32C6 :                     R_FP_NUMBERS_10:
   10666/    32C6 : 40 52 35 98 77 55       DB      40H,52H,35H,98H,77H,55H,98H,30H	;0.52359877559830 - ATN
                    98 30 
   10667/    32CE :                     R_FP_NUMBERS_11:
   10668/    32CE : 40 15 91 54 94 30       DB      40H,15H,91H,54H,94H,30H,91H,90H	;0.15915494309190 - SIN & COS
                    91 90 
   10669/    32D6 :                     ;
   10670/    32D6 :                     ; Count of Floating point numbers to follow for EXP
   10671/    32D6 :                     ;
   10672/    32D6 :                     R_EXP_MATH_TBL:							;32D6H
   10673/    32D6 : 04                      DB      04H
   10674/    32D7 : 41 10 00 00 00 00   	DB		41H,10H,00H,00H,00H,00H,00H,00H
                    00 00 
   10675/    32DF : 43 15 93 74 15 23       DB      43H,15H,93H,74H,15H,23H,60H,31H
                    60 31 
   10676/    32E7 : 44 27 09 31 69 40       DB      44H,27H,09H,31H,69H,40H,85H,16H
                    85 16 
   10677/    32EF : 44 44 97 63 35 57       DB      44H,44H,97H,63H,35H,57H,40H,58H
                    40 58 
   10678/    32F7 :                     ;
   10679/    32F7 :                     ; Count of Floating point numbers to follow for EXP_1
   10680/    32F7 :                     ;
   10681/    32F7 :                     R_EXP_MATH_TBL_1:						;32F7H
   10682/    32F7 : 03                      DB      03H
   10683/    32F8 : 42 18 31 23 60 15       DB      42H,18H,31H,23H,60H,15H,92H,75H
                    92 75 
   10684/    3300 : 43 83 14 06 72 12       DB      43H,83H,14H,06H,72H,12H,93H,71H
                    93 71 
   10685/    3308 : 44 51 78 09 19 91       DB      44H,51H,78H,09H,19H,91H,51H,62H
                    51 62 
   10686/    3310 :                     ;
   10687/    3310 :                     ; Count of Floating point numbers to follow for LOG
   10688/    3310 :                     ;
   10689/    3310 :                     R_LOG_MATH_TBL:							;3310H
   10690/    3310 : 04                      DB      04H
   10691/    3311 : C0 71 43 33 82 15       DB      0C0H,71H,43H,33H,82H,15H,32H,26H
                    32 26 
   10692/    3319 : 41 62 50 36 51 12       DB      41H,62H,50H,36H,51H,12H,79H,08H
                    79 08 
   10693/    3321 : C2 13 68 23 70 24       DB      0C2H,13H,68H,23H,70H,24H,15H,03H
                    15 03 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 180 - 9/5/2025 20:20:35


   10694/    3329 : 41 85 16 73 19 87       DB      41H,85H,16H,73H,19H,87H,23H,89H
                    23 89 
   10695/    3331 :                     ;
   10696/    3331 :                     ; Count of Floating point numbers to follow for LOG_1
   10697/    3331 :                     ;
   10698/    3331 :                     R_LOG_MATH_TBL_1:						;3331H
   10699/    3331 : 05                      DB      05H
   10700/    3332 : 41 10 00 00 00 00       DB      41H,10H,00H,00H,00H,00H,00H,00H
                    00 00 
   10701/    333A : C2 13 21 04 78 35       DB      0C2H,13H,21H,04H,78H,35H,01H,56H
                    01 56 
   10702/    3342 : 42 47 92 52 56 04       DB      42H,47H,92H,52H,56H,04H,38H,73H
                    38 73 
   10703/    334A : C2 64 90 66 82 74       DB      0C2H,64H,90H,66H,82H,74H,09H,43H
                    09 43 
   10704/    3352 : 42 29 41 57 50 17       DB      42H,29H,41H,57H,50H,17H,23H,23H
                    23 23 
   10705/    335A :                     ;
   10706/    335A :                     ; Count of Floating point numbers to follow for SIN
   10707/    335A :                     ;
   10708/    335A :                     R_SIN_MATH_TBL:							;335AH
   10709/    335A : 08                      DB      08H
   10710/    335B : C0 69 21 56 92 29       DB      0C0H,69H,21H,56H,92H,29H,18H,09H
                    18 09 
   10711/    3363 : 41 38 17 28 86 38       DB      41H,38H,17H,28H,86H,38H,57H,71H
                    57 71 
   10712/    336B : C2 15 09 44 99 47       DB      0C2H,15H,09H,44H,99H,47H,48H,01H
                    48 01 
   10713/    3373 : 42 42 05 86 89 66       DB      42H,42H,05H,86H,89H,66H,73H,55H
                    73 55 
   10714/    337B : C2 76 70 58 59 68       DB      0C2H,76H,70H,58H,59H,68H,32H,91H
                    32 91 
   10715/    3383 : 42 81 60 52 49 27       DB      42H,81H,60H,52H,49H,27H,55H,13H
                    55 13 
   10716/    338B : C2 41 34 17 02 24       DB      0C2H,41H,34H,17H,02H,24H,03H,98H
                    03 98 
   10717/    3393 : 41 62 83 18 53 07       DB      41H,62H,83H,18H,53H,07H,17H,96H
                    17 96 
   10718/    339B :                     ;
   10719/    339B :                     ; Count of Floating point numbers to follow for ATN
   10720/    339B :                     ;
   10721/    339B :                     R_ATN_MATH_TBL:							;339BH
   10722/    339B : 08                      DB      08H
   10723/    339C : BF 52 08 69 39 04       DB      0BFH,52H,08H,69H,39H,04H,00H,00H
                    00 00 
   10724/    33A4 : 3F 75 30 71 49 13       DB      3FH,75H,30H,71H,49H,13H,48H,00H
                    48 00 
   10725/    33AC : BF 90 81 34 32 24       DB      0BFH,90H,81H,34H,32H,24H,70H,50H
                    70 50 
   10726/    33B4 : 40 11 11 07 94 18       DB      40H,11H,11H,07H,94H,18H,40H,29H
                    40 29 
   10727/    33BC : C0 14 28 56 08 55       DB      0C0H,14H,28H,56H,08H,55H,48H,84H
                    48 84 
   10728/    33C4 : 40 19 99 99 99 94       DB      40H,19H,99H,99H,99H,94H,89H,67H
                    89 67 
   10729/    33CC : C0 33 33 33 33 33       DB      0C0H,33H,33H,33H,33H,33H,31H,60H
                    31 60 
   10730/    33D4 : 41 10 00 00 00 00       DB      41H,10H,00H,00H,00H,00H,00H,00H
                    00 00 
   10731/    33DC :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 181 - 9/5/2025 20:20:35


   10732/    33DC :                     ; RST 30H routine - Get sign of SGL or DBL precision
   10733/    33DC :                     ;
   10734/    33DC :                     R_RST_30H_FUN:							;33DCH
   10735/    33DC : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10736/    33DF : B7                      ORA     A
   10737/    33E0 : C8                      RZ									;retif FAC1 == 0: return 0
   10738/    33E1 :                     ; TODO why reload DFACLO_R?
   10739/    33E1 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   10740/    33E4 : C3 E8 33                JMP     L_EVAL_SIGN_IN_A
   10741/    33E7 :                     ;
   10742/    33E7 :                     ; Return 1 or -1 in A based on Inverse of Sign bit in A
   10743/    33E7 :                     ;
   10744/    33E7 :                     L_EVAL_INV_SIGN_IN_A:
   10745/    33E7 : 2F                      CMA
   10746/    33E8 :                     ;
   10747/    33E8 :                     ; Return 1 or -1 in A based on Sign bit in A
   10748/    33E8 :                     ;
   10749/    33E8 :                     L_EVAL_SIGN_IN_A:
   10750/    33E8 : 17                      RAL									;sign bit to carry
   10751/    33E9 :                     ;
   10752/    33E9 :                     ; Return 1 or -1 in A based on Carry flag
   10753/    33E9 :                     ;	
   10754/    33E9 :                     L_EVAL_CARRY_IN_A:
   10755/    33E9 : 9F                      SBB     A
   10756/    33EA : C0                      RNZ									;retif -1
   10757/    33EB : 3C                      INR     A							;was 0, now +1
   10758/    33EC : C9                      RET   
   10759/    33ED :                     	
   10760/    33ED :                     ;
   10761/    33ED :                     ; Initialize FAC1 for SGL & DBL precision to zero
   10762/    33ED :                     ;
   10763/    33ED :                     L_SET_FAC_ZERO:
   10764/    33ED : AF                      XRA     A
   10765/    33EE : 32 18 FC                STA     DFACLO_R					;FAC1
   10766/    33F1 : C9                      RET
   10767/    33F2 :                     ;
   10768/    33F2 :                     ; ABS function
   10769/    33F2 :                     ;
   10770/    33F2 :                     R_ABS_FUN:								;33F2H
   10771/    33F2 : CD 11 34                CALL    L_VSIGN						;Determine sign of last variable used numner
   10772/    33F5 : F0                      RP									;Return if already positive
   10773/    33F6 :                     ;
   10774/    33F6 :                     ;NEGATE ANY TYPE VALUE IN THE FAC
   10775/    33F6 :                     ;
   10776/    33F6 :                     L_VNEG:
   10777/    33F6 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   10778/    33F7 : FA D0 37                JM      L_INEG						;If integer, jump to ABS function for integer FAC1
   10779/    33FA : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error if last var was string
   10780/    33FD :                     ;
   10781/    33FD :                     ; NEGATE NUMBER IN THE FAC
   10782/    33FD :                     ; ALTERS A,H,L
   10783/    33FD :                     ; NOTE: THE NUMBER MUST BE PACKED
   10784/    33FD :                     ;
   10785/    33FD :                     L_NEG:									;Negate FAC1
   10786/    33FD : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10787/    3400 : 7E                      MOV     A,M							;Get sign / decimal point byte
   10788/    3401 : B7                      ORA     A							;Test if FAC1 is zero
   10789/    3402 : C8                      RZ									;retif 0
   10790/    3403 : EE 80                   XRI     80H							;Invert the sign bit - make positive
   10791/    3405 : 77                      MOV     M,A							;Save inverted sign bit to FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 182 - 9/5/2025 20:20:35


   10792/    3406 : C9                      RET
   10793/    3407 :                     ;
   10794/    3407 :                     ; SGN function
   10795/    3407 :                     ;
   10796/    3407 :                     R_SGN_FUN:								;3407H
   10797/    3407 : CD 11 34                CALL    L_VSIGN						;Determine sign of last variable used
   10798/    340A :                     L_CONIA:
   10799/    340A :                     L_SGN_EXTEND:							;sign extend A to HL
   10800/    340A : 6F                      MOV     L,A
   10801/    340B : 17                      RAL
   10802/    340C : 9F                      SBB     A
   10803/    340D : 67                      MOV     H,A
   10804/    340E : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
   10805/    3411 :                     
   10806/    3411 :                     ; 
   10807/    3411 :                     ; Determine sign of last variable used
   10808/    3411 :                     ; 
   10809/    3411 :                     L_VSIGN:
   10810/    3411 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   10811/    3412 : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error if STRING
   10812/    3415 : F2 DC 33                JP      R_RST_30H_FUN				;Get sign of SGL or DBL precision
   10813/    3418 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   10814/    341B :                     L_EVAL_HL:
   10815/    341B : 7C                      MOV     A,H
   10816/    341C : B5                      ORA     L
   10817/    341D : C8                      RZ
   10818/    341E : 7C                      MOV     A,H
   10819/    341F : C3 E8 33                JMP     L_EVAL_SIGN_IN_A			;eval sign in A
   10820/    3422 :                     ;
   10821/    3422 :                     ; Push single precision FAC1 on stack
   10822/    3422 :                     ;
   10823/    3422 :                     R_PUSH_SNGL_FAC1:						;3422H
   10824/    3422 : EB                      XCHG
   10825/    3423 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   10826/    3426 : E3                      XTHL								;swap HL and return address
   10827/    3427 : E5                      PUSH    H							;push return address
   10828/    3428 : 2A 18 FC                LHLD    DFACLO_R					;FAC1
   10829/    342B : E3                      XTHL								;swap HL and return address
   10830/    342C : E5                      PUSH    H							;push return address
   10831/    342D : EB                      XCHG
   10832/    342E : C9                      RET
   10833/    342F :                     ;
   10834/    342F :                     ; Load single precision at M to FAC1
   10835/    342F :                     ;
   10836/    342F :                     R_SNGL_FAC1_EQ_M:						;342FH
   10837/    342F : CD 50 34                CALL    R_SNGL_DECB_EQ_M			;Reverse load single precision at M to DEBC
   10838/    3432 :                     ;
   10839/    3432 :                     ; Load single precision in BCDE to FAC1
   10840/    3432 :                     ;
   10841/    3432 :                     R_SNGL_FAC1_EQ_BCDE:				    ;3432H
   10842/    3432 : EB                      XCHG								;DE to HL
   10843/    3433 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   10844/    3436 : 60                      MOV     H,B							;BC to HL
   10845/    3437 : 69                      MOV     L,C
   10846/    3438 : 22 18 FC                SHLD    DFACLO_R					;FAC1
   10847/    343B : EB                      XCHG
   10848/    343C : C9                      RET
   10849/    343D :                     ;
   10850/    343D :                     ; Load single precision FAC1 to BCDE
   10851/    343D :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 183 - 9/5/2025 20:20:35


   10852/    343D :                     R_SNGL_BCDE_EQ_FAC1:					;343DH
   10853/    343D : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   10854/    3440 : EB                      XCHG
   10855/    3441 : 2A 18 FC                LHLD    DFACLO_R					;FAC1
   10856/    3444 : 4D                      MOV     C,L
   10857/    3445 : 44                      MOV     B,H
   10858/    3446 : C9                      RET
   10859/    3447 :                     ;
   10860/    3447 :                     ; Load single precision at M to BCDE
   10861/    3447 :                     ;
   10862/    3447 :                     R_SNGL_BCDE_EQ_M:						;3447H
   10863/    3447 : 4E                      MOV     C,M
   10864/    3448 : 23                      INX     H
   10865/    3449 : 46                      MOV     B,M
   10866/    344A : 23                      INX     H
   10867/    344B : (MACRO)             	GETDEFROMM
   10868/    344F : C9                      RET
   10869/    3450 :                     ;
   10870/    3450 :                     ; Reverse load single precision at M to DEBC
   10871/    3450 :                     ;
   10872/    3450 :                     ; Actual load order is EDCB
   10873/    3450 :                     ;
   10874/    3450 :                     ; OUT:
   10875/    3450 :                     ;	HL		updated
   10876/    3450 :                     ;
   10877/    3450 :                     R_SNGL_DECB_EQ_M:						;3450H
   10878/    3450 : 5E                      MOV     E,M
   10879/    3451 : 23                      INX     H
   10880/    3452 :                     ;
   10881/    3452 :                     ; load 3 bytes at M to D and BC
   10882/    3452 :                     ;
   10883/    3452 :                     L_LOAD_STR_M:
   10884/    3452 : 56                      MOV     D,M							;length
   10885/    3453 : 23                      INX     H
   10886/    3454 : 4E                      MOV     C,M							;str value ptr to BC
   10887/    3455 : 23                      INX     H
   10888/    3456 : 46                      MOV     B,M
   10889/    3457 :                     L_INCHL:								;Increment HL and return
   10890/    3457 : 23                      INX     H
   10891/    3458 : C9                      RET
   10892/    3459 :                     ;
   10893/    3459 :                     ;Move single precision FAC1 to M
   10894/    3459 :                     ;
   10895/    3459 :                     R_SNGL_M_EQ_FAC1:						;3459H
   10896/    3459 : 11 18 FC                LXI     D,DFACLO_R				    ;FAC1
   10897/    345C : 06 04                   MVI     B,04H
   10898/    345E : C3 69 34                JMP     R_MOVE_B_BYTES_INC       	;Move B bytes from (DE) to M with increment
   10899/    3461 :                     ;
   10900/    3461 :                     ;Move M to FAC2 using precision at VALTYP_R
   10901/    3461 :                     ;
   10902/    3461 :                     ; OUT:
   10903/    3461 :                     ;	B		0
   10904/    3461 :                     ;
   10905/    3461 :                     R_LOAD_FAC2_FROM_M:						;3461H
   10906/    3461 : 11 69 FC                LXI     D,DFACLO2_R					;Start of FAC2
   10907/    3464 :                     ;
   10908/    3464 :                     ;Move VALTYP_R bytes from M to (DE) with increment.
   10909/    3464 :                     ;
   10910/    3464 :                     R_MOVE_TYP_BYTES_INC_M_TO_DE:
   10911/    3464 : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 184 - 9/5/2025 20:20:35


   10912/    3465 :                     ;
   10913/    3465 :                     ;Move VALTYP_R bytes from (DE) to M with increment.
   10914/    3465 :                     ; Returns 0 in B
   10915/    3465 :                     ;
   10916/    3465 :                     R_MOVE_TYP_BYTES_INC:
   10917/    3465 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   10918/    3468 : 47                      MOV     B,A							;use Type value as length
   10919/    3469 :                     ;
   10920/    3469 :                     ;Move B bytes from (DE) to M with increment.
   10921/    3469 :                     ; Returns 0 in B
   10922/    3469 :                     ;
   10923/    3469 :                     R_MOVE_B_BYTES_INC:						;3469H
   10924/    3469 : 1A                      LDAX    D
   10925/    346A : 77                      MOV     M,A
   10926/    346B : 13                      INX     D
   10927/    346C : 23                      INX     H
   10928/    346D : 05                      DCR     B
   10929/    346E : C2 69 34                JNZ     R_MOVE_B_BYTES_INC       	;Move B bytes from (DE) to M with increment
   10930/    3471 : C9                      RET
   10931/    3472 :                     ;
   10932/    3472 :                     ;Move B bytes from (DE) to M with decrement
   10933/    3472 :                     ;
   10934/    3472 :                     R_MOVE_B_BYTES_DEC:						;3472H
   10935/    3472 : 1A                      LDAX    D
   10936/    3473 : 77                      MOV     M,A
   10937/    3474 : 1B                      DCX     D
   10938/    3475 : 2B                      DCX     H
   10939/    3476 : 05                      DCR     B
   10940/    3477 : C2 72 34                JNZ     R_MOVE_B_BYTES_DEC       	;Move B bytes from (DE) to M with decrement
   10941/    347A : C9                      RET
   10942/    347B :                     
   10943/    347B :                     L_CPY_FAC2_TO_1:						;Move VALTYP_R bytes from FAC2 to FAC1 with increment
   10944/    347B : 21 69 FC                LXI     H,DFACLO2_R					;Start of FAC2
   10945/    347E :                     L_CPY_M_TO_FAC1:						;Move VALTYP_R bytes from M to FAC1 with increment
   10946/    347E : 11 64 34                LXI     D,R_MOVE_TYP_BYTES_INC_M_TO_DE ;Move VALTYP_R bytes from M to (DE) with increment.
   10947/    3481 : C3 8A 34                JMP     L_CPY_FAC1
   10948/    3484 :                     
   10949/    3484 :                     ; 
   10950/    3484 :                     ; Copy FAC1 to FAC2
   10951/    3484 :                     ; 
   10952/    3484 :                     L_CPY_FAC1_TO_2:
   10953/    3484 : 21 69 FC                LXI     H,DFACLO2_R					;Start of FAC2
   10954/    3487 :                     ; Copy FAC1 to M
   10955/    3487 :                     L_CPY_FAC1_TO_M:
   10956/    3487 : 11 65 34                LXI     D,R_MOVE_TYP_BYTES_INC		;continuation function: from (DE) to M
   10957/    348A :                     ; Copy M to FAC1
   10958/    348A :                     L_CPY_FAC1:
   10959/    348A : D5                      PUSH    D							;set continuation address
   10960/    348B : 11 18 FC                LXI     D,DFACLO_R					;preload FAC1
   10961/    348E : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   10962/    3491 : FE 02                   CPI     02H							;INT type
   10963/    3493 : C0                      RNZ									;execute continuation routine if NOT INT 
   10964/    3494 : 11 1A FC                LXI     D,IFACLO_R					;FAC1 for integers
   10965/    3497 : C9                      RET									;execute continuation routine 
   10966/    3498 :                     ;
   10967/    3498 :                     ; Compare single precision in BCDE with FAC1
   10968/    3498 :                     ;
   10969/    3498 :                     R_SNGL_CMP_BCDE_FAC1:				    ;3498H
   10970/    3498 : 79                      MOV     A,C
   10971/    3499 : B7                      ORA     A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 185 - 9/5/2025 20:20:35


   10972/    349A : CA DC 33                JZ      R_RST_30H_FUN				;Get sign of SGL or DBL precision
   10973/    349D : 21 E7 33                LXI     H,L_EVAL_INV_SIGN_IN_A		;Return 1 or -1 in A based on Inverse of Sign bit in A
   10974/    34A0 : E5                      PUSH    H
   10975/    34A1 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   10976/    34A2 : 79                      MOV     A,C
   10977/    34A3 : C8                      RZ									;retif FAC1 == 0.0
   10978/    34A4 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   10979/    34A7 : AE                      XRA     M
   10980/    34A8 : 79                      MOV     A,C
   10981/    34A9 : F8                      RM
   10982/    34AA : CD B0 34                CALL    R_SNGL_CMP_BCDE_M			;Compare single precision in BCDE with M
   10983/    34AD : 1F                      RAR
   10984/    34AE : A9                      XRA     C
   10985/    34AF : C9                      RET
   10986/    34B0 :                     ;
   10987/    34B0 :                     ; Compare single precision in BCDE with M
   10988/    34B0 :                     ;
   10989/    34B0 :                     R_SNGL_CMP_BCDE_M:						;34B0H
   10990/    34B0 : 79                      MOV     A,C
   10991/    34B1 : BE                      CMP     M
   10992/    34B2 : C0                      RNZ
   10993/    34B3 : 23                      INX     H
   10994/    34B4 : 78                      MOV     A,B
   10995/    34B5 : BE                      CMP     M
   10996/    34B6 : C0                      RNZ
   10997/    34B7 : 23                      INX     H
   10998/    34B8 : 7B                      MOV     A,E
   10999/    34B9 : BE                      CMP     M
   11000/    34BA : C0                      RNZ
   11001/    34BB : 23                      INX     H
   11002/    34BC : 7A                      MOV     A,D
   11003/    34BD : 96                      SUB     M
   11004/    34BE : C0                      RNZ
   11005/    34BF : E1                      POP     H
   11006/    34C0 : E1                      POP     H
   11007/    34C1 : C9                      RET
   11008/    34C2 :                     ;
   11009/    34C2 :                     ; Compare signed integer in DE with that in HL
   11010/    34C2 :                     ;
   11011/    34C2 :                     R_SINT_CMP:								;34C2H
   11012/    34C2 : 7A                      MOV     A,D
   11013/    34C3 : AC                      XRA     H
   11014/    34C4 : 7C                      MOV     A,H
   11015/    34C5 : FA E8 33                JM      L_EVAL_SIGN_IN_A
   11016/    34C8 : BA                      CMP     D
   11017/    34C9 : C2 CF 34                JNZ     +
   11018/    34CC : 7D                      MOV     A,L
   11019/    34CD : 93                      SUB     E
   11020/    34CE : C8                      RZ
   11021/    34CF : C3 E9 33            +	JMP     L_EVAL_CARRY_IN_A
   11022/    34D2 :                     
   11023/    34D2 :                     ; 
   11024/    34D2 :                     ; Double precision compare FAC1 with FAC2
   11025/    34D2 :                     ; 
   11026/    34D2 :                     L_CMP_DBL_FAC1_2:
   11027/    34D2 : 11 69 FC                LXI     D,DFACLO2_R				    ;Start of FAC2
   11028/    34D5 : 1A                      LDAX    D							;Get Sign and Decimal point location for FAC2
   11029/    34D6 : B7                      ORA     A
   11030/    34D7 : CA DC 33                JZ      R_RST_30H_FUN				;If FAC2 is zero, jump to return sign of FAC1 as the answer
   11031/    34DA : 21 E7 33                LXI     H,L_EVAL_INV_SIGN_IN_A		;Return 1 or -1 in A based on Inverse of Sign bit in A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 186 - 9/5/2025 20:20:35


   11032/    34DD : E5                      PUSH    H							;continuation function
   11033/    34DE : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   11034/    34DF : 1A                      LDAX    D							;Get Sign and Decimal point location for FAC2
   11035/    34E0 : 4F                      MOV     C,A							;Save sign of FAC2 in C
   11036/    34E1 : C8                      RZ									;If FAC1 is zero, goto continuation function
   11037/    34E2 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   11038/    34E5 : AE                      XRA     M							;XOR sign bit of FAC1 and FAC2 to determine if they are equal
   11039/    34E6 : 79                      MOV     A,C							;Restore sign of FAC2 to A
   11040/    34E7 : F8                      RM									;Return to calculate 1 or -1 based on sign of FAC2 if sign of FAC1 != FAC2
   11041/    34E8 : 06 08                   MVI     B,08H						;Prepare to compare 8 bytes of floating point
   11042/    34EA : 1A                  -	LDAX    D							;Get next byte from FAC2
   11043/    34EB : 96                      SUB     M							;Subtract next byte from FAC1
   11044/    34EC : C2 F7 34                JNZ     +							;If not equal, jump to determine which is bigger
   11045/    34EF : 13                      INX     D
   11046/    34F0 : 23                      INX     H
   11047/    34F1 : 05                      DCR     B							;Decrement byte counter
   11048/    34F2 : C2 EA 34                JNZ     -
   11049/    34F5 : C1                      POP     B							;POP continuation function	... they are equal and A already has zero
   11050/    34F6 : C9                      RET
   11051/    34F7 :                     ; 
   11052/    34F7 :                     ; FAC1 and FAC2 not equal. Get carry & XOR with sign of FAC2 to determine which is bigger
   11053/    34F7 :                     ; 
   11054/    34F7 : 1F                  +	RAR									;Get carry from last subtract
   11055/    34F8 : A9                      XRA     C							;XOR with sign of FAC1 & FAC2
   11056/    34F9 : C9                      RET
   11057/    34FA :                     ;
   11058/    34FA :                     ; Compare double precision FAC1 with FAC2
   11059/    34FA :                     ;
   11060/    34FA :                     R_CMP_FAC1_FAC2:						;34FAH
   11061/    34FA : CD D2 34                CALL    L_CMP_DBL_FAC1_2			;Double precision compare FAC1 with FAC2
   11062/    34FD : C2 E7 33                JNZ     L_EVAL_INV_SIGN_IN_A		;Return 1 or -1 in A based on Inverse of Sign bit in A
   11063/    3500 : C9                      RET
   11064/    3501 :                     ;
   11065/    3501 :                     ; CINT function
   11066/    3501 :                     ;
   11067/    3501 :                     R_CINT_FUN:								;3501H
   11068/    3501 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer:
   11069/    3502 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   11070/    3505 : F8                      RM									;Sign set: INT type
   11071/    3506 : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error if String
   11072/    3509 : CD DE 35                CALL    L_CVT_FP_TO_INT				;convert FAC1 to integer in DE
   11073/    350C : DA 55 04                JC      R_GEN_OV_ERROR				;Generate OV error
   11074/    350F : EB                      XCHG								;result to HL
   11075/    3510 :                     ;
   11076/    3510 :                     ; Load signed integer in HL to FAC1
   11077/    3510 :                     ;
   11078/    3510 :                     L_MAKINT:								;3510H
   11079/    3510 : 22 1A FC                SHLD    IFACLO_R					;store in FAC1 for integers
   11080/    3513 :                     L_VALINT:
   11081/    3513 : 3E 02                   MVI     A,02H						;Load code for INT type variable
   11082/    3515 :                     ; 
   11083/    3515 :                     ; Save type of last variable from A
   11084/    3515 :                     ; 
   11085/    3515 :                     L_CONISD:
   11086/    3515 : 32 65 FB                STA     VALTYP_R					;Type of last expression used
   11087/    3518 : C9                      RET
   11088/    3519 :                     
   11089/    3519 :                     ; 
   11090/    3519 :                     ; Test if FAC1 has 32768 in it.
   11091/    3519 :                     ; If TRUE, convert to INT
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 187 - 9/5/2025 20:20:35


   11092/    3519 :                     ; 
   11093/    3519 :                     L_TST_FAC1_8000H:
   11094/    3519 : 01 C5 32                LXI     B,32C5H
   11095/    351C : 11 76 80            	LXI		D,8076H
   11096/    351F : CD 98 34                CALL    R_SNGL_CMP_BCDE_FAC1     	;Compare single precision in BCDE with FAC1
   11097/    3522 : C0                      RNZ
   11098/    3523 : 21 00 80                LXI     H,8000H
   11099/    3526 :                     L_POPD_MAKINT:
   11100/    3526 : D1                      POP     D
   11101/    3527 : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
   11102/    352A :                     ;
   11103/    352A :                     ; CSNG function
   11104/    352A :                     ;
   11105/    352A :                     R_CSNG_FUN:								;352AH
   11106/    352A : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11107/    352B : E0                      RPO    
   11108/    352C : FA 40 35                JM      L_CONSI						;Convert signed integer in FAC1 to single precision
   11109/    352F : CA 5B 04                JZ      R_GEN_TM_ERROR				;Generate TM error
   11110/    3532 : CD D4 35                CALL    L_VALSNG					;set single precision variable type
   11111/    3535 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   11112/    3538 : 23                      INX     H
   11113/    3539 : 78                      MOV     A,B							;count
   11114/    353A : B7                      ORA     A							;clear carry
   11115/    353B : 1F                      RAR									;divide by 2
   11116/    353C : 47                      MOV     B,A							;# of digits
   11117/    353D : C3 2C 2C                JMP     L_ROUND_FAC1_1
   11118/    3540 :                     ;
   11119/    3540 :                     ;Convert signed integer in FAC1 to single precision
   11120/    3540 :                     ;
   11121/    3540 :                     L_CONSI:						;3540H
   11122/    3540 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   11123/    3543 :                     ;
   11124/    3543 :                     ;Convert signed integer HL to single precision FAC1
   11125/    3543 :                     ;
   11126/    3543 :                     R_CONV_SINT_HL_SNGL:				    ;3543H
   11127/    3543 : 7C                      MOV     A,H							;bit 7 is sign of HL
   11128/    3544 :                     ; entry pnt for unsigned integer HL to single precision FAC1 if A == 0
   11129/    3544 :                     L_CONV_HL_SNGL:							;Convert integer HL to single precision FAC1.									
   11130/    3544 : B7                      ORA     A							;Sign depends on A
   11131/    3545 : F5                      PUSH    PSW
   11132/    3546 : FC C6 37                CM      L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   11133/    3549 : CD D4 35                CALL    L_VALSNG					;set SNGL variable type
   11134/    354C : EB                      XCHG								;integer to DE
   11135/    354D : 21 00 00                LXI     H,0							;preset FAC1 to 0
   11136/    3550 : 22 18 FC                SHLD    DFACLO_R					;FAC1
   11137/    3553 : 22 1A FC                SHLD    DFACLO_R+2
   11138/    3556 : 7A                      MOV     A,D							;test integer
   11139/    3557 : B3                      ORA     E
   11140/    3558 : CA E2 27                JZ      L_POP_PSW_RET				;brif DE == 0: pop PSW, ret
   11141/    355B : 01 00 05                LXI     B,0500H						;5 entries in L_EXP_TBL
   11142/    355E : 21 19 FC                LXI     H,DFACLO_R+1				;Point to mantissa portion of FAC1
   11143/    3561 : E5                      PUSH    H
   11144/    3562 : 21 B0 35                LXI     H,L_EXP_TBL					;Code Based. Table to determine base 10 exponent
   11145/    3565 :                     ; compute exponent
   11146/    3565 :                     L_CONV_HL_SNGL_1:
   11147/    3565 : 3E FF                   MVI     A,0FFH
   11148/    3567 : D5                      PUSH    D
   11149/    3568 : (MACRO)             	GETDEFROMM
   11150/    356C : E3                      XTHL
   11151/    356D : C5                      PUSH    B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 188 - 9/5/2025 20:20:35


   11152/    356E : 44                  -	MOV     B,H
   11153/    356F : 4D                      MOV     C,L
   11154/    3570 : 19                      DAD     D
   11155/    3571 : 3C                      INR     A
   11156/    3572 : DA 6E 35                JC      -							;carry from DAD D
   11157/    3575 : 60                      MOV     H,B
   11158/    3576 : 69                      MOV     L,C
   11159/    3577 : C1                      POP     B
   11160/    3578 : D1                      POP     D
   11161/    3579 : EB                      XCHG
   11162/    357A : 0C                      INR     C
   11163/    357B : 0D                      DCR     C
   11164/    357C : C2 8B 35                JNZ     +
   11165/    357F : B7                      ORA     A
   11166/    3580 : CA A1 35                JZ      L_CONV_HL_SNGL_3
   11167/    3583 : F5                      PUSH    PSW
   11168/    3584 : 3E 40                   MVI     A,40H						;exponent bias
   11169/    3586 : 80                      ADD     B
   11170/    3587 : 32 18 FC                STA     DFACLO_R					;FAC1
   11171/    358A : F1                      POP     PSW
   11172/    358B : 0C                  +	INR     C
   11173/    358C : E3                      XTHL
   11174/    358D : F5                      PUSH    PSW
   11175/    358E : 79                      MOV     A,C							;digit number
   11176/    358F : 1F                      RAR									;bit 0 (odd or even) to carry
   11177/    3590 : D2 9C 35                JNC     +							;brif even digit number
   11178/    3593 :                     ; set odd digit BCD number
   11179/    3593 : F1                      POP     PSW
   11180/    3594 : 87                      ADD     A							;to upper nibble
   11181/    3595 : 87                      ADD     A
   11182/    3596 : 87                      ADD     A
   11183/    3597 : 87                      ADD     A
   11184/    3598 : 77                      MOV     M,A
   11185/    3599 : C3 A0 35                JMP     L_CONV_HL_SNGL_2
   11186/    359C :                     ; merge even digit BCD value
   11187/    359C : F1                  +	POP     PSW
   11188/    359D : B6                      ORA     M
   11189/    359E : 77                      MOV     M,A
   11190/    359F : 23                      INX     H
   11191/    35A0 :                     L_CONV_HL_SNGL_2:
   11192/    35A0 : E3                      XTHL
   11193/    35A1 :                     L_CONV_HL_SNGL_3:
   11194/    35A1 : 7A                      MOV     A,D
   11195/    35A2 : B3                      ORA     E
   11196/    35A3 : CA AA 35                JZ      +
   11197/    35A6 : 05                      DCR     B
   11198/    35A7 : C2 65 35                JNZ     L_CONV_HL_SNGL_1
   11199/    35AA : E1                  +	POP     H
   11200/    35AB : F1                      POP     PSW
   11201/    35AC : F0                      RP     
   11202/    35AD : C3 FD 33                JMP     L_NEG						;Negate FAC1
   11203/    35B0 :                     
   11204/    35B0 :                     L_EXP_TBL:
   11205/    35B0 : F0 D8 18 FC 9C FF   	DW		-10000, -1000, -100, -10, -1
                    F6 FF FF FF 
   11206/    35BA :                     ;
   11207/    35BA :                     ; CDBL function:
   11208/    35BA :                     ;	 Format: CDBL(expr)
   11209/    35BA :                     ;
   11210/    35BA :                     ; FORCE THE FAC TO BE A DOUBLE PRECISION NUMBER
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 189 - 9/5/2025 20:20:35


   11211/    35BA :                     ;
   11212/    35BA :                     L_FRCDBL:	
   11213/    35BA : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11214/    35BB : D0                      RNC									;retif already DBL
   11215/    35BC : CA 5B 04                JZ      R_GEN_TM_ERROR				;brif string: Generate TM error
   11216/    35BF : FC 40 35                CM      L_CONSI						;calif INT: Convert signed integer in FAC1 to single precision
   11217/    35C2 :                     L_CONDS:
   11218/    35C2 : 21 00 00                LXI     H,0
   11219/    35C5 : 22 1C FC                SHLD    IFACLO_R+2
   11220/    35C8 : 22 1E FC                SHLD    IFACLO_R+4
   11221/    35CB : 7C                      MOV     A,H
   11222/    35CC : 32 20 FC                STA     DFACLO_R+8					;Point to extended precision portion of FAC1
   11223/    35CF :                     L_VALDBL:
   11224/    35CF : 3E 08                   MVI     A,08H
   11225/    35D1 : C3 D6 35                JMP     +							;Use SKIP 2 bytes macro mbasic 5.2
   11226/    35D4 :                     
   11227/    35D4 :                     L_VALSNG:								;set single precision variable type
   11228/    35D4 : 3E 04                   MVI     A,04H 						;Load code for Single Precision variable type
   11229/    35D6 : C3 15 35            +	JMP     L_CONISD
   11230/    35D9 :                     ;
   11231/    35D9 :                     ;FORCE THE FAC TO BE A STRING. ALTERS A ONLY
   11232/    35D9 :                     ;
   11233/    35D9 :                     L_CHKSTR:
   11234/    35D9 : (MACRO)                 LSTTYP							   	;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11235/    35DA : C8                      RZ
   11236/    35DB : C3 5B 04                JMP     R_GEN_TM_ERROR				;Generate TM error
   11237/    35DE :                     ;
   11238/    35DE :                     ;Convert SNGL or DBL in FAC1 to INT
   11239/    35DE :                     ;
   11240/    35DE :                     ; OUT:
   11241/    35DE :                     ;	DE		integer value
   11242/    35DE :                     ;	carry	set if Overflow
   11243/    35DE :                     ;
   11244/    35DE :                     L_CVT_FP_TO_INT:
   11245/    35DE : 21 41 36                LXI     H,L_SETCARRY				;continuation function
   11246/    35E1 : E5                      PUSH    H
   11247/    35E2 : 21 18 FC                LXI     H,DFACLO_R				    ;ptr to FAC1
   11248/    35E5 : 7E                      MOV     A,M							;get exponent
   11249/    35E6 : E6 7F                   ANI     7FH							;clear sign bit
   11250/    35E8 : FE 46                   CPI     46H
   11251/    35EA : D0                      RNC									;retif exponent >= 46H: set carry because result too big
   11252/    35EB : D6 41                   SUI     41H							;rescale
   11253/    35ED : D2 F6 35                JNC     L_CVT_FP_TO_INT_0			;brif exponent >= 41H
   11254/    35F0 :                     ; exponent < 41H: number < 1. Return 0
   11255/    35F0 : B7                      ORA     A							;clear carry
   11256/    35F1 : D1                      POP     D							;remove continuation function
   11257/    35F2 : 11 00 00                LXI     D,0							;return value
   11258/    35F5 : C9                      RET
   11259/    35F6 :                     ;
   11260/    35F6 :                     ;Convert vetted SNGL or DBL to INT.
   11261/    35F6 :                     ;	Continuation function PUSHED
   11262/    35F6 :                     ;	HL ptr to FAC1
   11263/    35F6 :                     ;
   11264/    35F6 :                     L_CVT_FP_TO_INT_0:
   11265/    35F6 : 3C                      INR     A							;increment exponent
   11266/    35F7 : 47                      MOV     B,A							;exponent to B
   11267/    35F8 : 11 00 00                LXI     D,0							;result value
   11268/    35FB : 4A                      MOV     C,D							;clear BCD nibble flag. 
   11269/    35FC : 23                      INX     H							;ptr to mantissa
   11270/    35FD :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 190 - 9/5/2025 20:20:35


   11271/    35FD :                     ; BCD arithmetic
   11272/    35FD :                     ;
   11273/    35FD :                     L_CVT_FP_TO_INT_1:
   11274/    35FD : 79                      MOV     A,C							;get BCD nibble flag
   11275/    35FE : 0C                      INR     C							;increment BCD nibble flag
   11276/    35FF : 1F                      RAR									;odd/even to carry
   11277/    3600 : 7E                      MOV     A,M							;get next 2 BCD digits
   11278/    3601 : DA 0B 36                JC      L_CVT_FP_TO_INT_2			;brif BCD nibble flag is odd
   11279/    3604 : 1F                      RAR									;move upper BCD digit to lower nibble
   11280/    3605 : 1F                      RAR
   11281/    3606 : 1F                      RAR
   11282/    3607 : 1F                      RAR
   11283/    3608 : C3 0C 36                JMP     +
   11284/    360B :                     L_CVT_FP_TO_INT_2:
   11285/    360B : 23                      INX     H							;pnt to next 2 BCD digits
   11286/    360C : E6 0F               +	ANI     0FH							;isolate BCD digit
   11287/    360E : 22 12 FC                SHLD    FPTMP4_R
   11288/    3611 : 62                      MOV     H,D							;multiply HL by 10
   11289/    3612 : 6B                      MOV     L,E
   11290/    3613 : 29                      DAD     H							;x2
   11291/    3614 : D8                      RC									;overflow result
   11292/    3615 : 29                      DAD     H							;x4
   11293/    3616 : D8                      RC									;overflow result
   11294/    3617 : 19                      DAD     D							;x5
   11295/    3618 : D8                      RC									;overflow result
   11296/    3619 : 29                      DAD     H							;x10
   11297/    361A : D8                      RC									;overflow result
   11298/    361B : 5F                      MOV     E,A							;sign extend current BCD digit to DE
   11299/    361C : 16 00                   MVI     D,00H
   11300/    361E : 19                      DAD     D							;add to result
   11301/    361F : D8                      RC									;overflow result
   11302/    3620 : EB                      XCHG								;result to DE
   11303/    3621 : 2A 12 FC                LHLD    FPTMP4_R					;restore HL
   11304/    3624 : 05                      DCR     B							;exponent
   11305/    3625 : C2 FD 35                JNZ     L_CVT_FP_TO_INT_1			;brif not done
   11306/    3628 : 21 00 80                LXI     H,8000H
   11307/    362B : (MACRO)                 COMPAR								;Compare result and 8000H: HL - DE
   11308/    362C : 3A 18 FC                LDA     DFACLO_R					;FAC1
   11309/    362F : D8                      RC									;brif 8000H < DE
   11310/    3630 : CA 3D 36                JZ      +							;brif DE == 8000H
   11311/    3633 : E1                      POP     H
   11312/    3634 : B7                      ORA     A
   11313/    3635 : F0                      RP     
   11314/    3636 : EB                      XCHG								;result to HL
   11315/    3637 : CD C6 37                CALL    L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   11316/    363A : EB                      XCHG								;result from HL to DE
   11317/    363B : B7                      ORA     A							;clear carry
   11318/    363C : C9                      RET
   11319/    363D : B7                  +	ORA     A
   11320/    363E : F0                      RP     
   11321/    363F : E1                      POP     H
   11322/    3640 : C9                      RET
   11323/    3641 :                     
   11324/    3641 :                     L_SETCARRY:
   11325/    3641 : 37                      STC
   11326/    3642 : C9                      RET
   11327/    3643 :                     
   11328/    3643 :                     L_DEC_BC:
   11329/    3643 : 0B                      DCX     B
   11330/    3644 : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 191 - 9/5/2025 20:20:35


   11331/    3645 :                     ;
   11332/    3645 :                     ; FIX function
   11333/    3645 :                     ;
   11334/    3645 :                     R_FIX_FUN:								;3645H
   11335/    3645 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11336/    3646 : F8                      RM
   11337/    3647 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   11338/    3648 : F2 54 36                JP      R_INT_FUN				    ;brif positive: INT function
   11339/    364B : CD FD 33                CALL    L_NEG						;Negate FAC1
   11340/    364E : CD 54 36                CALL    R_INT_FUN				    ;INT function
   11341/    3651 : C3 F6 33                JMP     L_VNEG
   11342/    3654 :                     ;
   11343/    3654 :                     ; INT function
   11344/    3654 :                     ;
   11345/    3654 :                     R_INT_FUN:								;3654H
   11346/    3654 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11347/    3655 : F8                      RM
   11348/    3656 : 21 20 FC                LXI     H,DFACLO_R+8				;Point to extended precision portion of FAC1
   11349/    3659 : 0E 0E                   MVI     C,0EH						;preload 14 BCD digits
   11350/    365B : D2 66 36                JNC     +							;brif DBL type
   11351/    365E : CA 5B 04                JZ      R_GEN_TM_ERROR				;brif STRING type: Generate TM error
   11352/    3661 : 21 1C FC                LXI     H,IFACLO_R+2				;SNGL
   11353/    3664 : 0E 06                   MVI     C,06H						;6 BCD digits
   11354/    3666 : 3A 18 FC            +	LDA     DFACLO_R					;exponent of FAC1
   11355/    3669 : B7                      ORA     A							;test
   11356/    366A : FA 88 36                JM      L_RET_NEGINT				;brif negative
   11357/    366D :                     ;
   11358/    366D :                     ; return a positive Integer
   11359/    366D :                     ;
   11360/    366D : E6 7F                   ANI     7FH							;clear sign bit
   11361/    366F : D6 41                   SUI     41H							;rescale exponent
   11362/    3671 : DA ED 33                JC      L_SET_FAC_ZERO				;brif exponent < 41H (<0):
   11363/    3674 :                     										;	Initialize FAC1 for SGL & DBL precision to zero
   11364/    3674 : 3C                      INR     A
   11365/    3675 : 91                      SUB     C
   11366/    3676 : D0                      RNC
   11367/    3677 : 2F                      CMA
   11368/    3678 : 3C                      INR     A
   11369/    3679 : 47                      MOV     B,A							;loop count
   11370/    367A : 2B                  -	DCX     H							;next 2 BCD digits 
   11371/    367B : 7E                      MOV     A,M
   11372/    367C : E6 F0                   ANI     0F0H						;isolate upper nibble
   11373/    367E : 77                      MOV     M,A
   11374/    367F : 05                      DCR     B							;count
   11375/    3680 : C8                      RZ									;retif done
   11376/    3681 : AF                      XRA     A							;clear M
   11377/    3682 : 77                      MOV     M,A
   11378/    3683 : 05                      DCR     B							;count
   11379/    3684 : C2 7A 36                JNZ     -
   11380/    3687 : C9                      RET
   11381/    3688 :                     ;
   11382/    3688 :                     ;
   11383/    3688 :                     ; return a negative Integer
   11384/    3688 :                     ;
   11385/    3688 :                     ; IN:
   11386/    3688 :                     ;	A	negative exponent
   11387/    3688 :                     ;	C
   11388/    3688 :                     ;
   11389/    3688 :                     L_RET_NEGINT:
   11390/    3688 : E6 7F                   ANI     7FH							;clear sign bit
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 192 - 9/5/2025 20:20:35


   11391/    368A : D6 41                   SUI     41H							;rescale
   11392/    368C : D2 95 36                JNC     +							;brif exponent >= 41H
   11393/    368F : 21 FF FF                LXI     H,0FFFFH					;return -1
   11394/    3692 : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
   11395/    3695 :                     ;
   11396/    3695 :                     ; return a negative integer
   11397/    3695 :                     ;
   11398/    3695 : 3C                  +	INR     A
   11399/    3696 : 91                      SUB     C
   11400/    3697 : D0                      RNC									;retif A >= C 
   11401/    3698 : 2F                      CMA									;negate A
   11402/    3699 : 3C                      INR     A
   11403/    369A : 47                      MOV     B,A							;result to B
   11404/    369B : 1E 00                   MVI     E,00H						;counter
   11405/    369D :                     L_RET_NEGINT_1:
   11406/    369D : 2B                      DCX     H
   11407/    369E : 7E                      MOV     A,M
   11408/    369F : 57                      MOV     D,A							;save it
   11409/    36A0 : E6 F0                   ANI     0F0H						;11110000 Clear lower nibble
   11410/    36A2 : 77                      MOV     M,A
   11411/    36A3 : BA                      CMP     D							;same as before?
   11412/    36A4 : CA A8 36                JZ      +
   11413/    36A7 : 1C                      INR     E							;increment counter
   11414/    36A8 : 05                  +	DCR     B
   11415/    36A9 : CA B7 36                JZ      L_RET_NEGINT_2
   11416/    36AC : AF                      XRA     A
   11417/    36AD : 77                      MOV     M,A
   11418/    36AE : BA                      CMP     D
   11419/    36AF : CA B3 36                JZ      +
   11420/    36B2 : 1C                      INR     E
   11421/    36B3 : 05                  +	DCR     B
   11422/    36B4 : C2 9D 36                JNZ     L_RET_NEGINT_1
   11423/    36B7 :                     L_RET_NEGINT_2:
   11424/    36B7 : 1C                      INR     E							;test E
   11425/    36B8 : 1D                      DCR     E
   11426/    36B9 : C8                      RZ									;retif E == 0FFH
   11427/    36BA : 79                      MOV     A,C							;type BCD length
   11428/    36BB : FE 06                   CPI     06H
   11429/    36BD : 01 C1 10                LXI     B,10C1H						;SNGL constant 1.0 to BCDE
   11430/    36C0 : 11 00 00                LXI     D,0
   11431/    36C3 : CA F4 37                JZ      R_SNGL_ADD_BCDE				;Single precision addition (FAC1=FAC1+BCDE)
   11432/    36C6 :                     ; DBL addition
   11433/    36C6 :                     ; TODO consider copying 8 bytes from R_DBL_ONE to DFACLO2_R using R_FAC2_EQ_FP()
   11434/    36C6 : EB                      XCHG								;HL now 0
   11435/    36C7 : 22 6F FC                SHLD    DFACLO2_R+6					;0FC6FH
   11436/    36CA : 22 6D FC                SHLD    DFACLO2_R+4					;0FC6DH
   11437/    36CD : 22 6B FC                SHLD    DFACLO2_R+2					;0FC6BH
   11438/    36D0 : 60                      MOV     H,B							;HL now 10C1H	
   11439/    36D1 : 69                      MOV     L,C
   11440/    36D2 : 22 69 FC                SHLD    DFACLO2_R					;Start of FAC2
   11441/    36D5 : C3 78 2B                JMP     R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   11442/    36D8 :                     ;
   11443/    36D8 :                     ; INT multiply
   11444/    36D8 :                     ;
   11445/    36D8 :                     ; IN:
   11446/    36D8 :                     ;	BC
   11447/    36D8 :                     ;	DE
   11448/    36D8 :                     ;
   11449/    36D8 :                     ; OUT:
   11450/    36D8 :                     ;	DE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 193 - 9/5/2025 20:20:35


   11451/    36D8 :                     ;
   11452/    36D8 :                     L_INT16_MUL:
   11453/    36D8 : E5                      PUSH    H							;save HL
   11454/    36D9 : 21 00 00                LXI     H,0
   11455/    36DC : 78                      MOV     A,B
   11456/    36DD : B1                      ORA     C
   11457/    36DE : CA F5 36                JZ      L_INT16_MUL_0				;brif BC == 0
   11458/    36E1 : 3E 10                   MVI     A,10H						;loop counter
   11459/    36E3 : 29                  -	DAD     H							;double HL
   11460/    36E4 : DA F6 48                JC      L_GEN_ERR_9					;brif overflow: Generate error 9
   11461/    36E7 : EB                      XCHG
   11462/    36E8 : 29                      DAD     H							;double DE
   11463/    36E9 : EB                      XCHG
   11464/    36EA : D2 F1 36                JNC     +							;brif NO overflow
   11465/    36ED : 09                      DAD     B							;HL += BC
   11466/    36EE : DA F6 48                JC      L_GEN_ERR_9					;brif overflow: Generate error 9
   11467/    36F1 : 3D                  +	DCR     A							;loop counter
   11468/    36F2 : C2 E3 36                JNZ     -							;brif loop counter != 0
   11469/    36F5 :                     L_INT16_MUL_0:
   11470/    36F5 : EB                      XCHG								;result to DE
   11471/    36F6 : E1                      POP     H							;restore HL
   11472/    36F7 : C9                      RET
   11473/    36F8 :                     ;
   11474/    36F8 :                     ; Signed integer subtraction (FAC1=HL-DE)
   11475/    36F8 :                     ;
   11476/    36F8 :                     R_SINT_SUB:
   11477/    36F8 : 7C                      MOV     A,H							;determine sign of HL
   11478/    36F9 : 17                      RAL
   11479/    36FA : 9F                      SBB     A
   11480/    36FB : 47                      MOV     B,A
   11481/    36FC : CD C6 37                CALL    L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   11482/    36FF : 79                      MOV     A,C
   11483/    3700 : 98                      SBB     B
   11484/    3701 : C3 07 37                JMP     L_SINT_ADD_1				;join R_SINT_ADD
   11485/    3704 :                     ;
   11486/    3704 :                     ; Signed integer addition (FAC1=HL+DE)
   11487/    3704 :                     ;
   11488/    3704 :                     R_SINT_ADD:								;3704H
   11489/    3704 : 7C                      MOV     A,H							;determine sign of HL
   11490/    3705 : 17                      RAL
   11491/    3706 : 9F                      SBB     A
   11492/    3707 :                     L_SINT_ADD_1:
   11493/    3707 : 47                      MOV     B,A
   11494/    3708 : E5                      PUSH    H
   11495/    3709 : 7A                      MOV     A,D							;determine sign of DE
   11496/    370A : 17                      RAL
   11497/    370B : 9F                      SBB     A
   11498/    370C : 19                      DAD     D
   11499/    370D : 88                      ADC     B
   11500/    370E : 0F                      RRC
   11501/    370F : AC                      XRA     H
   11502/    3710 : F2 26 35                JP      L_POPD_MAKINT				;POP DE and Load signed integer in HL to FAC1
   11503/    3713 : C5                      PUSH    B
   11504/    3714 : EB                      XCHG
   11505/    3715 : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   11506/    3718 : F1                      POP     PSW
   11507/    3719 : E1                      POP     H
   11508/    371A : CD 22 34                CALL    R_PUSH_SNGL_FAC1			;Push single precision FAC1 on stack
   11509/    371D : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   11510/    3720 : C1                      POP     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 194 - 9/5/2025 20:20:35


   11511/    3721 : D1                      POP     D
   11512/    3722 : C3 F4 37                JMP     R_SNGL_ADD_BCDE				;Single precision addition (FAC1=FAC1+BCDE)
   11513/    3725 :                     ;
   11514/    3725 :                     ; Signed integer muliply (FAC1=HL*DE)
   11515/    3725 :                     ;
   11516/    3725 :                     R_SINT_MULT:							;3725H
   11517/    3725 : 7C                      MOV     A,H
   11518/    3726 : B5                      ORA     L
   11519/    3727 : CA 10 35                JZ      L_MAKINT					;Load signed integer in HL to FAC1
   11520/    372A : E5                      PUSH    H
   11521/    372B : D5                      PUSH    D
   11522/    372C : CD BA 37                CALL    L_ABS_DE_HL					;FIX UP THE SIGNS
   11523/    372F : C5                      PUSH    B							;save HL or DE was negative indicator
   11524/    3730 : 44                      MOV     B,H							;BC = HL
   11525/    3731 : 4D                      MOV     C,L
   11526/    3732 : 21 00 00                LXI     H,0							;starting value
   11527/    3735 : 3E 10                   MVI     A,10H						;loop counter
   11528/    3737 :                     L_SINT_MULT_1:
   11529/    3737 : 29                      DAD     H
   11530/    3738 : DA 5F 37                JC      L_SINT_MULT_3				;brif overflow
   11531/    373B : EB                      XCHG
   11532/    373C : 29                      DAD     H
   11533/    373D : EB                      XCHG
   11534/    373E : D2 45 37                JNC     +
   11535/    3741 : 09                      DAD     B
   11536/    3742 : DA 5F 37                JC      L_SINT_MULT_3
   11537/    3745 : 3D                  +	DCR     A							;decrement loop counter
   11538/    3746 : C2 37 37                JNZ     L_SINT_MULT_1				;brif not done
   11539/    3749 : C1                      POP     B
   11540/    374A : D1                      POP     D
   11541/    374B :                     L_SINT_MULT_2:
   11542/    374B : 7C                      MOV     A,H
   11543/    374C : B7                      ORA     A
   11544/    374D : FA 55 37                JM      +
   11545/    3750 : D1                      POP     D
   11546/    3751 : 78                      MOV     A,B							;negative indicator to A
   11547/    3752 : C3 C2 37                JMP     L_INEGA						;negate HL is A < 0
   11548/    3755 :                     
   11549/    3755 : EE 80               +	XRI     80H
   11550/    3757 : B5                      ORA     L
   11551/    3758 : CA 70 37                JZ      L_SINT_MULT_4
   11552/    375B : EB                      XCHG
   11553/    375C : C3 61 37                JMP     +
   11554/    375F :                     
   11555/    375F :                     L_SINT_MULT_3:
   11556/    375F : C1                      POP     B
   11557/    3760 : E1                      POP     H
   11558/    3761 : CD 43 35            +	CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   11559/    3764 : E1                      POP     H
   11560/    3765 : CD 22 34                CALL    R_PUSH_SNGL_FAC1			;Push single precision FAC1 on stack
   11561/    3768 : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   11562/    376B : C1                      POP     B
   11563/    376C : D1                      POP     D
   11564/    376D : C3 03 38                JMP     R_SNGL_MULT_BCDE			;Single precision multiply (FAC1=FAC1*BCDE)
   11565/    3770 :                     
   11566/    3770 :                     L_SINT_MULT_4:
   11567/    3770 : 78                      MOV     A,B
   11568/    3771 : B7                      ORA     A
   11569/    3772 : C1                      POP     B
   11570/    3773 : FA 10 35                JM      L_MAKINT					;Load signed integer in HL to FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 195 - 9/5/2025 20:20:35


   11571/    3776 : D5                      PUSH    D
   11572/    3777 : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   11573/    377A : D1                      POP     D
   11574/    377B : C3 FD 33                JMP     L_NEG						;Negate FAC1
   11575/    377E :                     ;
   11576/    377E :                     ; Signed integer divide (FAC1=DE/HL). See also R_INT16_DIV
   11577/    377E :                     ;
   11578/    377E :                     R_SINT_DIV:								;377EH
   11579/    377E : 7C                      MOV     A,H
   11580/    377F : B5                      ORA     L
   11581/    3780 : CA 49 04                JZ      R_GEN_D0_ERROR				;Generate /0 error
   11582/    3783 : CD BA 37            	CALL    L_ABS_DE_HL					;FIX UP THE SIGNS
   11583/    3786 : C5                      PUSH    B							;save HL or DE was negative indicator
   11584/    3787 : EB                      XCHG
   11585/    3788 : CD C6 37                CALL    L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   11586/    378B : 44                      MOV     B,H
   11587/    378C : 4D                      MOV     C,L
   11588/    378D : 21 00 00                LXI     H,0
   11589/    3790 : 3E 11                   MVI     A,11H						;loop counter + 1
   11590/    3792 : F5                      PUSH    PSW							;store on stack	
   11591/    3793 : B7                      ORA     A							;clear carry
   11592/    3794 : C3 A3 37                JMP     L_DIVLOOP_1
   11593/    3797 :                     L_DIVLOOP:
   11594/    3797 : F5                      PUSH    PSW							;store loop counter on stack
   11595/    3798 : E5                      PUSH    H
   11596/    3799 : 09                      DAD     B
   11597/    379A : D2 A2 37                JNC     +
   11598/    379D : F1                      POP     PSW
   11599/    379E : 37                      STC									;set carry if HL + BC overflow
   11600/    379F : C3 A3 37                JMP     L_DIVLOOP_1
   11601/    37A2 : E1                  +	POP     H
   11602/    37A3 :                     L_DIVLOOP_1:					
   11603/    37A3 : 7B                      MOV     A,E							;E << 1
   11604/    37A4 : 17                      RAL
   11605/    37A5 : 5F                      MOV     E,A
   11606/    37A6 : 7A                      MOV     A,D							;D << 1
   11607/    37A7 : 17                      RAL
   11608/    37A8 : 57                      MOV     D,A
   11609/    37A9 : 7D                      MOV     A,L							;L << 1
   11610/    37AA : 17                      RAL
   11611/    37AB : 6F                      MOV     L,A
   11612/    37AC : 7C                      MOV     A,H							;H << 1
   11613/    37AD : 17                      RAL
   11614/    37AE : 67                      MOV     H,A
   11615/    37AF : F1                      POP     PSW							;get loop counter
   11616/    37B0 : 3D                      DCR     A							;decrement
   11617/    37B1 : C2 97 37                JNZ     L_DIVLOOP					;brif not 0
   11618/    37B4 : EB                      XCHG
   11619/    37B5 : C1                      POP     B
   11620/    37B6 : D5                      PUSH    D
   11621/    37B7 : C3 4B 37                JMP     L_SINT_MULT_2
   11622/    37BA :                     ;
   11623/    37BA :                     ; Check signs of DE and HL. Take ABS value of DE and HL
   11624/    37BA :                     ;
   11625/    37BA :                     ; OUT:
   11626/    37BA :                     ;	B		Bit 7 set if either HL or DE is negative
   11627/    37BA :                     ;
   11628/    37BA :                     ;GET READY TO MULTIPLY OR DIVIDE (mbasic 5.2)
   11629/    37BA :                     ;
   11630/    37BA :                     L_IMULDV:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 196 - 9/5/2025 20:20:35


   11631/    37BA :                     L_ABS_DE_HL:
   11632/    37BA : 7C                      MOV     A,H							;get MSB of HL
   11633/    37BB : AA                      XRA     D							;XOR with MSB of DE
   11634/    37BC : 47                      MOV     B,A							;save result in B
   11635/    37BD : CD C1 37                CALL    L_INEGH						;do this twice: once for HL, once for DE
   11636/    37C0 : EB                      XCHG
   11637/    37C1 :                     L_INEGH:
   11638/    37C1 : 7C                      MOV     A,H
   11639/    37C2 :                     L_INEGA:								;negate HL is A < 0
   11640/    37C2 : B7                      ORA     A
   11641/    37C3 : F2 10 35                JP      L_MAKINT					;brif A >= 0: Load signed integer in HL to FAC1
   11642/    37C6 :                     ;
   11643/    37C6 :                     ; negate HL and Load signed integer in HL to FAC1
   11644/    37C6 :                     ;
   11645/    37C6 :                     ; OUT:
   11646/    37C6 :                     ;	C		0
   11647/    37C6 :                     ;
   11648/    37C6 :                     L_INEGHL:
   11649/    37C6 : AF                      XRA     A
   11650/    37C7 : 4F                      MOV     C,A
   11651/    37C8 : 95                      SUB     L							;L = 0 - L
   11652/    37C9 : 6F                      MOV     L,A
   11653/    37CA : 79                      MOV     A,C							;H = 0 - H
   11654/    37CB : 9C                      SBB     H
   11655/    37CC : 67                      MOV     H,A
   11656/    37CD : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
   11657/    37D0 :                     
   11658/    37D0 :                     ; 
   11659/    37D0 :                     ; INTEGER NEGATION
   11660/    37D0 :                     ; 
   11661/    37D0 :                     L_INEG:
   11662/    37D0 : 2A 1A FC                LHLD    IFACLO_R					;GET THE INTEGER
   11663/    37D3 : CD C6 37                CALL    L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   11664/    37D6 : 7C                      MOV     A,H
   11665/    37D7 : EE 80                   XRI     80H							;CHECK FOR SPECIAL CASE OF 32768
   11666/    37D9 : B5                      ORA     L
   11667/    37DA : C0                      RNZ									;IT DID NOT OCCUR, EVERYTHING IS FINE
   11668/    37DB :                     ; Code differs from mbasic 5.2
   11669/    37DB :                     ; 
   11670/    37DB :                     ;Convert unsigned HL to single precision in FAC1
   11671/    37DB :                     ; 	
   11672/    37DB :                     L_CONV_UNSGND_HL_SNGL:
   11673/    37DB : AF                      XRA     A
   11674/    37DC : C3 44 35                JMP     L_CONV_HL_SNGL				;Jump into Convert Signed to single precision in FAC1
   11675/    37DF :                     ;
   11676/    37DF :                     ; MOD priority
   11677/    37DF :                     ;
   11678/    37DF :                     L_MOD_PRI:
   11679/    37DF : D5                      PUSH    D
   11680/    37E0 : CD 7E 37                CALL    R_SINT_DIV				    ;Signed integer divide (FAC1=DE/HL)
   11681/    37E3 : AF                      XRA     A							;TURNOFF THE CARRY AND TRANFER
   11682/    37E4 : 82                      ADD     D							;THE REMAINDER*2 WHICH IS IN DE
   11683/    37E5 : 1F                      RAR									;TO HL DIVIDING BY TWO
   11684/    37E6 : 67                      MOV     H,A
   11685/    37E7 : 7B                      MOV     A,E
   11686/    37E8 : 1F                      RAR
   11687/    37E9 : 6F                      MOV     L,A							;***WHG01*** FIX TO MOD OPERATOR
   11688/    37EA : CD 13 35                CALL    L_VALINT 					;SET VALTYP TO "INTEGER" IN CASE RESULT OF THE DIVISION WAS 32768
   11689/    37ED : F1                      POP     PSW							;GET THE SIGN OF THE REMAINDER BACK
   11690/    37EE : C3 C2 37                JMP     L_INEGA			 			;NEGATE THE REMAINDER IF NECESSARY
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 197 - 9/5/2025 20:20:35


   11691/    37F1 :                     ;
   11692/    37F1 :                     ; TODO unreachable
   11693/    37F1 :                     ;
   11694/    37F1 : CD 50 34                CALL    R_SNGL_DECB_EQ_M			; Reverse load single precision at M to DEBC
   11695/    37F4 :                     ;
   11696/    37F4 :                     ; Single precision addition (FAC1=FAC1+BCDE)
   11697/    37F4 :                     ;
   11698/    37F4 :                     R_SNGL_ADD_BCDE:						;37F4H
   11699/    37F4 : CD 27 38                CALL    R_SNGL_LOAD				    ;Single precision load (FAC2=BCDE)
   11700/    37F7 :                     ;
   11701/    37F7 :                     ; Single precision addition (FAC1=FAC1+FAC2)
   11702/    37F7 :                     ;
   11703/    37F7 :                     R_SNGL_ADD_FAC2:						;37F7H
   11704/    37F7 : CD C2 35                CALL    L_CONDS
   11705/    37FA : C3 78 2B                JMP     R_DBL_ADD				    ;Double precision addition (FAC1=FAC1+FAC2)
   11706/    37FD :                     ;
   11707/    37FD :                     ; Single precision subtract (FAC1=FAC1-BCDE)
   11708/    37FD :                     ;
   11709/    37FD :                     R_SNGL_SUB:								;37FDH
   11710/    37FD : CD FD 33                CALL    L_NEG						;Negate FAC1
   11711/    3800 : C3 F4 37                JMP     R_SNGL_ADD_BCDE				;Single precision addition (FAC1=FAC1+BCDE)
   11712/    3803 :                     ;
   11713/    3803 :                     ; Single precision multiply (FAC1=FAC1*BCDE)
   11714/    3803 :                     ;
   11715/    3803 :                     R_SNGL_MULT_BCDE:						;3803H
   11716/    3803 : CD 27 38                CALL    R_SNGL_LOAD				    ;Single precision load (FAC2=BCDE)
   11717/    3806 :                     ;
   11718/    3806 :                     ; Single precision multiply (FAC1=FAC2*FAC2)
   11719/    3806 :                     ;
   11720/    3806 :                     R_SNGL_MULT_FAC2:						;3806H
   11721/    3806 : CD C2 35                CALL    L_CONDS
   11722/    3809 : C3 FF 2C                JMP     R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   11723/    380C :                     
   11724/    380C :                     L_STK_SNGL_DIV:
   11725/    380C : C1                      POP     B							;pop SNGL to BCDE
   11726/    380D : D1                      POP     D
   11727/    380E :                     ;
   11728/    380E :                     ; Single precision divide (FAC1=BCDE/FAC1)
   11729/    380E :                     ;
   11730/    380E :                     R_SNGL_DIV:								;380EH
   11731/    380E : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   11732/    3811 : EB                      XCHG
   11733/    3812 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   11734/    3815 : C5                      PUSH    B
   11735/    3816 : 2A 18 FC                LHLD    DFACLO_R					;FAC1
   11736/    3819 : E3                      XTHL
   11737/    381A : 22 18 FC                SHLD    DFACLO_R					;FAC1
   11738/    381D : C1                      POP     B
   11739/    381E : CD 27 38                CALL    R_SNGL_LOAD				    ;Single precision load (FAC2=BCDE)
   11740/    3821 : CD C2 35                CALL    L_CONDS
   11741/    3824 : C3 C7 2D                JMP     R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   11742/    3827 :                     ;
   11743/    3827 :                     ; Single precision load (FAC2=BCDE)
   11744/    3827 :                     ;
   11745/    3827 :                     R_SNGL_LOAD:							;3827H
   11746/    3827 : EB                      XCHG
   11747/    3828 : 22 6B FC                SHLD    IFACLO2_R					;FAC2 for integers
   11748/    382B : 60                      MOV     H,B
   11749/    382C : 69                      MOV     L,C
   11750/    382D : 22 69 FC                SHLD    DFACLO2_R					;Start of FAC2
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 198 - 9/5/2025 20:20:35


   11751/    3830 : 21 00 00                LXI     H,0
   11752/    3833 : 22 6D FC                SHLD    0FC6DH
   11753/    3836 : 22 6F FC                SHLD    0FC6FH
   11754/    3839 : C9                      RET
   11755/    383A :                     
   11756/    383A :                     L_DCR_A:
   11757/    383A : 3D                      DCR     A
   11758/    383B : C9                      RET
   11759/    383C :                     
   11760/    383C :                     L_DCX_H:
   11761/    383C : 2B                      DCX     H
   11762/    383D : C9                      RET
   11763/    383E :                     ;
   11764/    383E :                     ; POP H & return continuation function
   11765/    383E :                     ;
   11766/    383E :                     L_POP_HL:
   11767/    383E : E1                      POP     H
   11768/    383F : C9                      RET
   11769/    3840 :                     ;
   11770/    3840 :                     ;Convert ASCII number at M to double precision in FAC1
   11771/    3840 :                     ;
   11772/    3840 :                     R_ASCII_TO_DBL:							;3840H
   11773/    3840 : EB                      XCHG
   11774/    3841 : 01 FF 00                LXI     B,00FFH
   11775/    3844 : 60                      MOV     H,B
   11776/    3845 : 68                      MOV     L,B
   11777/    3846 : CD 10 35                CALL    L_MAKINT					;Load signed integer in HL to FAC1
   11778/    3849 : EB                      XCHG
   11779/    384A : 7E                      MOV     A,M
   11780/    384B : FE 2D                   CPI     2DH
   11781/    384D : F5                      PUSH    PSW
   11782/    384E : CA 57 38                JZ      L_ASCII_TO_DBL_1
   11783/    3851 : FE 2B                   CPI     2BH
   11784/    3853 : CA 57 38                JZ      L_ASCII_TO_DBL_1
   11785/    3856 : 2B                      DCX     H
   11786/    3857 :                     L_ASCII_TO_DBL_1:
   11787/    3857 : (MACRO)                 CHRGET								;Get next non-white char from M
   11788/    3858 : DA 40 39                JC      R_ASCII_CONV_HELPER2     	;Convert ASCII number that starts with a Digit
   11789/    385B : FE 2E                   CPI     '.'
   11790/    385D : CA 04 39                JZ      R_ASCII_FND_DOT				;Found '.' in ASCII number
   11791/    3860 : FE 65                   CPI     'e'							;65H
   11792/    3862 : CA 67 38                JZ      R_ASCII_FND_e				;Found 'e' in ASCII number
   11793/    3865 : FE 45                   CPI     'E'
   11794/    3867 :                     ;
   11795/    3867 :                     ; Found 'e' in ASCII number
   11796/    3867 :                     ;
   11797/    3867 :                     R_ASCII_FND_e:							;3867H
   11798/    3867 : C2 8A 38                JNZ     R_ASCII_FND_CapE			; Found 'E' in ASCII number
   11799/    386A : E5                      PUSH    H
   11800/    386B : (MACRO)                 CHRGET								;Get next non-white char from M
   11801/    386C : FE 6C                   CPI     'l'							;6CH
   11802/    386E : CA 7D 38                JZ      +
   11803/    3871 : FE 4C                   CPI     'L'							;4CH
   11804/    3873 : CA 7D 38                JZ      +
   11805/    3876 : FE 71                   CPI     'q'							;71H
   11806/    3878 : CA 7D 38                JZ      +
   11807/    387B : FE 51                   CPI     'Q'							;51H
   11808/    387D : E1                  +	POP     H
   11809/    387E : CA 89 38                JZ      +							;brif 'l', 'L', 'q', 'Q'
   11810/    3881 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 199 - 9/5/2025 20:20:35


   11811/    3882 : D2 A3 38                JNC     L_ASCII_FND_d				;brif !DBL
   11812/    3885 : AF                      XRA     A
   11813/    3886 : C3 A4 38                JMP     L_ASCII_FND_1
   11814/    3889 : 7E                  +	MOV     A,M
   11815/    388A :                     ;
   11816/    388A :                     ; Found 'E' in ASCII number
   11817/    388A :                     ;
   11818/    388A :                     R_ASCII_FND_CapE:						;388AH
   11819/    388A : FE 25                   CPI     '%'							;25H
   11820/    388C : CA 1A 39                JZ      R_ASCII_FND_PERC			; Found '%' in ASCII number
   11821/    388F : FE 23                   CPI     '#'							;23H
   11822/    3891 : CA 29 39                JZ      R_ASCII_FND_HASH			;Found '#' in ASCII number
   11823/    3894 : FE 21                   CPI     '!'							;21H
   11824/    3896 : CA 2A 39                JZ      R_ASCII_FND_BANG			;Found '!' in ASCII number
   11825/    3899 : FE 64                   CPI     'd'							;64H
   11826/    389B : CA A3 38                JZ      L_ASCII_FND_d
   11827/    389E : FE 44                   CPI     'D'
   11828/    38A0 : C2 D1 38                JNZ     R_ASCII_NOTFND
   11829/    38A3 :                     L_ASCII_FND_d:
   11830/    38A3 : B7                      ORA     A
   11831/    38A4 :                     L_ASCII_FND_1:
   11832/    38A4 : CD 31 39                CALL    R_ASCII_CONV_HELPER      	;Deal with single & double precision ASCII conversions
   11833/    38A7 : (MACRO)                 CHRGET								;Get next non-white char from M
   11834/    38A8 : D5                      PUSH    D
   11835/    38A9 : 16 00                   MVI     D,00H
   11836/    38AB : CD 37 10                CALL    R_ASCII_NUM_CONV			;ASCII num conversion - find ASCII or tokenized '+' or '-' in A
   11837/    38AE : 4A                      MOV     C,D
   11838/    38AF : D1                      POP     D
   11839/    38B0 : (MACRO)             -	CHRGET								;Get next non-white char from M
   11840/    38B1 : D2 CA 38                JNC     L_ASCII_FND_2
   11841/    38B4 : 7B                      MOV     A,E
   11842/    38B5 : FE 0C                   CPI     0CH
   11843/    38B7 : D2 C5 38                JNC     +
   11844/    38BA : 07                      RLC    
   11845/    38BB : 07                      RLC    
   11846/    38BC : 83                      ADD     E
   11847/    38BD : 07                      RLC    
   11848/    38BE : 86                      ADD     M
   11849/    38BF : D6 30                   SUI     30H
   11850/    38C1 : 5F                      MOV     E,A
   11851/    38C2 : C3 B0 38                JMP     -
   11852/    38C5 : 1E 80               +	MVI     E,80H
   11853/    38C7 : C3 B0 38                JMP     -
   11854/    38CA :                     L_ASCII_FND_2:
   11855/    38CA : 0C                      INR     C
   11856/    38CB : C2 D1 38                JNZ     R_ASCII_NOTFND
   11857/    38CE : AF                      XRA     A
   11858/    38CF : 93                      SUB     E
   11859/    38D0 : 5F                      MOV     E,A
   11860/    38D1 :                     R_ASCII_NOTFND:
   11861/    38D1 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11862/    38D2 : FA E8 38                JM      +							;brif integer
   11863/    38D5 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   11864/    38D8 : B7                      ORA     A
   11865/    38D9 : CA E8 38                JZ      +
   11866/    38DC : 7A                      MOV     A,D
   11867/    38DD : 90                      SUB     B
   11868/    38DE : 83                      ADD     E
   11869/    38DF : C6 40                   ADI		40H
   11870/    38E1 : 32 18 FC                STA     DFACLO_R					;FAC1
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 200 - 9/5/2025 20:20:35


   11871/    38E4 : B7                      ORA     A
   11872/    38E5 : FC 01 39                CM      L_OV_ERROR					;TODO call R_GEN_OV_ERROR directly
   11873/    38E8 : F1                  +	POP     PSW
   11874/    38E9 : E5                      PUSH    H
   11875/    38EA : CC F6 33                CZ      L_VNEG
   11876/    38ED : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11877/    38EE : D2 FC 38                JNC     +
   11878/    38F1 : E1                      POP     H
   11879/    38F2 : E8                      RPE    
   11880/    38F3 : E5                      PUSH    H
   11881/    38F4 : 21 3E 38                LXI     H,L_POP_HL					;POP H & return continuation function
   11882/    38F7 : E5                      PUSH    H
   11883/    38F8 : CD 19 35                CALL    L_TST_FAC1_8000H
   11884/    38FB : C9                      RET
   11885/    38FC :                     
   11886/    38FC : CD 27 2C            +	CALL    L_ROUND_FAC1				;Round FAC1 using extended precision portion at end of FAC1
   11887/    38FF : E1                      POP     H
   11888/    3900 : C9                      RET
   11889/    3901 :                     
   11890/    3901 :                     L_OV_ERROR:
   11891/    3901 : C3 55 04                JMP     R_GEN_OV_ERROR				;Generate OV error
   11892/    3904 :                     ;
   11893/    3904 :                     ; Found '.' in ASCII number
   11894/    3904 :                     ;
   11895/    3904 :                     R_ASCII_FND_DOT:						;3904H
   11896/    3904 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11897/    3905 : 0C                      INR     C
   11898/    3906 : C2 D1 38                JNZ     R_ASCII_NOTFND
   11899/    3909 : D2 17 39                JNC     +
   11900/    390C : CD 31 39                CALL    R_ASCII_CONV_HELPER      	;Deal with single & double precision ASCII conversions
   11901/    390F : 3A 18 FC                LDA     DFACLO_R					;FAC1
   11902/    3912 : B7                      ORA     A
   11903/    3913 : C2 17 39                JNZ     +
   11904/    3916 : 57                      MOV     D,A
   11905/    3917 : C3 57 38            +	JMP     L_ASCII_TO_DBL_1
   11906/    391A :                     ;
   11907/    391A :                     ; Found '%' in ASCII number
   11908/    391A :                     ;
   11909/    391A :                     R_ASCII_FND_PERC:						;391AH
   11910/    391A : (MACRO)                 CHRGET								;Get next non-white char from M
   11911/    391B : F1                      POP     PSW
   11912/    391C : E5                      PUSH    H							;save txt ptr
   11913/    391D : (MACRO)             	SKIP_2BYTES_INST_HL
   11914/    391E : 3E 38                   MVI     A,38H						;TODO unreachable instruction
   11915/    3920 : E5                      PUSH    H
   11916/    3921 : 21 01 35                LXI     H,R_CINT_FUN
   11917/    3924 : E5                      PUSH    H
   11918/    3925 : F5                      PUSH    PSW
   11919/    3926 : C3 D1 38                JMP     R_ASCII_NOTFND
   11920/    3929 :                     ;
   11921/    3929 :                     ; Found '#' in ASCII number
   11922/    3929 :                     ;
   11923/    3929 :                     R_ASCII_FND_HASH:						;3929H
   11924/    3929 : B7                      ORA     A
   11925/    392A :                     R_ASCII_FND_BANG:
   11926/    392A : CD 31 39                CALL    R_ASCII_CONV_HELPER      	;Deal with single & double precision ASCII conversions
   11927/    392D : (MACRO)                 CHRGET								;Get next non-white char from M
   11928/    392E : C3 D1 38                JMP     R_ASCII_NOTFND
   11929/    3931 :                     ;
   11930/    3931 :                     ; Deal with single & double precision ASCII conversions
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 201 - 9/5/2025 20:20:35


   11931/    3931 :                     ;
   11932/    3931 :                     R_ASCII_CONV_HELPER:				    ;3931H
   11933/    3931 : E5                      PUSH    H
   11934/    3932 : D5                      PUSH    D
   11935/    3933 : C5                      PUSH    B
   11936/    3934 : F5                      PUSH    PSW
   11937/    3935 : CC 2A 35                CZ      R_CSNG_FUN				    ;CSNG function
   11938/    3938 : F1                      POP     PSW
   11939/    3939 : C4 BA 35                CNZ     L_FRCDBL				    ;CDBL function
   11940/    393C : C1                      POP     B
   11941/    393D : D1                      POP     D
   11942/    393E : E1                      POP     H
   11943/    393F : C9                      RET
   11944/    3940 :                     ;
   11945/    3940 :                     ;Convert ASCII number that starts with a Digit
   11946/    3940 :                     ;
   11947/    3940 :                     R_ASCII_CONV_HELPER2:				    ;3940H
   11948/    3940 : D6 30                   SUI     '0'
   11949/    3942 : C2 4D 39                JNZ     +
   11950/    3945 : B1                      ORA     C
   11951/    3946 : CA 4D 39                JZ      +
   11952/    3949 : A2                      ANA     D
   11953/    394A : CA 57 38                JZ      L_ASCII_TO_DBL_1
   11954/    394D : 14                  +	INR     D
   11955/    394E : 7A                      MOV     A,D
   11956/    394F : FE 07                   CPI     07H
   11957/    3951 : C2 58 39                JNZ     +
   11958/    3954 : B7                      ORA     A
   11959/    3955 : CD 31 39                CALL    R_ASCII_CONV_HELPER      	;Deal with single & double precision ASCII conversions
   11960/    3958 : D5                  +	PUSH    D
   11961/    3959 : 78                      MOV     A,B
   11962/    395A : 81                      ADD     C
   11963/    395B : 3C                      INR     A
   11964/    395C : 47                      MOV     B,A
   11965/    395D : C5                      PUSH    B
   11966/    395E : E5                      PUSH    H
   11967/    395F : 7E                      MOV     A,M
   11968/    3960 : D6 30                   SUI     30H
   11969/    3962 : F5                      PUSH    PSW
   11970/    3963 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   11971/    3964 : F2 8D 39                JP      L_ASC_CONV_3
   11972/    3967 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   11973/    396A : 11 CD 0C                LXI     D,0CCDH						;probably constant 0CCDH (3277.)
   11974/    396D : (MACRO)                 COMPAR								;HL - DE
   11975/    396E : D2 8A 39                JNC     L_ASC_CONV_2
   11976/    3971 : 54                      MOV     D,H
   11977/    3972 : 5D                      MOV     E,L
   11978/    3973 : 29                      DAD     H
   11979/    3974 : 29                      DAD     H
   11980/    3975 : 19                      DAD     D
   11981/    3976 : 29                      DAD     H
   11982/    3977 : F1                      POP     PSW
   11983/    3978 : 4F                      MOV     C,A
   11984/    3979 : 09                      DAD     B
   11985/    397A : 7C                      MOV     A,H
   11986/    397B : B7                      ORA     A
   11987/    397C : FA 88 39                JM      +
   11988/    397F : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   11989/    3982 :                     L_ASC_CONV_1:
   11990/    3982 : E1                      POP     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 202 - 9/5/2025 20:20:35


   11991/    3983 : C1                      POP     B
   11992/    3984 : D1                      POP     D
   11993/    3985 : C3 57 38                JMP     L_ASCII_TO_DBL_1
   11994/    3988 :                     
   11995/    3988 : 79                  +	MOV     A,C
   11996/    3989 : F5                      PUSH    PSW
   11997/    398A :                     L_ASC_CONV_2:
   11998/    398A : CD 40 35                CALL    L_CONSI						;Convert signed integer in FAC1 to single precision
   11999/    398D :                     L_ASC_CONV_3:
   12000/    398D : F1                      POP     PSW
   12001/    398E : E1                      POP     H
   12002/    398F : C1                      POP     B
   12003/    3990 : D1                      POP     D
   12004/    3991 : C2 A1 39                JNZ     +
   12005/    3994 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   12006/    3997 : B7                      ORA     A
   12007/    3998 : 3E 00                   MVI     A,00H
   12008/    399A : C2 A1 39                JNZ     +
   12009/    399D : 57                      MOV     D,A
   12010/    399E : C3 57 38                JMP     L_ASCII_TO_DBL_1
   12011/    39A1 : D5                  +	PUSH    D
   12012/    39A2 : C5                      PUSH    B
   12013/    39A3 : E5                      PUSH    H
   12014/    39A4 : F5                      PUSH    PSW
   12015/    39A5 : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   12016/    39A8 : 36 01                   MVI     M,01H
   12017/    39AA : 7A                      MOV     A,D
   12018/    39AB : FE 10                   CPI     10H
   12019/    39AD : DA B4 39                JC      +
   12020/    39B0 : F1                      POP     PSW
   12021/    39B1 : C3 82 39                JMP     L_ASC_CONV_1
   12022/    39B4 : 3C                  +	INR     A
   12023/    39B5 : B7                      ORA     A							;clear carry
   12024/    39B6 : 1F                      RAR
   12025/    39B7 : 06 00                   MVI     B,00H
   12026/    39B9 : 4F                      MOV     C,A
   12027/    39BA : 09                      DAD     B
   12028/    39BB : F1                      POP     PSW
   12029/    39BC : 4F                      MOV     C,A							;save A
   12030/    39BD : 7A                      MOV     A,D							;get bcd index
   12031/    39BE : 1F                      RAR									;bit 0 (odd or even) to carry
   12032/    39BF : 79                      MOV     A,C							;restore A
   12033/    39C0 : D2 C7 39                JNC     +							;brif odd
   12034/    39C3 :                     ; move upper nibble into lower nibble
   12035/    39C3 : 87                      ADD     A							;x2
   12036/    39C4 : 87                      ADD     A							;x4
   12037/    39C5 : 87                      ADD     A							;x8
   12038/    39C6 : 87                      ADD     A							;x16
   12039/    39C7 : B6                  +	ORA     M
   12040/    39C8 : 77                      MOV     M,A
   12041/    39C9 : C3 82 39                JMP     L_ASC_CONV_1
   12042/    39CC :                     ;
   12043/    39CC :                     ; Finish printing BASIC ERROR message " in " line #
   12044/    39CC :                     ;
   12045/    39CC :                     R_PRNT_BASIC_ERR_TERM:				    ;39CCH
   12046/    39CC : E5                      PUSH    H
   12047/    39CD : 21 F1 03                LXI     H,R_IN_MSG					;Code Based. 
   12048/    39D0 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   12049/    39D3 : E1                      POP     H
   12050/    39D4 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 203 - 9/5/2025 20:20:35


   12051/    39D4 :                     ; Print binary number in HL at current position
   12052/    39D4 :                     ;
   12053/    39D4 :                     R_PRINT_HL_ON_LCD:						;39D4H
   12054/    39D4 : 01 B0 27                LXI     B,R_PRINT_STRING_PREINC_HL
   12055/    39D7 : C5                      PUSH    B
   12056/    39D8 : CD 10 35                CALL    L_MAKINT					;Load signed integer in HL to FAC1
   12057/    39DB : AF                      XRA     A
   12058/    39DC : 32 8E FB                STA     TEMP3_R
   12059/    39DF : 21 E8 FB                LXI     H,MBUFFER_R
   12060/    39E2 : 36 20                   MVI     M,' '
   12061/    39E4 : B6                      ORA     M
   12062/    39E5 : C3 05 3A                JMP     L_PRINT_FAC1_FMT_1
   12063/    39E8 :                     ;
   12064/    39E8 :                     ;Convert binary number in FAC1 to ASCII at MBUFFER_R
   12065/    39E8 :                     ;
   12066/    39E8 :                     R_PRINT_FAC1_ZERO:						;39E8H
   12067/    39E8 : AF                      XRA     A
   12068/    39E9 :                     R_PRINT_FAC1:
   12069/    39E9 : CD 11 3D                CALL    R_FAC1_EQ_ZERO				;Initialize FAC1 with 0.0 if it has no value
   12070/    39EC :                     										;sets HL to MBUFFER_R
   12071/    39EC :                     ;
   12072/    39EC :                     ;Convert number in FAC1 to ASCII at M with format
   12073/    39EC :                     ;
   12074/    39EC :                     R_PRINT_FAC1_FORMAT:				    ;39ECH
   12075/    39EC : E6 08                   ANI     08H
   12076/    39EE : CA F3 39                JZ      +
   12077/    39F1 : 36 2B                   MVI     M,'+'						;2BH
   12078/    39F3 : EB                  +	XCHG
   12079/    39F4 : CD 11 34                CALL    L_VSIGN						;Determine sign of last variable used
   12080/    39F7 : EB                      XCHG
   12081/    39F8 : F2 05 3A                JP      L_PRINT_FAC1_FMT_1
   12082/    39FB : 36 2D                   MVI     M,'-'						;2DH
   12083/    39FD : C5                      PUSH    B
   12084/    39FE : E5                      PUSH    H
   12085/    39FF : CD F6 33                CALL    L_VNEG
   12086/    3A02 : E1                      POP     H
   12087/    3A03 : C1                      POP     B
   12088/    3A04 : B4                      ORA     H
   12089/    3A05 :                     L_PRINT_FAC1_FMT_1:
   12090/    3A05 : 23                      INX     H
   12091/    3A06 : 36 30                   MVI     M,'0'
   12092/    3A08 : 3A 8E FB                LDA     TEMP3_R
   12093/    3A0B : 57                      MOV     D,A
   12094/    3A0C : 17                      RAL
   12095/    3A0D : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   12096/    3A10 : DA CA 3A                JC      L_PRINT_FAC1_FMT_9
   12097/    3A13 : CA C2 3A                JZ      L_PRINT_FAC1_FMT_7
   12098/    3A16 : FE 04                   CPI     04H
   12099/    3A18 : D2 6F 3A                JNC     L_PRINT_FAC1_FMT_5
   12100/    3A1B : 01 00 00                LXI     B,0
   12101/    3A1E : CD C3 3C                CALL    L_PRINT_FAC					;BC must be loaded
   12102/    3A21 :                     L_PRINT_FAC1_FMT_2:
   12103/    3A21 : 21 E8 FB                LXI     H,MBUFFER_R
   12104/    3A24 : 46                      MOV     B,M
   12105/    3A25 : 0E 20                   MVI     C,' '
   12106/    3A27 : 3A 8E FB                LDA     TEMP3_R
   12107/    3A2A : 5F                      MOV     E,A
   12108/    3A2B : E6 20                   ANI     20H
   12109/    3A2D : CA 3E 3A                JZ      L_PRINT_FAC1_FMT_3
   12110/    3A30 : 78                      MOV     A,B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 204 - 9/5/2025 20:20:35


   12111/    3A31 : B9                      CMP     C
   12112/    3A32 : 0E 2A                   MVI     C,'*'
   12113/    3A34 : C2 3E 3A                JNZ     L_PRINT_FAC1_FMT_3
   12114/    3A37 : 7B                      MOV     A,E
   12115/    3A38 : E6 04                   ANI     04H
   12116/    3A3A : C2 3E 3A                JNZ     L_PRINT_FAC1_FMT_3
   12117/    3A3D : 41                      MOV     B,C
   12118/    3A3E :                     L_PRINT_FAC1_FMT_3:
   12119/    3A3E : 71                      MOV     M,C
   12120/    3A3F : (MACRO)                 CHRGET								;Get next non-white char from M
   12121/    3A40 : CA 5C 3A                JZ      L_PRINT_FAC1_FMT_4
   12122/    3A43 : FE 45                   CPI     'E'
   12123/    3A45 : CA 5C 3A                JZ      L_PRINT_FAC1_FMT_4
   12124/    3A48 : FE 44                   CPI     'D'
   12125/    3A4A : CA 5C 3A                JZ      L_PRINT_FAC1_FMT_4
   12126/    3A4D : FE 30                   CPI     '0'
   12127/    3A4F : CA 3E 3A                JZ      L_PRINT_FAC1_FMT_3
   12128/    3A52 : FE 2C                   CPI     ','
   12129/    3A54 : CA 3E 3A                JZ      L_PRINT_FAC1_FMT_3
   12130/    3A57 : FE 2E                   CPI     '.'
   12131/    3A59 : C2 5F 3A                JNZ     +
   12132/    3A5C :                     L_PRINT_FAC1_FMT_4:
   12133/    3A5C : 2B                      DCX     H
   12134/    3A5D : 36 30                   MVI     M,'0'
   12135/    3A5F : 7B                  +	MOV     A,E
   12136/    3A60 : E6 10                   ANI     10H
   12137/    3A62 : CA 68 3A                JZ      +
   12138/    3A65 : 2B                      DCX     H
   12139/    3A66 : 36 24                   MVI     M,'$'
   12140/    3A68 : 7B                  +	MOV     A,E
   12141/    3A69 : E6 04                   ANI     04H
   12142/    3A6B : C0                      RNZ
   12143/    3A6C : 2B                      DCX     H
   12144/    3A6D : 70                      MOV     M,B
   12145/    3A6E : C9                      RET
   12146/    3A6F :                     
   12147/    3A6F :                     L_PRINT_FAC1_FMT_5:
   12148/    3A6F : E5                      PUSH    H
   12149/    3A70 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12150/    3A73 : 50                      MOV     D,B
   12151/    3A74 : 14                      INR     D
   12152/    3A75 : 01 00 03                LXI     B,0300H
   12153/    3A78 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   12154/    3A7B : D6 3F                   SUI     3FH
   12155/    3A7D : DA 89 3A                JC      +
   12156/    3A80 : 14                      INR     D
   12157/    3A81 : BA                      CMP     D
   12158/    3A82 : D2 89 3A                JNC     +
   12159/    3A85 : 3C                      INR     A
   12160/    3A86 : 47                      MOV     B,A
   12161/    3A87 : 3E 02                   MVI     A,02H
   12162/    3A89 : D6 02               +	SUI     02H
   12163/    3A8B : E1                      POP     H
   12164/    3A8C : F5                      PUSH    PSW
   12165/    3A8D : CD 70 3C                CALL    L_FOUTAN
   12166/    3A90 : 36 30                   MVI     M,'0'
   12167/    3A92 : CC 57 34                CZ      L_INCHL						;Increment HL
   12168/    3A95 : CD 97 3C                CALL    L_PRINT_BCDS
   12169/    3A98 : 2B                  -	DCX     H
   12170/    3A99 : 7E                      MOV     A,M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 205 - 9/5/2025 20:20:35


   12171/    3A9A : FE 30                   CPI     '0'
   12172/    3A9C : CA 98 3A                JZ      -
   12173/    3A9F : FE 2E                   CPI     '.'
   12174/    3AA1 : C4 57 34                CNZ     L_INCHL						;Increment HL
   12175/    3AA4 : F1                      POP     PSW
   12176/    3AA5 : CA C3 3A                JZ      L_PRINT_FAC1_FMT_8
   12177/    3AA8 :                     L_PRINT_FAC1_FMT_6:
   12178/    3AA8 : 36 45                   MVI     M,'E'						;45H
   12179/    3AAA : 23                      INX     H
   12180/    3AAB : 36 2B                   MVI     M,'+'						;2BH
   12181/    3AAD : F2 B4 3A                JP      +
   12182/    3AB0 : 36 2D                   MVI     M,'-'						;2DH
   12183/    3AB2 : 2F                      CMA									;complement A
   12184/    3AB3 : 3C                      INR     A
   12185/    3AB4 : 06 2F               +	MVI     B,'0'-1						;2FH
   12186/    3AB6 : 04                  -	INR     B
   12187/    3AB7 : D6 0A                   SUI     0AH
   12188/    3AB9 : D2 B6 3A                JNC     -							;brif A >= 10.
   12189/    3ABC : C6 3A                   ADI		':'							;3AH
   12190/    3ABE : 23                      INX     H
   12191/    3ABF : 70                      MOV     M,B
   12192/    3AC0 : 23                      INX     H
   12193/    3AC1 : 77                      MOV     M,A
   12194/    3AC2 :                     L_PRINT_FAC1_FMT_7:
   12195/    3AC2 : 23                      INX     H
   12196/    3AC3 :                     L_PRINT_FAC1_FMT_8:
   12197/    3AC3 : 36 00                   MVI     M,00H
   12198/    3AC5 : EB                      XCHG
   12199/    3AC6 : 21 E8 FB                LXI     H,MBUFFER_R
   12200/    3AC9 : C9                      RET
   12201/    3ACA :                     
   12202/    3ACA :                     L_PRINT_FAC1_FMT_9:
   12203/    3ACA : 23                      INX     H
   12204/    3ACB : C5                      PUSH    B
   12205/    3ACC : FE 04                   CPI     04H
   12206/    3ACE : 7A                      MOV     A,D
   12207/    3ACF : D2 42 3B                JNC     L_PRINT_FAC1_FMT_15
   12208/    3AD2 : 1F                      RAR
   12209/    3AD3 : DA CC 3B                JC      L_PRINT_FAC1_FMT_17
   12210/    3AD6 : 01 03 06                LXI     B,0603H						;constant used in L_FOUTED
   12211/    3AD9 : CD 68 3C                CALL    L_FOUICC					;may clear C
   12212/    3ADC : D1                      POP     D
   12213/    3ADD : 7A                      MOV     A,D
   12214/    3ADE : D6 05                   SUI     05H							;D - 5
   12215/    3AE0 : F4 44 3C                CP      L_ADD_ZEROS					;add A zeros, unformatted
   12216/    3AE3 : CD C3 3C                CALL    L_PRINT_FAC					;calls L_FOUTED. BC must be loaded
   12217/    3AE6 :                     L_PRINT_FAC1_FMT_10:
   12218/    3AE6 : 7B                      MOV     A,E
   12219/    3AE7 : B7                      ORA     A
   12220/    3AE8 : CC 3C 38                CZ      L_DCX_H
   12221/    3AEB : 3D                      DCR     A
   12222/    3AEC : F4 44 3C                CP      L_ADD_ZEROS					;add A zeros, unformatted
   12223/    3AEF :                     L_PRINT_FAC1_FMT_11:
   12224/    3AEF : E5                      PUSH    H
   12225/    3AF0 : CD 21 3A                CALL    L_PRINT_FAC1_FMT_2
   12226/    3AF3 : E1                      POP     H
   12227/    3AF4 : CA F9 3A                JZ      +
   12228/    3AF7 : 70                      MOV     M,B
   12229/    3AF8 : 23                      INX     H
   12230/    3AF9 : 36 00               +	MVI     M,00H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 206 - 9/5/2025 20:20:35


   12231/    3AFB : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12232/    3AFE : 23                  -	INX     H
   12233/    3AFF :                     L_PRINT_FAC1_FMT_12:
   12234/    3AFF : 3A A8 FB                LDA     TEMP2_R
   12235/    3B02 : 95                      SUB     L
   12236/    3B03 : 92                      SUB     D
   12237/    3B04 : C8                      RZ
   12238/    3B05 : 7E                      MOV     A,M
   12239/    3B06 : FE 20                   CPI     ' '
   12240/    3B08 : CA FE 3A                JZ      -
   12241/    3B0B : FE 2A                   CPI     '*'
   12242/    3B0D : CA FE 3A                JZ      -
   12243/    3B10 : 2B                      DCX     H
   12244/    3B11 : E5                      PUSH    H
   12245/    3B12 :                     L_PRINT_FAC1_FMT_13:					;continuation function
   12246/    3B12 : F5                      PUSH    PSW
   12247/    3B13 : 01 12 3B                LXI     B,L_PRINT_FAC1_FMT_13
   12248/    3B16 : C5                      PUSH    B
   12249/    3B17 : (MACRO)                 CHRGET								;Get next non-white char from M
   12250/    3B18 : FE 2D                   CPI     2DH
   12251/    3B1A : C8                      RZ
   12252/    3B1B : FE 2B                   CPI     2BH
   12253/    3B1D : C8                      RZ
   12254/    3B1E : FE 24                   CPI     '$'
   12255/    3B20 : C8                      RZ
   12256/    3B21 : C1                      POP     B
   12257/    3B22 : FE 30                   CPI     30H
   12258/    3B24 : C2 3A 3B                JNZ     L_PRINT_FAC1_FMT_14
   12259/    3B27 : 23                      INX     H
   12260/    3B28 : (MACRO)                 CHRGET								;Get next non-white char from M
   12261/    3B29 : D2 3A 3B                JNC     L_PRINT_FAC1_FMT_14
   12262/    3B2C : 2B                      DCX     H
   12263/    3B2D : C3 32 3B                JMP     +
   12264/    3B30 :                     
   12265/    3B30 : 2B                  -	DCX     H
   12266/    3B31 : 77                      MOV     M,A
   12267/    3B32 : F1                  +	POP     PSW
   12268/    3B33 : CA 30 3B                JZ      -
   12269/    3B36 : C1                      POP     B
   12270/    3B37 : C3 FF 3A                JMP     L_PRINT_FAC1_FMT_12
   12271/    3B3A :                     
   12272/    3B3A :                     L_PRINT_FAC1_FMT_14:
   12273/    3B3A : F1                      POP     PSW
   12274/    3B3B : CA 3A 3B                JZ      L_PRINT_FAC1_FMT_14
   12275/    3B3E : E1                      POP     H
   12276/    3B3F : 36 25                   MVI     M,'%'						;25H
   12277/    3B41 : C9                      RET
   12278/    3B42 :                     
   12279/    3B42 :                     L_PRINT_FAC1_FMT_15:
   12280/    3B42 : E5                      PUSH    H
   12281/    3B43 : 1F                      RAR
   12282/    3B44 : DA D2 3B                JC      L_PRINT_FAC1_FMT_18
   12283/    3B47 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12284/    3B4A : 50                      MOV     D,B
   12285/    3B4B : 3A 18 FC                LDA     DFACLO_R					;FAC1 exponent
   12286/    3B4E : D6 4F                   SUI     4FH
   12287/    3B50 : DA 5E 3B                JC      +							;brif DFACLO_R < 4FH
   12288/    3B53 : E1                      POP     H
   12289/    3B54 : C1                      POP     B
   12290/    3B55 : CD E8 39                CALL    R_PRINT_FAC1_ZERO			;Convert number in FAC1 to ASCII at MBUFFER_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 207 - 9/5/2025 20:20:35


   12291/    3B58 : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12292/    3B5B : 36 25                   MVI     M,'%'						;25H
   12293/    3B5D : C9                      RET
   12294/    3B5E : (MACRO)             +	FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   12295/    3B5F : C4 55 3D                CNZ     L_UNBIAS_EXP				;calif FAC1 != 0.0
   12296/    3B62 : E1                      POP     H
   12297/    3B63 : C1                      POP     B
   12298/    3B64 : FA 81 3B                JM      +
   12299/    3B67 : C5                      PUSH    B
   12300/    3B68 : 5F                      MOV     E,A
   12301/    3B69 : 78                      MOV     A,B
   12302/    3B6A : 92                      SUB     D
   12303/    3B6B : 93                      SUB     E
   12304/    3B6C : F4 44 3C                CP      L_ADD_ZEROS					;add A zeros, unformatted
   12305/    3B6F : CD 5B 3C                CALL    L_FOUTCD
   12306/    3B72 : CD 97 3C                CALL    L_PRINT_BCDS
   12307/    3B75 : B3                      ORA     E
   12308/    3B76 : C4 54 3C                CNZ     L_ADD_ZEROS_FMT_1
   12309/    3B79 : B3                      ORA     E
   12310/    3B7A : C4 83 3C                CNZ     L_FOUTED					;add formatting. BC must be loaded
   12311/    3B7D : D1                      POP     D
   12312/    3B7E : C3 E6 3A                JMP     L_PRINT_FAC1_FMT_10
   12313/    3B81 :                     
   12314/    3B81 : 5F                  +	MOV     E,A
   12315/    3B82 : 79                      MOV     A,C
   12316/    3B83 : B7                      ORA     A
   12317/    3B84 : C4 3A 38                CNZ     L_DCR_A
   12318/    3B87 : 83                      ADD     E
   12319/    3B88 : FA 8C 3B                JM      +
   12320/    3B8B : AF                      XRA     A
   12321/    3B8C : C5                  +	PUSH    B
   12322/    3B8D : F5                      PUSH    PSW
   12323/    3B8E : FC 2D 3D                CM      L_FND_BCD_POS				;calif A is negative
   12324/    3B91 : C1                      POP     B
   12325/    3B92 : 7B                      MOV     A,E
   12326/    3B93 : 90                      SUB     B
   12327/    3B94 : C1                      POP     B
   12328/    3B95 : 5F                      MOV     E,A
   12329/    3B96 : 82                      ADD     D
   12330/    3B97 : 78                      MOV     A,B
   12331/    3B98 : FA A7 3B                JM      +
   12332/    3B9B : 92                      SUB     D
   12333/    3B9C : 93                      SUB     E
   12334/    3B9D : F4 44 3C                CP      L_ADD_ZEROS					;add A zeros, unformatted
   12335/    3BA0 : C5                      PUSH    B
   12336/    3BA1 : CD 5B 3C                CALL    L_FOUTCD
   12337/    3BA4 : C3 B8 3B                JMP     L_PRINT_FAC1_FMT_16
   12338/    3BA7 :                     
   12339/    3BA7 : CD 44 3C            +	CALL    L_ADD_ZEROS					;add A zeros, unformatted
   12340/    3BAA : 79                      MOV     A,C
   12341/    3BAB : CD 87 3C                CALL    L_FOUTDP
   12342/    3BAE : 4F                      MOV     C,A
   12343/    3BAF : AF                      XRA     A
   12344/    3BB0 : 92                      SUB     D
   12345/    3BB1 : 93                      SUB     E
   12346/    3BB2 : CD 44 3C                CALL    L_ADD_ZEROS					;add A zeros, unformatted
   12347/    3BB5 : C5                      PUSH    B
   12348/    3BB6 : 47                      MOV     B,A
   12349/    3BB7 : 4F                      MOV     C,A
   12350/    3BB8 :                     L_PRINT_FAC1_FMT_16:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 208 - 9/5/2025 20:20:35


   12351/    3BB8 : CD 97 3C                CALL    L_PRINT_BCDS
   12352/    3BBB : C1                      POP     B
   12353/    3BBC : B1                      ORA     C
   12354/    3BBD : C2 C3 3B                JNZ     +
   12355/    3BC0 : 2A A8 FB                LHLD    TEMP2_R
   12356/    3BC3 : 83                  +	ADD     E
   12357/    3BC4 : 3D                      DCR     A
   12358/    3BC5 : F4 44 3C                CP      L_ADD_ZEROS					;add A zeros, unformatted
   12359/    3BC8 : 50                      MOV     D,B
   12360/    3BC9 : C3 EF 3A                JMP     L_PRINT_FAC1_FMT_11
   12361/    3BCC :                     
   12362/    3BCC :                     L_PRINT_FAC1_FMT_17:
   12363/    3BCC : E5                      PUSH    H
   12364/    3BCD : D5                      PUSH    D
   12365/    3BCE : CD 40 35                CALL    L_CONSI						;Convert signed integer in FAC1 to single precision
   12366/    3BD1 : D1                      POP     D
   12367/    3BD2 :                     L_PRINT_FAC1_FMT_18:
   12368/    3BD2 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12369/    3BD5 : 58                      MOV     E,B
   12370/    3BD6 : (MACRO)                 FSIGN								;Return 1 or -1 in A based on Sign bit of FAC1
   12371/    3BD7 : F5                      PUSH    PSW							;save result
   12372/    3BD8 : C4 55 3D                CNZ     L_UNBIAS_EXP				;calif FAC1 != 0.0
   12373/    3BDB : F1                      POP     PSW
   12374/    3BDC : E1                      POP     H
   12375/    3BDD : C1                      POP     B
   12376/    3BDE : F5                      PUSH    PSW
   12377/    3BDF : 79                      MOV     A,C
   12378/    3BE0 : B7                      ORA     A
   12379/    3BE1 : F5                      PUSH    PSW
   12380/    3BE2 : C4 3A 38                CNZ     L_DCR_A
   12381/    3BE5 : 80                      ADD     B
   12382/    3BE6 : 4F                      MOV     C,A
   12383/    3BE7 : 7A                      MOV     A,D
   12384/    3BE8 : E6 04                   ANI     04H
   12385/    3BEA : FE 01                   CPI     01H
   12386/    3BEC : 9F                      SBB     A
   12387/    3BED : 57                      MOV     D,A
   12388/    3BEE : 81                      ADD     C
   12389/    3BEF : 4F                      MOV     C,A
   12390/    3BF0 : 93                      SUB     E
   12391/    3BF1 : F5                      PUSH    PSW
   12392/    3BF2 : F2 04 3C                JP      +
   12393/    3BF5 : CD 2D 3D                CALL    L_FND_BCD_POS				;calif A is negative
   12394/    3BF8 : C2 04 3C                JNZ     +
   12395/    3BFB : E5                      PUSH    H							;save HL
   12396/    3BFC : CD F2 2C                CALL    L_ROTATER_FAC1				;Rotate FAC1 BCD digits right
   12397/    3BFF : 21 18 FC                LXI     H,DFACLO_R				    ;FAC1
   12398/    3C02 : 34                      INR     M							;increment exponent
   12399/    3C03 : E1                      POP     H							;restore HL
   12400/    3C04 : F1                  +	POP     PSW
   12401/    3C05 : C5                      PUSH    B
   12402/    3C06 : F5                      PUSH    PSW
   12403/    3C07 : FA 0B 3C                JM      +
   12404/    3C0A : AF                      XRA     A
   12405/    3C0B : 2F                  +	CMA
   12406/    3C0C : 3C                      INR     A
   12407/    3C0D : 80                      ADD     B
   12408/    3C0E : 3C                      INR     A
   12409/    3C0F : 82                      ADD     D
   12410/    3C10 : 47                      MOV     B,A							;char count
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 209 - 9/5/2025 20:20:35


   12411/    3C11 : 0E 00                   MVI     C,00H						;thousands count
   12412/    3C13 : CC 70 3C                CZ      L_FOUTAN
   12413/    3C16 : CD 97 3C                CALL    L_PRINT_BCDS
   12414/    3C19 : F1                      POP     PSW
   12415/    3C1A : F4 4D 3C                CP      L_ADD_ZEROS_FMT				;add flagged A zeros
   12416/    3C1D : CD 83 3C                CALL    L_FOUTED					;add formatting. BC must be loaded
   12417/    3C20 : C1                      POP     B
   12418/    3C21 : F1                      POP     PSW
   12419/    3C22 : C2 31 3C                JNZ     +
   12420/    3C25 : CD 3C 38                CALL    L_DCX_H
   12421/    3C28 : 7E                      MOV     A,M
   12422/    3C29 : FE 2E                   CPI     '.'
   12423/    3C2B : C4 57 34                CNZ     L_INCHL						;Increment HL
   12424/    3C2E : 22 A8 FB                SHLD    TEMP2_R
   12425/    3C31 : F1                  +	POP     PSW
   12426/    3C32 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   12427/    3C35 : CA 3B 3C                JZ      +
   12428/    3C38 : 83                      ADD     E
   12429/    3C39 : 90                      SUB     B
   12430/    3C3A : 92                      SUB     D
   12431/    3C3B : C5                  +	PUSH    B
   12432/    3C3C : CD A8 3A                CALL    L_PRINT_FAC1_FMT_6
   12433/    3C3F : EB                      XCHG
   12434/    3C40 : D1                      POP     D
   12435/    3C41 : C3 EF 3A                JMP     L_PRINT_FAC1_FMT_11
   12436/    3C44 :                     ;
   12437/    3C44 :                     ;
   12438/    3C44 :                     L_ADD_ZEROS:							;add A zeros, unformatted
   12439/    3C44 : B7                      ORA     A
   12440/    3C45 : C8                  -	RZ
   12441/    3C46 : 3D                      DCR     A
   12442/    3C47 : 36 30                   MVI     M,'0'
   12443/    3C49 : 23                      INX     H
   12444/    3C4A : C3 45 3C                JMP     -
   12445/    3C4D :                     
   12446/    3C4D :                     L_ADD_ZEROS_FMT:						;add flagged A zeros
   12447/    3C4D : C2 54 3C                JNZ     L_ADD_ZEROS_FMT_1
   12448/    3C50 : C8                  -	RZ									;done
   12449/    3C51 : CD 83 3C                CALL    L_FOUTED					;add formatting. BC must be loaded
   12450/    3C54 :                     L_ADD_ZEROS_FMT_1:
   12451/    3C54 : 36 30                   MVI     M,'0'
   12452/    3C56 : 23                      INX     H
   12453/    3C57 : 3D                      DCR     A							;set flag
   12454/    3C58 : C3 50 3C                JMP		-
   12455/    3C5B :                     ;
   12456/    3C5B :                     ; IN:
   12457/    3C5B :                     ;	DE		
   12458/    3C5B :                     ;
   12459/    3C5B :                     ;HERE TO PUT A POSSIBLE COMMA COUNT IN C, AND ZERO C IF WE ARE NOT
   12460/    3C5B :                     ;USING THE COMMA SPECIFICATION
   12461/    3C5B :                     ;
   12462/    3C5B :                     L_FOUTCD:
   12463/    3C5B : 7B                      MOV     A,E							;D+E
   12464/    3C5C : 82                      ADD     D
   12465/    3C5D : 3C                      INR     A							;+1
   12466/    3C5E : 47                      MOV     B,A							;D+E+1
   12467/    3C5F : 3C                      INR     A							;+1
   12468/    3C60 :                     ; modulo 3
   12469/    3C60 : D6 03               -	SUI     3
   12470/    3C62 : D2 60 3C                JNC		-
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 210 - 9/5/2025 20:20:35


   12471/    3C65 : C6 05                   ADI		5							;ADD 3 BACK IN AND ADD 2 MORE FOR SCALING
   12472/    3C67 :                     ; plus 5
   12473/    3C67 : 4F                      MOV     C,A							;((D+E+2) mod 3) + 5
   12474/    3C68 :                     L_FOUICC:
   12475/    3C68 : 3A 8E FB                LDA     TEMP3_R						;GET THE FORMAT SPECS
   12476/    3C6B : E6 40                   ANI     40H							;LOOK AT THE COMMA BIT
   12477/    3C6D : C0                      RNZ									;WE ARE USING COMMAS, JUST RETURN
   12478/    3C6E : 4F                      MOV     C,A							;WE AREN'T, ZERO THE COMMA COUNT
   12479/    3C6F : C9                      RET
   12480/    3C70 :                     ;
   12481/    3C70 :                     ;HERE TO PUT DECIMAL POINTS AND COMMAS IN THEIR CORRECT PLACES
   12482/    3C70 :                     ;THIS SUBROUTINE SHOULD BE CALLED BEFORE THE NEXT DIGIT IS PUT IN THE
   12483/    3C70 :                     ;BUFFER.  B=THE DECIMAL POINT COUNT, C=THE COMMA COUNT
   12484/    3C70 :                     ;THE COUNTS TELL HOW MANY MORE DIGITS HAVE TO GO IN BEFORE THE COMMA
   12485/    3C70 :                     ;OR DECIMAL POINT GO IN.  THE COMMA OR DECIMAL POINT THEN GOES BEFORE 
   12486/    3C70 :                     ;THE LAST DIGIT IN THE COUNT.  FOR EXAMPLE, IF THE DECIMAL POINT SHOULD
   12487/    3C70 :                     ;COME AFTER THE FIRST DIGIT, THE DECIMAL POINT COUNT SHOULD BE 2.
   12488/    3C70 :                     ;SAVE FOR LATER
   12489/    3C70 :                     ;
   12490/    3C70 :                     L_FOUTAN:
   12491/    3C70 : 05                      DCR     B							;char count
   12492/    3C71 : F2 84 3C                JP      L_FOUTE1					;brif >= 0
   12493/    3C74 :                     ; B is negative. Print -B zeros
   12494/    3C74 : 22 A8 FB                SHLD    TEMP2_R						;ptr to last comma printed
   12495/    3C77 : 36 2E                   MVI     M,'.'					
   12496/    3C79 : 23                  -	INX     H
   12497/    3C7A : 36 30                   MVI     M,'0'
   12498/    3C7C : 04                      INR     B
   12499/    3C7D : 48                      MOV     C,B							;C will be -1 on exit
   12500/    3C7E : C2 79 3C                JNZ     -
   12501/    3C81 : 23                      INX     H
   12502/    3C82 : C9                      RET
   12503/    3C83 :                     ;
   12504/    3C83 :                     ; IN:
   12505/    3C83 :                     ;	B		period count
   12506/    3C83 :                     ;	C		comma count
   12507/    3C83 :                     ;	HL		output buffer ptr
   12508/    3C83 :                     ;
   12509/    3C83 :                     L_FOUTED:								;add formatting.
   12510/    3C83 : 05                      DCR     B							;char count
   12511/    3C84 :                     L_FOUTE1:
   12512/    3C84 : C2 8F 3C                JNZ     L_PRNT_COMMA				;brif B != 0
   12513/    3C87 :                     L_FOUTDP:								;print '.'
   12514/    3C87 : 36 2E                   MVI     M,'.'					
   12515/    3C89 : 22 A8 FB                SHLD    TEMP2_R					;ptr to last period printed
   12516/    3C8C : 23                      INX     H							;next
   12517/    3C8D : 48                      MOV     C,B							;now zero
   12518/    3C8E : C9                      RET
   12519/    3C8F :                     
   12520/    3C8F :                     L_PRNT_COMMA:							;print ',' every third digit
   12521/    3C8F : 0D                      DCR     C
   12522/    3C90 : C0                      RNZ
   12523/    3C91 : 36 2C                   MVI     M,','
   12524/    3C93 : 23                      INX     H							;next
   12525/    3C94 : 0E 03                   MVI     C,03H						;reset
   12526/    3C96 : C9                      RET
   12527/    3C97 :                     
   12528/    3C97 :                     L_PRINT_BCDS:
   12529/    3C97 : D5                      PUSH    D
   12530/    3C98 : E5                      PUSH    H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 211 - 9/5/2025 20:20:35


   12531/    3C99 : C5                      PUSH    B
   12532/    3C9A : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12533/    3C9D : 78                      MOV     A,B
   12534/    3C9E : C1                      POP     B
   12535/    3C9F : E1                      POP     H
   12536/    3CA0 : 11 19 FC                LXI     D,DFACLO_R+1				;Point to BCD portion of FAC1
   12537/    3CA3 : 37                      STC
   12538/    3CA4 :                     L_PRINT_BCDS_1:
   12539/    3CA4 : F5                      PUSH    PSW
   12540/    3CA5 : CD 83 3C                CALL    L_FOUTED					;add formatting. BC must be loaded			
   12541/    3CA8 : 1A                      LDAX    D
   12542/    3CA9 : D2 B3 3C                JNC     L_PRINT_BCDS_2
   12543/    3CAC : 1F                      RAR									;move upper nibble to lower nibble
   12544/    3CAD : 1F                      RAR
   12545/    3CAE : 1F                      RAR
   12546/    3CAF : 1F                      RAR
   12547/    3CB0 : C3 B4 3C                JMP     +
   12548/    3CB3 :                     L_PRINT_BCDS_2:
   12549/    3CB3 : 13                      INX     D
   12550/    3CB4 : E6 0F               +	ANI     0FH							;isolate lower nibble
   12551/    3CB6 : C6 30                   ADI		'0'
   12552/    3CB8 : 77                      MOV     M,A
   12553/    3CB9 : 23                      INX     H
   12554/    3CBA : F1                      POP     PSW
   12555/    3CBB : 3D                      DCR     A
   12556/    3CBC : 3F                      CMC									;complement carry
   12557/    3CBD : C2 A4 3C                JNZ     L_PRINT_BCDS_1
   12558/    3CC0 : C3 F4 3C                JMP     L_PRINT_FAC_2
   12559/    3CC3 :                     ;
   12560/    3CC3 :                     ; BC must be loaded with format DATA
   12561/    3CC3 :                     ; HL	output buffer ptr
   12562/    3CC3 :                     ;
   12563/    3CC3 :                     L_PRINT_FAC:
   12564/    3CC3 : D5                      PUSH    D							;save DE
   12565/    3CC4 : 11 FA 3C                LXI     D,L_DEC_RANGES				;Code Based. table
   12566/    3CC7 : 3E 05                   MVI     A,05H						;loop 5 times
   12567/    3CC9 :                     L_PRINT_FAC_1:
   12568/    3CC9 : CD 83 3C                CALL    L_FOUTED					;add formatting. BC must be loaded
   12569/    3CCC : C5                      PUSH    B							;save BC
   12570/    3CCD : F5                      PUSH    PSW							;save loop counter
   12571/    3CCE : E5                      PUSH    H							;save HL
   12572/    3CCF : EB                      XCHG								;L_DEC_RANGES ptr to HL
   12573/    3CD0 : 4E                      MOV     C,M							;load range limit from M
   12574/    3CD1 : 23                      INX     H
   12575/    3CD2 : 46                      MOV     B,M
   12576/    3CD3 : C5                      PUSH    B							;save range limit
   12577/    3CD4 : 23                      INX     H
   12578/    3CD5 : E3                      XTHL								;swap range limit and L_DEC_RANGES ptr
   12579/    3CD6 : EB                      XCHG								;range limit to DE
   12580/    3CD7 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   12581/    3CDA : 06 2F                   MVI     B,'0'-1						;2FH predecrement B
   12582/    3CDC : 04                  -	INR     B
   12583/    3CDD : 7D                      MOV     A,L							;int value -= range limit
   12584/    3CDE : 93                      SUB     E
   12585/    3CDF : 6F                      MOV     L,A
   12586/    3CE0 : 7C                      MOV     A,H
   12587/    3CE1 : 9A                      SBB     D
   12588/    3CE2 : 67                      MOV     H,A
   12589/    3CE3 : D2 DC 3C                JNC     -							;brif int value >= 0
   12590/    3CE6 : 19                      DAD     D							;undo last subtraction
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 212 - 9/5/2025 20:20:35


   12591/    3CE7 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   12592/    3CEA : D1                      POP     D
   12593/    3CEB : E1                      POP     H
   12594/    3CEC : 70                      MOV     M,B							;update output buffer
   12595/    3CED : 23                      INX     H
   12596/    3CEE : F1                      POP     PSW							;restore loop counter
   12597/    3CEF : C1                      POP     B							;restore BC
   12598/    3CF0 : 3D                      DCR     A
   12599/    3CF1 : C2 C9 3C                JNZ     L_PRINT_FAC_1						;brif A != 0: continue
   12600/    3CF4 :                     L_PRINT_FAC_2:
   12601/    3CF4 : CD 83 3C                CALL    L_FOUTED					;add formatting. BC must be loaded
   12602/    3CF7 : 77                      MOV     M,A
   12603/    3CF8 : D1                      POP     D							;restore DE
   12604/    3CF9 : C9                      RET
   12605/    3CFA :                     ;
   12606/    3CFA :                     ; see also L_EXP_TBL
   12607/    3CFA :                     ;
   12608/    3CFA :                     L_DEC_RANGES:
   12609/    3CFA : 10 27 E8 03 64 00   	DW		10000, 1000, 100, 10, 1
                    0A 00 01 00 
   12610/    3D04 :                     ;
   12611/    3D04 :                     ; Sets registers B & HL based on precision
   12612/    3D04 :                     ;
   12613/    3D04 :                     ; OUT:
   12614/    3D04 :                     ;	B		precision count (#BCD digits)
   12615/    3D04 :                     ;	HL		end of FAC
   12616/    3D04 :                     ;
   12617/    3D04 :                     L_SET_NUM_BCD_DIGITS:
   12618/    3D04 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   12619/    3D05 : 21 1F FC                LXI     H,DFACLO_R+7				;Point to end of FAC1 for Double Precision
   12620/    3D08 : 06 0E                   MVI     B,0EH						;preset Double Precision BCD count
   12621/    3D0A : D0                      RNC									;retif Double Precision
   12622/    3D0B : 21 1B FC                LXI     H,DFACLO_R+3				;0FC1BH
   12623/    3D0E : 06 06                   MVI     B,06H						;set Single Precision BCD count
   12624/    3D10 : C9                      RET
   12625/    3D11 :                     ;
   12626/    3D11 :                     ; Initialize FAC1 with 0.0 if it has no value
   12627/    3D11 :                     ; Also sets HL to MBUFFER_R
   12628/    3D11 :                     ;
   12629/    3D11 :                     R_FAC1_EQ_ZERO:							;3D11H
   12630/    3D11 : 32 8E FB                STA     TEMP3_R
   12631/    3D14 : F5                      PUSH    PSW
   12632/    3D15 : C5                      PUSH    B
   12633/    3D16 : D5                      PUSH    D
   12634/    3D17 : CD BA 35                CALL    L_FRCDBL				    ;CDBL function
   12635/    3D1A : 21 7E 32                LXI     H,R_DBL_ZERO				;Code Based. 
   12636/    3D1D : 3A 18 FC                LDA     DFACLO_R					;exponent of FAC1
   12637/    3D20 : A7                      ANA     A							;test it
   12638/    3D21 : CC C4 31                CZ      R_FAC1_EQ_FP				;Move floating point number M to FAC1
   12639/    3D24 : D1                      POP     D
   12640/    3D25 : C1                      POP     B
   12641/    3D26 : F1                      POP     PSW
   12642/    3D27 : 21 E8 FB                LXI     H,MBUFFER_R
   12643/    3D2A : 36 20                   MVI     M,' '
   12644/    3D2C : C9                      RET
   12645/    3D2D :                     ;
   12646/    3D2D :                     ; IN:
   12647/    3D2D :                     ;	A negative number
   12648/    3D2D :                     ;
   12649/    3D2D :                     ; OUT:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 213 - 9/5/2025 20:20:35


   12650/    3D2D :                     ;	A
   12651/    3D2D :                     ;
   12652/    3D2D :                     L_FND_BCD_POS:
   12653/    3D2D : E5                      PUSH    H							;save WREGS
   12654/    3D2E : D5                      PUSH    D
   12655/    3D2F : C5                      PUSH    B
   12656/    3D30 : F5                      PUSH    PSW							;save A
   12657/    3D31 : 2F                      CMA									;negate A
   12658/    3D32 : 3C                      INR     A
   12659/    3D33 : 5F                      MOV     E,A							;loop counter
   12660/    3D34 : 3E 01                   MVI     A,01H						;preload return value
   12661/    3D36 : CA 4F 3D                JZ      +							;brif A was 0: done
   12662/    3D39 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12663/    3D3C : E5                      PUSH    H							;save ptr to FAC1 extended precision
   12664/    3D3D : CD F2 2C            -	CALL    L_ROTATER_FAC1				;Rotate FAC1 BCD digits right
   12665/    3D40 : 1D                      DCR     E
   12666/    3D41 : C2 3D 3D                JNZ     -
   12667/    3D44 : E1                      POP     H							;restore ptr to FAC1 extended precision
   12668/    3D45 : 23                      INX     H
   12669/    3D46 : 78                      MOV     A,B							;extended precision counter
   12670/    3D47 : 0F                      RRC									;divide by 2
   12671/    3D48 : 47                      MOV     B,A							;# of digits
   12672/    3D49 : CD 2C 2C                CALL    L_ROUND_FAC1_1
   12673/    3D4C : CD 67 3D                CALL    L_FIND_NONZERO_BCD			;find non-zero BCD digit
   12674/    3D4F : C1                  +	POP     B							;saved arg A to B
   12675/    3D50 : 80                      ADD     B
   12676/    3D51 : C1                      POP     B							;restore WREGS
   12677/    3D52 : D1                      POP     D
   12678/    3D53 : E1                      POP     H
   12679/    3D54 : C9                      RET
   12680/    3D55 :                     
   12681/    3D55 :                     L_UNBIAS_EXP:
   12682/    3D55 : C5                      PUSH    B							;save BC, HL
   12683/    3D56 : E5                      PUSH    H
   12684/    3D57 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12685/    3D5A : 3A 18 FC                LDA     DFACLO_R					;FAC1 exponent
   12686/    3D5D : D6 40                   SUI     40H							;exponent bias
   12687/    3D5F : 90                      SUB     B							;BCD precision count
   12688/    3D60 : 32 18 FC                STA     DFACLO_R					;FAC1
   12689/    3D63 : E1                      POP     H							;restore HL, BC
   12690/    3D64 : C1                      POP     B
   12691/    3D65 : B7                      ORA     A
   12692/    3D66 : C9                      RET
   12693/    3D67 :                     ;
   12694/    3D67 :                     ; find non-zero BCD digit
   12695/    3D67 :                     ;
   12696/    3D67 :                     ; OUT:
   12697/    3D67 :                     ;	A	non-zero BCD digit index
   12698/    3D67 :                     ; 
   12699/    3D67 :                     L_FIND_NONZERO_BCD:
   12700/    3D67 : C5                      PUSH    B							;save BC
   12701/    3D68 : CD 04 3D                CALL    L_SET_NUM_BCD_DIGITS		;Sets registers B (BCD precision count) & HL based on precision
   12702/    3D6B :                     ; HL points to end of FAC
   12703/    3D6B : 7E                  -	MOV     A,M							;isolate BCD digit
   12704/    3D6C : E6 0F                   ANI     0FH
   12705/    3D6E : C2 7C 3D                JNZ     +							;brif lower nibble BCD digit != 0
   12706/    3D71 : 05                      DCR     B							;decrement BCD digit counter
   12707/    3D72 : 7E                      MOV     A,M							;get 2 BCD digits
   12708/    3D73 : B7                      ORA     A							;test upper nibble BCD digit (lower is 0)
   12709/    3D74 : C2 7C 3D                JNZ     +							;brif upper nibble BCD digit != 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 214 - 9/5/2025 20:20:35


   12710/    3D77 : 2B                      DCX     H							;continue to end of BCD mantissa
   12711/    3D78 : 05                      DCR     B							;decrement BCD digit counter
   12712/    3D79 : C2 6B 3D                JNZ     -							;brif not done
   12713/    3D7C : 78                  +	MOV     A,B							;resulting BCD digit index
   12714/    3D7D : C1                      POP     B							;restore BC
   12715/    3D7E : C9                      RET
   12716/    3D7F :                     ;
   12717/    3D7F :                     ; Single precision exponential function
   12718/    3D7F :                     ;
   12719/    3D7F :                     R_SNGL_EXP:								;3D7FH
   12720/    3D7F : CD 27 38                CALL    R_SNGL_LOAD				    ;Single precision load (FAC2=BCDE)
   12721/    3D82 : CD C2 35                CALL    L_CONDS
   12722/    3D85 : CD 2E 32                CALL    R_PUSH_FAC2				    ;Push FAC2 on stack
   12723/    3D88 : CD D2 31                CALL    L_SWP_FAC_SP
   12724/    3D8B : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   12725/    3D8E :                     ;
   12726/    3D8E :                     ; Double precision exponential function
   12727/    3D8E :                     ;
   12728/    3D8E :                     R_DBL_EXP:								;3D8EH
   12729/    3D8E : 3A 69 FC                LDA     DFACLO2_R					;Start of FAC2
   12730/    3D91 : B7                      ORA     A							;test exponent FAC2
   12731/    3D92 : CA FC 3D                JZ      L_ONE_TO_FAC1				;brif FAC2 == 0. X pwr 0 = 1
   12732/    3D95 : 67                      MOV     H,A
   12733/    3D96 : 3A 18 FC                LDA     DFACLO_R					;FAC1
   12734/    3D99 : B7                      ORA     A							;test exponent FAC1
   12735/    3D9A : CA 07 3E                JZ      L_INT_EXP_1					;brif FAC1 == 0 
   12736/    3D9D : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   12737/    3DA0 : CD DC 3E                CALL    L_CMP_INT_FAC1
   12738/    3DA3 : DA E2 3D                JC      L_DBL_EXP_1
   12739/    3DA6 : EB                      XCHG
   12740/    3DA7 : 22 90 FB                SHLD    TEMP8_R
   12741/    3DAA : CD CF 35                CALL    L_VALDBL
   12742/    3DAD : CD 45 32                CALL    R_POP_FAC2				   	;Pop FAC2 from stack
   12743/    3DB0 : CD DC 3E                CALL    L_CMP_INT_FAC1
   12744/    3DB3 : CD CF 35                CALL    L_VALDBL
   12745/    3DB6 : 2A 90 FB                LHLD    TEMP8_R
   12746/    3DB9 : D2 15 3E                JNC     L_INT_EXP_2
   12747/    3DBC : 3A 69 FC                LDA     DFACLO2_R					;Start of FAC2
   12748/    3DBF : F5                      PUSH    PSW
   12749/    3DC0 : E5                      PUSH    H
   12750/    3DC1 : CD C1 31                CALL    R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   12751/    3DC4 : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12752/    3DC7 : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   12753/    3DCA : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   12754/    3DCD : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   12755/    3DD0 : E1                      POP     H
   12756/    3DD1 : 7C                      MOV     A,H
   12757/    3DD2 : B7                      ORA     A
   12758/    3DD3 : F5                      PUSH    PSW
   12759/    3DD4 : F2 DE 3D                JP      +
   12760/    3DD7 : AF                      XRA     A
   12761/    3DD8 : 4F                      MOV     C,A
   12762/    3DD9 : 95                      SUB     L
   12763/    3DDA : 6F                      MOV     L,A
   12764/    3DDB : 79                      MOV     A,C
   12765/    3DDC : 9C                      SBB     H
   12766/    3DDD : 67                      MOV     H,A
   12767/    3DDE : E5                  +	PUSH    H
   12768/    3DDF : C3 53 3E                JMP     L_INT_EXP_4
   12769/    3DE2 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 215 - 9/5/2025 20:20:35


   12770/    3DE2 :                     L_DBL_EXP_1:
   12771/    3DE2 : CD CF 35                CALL    L_VALDBL
   12772/    3DE5 : CD C1 31                CALL    R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   12773/    3DE8 : CD D2 31                CALL    L_SWP_FAC_SP
   12774/    3DEB : CD CF 2F                CALL    R_LOG_FUN				    ;LOG function
   12775/    3DEE : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   12776/    3DF1 : CD FF 2C                CALL    R_DBL_MULT				    ;Double precision multiply (FAC1=FAC1*FAC2)
   12777/    3DF4 : C3 A4 30                JMP     R_EXP_FUN				    ;EXP function
   12778/    3DF7 :                     ;
   12779/    3DF7 :                     ; Integer exponential function
   12780/    3DF7 :                     ;
   12781/    3DF7 :                     ; X(DE) pwr HL
   12782/    3DF7 :                     ;
   12783/    3DF7 :                     R_INT_EXP:								;3DF7H
   12784/    3DF7 : 7C                      MOV     A,H							;test power
   12785/    3DF8 : B5                      ORA     L
   12786/    3DF9 : C2 02 3E                JNZ     +							;brif HL != 0
   12787/    3DFC :                     ; power == 0, return X pwr 0 == 1
   12788/    3DFC :                     L_ONE_TO_FAC1:
   12789/    3DFC : 21 01 00                LXI     H,0001H						;load 1 to FAC1
   12790/    3DFF : C3 12 3E                JMP     L_HL_TO_FAC1
   12791/    3E02 : 7A                  +	MOV     A,D							;test X
   12792/    3E03 : B3                      ORA     E
   12793/    3E04 : C2 15 3E                JNZ     L_INT_EXP_2					;brif X != 0
   12794/    3E07 :                     ; X == 0
   12795/    3E07 :                     L_INT_EXP_1:
   12796/    3E07 : 7C                      MOV     A,H							;exponent FAC1
   12797/    3E08 : 17                      RAL									;test sign bit
   12798/    3E09 : D2 0F 3E                JNC     L_ZERO_TO_FAC1				;brif positive: return 0
   12799/    3E0C : C3 49 04                JMP     R_GEN_D0_ERROR				;Generate /0 error
   12800/    3E0F :                     
   12801/    3E0F :                     L_ZERO_TO_FAC1:
   12802/    3E0F : 21 00 00                LXI     H,0
   12803/    3E12 :                     L_HL_TO_FAC1:
   12804/    3E12 : C3 10 35                JMP     L_MAKINT					;Load signed integer in HL to FAC1
   12805/    3E15 :                     
   12806/    3E15 :                     L_INT_EXP_2:
   12807/    3E15 : 22 90 FB                SHLD    TEMP8_R
   12808/    3E18 : D5                      PUSH    D
   12809/    3E19 : 7C                      MOV     A,H
   12810/    3E1A : B7                      ORA     A
   12811/    3E1B : F5                      PUSH    PSW
   12812/    3E1C : FC C6 37                CM      L_INEGHL					;negate HL and Load signed integer in HL to FAC1
   12813/    3E1F : 44                      MOV     B,H
   12814/    3E20 : 4D                      MOV     C,L
   12815/    3E21 : 21 01 00                LXI     H,0001H
   12816/    3E24 :                     L_INT_EXP_3:
   12817/    3E24 : B7                      ORA     A							;clear carry
   12818/    3E25 : 78                      MOV     A,B
   12819/    3E26 : 1F                      RAR
   12820/    3E27 : 47                      MOV     B,A
   12821/    3E28 : 79                      MOV     A,C
   12822/    3E29 : 1F                      RAR
   12823/    3E2A : 4F                      MOV     C,A
   12824/    3E2B : D2 34 3E                JNC     +
   12825/    3E2E : CD CF 3E                CALL    L_INT_EXP_9
   12826/    3E31 : C2 85 3E                JNZ     L_INT_EXP_6
   12827/    3E34 : 78                  +	MOV     A,B
   12828/    3E35 : B1                      ORA     C
   12829/    3E36 : CA 9E 3E                JZ      L_INT_EXP_7
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 216 - 9/5/2025 20:20:35


   12830/    3E39 : E5                      PUSH    H
   12831/    3E3A : 62                      MOV     H,D
   12832/    3E3B : 6B                      MOV     L,E
   12833/    3E3C : CD CF 3E                CALL    L_INT_EXP_9
   12834/    3E3F : EB                      XCHG
   12835/    3E40 : E1                      POP     H
   12836/    3E41 : CA 24 3E                JZ      L_INT_EXP_3
   12837/    3E44 : C5                      PUSH    B
   12838/    3E45 : E5                      PUSH    H
   12839/    3E46 : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12840/    3E49 : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   12841/    3E4C : E1                      POP     H
   12842/    3E4D : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   12843/    3E50 : CD C2 35                CALL    L_CONDS
   12844/    3E53 :                     L_INT_EXP_4:
   12845/    3E53 : C1                      POP     B
   12846/    3E54 : 78                      MOV     A,B
   12847/    3E55 : B7                      ORA     A							;clear carry
   12848/    3E56 : 1F                      RAR
   12849/    3E57 : 47                      MOV     B,A
   12850/    3E58 : 79                      MOV     A,C
   12851/    3E59 : 1F                      RAR
   12852/    3E5A : 4F                      MOV     C,A
   12853/    3E5B : D2 66 3E                JNC     L_INT_EXP_5
   12854/    3E5E : C5                      PUSH    B
   12855/    3E5F : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12856/    3E62 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   12857/    3E65 : C1                      POP     B
   12858/    3E66 :                     L_INT_EXP_5:
   12859/    3E66 : 78                      MOV     A,B
   12860/    3E67 : B1                      ORA     C
   12861/    3E68 : CA 9E 3E                JZ      L_INT_EXP_7
   12862/    3E6B : C5                      PUSH    B
   12863/    3E6C : CD 34 32                CALL    R_PUSH_FAC1				    ;Push FAC1 on stack
   12864/    3E6F : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12865/    3E72 : E5                      PUSH    H
   12866/    3E73 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   12867/    3E76 : E1                      POP     H
   12868/    3E77 : E5                      PUSH    H
   12869/    3E78 : CD A3 31                CALL    R_MULT_M_FAC2				;Double precision math (FAC1=M * FAC2))
   12870/    3E7B : E1                      POP     H
   12871/    3E7C : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   12872/    3E7F : CD 4B 32                CALL    R_POP_FAC1				    ;Pop FAC1 from stack
   12873/    3E82 : C3 53 3E                JMP     L_INT_EXP_4
   12874/    3E85 :                     
   12875/    3E85 :                     L_INT_EXP_6:
   12876/    3E85 : C5                      PUSH    B
   12877/    3E86 : D5                      PUSH    D
   12878/    3E87 : CD F4 7F                CALL    L_CONV_DBL_TO_FAC2			;Convert to DBL and move to FAC2
   12879/    3E8A : E1                      POP     H
   12880/    3E8B : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   12881/    3E8E : CD C2 35                CALL    L_CONDS
   12882/    3E91 : 21 E7 FB                LXI     H,FPTMP1_R					;Floating Point Temp 1
   12883/    3E94 : CD CA 31                CALL    R_MOVE_FAC1_TO_M			;Move FAC1 to M
   12884/    3E97 : CD C1 31                CALL    R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   12885/    3E9A : C1                      POP     B
   12886/    3E9B : C3 66 3E                JMP     L_INT_EXP_5
   12887/    3E9E :                     
   12888/    3E9E :                     L_INT_EXP_7:
   12889/    3E9E : F1                      POP     PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 217 - 9/5/2025 20:20:35


   12890/    3E9F : C1                      POP     B
   12891/    3EA0 : F0                      RP     
   12892/    3EA1 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   12893/    3EA4 : FE 02                   CPI     02H
   12894/    3EA6 : C2 B1 3E                JNZ     +
   12895/    3EA9 : C5                      PUSH    B
   12896/    3EAA : CD 43 35                CALL    R_CONV_SINT_HL_SNGL      	;Convert signed integer HL to single precision FAC1
   12897/    3EAD : CD C2 35                CALL    L_CONDS
   12898/    3EB0 : C1                      POP     B
   12899/    3EB1 : 3A 18 FC            +	LDA     DFACLO_R					;FAC1
   12900/    3EB4 : B7                      ORA     A
   12901/    3EB5 : C2 C3 3E                JNZ     L_INT_EXP_8
   12902/    3EB8 : 2A 90 FB                LHLD    TEMP8_R
   12903/    3EBB : B4                      ORA     H
   12904/    3EBC : F0                      RP     
   12905/    3EBD : 7D                      MOV     A,L
   12906/    3EBE : 0F                      RRC
   12907/    3EBF : A0                      ANA     B
   12908/    3EC0 : C3 55 04                JMP     R_GEN_OV_ERROR				;Generate OV error
   12909/    3EC3 :                     
   12910/    3EC3 :                     L_INT_EXP_8:
   12911/    3EC3 : CD B5 31                CALL    R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   12912/    3EC6 : 21 86 32                LXI     H,R_DBL_ONE					;Code Based. 1.0
   12913/    3EC9 : CD C4 31                CALL    R_FAC1_EQ_FP				;Move floating point number M to FAC1
   12914/    3ECC : C3 C7 2D                JMP     R_DBL_DIV				    ;Double precision divide (FAC1=FAC1/FAC2)
   12915/    3ECF :                     
   12916/    3ECF :                     L_INT_EXP_9:
   12917/    3ECF : C5                      PUSH    B
   12918/    3ED0 : D5                      PUSH    D
   12919/    3ED1 : CD 25 37                CALL    R_SINT_MULT				    ;Signed integer muliply (FAC1=HL*DE)
   12920/    3ED4 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   12921/    3ED7 : FE 02                   CPI     02H
   12922/    3ED9 : D1                      POP     D
   12923/    3EDA : C1                      POP     B
   12924/    3EDB : C9                      RET
   12925/    3EDC :                     
   12926/    3EDC :                     L_CMP_INT_FAC1:
   12927/    3EDC : CD C1 31                CALL    R_FAC1_EQ_FAC2				;Move FAC2 to FAC1
   12928/    3EDF : CD 2E 32                CALL    R_PUSH_FAC2				    ;Push FAC2 on stack
   12929/    3EE2 : CD 54 36                CALL    R_INT_FUN				    ;INT function
   12930/    3EE5 : CD 45 32                CALL    R_POP_FAC2				    ;Pop FAC2 from stack
   12931/    3EE8 : CD D2 34                CALL    L_CMP_DBL_FAC1_2			;Double precision compare FAC1 with FAC2
   12932/    3EEB : 37                      STC									;preset carry return
   12933/    3EEC : C0                      RNZ
   12934/    3EED : C3 DE 35                JMP     L_CVT_FP_TO_INT
   12935/    3EF0 :                     ;
   12936/    3EF0 :                     ; check stack space
   12937/    3EF0 :                     ; Copy data from BC to HL down until BC == DE
   12938/    3EF0 :                     ;
   12939/    3EF0 :                     L_CPY_BC_TO_HL_CHK:
   12940/    3EF0 : CD 08 3F                CALL    R_GETSTK2					;Test HL against stack space for collision
   12941/    3EF3 :                     L_BLTUC:
   12942/    3EF3 :                     L_CPY_BC_TO_HL:
   12943/    3EF3 : C5                      PUSH    B							;swap BC and HL
   12944/    3EF4 : E3                      XTHL
   12945/    3EF5 : C1                      POP     B
   12946/    3EF6 : (MACRO)             -	COMPAR								;HL - DE
   12947/    3EF7 : 7E                      MOV     A,M							;get char from M
   12948/    3EF8 : 02                      STAX    B							;store at BC ptr
   12949/    3EF9 : C8                      RZ									;retif DE == HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 218 - 9/5/2025 20:20:35


   12950/    3EFA : 0B                      DCX     B
   12951/    3EFB : 2B                      DCX     H
   12952/    3EFC : C3 F6 3E                JMP     -
   12953/    3EFF :                     ;
   12954/    3EFF :                     ; Test for C 2-byte units free in stack space
   12955/    3EFF :                     ;
   12956/    3EFF :                     R_GETSTK:
   12957/    3EFF : E5                      PUSH    H							;save HL
   12958/    3F00 : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer
   12959/    3F03 : 06 00                   MVI     B,00H						;zero extend C to BC
   12960/    3F05 : 09                      DAD     B							;add units twice to get bytes
   12961/    3F06 : 09                      DAD     B
   12962/    3F07 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH. HL already pushed
   12963/    3F08 :                     ; 
   12964/    3F08 :                     ; Test HL against stack space for collision
   12965/    3F08 :                     ; 
   12966/    3F08 :                     R_GETSTK2:
   12967/    3F08 : E5                      PUSH    H
   12968/    3F09 : 3E 88                   MVI     A,88H						;subtract HL from 0FF88H (-78H), result in HL
   12969/    3F0B : 95                      SUB     L
   12970/    3F0C : 6F                      MOV     L,A
   12971/    3F0D : 3E FF                   MVI     A,0FFH
   12972/    3F0F : 9C                      SBB     H
   12973/    3F10 : 67                      MOV     H,A
   12974/    3F11 : DA 17 3F                JC      L_OUTOFMEMORY				;brif HL > 0FF88H
   12975/    3F14 : 39                      DAD     SP							;add delta to SP, result in carry
   12976/    3F15 : E1                      POP     H							;restore HL
   12977/    3F16 : D8                      RC
   12978/    3F17 :                     L_OUTOFMEMORY:
   12979/    3F17 : CD F0 05                CALL    R_UPDATE_LINE_ADDR       	;Update line addresses for current BASIC program
   12980/    3F1A : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer
   12981/    3F1D : 2B                      DCX     H
   12982/    3F1E : 2B                      DCX     H
   12983/    3F1F : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
   12984/    3F22 : 11 07 00                LXI     D,0007H						;"OUT OF MEMORY"
   12985/    3F25 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 7
   12986/    3F28 :                     ;
   12987/    3F28 :                     ; Initialize BASIC Variables for new execution
   12988/    3F28 :                     ;
   12989/    3F28 :                     R_INIT_BASIC_VARS:						;3F28H
   12990/    3F28 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
   12991/    3F2B : 2B                      DCX     H
   12992/    3F2C :                     R_INIT_BASIC_VARS_2:
   12993/    3F2C : 22 99 FB                SHLD    LSTVAR_R					;Address of last variable assigned
   12994/    3F2F :                     R_INIT_BASIC_VARS_3:
   12995/    3F2F : CD 09 40                CALL    R_CLEAR_COM_INT_DEF         ;Clear all COM), TIME), and KEY interrupt definitions
   12996/    3F32 :                     ;
   12997/    3F32 :                     ; initialize DEFINT table
   12998/    3F32 :                     ;
   12999/    3F32 : 06 1A                   MVI     B,1AH					    ;26 letters
   13000/    3F34 : 21 BA FB                LXI     H,DEFTBL_R				   	;DEF definition table
   13001/    3F37 : 36 08               -	MVI     M,08H						;default to double precision
   13002/    3F39 : 23                      INX     H
   13003/    3F3A : 05                      DCR     B
   13004/    3F3B : C2 37 3F                JNZ     -
   13005/    3F3E : CD 82 31                CALL    R_INIT_TEMP3				;Initialize FP_TEMP3 for new program
   13006/    3F41 : AF                      XRA     A
   13007/    3F42 : 32 A7 FB                STA     PRGRUN_R					;BASIC Program Running Flag
   13008/    3F45 : 6F                      MOV     L,A
   13009/    3F46 : 67                      MOV     H,A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 219 - 9/5/2025 20:20:35


   13010/    3F47 : 22 A5 FB                SHLD    ONERR_R						;Address of ON ERROR routine
   13011/    3F4A : 22 AC FB                SHLD    OLDTXT_R					;Address where program stopped on last break), END), or STOP
   13012/    3F4D : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer.  Also end of Strings Buffer Area.
   13013/    3F50 : 22 8C FB                SHLD    FRETOP_R					;Pointer to current location in BASIC string buffer
   13014/    3F53 : CD 7F 40                CALL    R_RESTORE_STMT				;RESTORE statement
   13015/    3F56 : 2A B2 FB                LHLD    VARTAB_R				    ;Start of variable data pointer
   13016/    3F59 : 22 B4 FB                SHLD    ARYTAB_R				    ;ptr to Start of array table
   13017/    3F5C : 22 B6 FB                SHLD    STRGEND_R				    ;Unused memory pointer
   13018/    3F5F : CD 22 4E                CALL    R_CLSALL					;Close Files
   13019/    3F62 : 3A A7 FC                LDA     OPNFIL_R
   13020/    3F65 : E6 01                   ANI     01H							;00000001
   13021/    3F67 : C2 6D 3F                JNZ     L_INIT_BASIC				;brif bit 0 set: Initialize BASIC for new execution
   13022/    3F6A : 32 A7 FC                STA     OPNFIL_R					;clear OPNFIL_R
   13023/    3F6D :                     ; 
   13024/    3F6D :                     ; Initialize BASIC for new execution
   13025/    3F6D :                     ; 
   13026/    3F6D :                     L_INIT_BASIC:
   13027/    3F6D : C1                      POP     B							;Code address
   13028/    3F6E : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer
   13029/    3F71 : 2B                      DCX     H							;leave 2 bytes
   13030/    3F72 : 2B                      DCX     H
   13031/    3F73 : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
   13032/    3F76 : 23                      INX     H							;back to [STRBUF_R]
   13033/    3F77 : 23                      INX     H
   13034/    3F78 :                     L_INIT_BASIC_0:						 	;BC contains a code address
   13035/    3F78 : F9                      SPHL								;set stack pointer
   13036/    3F79 : 21 6B FB                LXI     H,TEMPST_R
   13037/    3F7C : 22 69 FB                SHLD    TEMPPT_R					;initialize String Stack ptr
   13038/    3F7F : CD 92 4B                CALL    R_SET_OUT_DEV_LCD			;Reinitialize output back to LCD
   13039/    3F82 : CD 39 0C                CALL    L_FINPRT
   13040/    3F85 :                     ;clear all these variables
   13041/    3F85 : AF                      XRA     A
   13042/    3F86 : 67                      MOV     H,A							;set A & HL to 0
   13043/    3F87 : 6F                      MOV     L,A
   13044/    3F88 : 22 D6 FB                SHLD    UNUSED6_R					;only reference to this location
   13045/    3F8B : 32 E1 FB                STA     UNUSED2_R					;only reference to this location
   13046/    3F8E : 22 DB FB                SHLD    UNUSED3_R					;only reference to this location
   13047/    3F91 : 22 E4 FB                SHLD    UNUSED1_R					;only reference to this location
   13048/    3F94 : 22 D4 FB                SHLD    0FBD4H
   13049/    3F97 : 32 96 FB                STA     SUBFLG_R					;clear DON'T RECOGNIZE SUBSCRIPTED VARIABLES flag
   13050/    3F9A : E5                      PUSH    H							;push 0
   13051/    3F9B : C5                      PUSH    B							;return address to stack
   13052/    3F9C :                     L_INIT_BASIC_1:
   13053/    3F9C : 2A 99 FB                LHLD    LSTVAR_R					;load Address of last variable assigned
   13054/    3F9F : C9                      RET
   13055/    3FA0 :                     ;
   13056/    3FA0 :                     ; TIME$ ON statement
   13057/    3FA0 :                     ; Actually Interrupt ON processing
   13058/    3FA0 :                     ;
   13059/    3FA0 :                     ; IN:
   13060/    3FA0 :                     ;	HL	System Interrupt Table entry to update
   13061/    3FA0 :                     ;
   13062/    3FA0 :                     R_INT_ON_STMT:							;3FA0H
   13063/    3FA0 : F3                      DI 
   13064/    3FA1 : 7E                      MOV     A,M
   13065/    3FA2 : E6 04                   ANI     04H							;00000100 isolate bit 2
   13066/    3FA4 : F6 01                   ORI     01H							;00000001 set bit 0
   13067/    3FA6 : BE                      CMP     M							;compare
   13068/    3FA7 : 77                      MOV     M,A							;update
   13069/    3FA8 : CA B0 3F                JZ      +							;brif same; no change
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 220 - 9/5/2025 20:20:35


   13070/    3FAB : E6 04                   ANI     04H							;00000100
   13071/    3FAD : C2 E8 3F                JNZ     R_INC_PNDINT				;Increment the pending interrupt count if bit 2 set
   13072/    3FB0 : FB                  +	EI     
   13073/    3FB1 : C9                      RET
   13074/    3FB2 :                     ;
   13075/    3FB2 :                     ; TIME$ OFF statement
   13076/    3FB2 :                     ; Actually Interrupt OFF processing
   13077/    3FB2 :                     ;
   13078/    3FB2 :                     ; IN:
   13079/    3FB2 :                     ;	HL	System Interrupt Table entry to update
   13080/    3FB2 :                     ;
   13081/    3FB2 :                     R_TIME_OFF_STMT:						;3FB2H
   13082/    3FB2 : F3                      DI 
   13083/    3FB3 : 7E                      MOV     A,M							;get current value
   13084/    3FB4 : 36 00                   MVI     M,00H						;clear
   13085/    3FB6 : C3 C0 3F                JMP     L_INT_STOP_STMT_1
   13086/    3FB9 :                     ;
   13087/    3FB9 :                     ; TIME$ STOP statement
   13088/    3FB9 :                     ; Actually Interrupt STOP processing
   13089/    3FB9 :                     ;
   13090/    3FB9 :                     ; IN:
   13091/    3FB9 :                     ;	HL	System Interrupt Table entry to update
   13092/    3FB9 :                     ;
   13093/    3FB9 :                     R_INT_STOP_STMT:						;3FB9H
   13094/    3FB9 : F3                      DI 
   13095/    3FBA : 7E                      MOV     A,M
   13096/    3FBB : F5                      PUSH    PSW
   13097/    3FBC : F6 02                   ORI     02H							;00000010
   13098/    3FBE : 77                      MOV     M,A							;update table
   13099/    3FBF : F1                      POP     PSW
   13100/    3FC0 :                     L_INT_STOP_STMT_1:
   13101/    3FC0 : EE 05                   XRI     05H							;Validate the interrupt should be counted
   13102/    3FC2 : CA FC 3F                JZ      R_DEC_PNDINT
   13103/    3FC5 : FB                      EI     
   13104/    3FC6 : C9                      RET
   13105/    3FC7 :                     	
   13106/    3FC7 :                     ;
   13107/    3FC7 :                     ;
   13108/    3FC7 :                     ; IN:
   13109/    3FC7 :                     ;	HL	System Interrupt Table entry to update
   13110/    3FC7 :                     ;
   13111/    3FC7 :                     L_UPD_INTR_TBL:
   13112/    3FC7 : F3                      DI 
   13113/    3FC8 : 7E                      MOV     A,M
   13114/    3FC9 : E6 05                   ANI     05H							;00000101B isolate bits 0,2
   13115/    3FCB : BE                      CMP     M
   13116/    3FCC : 77                      MOV     M,A							;update table
   13117/    3FCD : C2 E1 3F                JNZ     L_TRIG_INTR_1
   13118/    3FD0 : FB                      EI     
   13119/    3FD1 : C9                      RET
   13120/    3FD2 :                     ;
   13121/    3FD2 :                     ; Trigger interrupt.
   13122/    3FD2 :                     ;
   13123/    3FD2 :                     ; IN:
   13124/    3FD2 :                     ;	HL points to interrupt table
   13125/    3FD2 :                     ;
   13126/    3FD2 :                     R_TRIG_INTR:							;3FD2H
   13127/    3FD2 : F3                      DI 
   13128/    3FD3 : 7E                      MOV     A,M
   13129/    3FD4 : E6 01                   ANI     01H							;isolate bit 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 221 - 9/5/2025 20:20:35


   13130/    3FD6 : CA E6 3F                JZ      +							;brif bit 0 clear
   13131/    3FD9 : 7E                      MOV     A,M
   13132/    3FDA : F6 04                   ORI     04H							;set bit 2 in A
   13133/    3FDC : BE                      CMP     M
   13134/    3FDD : CA E6 3F                JZ		+							;brif bit 2 was set
   13135/    3FE0 : 77                      MOV     M,A							;set bit 2 in M
   13136/    3FE1 :                     L_TRIG_INTR_1:
   13137/    3FE1 :                     ;	Validate the interrupt should be counted
   13138/    3FE1 : EE 05                   XRI     05H							;00000101B. Z set if A == 05H
   13139/    3FE3 : CA E8 3F                JZ      R_INC_PNDINT				;Increment the pending interrupt count
   13140/    3FE6 : FB                  +	EI
   13141/    3FE7 : C9                      RET
   13142/    3FE8 :                     ;
   13143/    3FE8 :                     ; Increment the pending interrupt count
   13144/    3FE8 :                     ;
   13145/    3FE8 :                     ; TODO If HL can be changed => LXI H,PNDINT_R INR M
   13146/    3FE8 :                     ;
   13147/    3FE8 :                     R_INC_PNDINT:
   13148/    3FE8 : 3A 54 F6                LDA     PNDINT_R
   13149/    3FEB : 3C                      INR     A
   13150/    3FEC : 32 54 F6                STA     PNDINT_R
   13151/    3FEF : FB                      EI     
   13152/    3FF0 : C9                      RET
   13153/    3FF1 :                     ;
   13154/    3FF1 :                     ; Clear interrupt.  HL points to interrupt table
   13155/    3FF1 :                     ;
   13156/    3FF1 :                     R_CLEAR_INTR:							;3FF1H
   13157/    3FF1 : F3                      DI 
   13158/    3FF2 : 7E                      MOV     A,M
   13159/    3FF3 : E6 03                   ANI     03H							;00000011B
   13160/    3FF5 : BE                      CMP     M
   13161/    3FF6 : 77                      MOV     M,A							;update
   13162/    3FF7 : C2 FC 3F                JNZ     R_DEC_PNDINT
   13163/    3FFA :                     L_ENA_INTR:
   13164/    3FFA : FB                      EI     
   13165/    3FFB : C9                      RET
   13166/    3FFC :                     
   13167/    3FFC :                     R_DEC_PNDINT:
   13168/    3FFC : 3A 54 F6                LDA     PNDINT_R
   13169/    3FFF : D6 01                   SUI     01H							;need carry so no decrement
   13170/    4001 : DA FA 3F                JC      L_ENA_INTR					;brif A < 1: EI & RET
   13171/    4004 : 32 54 F6                STA     PNDINT_R
   13172/    4007 : FB                      EI     
   13173/    4008 : C9                      RET
   13174/    4009 :                     ;
   13175/    4009 :                     ; Clear all COM), TIME), and KEY interrupt definitions
   13176/    4009 :                     ; SYSINT_R has 10 entries, each 3 bytes
   13177/    4009 :                     ;
   13178/    4009 :                     R_CLEAR_COM_INT_DEF:				  	;4009H
   13179/    4009 : 21 44 F9                LXI     H,SYSINT_R				  	;Basic Interrupt Table
   13180/    400C : 06 0A                   MVI     B,10						;length
   13181/    400E : AF                      XRA     A
   13182/    400F : 77                  -	MOV     M,A							;each entry is 3 bytes
   13183/    4010 : 23                      INX     H
   13184/    4011 : 77                      MOV     M,A
   13185/    4012 : 23                      INX     H
   13186/    4013 : 77                      MOV     M,A
   13187/    4014 : 23                      INX     H
   13188/    4015 : 05                      DCR     B
   13189/    4016 : C2 0F 40                JNZ     -							;loop
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 222 - 9/5/2025 20:20:35


   13190/    4019 : 21 30 F6                LXI     H,FKEYSTAT_R				;Function key status table (1 = on)
   13191/    401C : 06 08                   MVI     B,08H						;length. A == 0
   13192/    401E : 77                  -	MOV     M,A							;clear
   13193/    401F : 23                      INX     H
   13194/    4020 : 05                      DCR     B
   13195/    4021 : C2 1E 40                JNZ     -							;loop
   13196/    4024 : 32 54 F6                STA     PNDINT_R					;clear PNDINT_R
   13197/    4027 : C9                      RET
   13198/    4028 :                     
   13199/    4028 :                     ; 
   13200/    4028 :                     ; Process ON KEY/TIME$/COM/MDM interrupts from BASIC
   13201/    4028 :                     ; May not return
   13202/    4028 :                     ; 
   13203/    4028 :                     L_PROCESS_ON_INT:						;Entry with B set to 2
   13204/    4028 : 06 02                   MVI     B,02H						;Mark entry from ON COM
   13205/    402A : (MACRO)             	SKIP_2BYTES_INST_DE
   13206/    402B :                     L_PROCESS_ON_INT_1:						;Entry with B set to 1
   13207/    402B : 06 01                   MVI     B,01H						;Mark entry from ON KEY/TIME$
   13208/    402D : 3A A7 FB                LDA     PRGRUN_R					;BASIC Program Running Flag
   13209/    4030 : B7                      ORA     A
   13210/    4031 : C0                      RNZ									;retif PRGRUN_R != 0
   13211/    4032 : E5                      PUSH    H							;save HL for a long time
   13212/    4033 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
   13213/    4036 : 7C                      MOV     A,H							;test for 0FFFFH
   13214/    4037 : A5                      ANA     L
   13215/    4038 : 3C                      INR     A
   13216/    4039 : CA 52 40                JZ      L_PROCESS_ON_INT_3			;brif CURLIN_R == 0FFFFH
   13217/    403C : 05                      DCR     B							;Test for entry from ON COM
   13218/    403D : C2 75 40                JNZ     L_ON_COM_INTR				;brif TRUE. HL on stack
   13219/    4040 : 21 47 F9                LXI     H,SYSINT_R+3				;On Time flag
   13220/    4043 : 06 09                   MVI     B,09H						;Loop for 9 ON-TIME, ON-KEY, etc. interrupts
   13221/    4045 : 7E                  -	MOV     A,M
   13222/    4046 : FE 05                   CPI     05H
   13223/    4048 : CA 54 40                JZ      L_ON_XXX_INTR				;brif Interrupt triggered by this event F1, F2, TIME$, etc.
   13224/    404B :                     										;	HL on stack
   13225/    404B :                     L_PROCESS_ON_INT_2:
   13226/    404B : 23                      INX     H							;Skip ON-XXX flag
   13227/    404C : 23                      INX     H							;Skip ON-XXX line number
   13228/    404D : 23                      INX     H
   13229/    404E : 05                      DCR     B							;Decrement number of ON-XXX events checked
   13230/    404F : C2 45 40                JNZ     -							;brif != 0
   13231/    4052 :                     ;
   13232/    4052 :                     ; Done checking interrupt table
   13233/    4052 :                     ;
   13234/    4052 :                     L_PROCESS_ON_INT_3:
   13235/    4052 : E1                      POP     H
   13236/    4053 : C9                      RET
   13237/    4054 :                     
   13238/    4054 :                     ; 
   13239/    4054 :                     ; Process a triggered ON-XXX interrupt (F1, F2, ..., Time$)
   13240/    4054 :                     ; HL on stack
   13241/    4054 :                     ; 
   13242/    4054 :                     L_ON_XXX_INTR:
   13243/    4054 : C5                      PUSH    B							;Save the ON-XXX index number
   13244/    4055 : 23                      INX     H
   13245/    4056 : (MACRO)             	GETDEFROMMNOINC
   13246/    4059 : 2B                      DCX     H							;Restore HL back to ON-XXX flag
   13247/    405A : 2B                      DCX     H
   13248/    405B : 7A                      MOV     A,D							;test if the ON-XXX line == 0
   13249/    405C : B3                      ORA     E
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 223 - 9/5/2025 20:20:35


   13250/    405D : C1                      POP     B							;restore the ON-XXX index number
   13251/    405E : CA 4B 40                JZ      L_PROCESS_ON_INT_2			;brif ON-XXX line == 0: no action
   13252/    4061 : D5                      PUSH    D							;save ON-XXX line
   13253/    4062 : E5                      PUSH    H							;save HL
   13254/    4063 : CD F1 3F                CALL    R_CLEAR_INTR				;Clear interrupt.  HL points to interrupt table
   13255/    4066 : CD B9 3F                CALL    R_INT_STOP_STMT				;TIME$ STOP statement
   13256/    4069 : 0E 03                   MVI     C,03H
   13257/    406B : CD FF 3E                CALL    R_GETSTK					;Test for 3 bytes free in stack space
   13258/    406E : C1                      POP     B							;discard saved HL
   13259/    406F : D1                      POP     D							;restore ON-XXX line
   13260/    4070 : E1                      POP     H							;restore earlier HL
   13261/    4071 : F1                      POP     PSW							;discard return address
   13262/    4072 : C3 52 09                JMP     L_GOSUB_ON_INTR				;GOSUB to BASIC line due to ON KEY/TIME$/MDM/COM
   13263/    4075 :                     	
   13264/    4075 :                     ; 
   13265/    4075 :                     ; Process ON COM interrupt
   13266/    4075 :                     ; HL on stack
   13267/    4075 :                     ; 
   13268/    4075 :                     L_ON_COM_INTR:
   13269/    4075 : 21 44 F9                LXI     H,SYSINT_R				    ;On Com flag
   13270/    4078 : 7E                      MOV     A,M							;Get COM flag
   13271/    4079 : 3D                      DCR     A
   13272/    407A : CA 54 40                JZ      L_ON_XXX_INTR				;If 1, jump to process interrupt
   13273/    407D : E1                      POP     H
   13274/    407E : C9                      RET
   13275/    407F :                     ;
   13276/    407F :                     ; RESTORE statement
   13277/    407F :                     ;
   13278/    407F :                     R_RESTORE_STMT:							;407FH
   13279/    407F : EB                      XCHG
   13280/    4080 : 2A 7C F6                LHLD    TXTTAB_R					;Start of BASIC program pointer
   13281/    4083 : CA 94 40                JZ      +
   13282/    4086 : EB                      XCHG
   13283/    4087 : CD EB 08                CALL    L_LINGET					;Convert line number at M to binary in DE
   13284/    408A : E5                      PUSH    H
   13285/    408B : CD 28 06                CALL    L_FNDLIN					;Find line number in DE
   13286/    408E : 60                      MOV     H,B
   13287/    408F : 69                      MOV     L,C
   13288/    4090 : D1                      POP     D
   13289/    4091 : D2 4D 09                JNC     R_GEN_UL_ERROR				;Generate UL error
   13290/    4094 : 2B                  +	DCX     H
   13291/    4095 :                     L_RESTORE_1:
   13292/    4095 : 22 B8 FB                SHLD    DATAPTR_R					;Address where DATA search will begin next
   13293/    4098 : EB                      XCHG
   13294/    4099 : C9                      RET
   13295/    409A :                     ;
   13296/    409A :                     ; STOP statement
   13297/    409A :                     ;
   13298/    409A :                     R_STOP_STMT:							;409AH
   13299/    409A : C0                      RNZ 								;MAKE SURE "STOP" STATEMENTS HAVE A TERMINATOR   
   13300/    409B : 3C                      INR     A							;this sets A == 1
   13301/    409C : C3 A9 40                JMP     L_CONSTP
   13302/    409F :                     ;
   13303/    409F :                     ; END statement
   13304/    409F :                     ; A == [HL]
   13305/    409F :                     ; L_NEWSTT ADDRESS on the stack
   13306/    409F :                     ;
   13307/    409F :                     R_END_STMT:								;409FH
   13308/    409F : C0                      RNZ									;MAKE SURE "END" STATEMENTS HAVE A TERMINATOR
   13309/    40A0 : AF                      XRA     A							;TODO A probably already 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 224 - 9/5/2025 20:20:35


   13310/    40A1 : 32 A7 FB                STA     PRGRUN_R					;clear BASIC Program Running Flag
   13311/    40A4 : F5                      PUSH    PSW
   13312/    40A5 : CC 22 4E                CZ      R_CLSALL					;A always 0. Close Files
   13313/    40A8 : F1                      POP     PSW							;TODO cheaper to clear A again
   13314/    40A9 :                     L_CONSTP:								;A==0 if END. A==1 if STOP
   13315/    40A9 : 22 9B FB                SHLD    SAVTXT_R					;Most recent or currenly running line pointer (SAVTXT: SAVE FOR "CONTINUE")
   13316/    40AC : 21 6B FB                LXI     H,TEMPST_R					;(TEMPST)
   13317/    40AF : 22 69 FB                SHLD    TEMPPT_R					;reset String Stack ptr (TEMPPT)
   13318/    40B2 : (MACRO)             	SKIP_2BYTES_INST_HL					;skip ORI 0FFH instruction. A==0 or 1
   13319/    40B3 :                     L_STPEND:
   13320/    40B3 : F6 FF                   ORI     0FFH						;SET NON-ZERO TO FORCE PRINTING OF BREAK MESSAGE
   13321/    40B5 : C1                      POP     B							;POP OFF L_NEWSTT ADDRESS
   13322/    40B6 :                     L_ENDCON:
   13323/    40B6 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
   13324/    40B9 : E5                      PUSH    H							;SAVE LINE TO PRINT
   13325/    40BA : F5                      PUSH    PSW							;SAVE THE MESSAGE FLAG ZERO MEANS DON'T PRINT "BREAK"
   13326/    40BB : 7D                      MOV     A,L							;See IF IT WAS DIRECT 
   13327/    40BC : A4                      ANA     H
   13328/    40BD : 3C                      INR     A
   13329/    40BE : CA CA 40                JZ      L_DIRIS						;IF NOT SET UP FOR CONTINUE
   13330/    40C1 : 22 AA FB                SHLD    OLDLIN_R					;Line where break), END), or STOP occurred. ;SAVE OLD LINE #
   13331/    40C4 : 2A 9B FB                LHLD    SAVTXT_R					;Most recent or currenly running line pointer ;GET POINTER TO START OF STATEMENT
   13332/    40C7 : 22 AC FB                SHLD    OLDTXT_R					;Address where program stopped on last break), END), or STOP ;SAVE IT
   13333/    40CA :                     L_DIRIS:
   13334/    40CA : CD 92 4B                CALL    R_SET_OUT_DEV_LCD			;Reinitialize output back to LCD FINLPT?
   13335/    40CD : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
   13336/    40D0 :                     										;	CRDONZ: PRINT CR IF TTYPOS .NE. 0
   13337/    40D0 : F1                      POP     PSW							;GET BACK ^C FLAG
   13338/    40D1 :                      
   13339/    40D1 :                     ;	LXI	H,BRKTXT		;"BREAK"
   13340/    40D1 :                     ;	JNZ	ERRFIN			;CALL STROUT AND FALL INTO READY
   13341/    40D1 :                     ;	JMP	STPRDY			;POP OFF LINE NUMBER & FALL INTO READY
   13342/    40D1 :                     
   13343/    40D1 : 21 FB 03            	LXI     H,R_BREAK_MSG				;Code Based. 
   13344/    40D4 : C2 F6 04                JNZ     L_ERRFIN
   13345/    40D7 : C3 01 05                JMP     R_POP_GO_BASIC_RDY       	;Pop stack and vector to BASIC ready
   13346/    40DA :                     ;
   13347/    40DA :                     ; CONT sttement
   13348/    40DA :                     ;
   13349/    40DA :                     R_CONT_STMT:							;40DAH
   13350/    40DA : 2A AC FB                LHLD    OLDTXT_R					;Address where program stopped on last break), END), or STOP
   13351/    40DD :                     
   13352/    40DD :                     ;	MOV	A,H								;"STOP","END",TYPING CRLF
   13353/    40DD :                     ;	ORA	L								;TO "INPUT" AND ^C SETUP OLDTXT
   13354/    40DD :                     
   13355/    40DD : 7C                      MOV     A,H
   13356/    40DE : B5                      ORA     L
   13357/    40DF : 11 11 00                LXI     D,0011H						;"CAN'T CONTINUE"
   13358/    40E2 : CA 5D 04                JZ      R_GEN_ERR_IN_E				;Generate error 11H
   13359/    40E5 : EB                      XCHG								;save HL in DE
   13360/    40E6 : 2A AA FB                LHLD    OLDLIN_R					;Line where break), END), or STOP occurred
   13361/    40E9 : 22 7A F6                SHLD    CURLIN_R					;SET UP OLD LINE # AS CURRENT LINE #
   13362/    40EC : EB                      XCHG								;restore HL
   13363/    40ED : C9                      RET
   13364/    40EE :                     ;
   13365/    40EE :                     ; TODO Unreachable
   13366/    40EE :                     ;
   13367/    40EE : C3 DB 08                JMP     R_GEN_FC_ERROR				;Generate FC error
   13368/    40F1 :                     ;
   13369/    40F1 :                     ; Check if M is alpha character
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 225 - 9/5/2025 20:20:35


   13370/    40F1 :                     ;
   13371/    40F1 :                     R_ISLET_M:								     	;40F1H
   13372/    40F1 : 7E                      MOV     A,M
   13373/    40F2 :                     ;
   13374/    40F2 :                     ; Check if A is alpha character
   13375/    40F2 :                     ;
   13376/    40F2 :                     ; OUT:
   13377/    40F2 :                     ;	carry	set if not alpha
   13378/    40F2 :                     ;
   13379/    40F2 :                     R_ISLET:
   13380/    40F2 : FE 41                   CPI     'A'							;41H
   13381/    40F4 : D8                      RC
   13382/    40F5 : FE 5B                   CPI     'Z'+1						;5BH
   13383/    40F7 : 3F                      CMC
   13384/    40F8 : C9                      RET
   13385/    40F9 :                     ;
   13386/    40F9 :                     ; CLEAR statement
   13387/    40F9 :                     ;
   13388/    40F9 :                     ; CLEAR [num1][,num2]
   13389/    40F9 :                     ; num1 is string space
   13390/    40F9 :                     ; num2 is HIMEM start
   13391/    40F9 :                     ;
   13392/    40F9 :                     R_CLEAR_STMT:							;40F9H
   13393/    40F9 : E5                      PUSH    H							;save txt ptr
   13394/    40FA : CD 62 22                CALL    L_CLR_PASTE_BUF
   13395/    40FD : E1                      POP     H							;restore txt ptr
   13396/    40FE : 2B                      DCX     H							;backup
   13397/    40FF : (MACRO)                 CHRGET								;Get next non-white char from M
   13398/    4100 : CA 2C 3F                JZ      R_INIT_BASIC_VARS_2			;brif done with command
   13399/    4103 : (MACRO)             	RST38H	00H
   13400/    4105 : CD D7 08                CALL    L_EVAL_POS_EXPR				;Eval positive expression at M-1: string space. result in DE
   13401/    4108 : 2B                      DCX     H
   13402/    4109 : (MACRO)                 CHRGET								;Get next non-white char from M
   13403/    410A : E5                      PUSH    H							;save txt ptr
   13404/    410B : 2A F4 F5                LHLD    HIMEM_R						;HIMEM
   13405/    410E : 44                      MOV     B,H							;BC = HIMEM
   13406/    410F : 4D                      MOV     C,L
   13407/    4110 : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   13408/    4113 : CA 40 41                JZ      L_CLEAR_2					;brif done with command
   13409/    4116 : E1                      POP     H							;restore txt ptr
   13410/    4117 : (MACRO)             	SYNCHK	','							;','					;2CH
   13411/    4119 : D5                      PUSH    D							;save
   13412/    411A : CD 97 12                CALL    R_EVAL_EXPR_2				;Evaluate expression at M_2
   13413/    411D : 2B                      DCX     H							;backup
   13414/    411E : (MACRO)                 CHRGET								;Get next non-white char from M
   13415/    411F : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error if not done with command
   13416/    4122 : E3                      XTHL
   13417/    4123 : EB                      XCHG
   13418/    4124 : 7C                      MOV     A,H
   13419/    4125 : A7                      ANA     A
   13420/    4126 : F2 DB 08                JP      R_GEN_FC_ERROR				;Generate FC error if new HIMEM <8000H
   13421/    4129 : D5                      PUSH    D							;save DE
   13422/    412A : 11 F1 F5                LXI     D,SYSRAM_R+1				;0F5F1H Maximum new HIMEM allowed
   13423/    412D : (MACRO)                 COMPAR								;HL - DE
   13424/    412E : D2 DB 08                JNC     R_GEN_FC_ERROR				;Generate FC error if new HIMEM >= SYSRAM_R+1
   13425/    4131 : D1                      POP     D							;restore DE
   13426/    4132 : E5                      PUSH    H							;save new HIMEM
   13427/    4133 : 01 F5 FE                LXI     B,0FEF5H					;-267
   13428/    4136 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
   13429/    4139 : 09                  -	DAD     B							;subtract 267 from new HIMEM
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 226 - 9/5/2025 20:20:35


   13430/    413A : 3D                      DCR     A							;loop counter
   13431/    413B : F2 39 41                JP		-
   13432/    413E : C1                      POP     B							;BC = new HIMEM
   13433/    413F : 2B                      DCX     H
   13434/    4140 :                     ;
   13435/    4140 :                     ; BC = new HIMEM
   13436/    4140 :                     ; DE = new String Space
   13437/    4140 :                     ; HL = new File buffer area pointer
   13438/    4140 :                     ;
   13439/    4140 :                     L_CLEAR_2:
   13440/    4140 : 7D                      MOV     A,L							;DE=HL-DE
   13441/    4141 : 93                      SUB     E
   13442/    4142 : 5F                      MOV     E,A
   13443/    4143 : 7C                      MOV     A,H
   13444/    4144 : 9A                      SBB     D
   13445/    4145 : 57                      MOV     D,A
   13446/    4146 : DA 17 3F                JC      L_OUTOFMEMORY				;brif HL < DE
   13447/    4149 :                     ; DE is new String Space ptr
   13448/    4149 : E5                      PUSH    H							;save HL
   13449/    414A : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
   13450/    414D : C5                      PUSH    B							;save BC
   13451/    414E : 01 A0 00                LXI     B,00A0H						;160
   13452/    4151 : 09                      DAD     B							;HL += 160
   13453/    4152 : C1                      POP     B							;restore BC
   13454/    4153 : (MACRO)                 COMPAR								;HL - DE
   13455/    4154 : D2 17 3F                JNC     L_OUTOFMEMORY
   13456/    4157 : EB                      XCHG								;new string space ptr to HL
   13457/    4158 : 22 78 F6                SHLD    STRBUF_R					;update BASIC string buffer pointer
   13458/    415B : 60                      MOV     H,B							;HL = BC
   13459/    415C : 69                      MOV     L,C
   13460/    415D : 22 F4 F5                SHLD    HIMEM_R						;update HIMEM
   13461/    4160 : E1                      POP     H							;restore HL
   13462/    4161 : 22 67 FB                SHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   13463/    4164 : E1                      POP     H
   13464/    4165 : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2
   13465/    4168 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
   13466/    416B : CD 2B 7F                CALL    L_UPD_FILEBUFS
   13467/    416E : 2A 99 FB                LHLD    LSTVAR_R					;Address of last variable assigned
   13468/    4171 : C3 04 08                JMP     L_NEWSTT					;Execute BASIC program
   13469/    4174 :                     ;
   13470/    4174 :                     ; NEXT statement
   13471/    4174 :                     ;
   13472/    4174 :                     ; IN:
   13473/    4174 :                     ;	Z		set if end of line found
   13474/    4174 :                     ;
   13475/    4174 :                     R_NEXT_STMT:							;4174H
   13476/    4174 : 11 00 00                LXI     D,0							;preset if no NEXT variable
   13477/    4177 :                     L_NEXT_STMT_1:
   13478/    4177 : C4 90 47                CNZ     R_FIND_VAR_ADDR				;Find address of variable at M
   13479/    417A : 22 99 FB                SHLD    LSTVAR_R					;Address of last variable assigned
   13480/    417D : CD 01 04                CALL    FNDFOR						;Pop return address for NEXT or RETURN
   13481/    4180 : C2 4C 04                JNZ     R_GEN_NF_ERROR				;brif Z not set: Generate NF error
   13482/    4183 : F9                      SPHL								;set SP to virtual stack ptr: remove FOR structure
   13483/    4184 : D5                      PUSH    D							;save variable ptr
   13484/    4185 : 7E                      MOV     A,M
   13485/    4186 : F5                      PUSH    PSW
   13486/    4187 : 23                      INX     H
   13487/    4188 : D5                      PUSH    D
   13488/    4189 : 7E                      MOV     A,M							;get TYPE or STEP sign
   13489/    418A : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 227 - 9/5/2025 20:20:35


   13490/    418B : B7                      ORA     A
   13491/    418C : FA BB 41                JM      L_NEXT_STMT_2				;brif tested A==0FFH
   13492/    418F : 3D                      DCR     A
   13493/    4190 : C2 97 41                JNZ     +							;brif tested A == 0
   13494/    4193 : 01 08 00                LXI     B,08H
   13495/    4196 : 09                      DAD     B
   13496/    4197 : C6 04               +	ADI		04H							;fix type
   13497/    4199 : 32 65 FB                STA     VALTYP_R					;Type of last expression used
   13498/    419C : CD 7E 34                CALL    L_CPY_M_TO_FAC1				;Move VALTYP_R bytes from M to FAC1 with increment
   13499/    419F : EB                      XCHG
   13500/    41A0 : E3                      XTHL
   13501/    41A1 : E5                      PUSH    H
   13502/    41A2 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   13503/    41A3 : D2 F6 41                JNC     L_NEXT_STMT_4				;brif carry clear: DBL type
   13504/    41A6 : CD 47 34                CALL    R_SNGL_BCDE_EQ_M			;Load single precision at M to BCDE
   13505/    41A9 : CD F4 37                CALL    R_SNGL_ADD_BCDE				;Single precision addition (FAC1=FAC1+BCDE)
   13506/    41AC : E1                      POP     H
   13507/    41AD : CD 59 34                CALL    R_SNGL_M_EQ_FAC1			;Move single precision FAC1 to M
   13508/    41B0 : E1                      POP     H
   13509/    41B1 : CD 50 34                CALL    R_SNGL_DECB_EQ_M			;Reverse load single precision at M to DEBC
   13510/    41B4 : E5                      PUSH    H
   13511/    41B5 : CD 98 34                CALL    R_SNGL_CMP_BCDE_FAC1     	;Compare single precision in BCDE with FAC1
   13512/    41B8 : C3 E4 41                JMP     L_NEXT_STMT_3
   13513/    41BB :                     ;
   13514/    41BB :                     ; integer type FOR loop
   13515/    41BB :                     ;
   13516/    41BB :                     L_NEXT_STMT_2:
   13517/    41BB : 01 0C 00                LXI     B,000CH						;add 12 to HL
   13518/    41BE : 09                      DAD     B
   13519/    41BF : 4E                      MOV     C,M							;get BC from M
   13520/    41C0 : 23                      INX     H
   13521/    41C1 : 46                      MOV     B,M
   13522/    41C2 : 23                      INX     H
   13523/    41C3 : E3                      XTHL
   13524/    41C4 : (MACRO)             	GETDEFROMMNOINC						;step value
   13525/    41C7 : E5                      PUSH    H
   13526/    41C8 : 69                      MOV     L,C							
   13527/    41C9 : 60                      MOV     H,B
   13528/    41CA : CD 04 37                CALL    R_SINT_ADD					;Signed integer addition (FAC1=HL+DE)
   13529/    41CD : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   13530/    41D0 : FE 02                   CPI     02H
   13531/    41D2 : C2 55 04                JNZ     R_GEN_OV_ERROR				;brif type != INT Generate OV error
   13532/    41D5 : EB                      XCHG								;result of addition to DE
   13533/    41D6 : E1                      POP     H							;restore FOR loop structure ptr
   13534/    41D7 : 72                      MOV     M,D							;store DE at M: update loop variable
   13535/    41D8 : 2B                      DCX     H
   13536/    41D9 : 73                      MOV     M,E
   13537/    41DA : E1                      POP     H							;restore HL
   13538/    41DB : D5                      PUSH    D							;save DE
   13539/    41DC : (MACRO)             	GETDEFROMM							;get DE from M: upper FOR loop value
   13540/    41E0 : E3                      XTHL								;swap HL with pushed DE
   13541/    41E1 : CD C2 34                CALL    R_SINT_CMP				   	;Compare signed integer in DE with that in HL
   13542/    41E4 :                     L_NEXT_STMT_3:
   13543/    41E4 : E1                      POP     H
   13544/    41E5 : C1                      POP     B
   13545/    41E6 : 90                      SUB     B
   13546/    41E7 : CD 50 34                CALL    R_SNGL_DECB_EQ_M			;Reverse load single precision at M to DEBC
   13547/    41EA : CA 08 42                JZ      L_NEXT_STMT_5				;brif end of FOR loop reached
   13548/    41ED : EB                      XCHG								;FOR loop line number to HL
   13549/    41EE : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 228 - 9/5/2025 20:20:35


   13550/    41F1 : 69                      MOV     L,C
   13551/    41F2 : 60                      MOV     H,B
   13552/    41F3 : C3 00 08                JMP     L_PUSH_FOR						;push _FOR on stack
   13553/    41F6 :                     ;
   13554/    41F6 :                     ; DBL Type
   13555/    41F6 :                     ;
   13556/    41F6 :                     L_NEXT_STMT_4:
   13557/    41F6 : CD 75 2B                CALL    R_DBL_ADD_M					;Double precision addition (FAC1=FAC1+M)
   13558/    41F9 : E1                      POP     H
   13559/    41FA : CD 87 34                CALL    L_CPY_FAC1_TO_M				;copy from FAC1 to M
   13560/    41FD : E1                      POP     H
   13561/    41FE : CD 61 34                CALL    R_LOAD_FAC2_FROM_M       	;Move M to FAC2 using precision at VALTYP_R
   13562/    4201 : D5                      PUSH    D
   13563/    4202 : CD D2 34                CALL    L_CMP_DBL_FAC1_2			;Double precision compare FAC1 with FAC2
   13564/    4205 : C3 E4 41                JMP     L_NEXT_STMT_3
   13565/    4208 :                     ;
   13566/    4208 :                     ; End of FOR loop reached
   13567/    4208 :                     ;
   13568/    4208 :                     L_NEXT_STMT_5:
   13569/    4208 : F9                      SPHL								;remove FOR loop structure from stack
   13570/    4209 : 22 9D FB                SHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
   13571/    420C : EB                      XCHG								;to DE
   13572/    420D : 2A 99 FB                LHLD    LSTVAR_R					;Address of last variable assigned. TODO text ptr
   13573/    4210 : 7E                      MOV     A,M							;get next char
   13574/    4211 : FE 2C                   CPI     ','
   13575/    4213 : C2 04 08                JNZ     L_NEWSTT					;Execute BASIC program
   13576/    4216 : (MACRO)                 CHRGET								;Get next non-white char from M
   13577/    4217 : CD 77 41                CALL    L_NEXT_STMT_1				;process for FOR loop variables. Leave 2 bytes on stack.
   13578/    421A :                     ;
   13579/    421A :                     ; Test if FCBLAST_R == 0
   13580/    421A :                     ;
   13581/    421A :                     ; OUT:
   13582/    421A :                     ;	Z		set if FCBLAST_R == 0
   13583/    421A :                     ;
   13584/    421A :                     L_TST_FCBLAST:
   13585/    421A : E5                      PUSH    H
   13586/    421B : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   13587/    421E : 7C                      MOV     A,H
   13588/    421F : B5                      ORA     L
   13589/    4220 : E1                      POP     H
   13590/    4221 : C9                      RET
   13591/    4222 :                     ;
   13592/    4222 :                     ; Send CRLF to screen or printer
   13593/    4222 :                     ;
   13594/    4222 :                     R_SEND_CRLF:							;4222H
   13595/    4222 : 3E 0D                   MVI     A,0DH
   13596/    4224 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13597/    4225 :                     ;
   13598/    4225 :                     ; Send LF to screen or printer
   13599/    4225 :                     ;
   13600/    4225 :                     ;R_SEND_LF:								;4225H
   13601/    4225 : 3E 0A                   MVI     A,0AH
   13602/    4227 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13603/    4228 : C9                      RET
   13604/    4229 :                     ;
   13605/    4229 :                     ; BEEP statement
   13606/    4229 :                     ;
   13607/    4229 :                     R_BEEP_STMT:							;4229H
   13608/    4229 : 3E 07                   MVI     A,07H
   13609/    422B : (MACRO)                 OUTCHR								;Send character in A to screen/printer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 229 - 9/5/2025 20:20:35


   13610/    422C : C9                      RET
   13611/    422D :                     ;
   13612/    422D :                     ; Home cursor
   13613/    422D :                     ;
   13614/    422D :                     R_HOME_CURSOR:							;422DH
   13615/    422D : 3E 0B                   MVI     A,0BH
   13616/    422F : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13617/    4230 : C9                      RET
   13618/    4231 :                     ;
   13619/    4231 :                     ; Clear Screen
   13620/    4231 :                     ;
   13621/    4231 :                     R_CLS_STMT:								;4231H
   13622/    4231 : 3E 0C                   MVI     A,0CH
   13623/    4233 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13624/    4234 : C9                      RET
   13625/    4235 :                     ;
   13626/    4235 :                     ; Protect line 8.
   13627/    4235 :                     ;
   13628/    4235 :                     R_PROTECT_LABEL:						;4235H
   13629/    4235 : 3E 54                   MVI     A,'T'						;54H
   13630/    4237 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13631/    423A :                     ;
   13632/    423A :                     ; Unprotect line 8.
   13633/    423A :                     ;
   13634/    423A :                     R_UNPROT_LABEL:							;423AH
   13635/    423A : 3E 55                   MVI     A,'U'						;55H
   13636/    423C : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13637/    423F :                     ;
   13638/    423F :                     ; Stop automatic scrolling
   13639/    423F :                     ;
   13640/    423F :                     R_STOP_AUTO_SCROLL:						;423FH
   13641/    423F : 3E 56                   MVI     A,'V'						;56H
   13642/    4241 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13643/    4244 :                     ;
   13644/    4244 :                     ; Resume automatic scrolling
   13645/    4244 :                     ;
   13646/    4244 :                     R_RESUME_AUTO_SCROLL:				    ;4244H
   13647/    4244 : 3E 57                   MVI     A,'W'						;57H
   13648/    4246 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13649/    4249 :                     ;
   13650/    4249 :                     ; Turn the cursor on
   13651/    4249 :                     ;
   13652/    4249 :                     R_TURN_CURSOR_ON:						;4249H
   13653/    4249 : 3E 50                   MVI     A,'P'						;50H
   13654/    424B : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13655/    424E :                     ;
   13656/    424E :                     ; Turn the cursor off
   13657/    424E :                     ;
   13658/    424E :                     R_TURN_CURSOR_OFF:						;424EH
   13659/    424E : 3E 51                   MVI     A,'Q'						;51H
   13660/    4250 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13661/    4253 :                     ;
   13662/    4253 :                     ; Delete current line on screen
   13663/    4253 :                     ;
   13664/    4253 :                     R_DEL_CUR_LINE:							;4253H
   13665/    4253 : 3E 4D                   MVI     A,'M'						;4DH
   13666/    4255 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13667/    4258 :                     ;
   13668/    4258 :                     ; Insert line a current line
   13669/    4258 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 230 - 9/5/2025 20:20:35


   13670/    4258 :                     R_INSERT_LINE:							;4258H
   13671/    4258 : 3E 4C                   MVI     A,'L'						;4CH
   13672/    425A : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13673/    425D :                     ;
   13674/    425D :                     ; Erase from cursor to end of line
   13675/    425D :                     ;
   13676/    425D :                     R_ERASE_TO_EOL:							;425DH
   13677/    425D : 3E 4B                   MVI     A,'K'						;4BH
   13678/    425F : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13679/    4262 :                     ;
   13680/    4262 :                     ; Send ESC X
   13681/    4262 :                     ;
   13682/    4262 :                     R_SEND_ESC_X:							;4262H
   13683/    4262 : 3E 58                   MVI     A,'X'						;58H
   13684/    4264 : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13685/    4267 :                     ;
   13686/    4267 :                     ; Test if A & M are both 0
   13687/    4267 :                     ; if so, return else R_INV_CHAR_ENABLE
   13688/    4267 :                     ;
   13689/    4267 :                     L_COND_INV_CHAR:
   13690/    4267 : B6                      ORA     M
   13691/    4268 : C8                      RZ
   13692/    4269 :                     ;
   13693/    4269 :                     ; Start inverse character mode
   13694/    4269 :                     ;
   13695/    4269 :                     R_INV_CHAR_ENABLE:						;4269H
   13696/    4269 : 3E 70                   MVI     A,'p'						;70H
   13697/    426B : C3 70 42                JMP     R_SEND_ESC_SEQ				;Send escape sequence
   13698/    426E :                     ;
   13699/    426E :                     ; Cancel inverse character mode
   13700/    426E :                     ;
   13701/    426E :                     R_INV_CHAR_DISABLE:						;426EH
   13702/    426E : 3E 71                   MVI     A,'q'						;71H
   13703/    4270 :                     ;
   13704/    4270 :                     ; Send escape sequence
   13705/    4270 :                     ;
   13706/    4270 :                     R_SEND_ESC_SEQ:							;4270H
   13707/    4270 : F5                      PUSH    PSW
   13708/    4271 : 3E 1B                   MVI     A,1BH						;ESC
   13709/    4273 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13710/    4274 : F1                      POP     PSW
   13711/    4275 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13712/    4276 : C9                      RET
   13713/    4277 :                     ;
   13714/    4277 :                     ; Send cursor to lower left of CRT: : max row, col 1
   13715/    4277 :                     ;
   13716/    4277 :                     R_CURSOR_TO_LOW_LEFT:				    ;4277H
   13717/    4277 : 2A 3B F6                LHLD    LINCNT_R					;Console height + Console width
   13718/    427A : 26 01                   MVI     H,01H
   13719/    427C :                     ;
   13720/    427C :                     ; Set the current cursor position
   13721/    427C :                     ;
   13722/    427C :                     R_SET_CURSOR_POS:						;427CH
   13723/    427C : 3E 59                   MVI     A,'Y'						;59H
   13724/    427E : CD 70 42                CALL    R_SEND_ESC_SEQ				;Send escape sequence
   13725/    4281 : 7D                      MOV     A,L
   13726/    4282 : C6 1F                   ADI		1FH							;31
   13727/    4284 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13728/    4285 : 7C                      MOV     A,H
   13729/    4286 : C6 1F                   ADI		1FH							;31
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 231 - 9/5/2025 20:20:35


   13730/    4288 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   13731/    4289 : C9                      RET
   13732/    428A :                     ;
   13733/    428A :                     ; Erase function key display
   13734/    428A :                     ;
   13735/    428A :                     R_ERASE_FKEY_DISP:						;428AH
   13736/    428A : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   13737/    428D : A7                      ANA     A
   13738/    428E : C8                      RZ
   13739/    428F : CD 3A 42                CALL    R_UNPROT_LABEL				;Unprotect line 8.  An ESC U is printed
   13740/    4292 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   13741/    4295 : E5                      PUSH    H
   13742/    4296 : CD 77 42                CALL    R_CURSOR_TO_LOW_LEFT     	;Send cursor to lower left of CRT
   13743/    4299 : CD 5D 42                CALL    R_ERASE_TO_EOL			 	;Erase from cursor to end of line
   13744/    429C : E1                      POP     H
   13745/    429D : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   13746/    42A0 : CD 62 42                CALL    R_SEND_ESC_X				;Send ESC X
   13747/    42A3 : AF                      XRA     A
   13748/    42A4 : C9                      RET
   13749/    42A5 :                     ;
   13750/    42A5 :                     ; Set and display function keys (M has key table)
   13751/    42A5 :                     ;
   13752/    42A5 :                     R_SET_DISP_FKEY:						;42A5H
   13753/    42A5 : CD 7C 5A                CALL    R_SET_FKEYS				    ;Set new function key table
   13754/    42A8 :                     ;
   13755/    42A8 :                     ; Display function key line
   13756/    42A8 :                     ;
   13757/    42A8 :                     R_DISP_FKEY_LINE:						;42A8H
   13758/    42A8 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   13759/    42AB : 3A 3B F6                LDA     LINCNT_R					;Console height
   13760/    42AE : BD                      CMP     L							;compare w/ Cursor row
   13761/    42AF : C2 C0 42                JNZ     +							;brif not same
   13762/    42B2 :                     ; on last row: make room for Function Keys
   13763/    42B2 : E5                      PUSH    H							;save cursor position
   13764/    42B3 : CD ED 45                CALL    L_SCROLL_LCD				;move all lines up 1 position
   13765/    42B6 : 2E 01                   MVI     L,01H						;cursor row 1
   13766/    42B8 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   13767/    42BB : CD 53 42                CALL    R_DEL_CUR_LINE				;Delete row 1 on screen
   13768/    42BE : E1                      POP     H							;restore cursor position
   13769/    42BF : 2D                      DCR     L							;cursor row --
   13770/    42C0 : E5                  +	PUSH    H							;save cursor position
   13771/    42C1 : CD 3A 42                CALL    R_UNPROT_LABEL				;Unprotect line 8 using ESC U.
   13772/    42C4 : CD 77 42                CALL    R_CURSOR_TO_LOW_LEFT       	;Send cursor to lower left of CRT: last row, column 1
   13773/    42C7 : 21 89 F7                LXI     H,FNKSTR_R				  	;Function key definition area ptr
   13774/    42CA : 1E 08                   MVI     E,08H						;loop 8 times
   13775/    42CC : 3A 48 F6                LDA     REVFLG_R					;Reverse video switch
   13776/    42CF : F5                      PUSH    PSW							;save REVFLG_R
   13777/    42D0 : CD 6E 42                CALL    R_INV_CHAR_DISABLE         	;Cancel inverse character mode
   13778/    42D3 :                     L_FKEY_LOOP:							;E = loop counter
   13779/    42D3 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   13780/    42D6 : FE 28                   CPI     MAXCHRCOLUMN				;40
   13781/    42D8 : 01 0C 04                LXI     B,040CH						;preload B: # of chars. C: keysize in FNKSTR_R
   13782/    42DB : CA E1 42                JZ      +							;brif LINWDT_R == 40
   13783/    42DE :                     ;
   13784/    42DE :                     ; LINWDT_R is 80 if VT100/DVI
   13785/    42DE :                     ;
   13786/    42DE : 01 07 09                LXI     B,0907H						;new data: 9 chars per key to show, keysize is 7
   13787/    42E1 : E5                  +	PUSH    H							;save updated Function key definition area ptr
   13788/    42E2 :                     ;
   13789/    42E2 :                     ; conditionally enable inverse video
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 232 - 9/5/2025 20:20:35


   13790/    42E2 :                     ; A: if loop counter E == 6 && [SER_UPDWN_R+1] == 0
   13791/    42E2 :                     ; B: if loop counter E == 7 && [SER_UPDWN_R] == 0
   13792/    42E2 :                     ;
   13793/    42E2 : 21 C3 FA                LXI     H,SER_UPDWN_R+1
   13794/    42E5 : 7B                      MOV     A,E							;loop counter
   13795/    42E6 : D6 06                   SUI     06H
   13796/    42E8 : CA ED 42                JZ      +							;brif loop counter == 6. A == 0
   13797/    42EB : 3D                      DCR     A							;A now E - 1
   13798/    42EC : 2B                      DCX     H							;HL points to SER_UPDWN_R
   13799/    42ED : CC 67 42            +	CZ      L_COND_INV_CHAR				;conditionally enable inverse video: if (A | M) == 0
   13800/    42F0 : E1                      POP     H							;restore Function key definition area ptr
   13801/    42F1 : CD E0 1B                CALL    R_SEND_CHARS_TO_LCD      	;Send B characters from M to the screen. Clears B on exit.
   13802/    42F4 : 09                      DAD     B							;update ptr into Function key definition area
   13803/    42F5 : CD 6E 42                CALL    R_INV_CHAR_DISABLE       	;Cancel inverse character mode
   13804/    42F8 : 1D                      DCR     E							;loop counter
   13805/    42F9 : C4 1E 00                CNZ     R_PRINT_SPACE				;Send a space to screen/printer
   13806/    42FC : C2 D3 42                JNZ     L_FKEY_LOOP					;brif loop counter != 0
   13807/    42FF : CD 5D 42                CALL    R_ERASE_TO_EOL				;Erase from cursor to end of line
   13808/    4302 : CD 35 42                CALL    R_PROTECT_LABEL				;Protect line 8 using ESC T.
   13809/    4305 : F1                      POP     PSW							;restore REVFLG_R
   13810/    4306 : A7                      ANA     A
   13811/    4307 : C4 69 42                CNZ     R_INV_CHAR_ENABLE			;calif REVFLG_R != 0: Start inverse character mode
   13812/    430A : E1                      POP     H							;restore cursor position
   13813/    430B : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position (H=Row,L=Col)
   13814/    430E : CD 62 42                CALL    R_SEND_ESC_X				;Send ESC X
   13815/    4311 : AF                      XRA     A
   13816/    4312 : C9                      RET
   13817/    4313 :                     ;
   13818/    4313 :                     ; Print A to the screen
   13819/    4313 :                     ;
   13820/    4313 :                     R_PRINT_A_TO_LCD:						;4313H
   13821/    4313 : E5                      PUSH    H
   13822/    4314 : D5                      PUSH    D
   13823/    4315 : C5                      PUSH    B
   13824/    4316 : F5                      PUSH    PSW
   13825/    4317 : (MACRO)             	RST38H	08H							;intercepted to hk_rst4 in VT100
   13826/    4319 : CD 1F 43                CALL    R_CHAR_PLOT
   13827/    431C : C3 ED 14                JMP     R_POP_ALL_REGS				;Pop AF), BC), DE), HL from stack
   13828/    431F :                     ;
   13829/    431F :                     ; Print A to the screen after all registers saved on stack
   13830/    431F :                     ;
   13831/    431F :                     R_CHAR_PLOT:
   13832/    431F : 4F                      MOV     C,A
   13833/    4320 : AF                      XRA     A
   13834/    4321 : 32 C7 FA                STA     POPPSW_R					;clear POPPSW_R
   13835/    4324 : 3A 38 F6                LDA     CONDEV_R					;New Console device flag
   13836/    4327 : A7                      ANA     A							;test
   13837/    4328 : C2 4A 43                JNZ     L_INIT_DVI					;Initialize LCD/DVI 
   13838/    432B : CD 35 43                CALL    R_CHAR_PLOT_4				;Character plotting level 4. Turn off background task & call level 5
   13839/    432E : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   13840/    4331 : 22 40 F6                SHLD    LCDCSY_R					;Cursor row (1-8) + column
   13841/    4334 : C9                      RET
   13842/    4335 :                     ;
   13843/    4335 :                     ; Character plotting level 4. Turn off background task & call level 5
   13844/    4335 :                     ;
   13845/    4335 :                     R_CHAR_PLOT_4:							;4335H
   13846/    4335 : CD C5 73                CALL    L_BLINK_LCD					;Turn off background task, blink & reinitialize cursor blink time
   13847/    4338 : CD 4C 43                CALL    R_CHAR_PLOT_5				;Character plotting level 5. Handle ESC sequences & call level 6
   13848/    433B :                     L_CHAR_PLOT_4_1:
   13849/    433B : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) & Column (1-40) to DE
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 233 - 9/5/2025 20:20:35


   13850/    433E : EB                      XCHG
   13851/    433F : CD 40 74                CALL    L_SET_LCTEYX				;Rebase LCD column # & row #
   13852/    4342 : 3A 3F F6                LDA     CURSTAT_R					;Cursor status (0 = off)
   13853/    4345 : A7                      ANA     A
   13854/    4346 : C8                      RZ									;retif A == 0
   13855/    4347 : C3 D9 73            	JMP		L_INIT_CRS_BLINK			;Initialize Cursor Blink to start blinking
   13856/    434A :                     ;
   13857/    434A :                     ; Initialize New Screen for LCD/DVI RST 7 hook
   13858/    434A :                     ; Initialize LCD/DVI - called from level 3 character print
   13859/    434A :                     ;
   13860/    434A :                     L_INIT_DVI:
   13861/    434A : (MACRO)             	RST38H	3CH
   13862/    434C :                     ;
   13863/    434C :                     ; Character plotting level 5. Handle ESC sequences & call level 6
   13864/    434C :                     ;
   13865/    434C :                     R_CHAR_PLOT_5:							;434CH
   13866/    434C : 21 46 F6                LXI     H,ESCRST20_R				;ESC mode flag for OUTCHR (RST 20H)
   13867/    434F : 7E                      MOV     A,M							;test it
   13868/    4350 : A7                      ANA     A
   13869/    4351 : C2 FA 43                JNZ     R_ESC_SEQ_DRIVER			;brif active: ESCape sequence driver
   13870/    4354 : 79                      MOV     A,C
   13871/    4355 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   13872/    4358 : FE 09                   CPI     09H							;TAB
   13873/    435A : CA 80 44                JZ      R_TAB_FUN				    ;Tab routine
   13874/    435D : FE 7F                   CPI     7FH							;DEL
   13875/    435F : CA 1F 45                JZ      L_DISP_BKSP
   13876/    4362 : FE 20                   CPI     ' '
   13877/    4364 : DA 73 43                JC      R_LCD_OUT_DRIVER			;brif char < ' ': LCD output driver
   13878/    4367 : CD 60 45                CALL    R_CHAR_PLOT_6				;Character plotting level 6.
   13879/    436A :                     										;Save character in C to LCD RAM & call level 7
   13880/    436A : CD 53 44                CALL    R_ESC_C_FUN				    ;ESC C routine (move cursor right)
   13881/    436D : C0                      RNZ
   13882/    436E : 26 01                   MVI     H,01H
   13883/    4370 : C3 94 44                JMP     R_LF_FUN				   	;Linefeed routine
   13884/    4373 :                     ;
   13885/    4373 :                     ; LCD output driver. 
   13886/    4373 :                     ;
   13887/    4373 :                     R_LCD_OUT_DRIVER:						;4373H
   13888/    4373 : 21 88 43                LXI     H,R_RST_20H_LKUP_TBL-2		;Code Based. 
   13889/    4376 : 0E 08                   MVI     C,(L_RST_20H_LKUP_END-R_RST_20H_LKUP_TBL)/3 ;08H count
   13890/    4378 :                     ;
   13891/    4378 :                     ; R_VECTORTBL_LOOKUP: Key Vector table lookup
   13892/    4378 :                     ;
   13893/    4378 :                     ; IN:
   13894/    4378 :                     ;	A		value to match
   13895/    4378 :                     ;	HL		vector table - 2. Code Based. 
   13896/    4378 :                     ;	C		max count
   13897/    4378 :                     ;
   13898/    4378 :                     ; OUT:
   13899/    4378 :                     ;	L		Cursor row
   13900/    4378 :                     ;	H		Cursor column
   13901/    4378 :                     ;
   13902/    4378 :                     R_VECTORTBL_LOOKUP:						;entry point with different count and HL
   13903/    4378 : 23                      INX     H							;Skip entry handler address
   13904/    4379 : 23                      INX     H							;Skip handler address MSB
   13905/    437A : 0D                      DCR     C							;Decrement entry counter
   13906/    437B : F8                      RM									;Return if entry not found in table
   13907/    437C : BE                      CMP     M							;Test if this entry matches
   13908/    437D : 23                      INX     H							;Skip the key value
   13909/    437E : C2 78 43                JNZ     R_VECTORTBL_LOOKUP			;If no match, jump to test next entry
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 234 - 9/5/2025 20:20:35


   13910/    4381 : (MACRO)             	GETHLFROMM							;match: get Handler Address to HL
   13911/    4385 : E5                      PUSH    H							;Push the key handler address on stack
   13912/    4386 : 2A 39 F6            	LHLD	CSRY_R						;Cursor row (1-8) + column (1-40)
   13913/    4389 : C9                  	RET									;"RETurn" to the key handler address
   13914/    438A :                     ;
   13915/    438A :                     ; RST 20H lookup table
   13916/    438A :                     ;
   13917/    438A :                     R_RST_20H_LKUP_TBL:						;438AH
   13918/    438A : 07                      DB   07H
   13919/    438B : 62 76                   DW   R_BEEP_FUN
   13920/    438D : 08                      DB   08H
   13921/    438E : 61 44                   DW   R_BKSPACE_FUN
   13922/    4390 : 09                      DB   09H
   13923/    4391 : 80 44                   DW   R_TAB_FUN
   13924/    4393 : 0A                      DB   0AH
   13925/    4394 : 94 44                   DW   R_LF_FUN
   13926/    4396 : 0B                      DB   0BH
   13927/    4397 : A8 44                   DW   R_ESC_H_FUN
   13928/    4399 : 0C                      DB   0CH
   13929/    439A : 48 45                   DW   R_CLS_FUN
   13930/    439C : 0D                      DB   0DH
   13931/    439D : AA 44                   DW   R_CR_FUN
   13932/    439F : 1B                      DB   1BH
   13933/    43A0 : B2 43                   DW   L_STORE_ESC_SEQ
   13934/    43A2 :                     L_RST_20H_LKUP_END:
   13935/    43A2 :                     ;
   13936/    43A2 :                     ; Conditionally POP PSW from stack based on value at POPPSW_R
   13937/    43A2 :                     ;
   13938/    43A2 :                     L_POPPSW:
   13939/    43A2 : 3A C7 FA                LDA     POPPSW_R
   13940/    43A5 : A7                      ANA     A
   13941/    43A6 : C8                      RZ									;Return if zero (No POP needed) 
   13942/    43A7 : F1                      POP     PSW
   13943/    43A8 : C9                      RET
   13944/    43A9 :                     
   13945/    43A9 :                     L_UPD_LINPROT:
   13946/    43A9 : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   13947/    43AC : C6 08                   ADI		08H
   13948/    43AE : C9                      RET
   13949/    43AF :                     ;
   13950/    43AF :                     ; ESC Y routine (Set cursor position)
   13951/    43AF :                     ;
   13952/    43AF :                     R_ESC_Y_FUN:								;43AFH
   13953/    43AF : 3E 02                   MVI     A,02H
   13954/    43B1 : (MACRO)             	SKIP_2BYTES_INST_BC					;skip SKIP_BYTE_INST and XRA A
   13955/    43B2 :                     ;
   13956/    43B2 :                     ; Store Escape Sequence
   13957/    43B2 :                     ;
   13958/    43B2 :                     L_STORE_ESC_SEQ:						;43B2H
   13959/    43B2 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   13960/    43B3 :                     L_CLR_ESC_SEQ:							;clear ESC mode flag for OUTCHR (RST 20H)
   13961/    43B3 : AF                      XRA     A
   13962/    43B4 : 32 46 F6                STA		ESCRST20_R					;set ESCRST20_R
   13963/    43B7 : C9                      RET
   13964/    43B8 :                     ;
   13965/    43B8 :                     ; LCD Escape sequence lookup table
   13966/    43B8 :                     ; TODO ESC-I missing
   13967/    43B8 :                     ;
   13968/    43B8 :                     R_LCD_ESC_LKUP_TBL:						;43B8H
   13969/    43B8 : 6A                      DB      'j'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 235 - 9/5/2025 20:20:35


   13970/    43B9 : 48 45                   DW   	R_CLS_FUN
   13971/    43BB : 45                      DB      'E'
   13972/    43BC : 48 45                   DW   	R_CLS_FUN
   13973/    43BE : 4B                      DB      'K'
   13974/    43BF : 37 45                   DW   	R_ESC_K_FUN
   13975/    43C1 : 4A                      DB      'J'
   13976/    43C2 : 4E 45                   DW   	R_ESC_CapJ_FUN
   13977/    43C4 : 6C                      DB      'l'
   13978/    43C5 : 35 45                   DW   	R_ESC_l_FUN
   13979/    43C7 : 4C                      DB      'L'
   13980/    43C8 : EA 44                   DW   	R_ESC_CapL_FUN
   13981/    43CA : 4D                      DB      'M'
   13982/    43CB : C4 44                   DW   	R_ESC_M_FUN
   13983/    43CD : 59                      DB      'Y'
   13984/    43CE : AF 43                   DW   	R_ESC_Y_FUN
   13985/    43D0 : 41                      DB      'A'
   13986/    43D1 : 69 44                   DW   	R_ESC_A_FUN
   13987/    43D3 : 42                      DB      'B'
   13988/    43D4 : 6E 44                   DW   	R_ESC_B_FUN
   13989/    43D6 : 43                      DB      'C'
   13990/    43D7 : 53 44                   DW   	R_ESC_C_FUN
   13991/    43D9 : 44                      DB      'D'
   13992/    43DA : 5C 44                   DW   	R_ESC_D_FUN
   13993/    43DC : 48                      DB      'H'
   13994/    43DD : A8 44                   DW   	R_ESC_H_FUN
   13995/    43DF : 70                      DB      'p'
   13996/    43E0 : 31 44                   DW   	R_ESC_p_FUN
   13997/    43E2 : 71                      DB      'q'
   13998/    43E3 : 32 44                   DW   	R_ESC_q_FUN
   13999/    43E5 : 50                      DB      'P'
   14000/    43E6 : AF 44                   DW   	R_ESC_CapP_FUN
   14001/    43E8 : 51                      DB      'Q'
   14002/    43E9 : BA 44                   DW   	R_ESC_CapQ_FUN
   14003/    43EB : 54                      DB      'T'
   14004/    43EC : 39 44                   DW   	R_ESC_T_FUN
   14005/    43EE : 55                      DB      'U'
   14006/    43EF : 37 44                   DW   	R_ESC_U_FUN
   14007/    43F1 : 56                      DB      'V'
   14008/    43F2 : 3F 44                   DW   	R_ESC_V_FUN
   14009/    43F4 : 57                      DB      'W'
   14010/    43F5 : 40 44                   DW   	R_ESC_W_FUN
   14011/    43F7 : 58                      DB      'X'
   14012/    43F8 : 4A 44                   DW   	R_ESC_X_FUN
   14013/    43FA :                     R_LCD_ESC_LKUP_END:
   14014/    43FA :                     ;
   14015/    43FA :                     ; ESCape sequence driver
   14016/    43FA :                     ;
   14017/    43FA :                     ; IN:
   14018/    43FA :                     ;	C
   14019/    43FA :                     ;	HL		ptr to ESCRST20_R
   14020/    43FA :                     ;
   14021/    43FA :                     R_ESC_SEQ_DRIVER:						;43FAH
   14022/    43FA : 79                      MOV     A,C
   14023/    43FB : FE 1B                   CPI     1BH							;ESC
   14024/    43FD : 7E                      MOV     A,M							;ESC letter
   14025/    43FE : CA 45 44                JZ      L_DBL_ESC_SEQ				;brif C == ESC: Double Escape
   14026/    4401 : A7                      ANA     A							;test ESC letter
   14027/    4402 : F2 11 44                JP      L_ESC_SEQ_1					;brif A >= 0
   14028/    4405 : CD B3 43                CALL    L_CLR_ESC_SEQ
   14029/    4408 : 79                      MOV     A,C
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 236 - 9/5/2025 20:20:35


   14030/    4409 : 21 B6 43                LXI     H,R_LCD_ESC_LKUP_TBL-2		;Code Based. 
   14031/    440C : 0E 16                   MVI     C,(R_LCD_ESC_LKUP_END-R_LCD_ESC_LKUP_TBL)/3	;16H
   14032/    440E : C3 78 43                JMP     R_VECTORTBL_LOOKUP			;returns L==Cursor row
   14033/    4411 :                     
   14034/    4411 :                     L_ESC_SEQ_1:
   14035/    4411 : 3D                      DCR     A
   14036/    4412 : 32 46 F6                STA     ESCRST20_R					;ESC mode flag for OUTCHR (RST 20H)
   14037/    4415 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   14038/    4418 : 11 3A F6                LXI     D,CSRX_R				    ;Cursor column (1-40)
   14039/    441B : CA 26 44                JZ      +
   14040/    441E : 3A 3B F6                LDA     LINCNT_R					;Console height
   14041/    4421 : 21 3D F6                LXI     H,LINPROT_R				   	;Label line protect status
   14042/    4424 : 86                      ADD     M
   14043/    4425 : 1B                      DCX     D
   14044/    4426 : 47                  +	MOV     B,A
   14045/    4427 : 79                      MOV     A,C
   14046/    4428 : D6 20                   SUI     20H
   14047/    442A : B8                      CMP     B
   14048/    442B : 3C                      INR     A
   14049/    442C : 12                      STAX    D
   14050/    442D : D8                      RC
   14051/    442E : 78                      MOV     A,B
   14052/    442F : 12                      STAX    D
   14053/    4430 : C9                      RET
   14054/    4431 :                     ;
   14055/    4431 :                     ; ESC p routine (start inverse video)
   14056/    4431 :                     ;
   14057/    4431 :                     R_ESC_p_FUN:							;4431H
   14058/    4431 : (MACRO)             	SKIP_XRA_A							;ORI 0AFH
   14059/    4432 :                     ;
   14060/    4432 :                     ; ESC q routine (cancel inverse video)
   14061/    4432 :                     ;
   14062/    4432 :                     R_ESC_q_FUN:							;4432H
   14063/    4432 : AF                      XRA     A
   14064/    4433 : 32 48 F6                STA     REVFLG_R					;Reverse video switch
   14065/    4436 : C9                      RET
   14066/    4437 :                     ;
   14067/    4437 :                     ; ESC U routine (unprotect line 8)
   14068/    4437 :                     ;
   14069/    4437 :                     R_ESC_U_FUN:							;4437H
   14070/    4437 : AF                      XRA     A
   14071/    4438 : (MACRO)             	SKIP_2BYTES_INST_JNZ				;skip SKIP_BYTE_INST & 0FFH
   14072/    4439 :                     ;
   14073/    4439 :                     ; ESC T routine (protect line 8)
   14074/    4439 :                     ;
   14075/    4439 :                     R_ESC_T_FUN:							;4439H
   14076/    4439 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   14077/    443A :                     ; RST38H instruction always skipped but A set based on Entry function R_ESC_U_FUN or R_ESC_T_FUN
   14078/    443A : FF                  	DB		0FFH						;RST38H
   14079/    443B : 32 3D F6            	STA		LINPROT_R					;0: not protected. !=0 protected
   14080/    443E : C9                  	RET
   14081/    443F :                     ;
   14082/    443F :                     ; ESC V routine (stop automatic scrolling)
   14083/    443F :                     ;
   14084/    443F :                     R_ESC_V_FUN:							;443FH
   14085/    443F : (MACRO)             	SKIP_XRA_A							;ORI 0AFH
   14086/    4440 :                     ;
   14087/    4440 :                     ; ESC W routine (resume automatic scrolling)
   14088/    4440 :                     ;
   14089/    4440 :                     R_ESC_W_FUN:							;4440H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 237 - 9/5/2025 20:20:35


   14090/    4440 : AF                      XRA     A
   14091/    4441 : 32 3E F6                STA     SCRLDIS_R					;Scroll disable flag
   14092/    4444 : C9                      RET
   14093/    4445 :                     ;
   14094/    4445 :                     ; IN:
   14095/    4445 :                     ;	HL		ptr to ESCRST20_R
   14096/    4445 :                     ;
   14097/    4445 :                     L_DBL_ESC_SEQ:
   14098/    4445 : 23                      INX     H							;ptr to ESCRST20_R+1
   14099/    4446 : 77                      MOV     M,A							;save code
   14100/    4447 : C3 B2 43                JMP     L_STORE_ESC_SEQ
   14101/    444A :                     ;
   14102/    444A :                     ; ESC X routine
   14103/    444A :                     ;
   14104/    444A :                     R_ESC_X_FUN:
   14105/    444A : 21 47 F6                LXI     H,ESCRST20_R+1				;Double ESC mode flag for OUTCHR (RST 20H)
   14106/    444D : 7E                      MOV     A,M							;get code
   14107/    444E : 36 00                   MVI		M,00H						;clear code
   14108/    4450 : 2B                      DCX     H							;point to ESCRST20_R
   14109/    4451 : 77                      MOV     M,A							;store code
   14110/    4452 : C9                      RET
   14111/    4453 :                     ;
   14112/    4453 :                     ; ESC C routine (move cursor right)
   14113/    4453 :                     ;
   14114/    4453 :                     R_ESC_C_FUN:							;4453H
   14115/    4453 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   14116/    4456 : BC                      CMP     H
   14117/    4457 : C8                      RZ
   14118/    4458 : 24                      INR     H
   14119/    4459 : C3 77 44                JMP     L_ESC_B_1
   14120/    445C :                     ;
   14121/    445C :                     ; ESC D routine (move cursor left)
   14122/    445C :                     ;
   14123/    445C :                     R_ESC_D_FUN:							;445CH
   14124/    445C : 25                      DCR     H
   14125/    445D : C8                      RZ
   14126/    445E : C3 77 44                JMP     L_ESC_B_1
   14127/    4461 :                     ;
   14128/    4461 :                     ; Backspace routine
   14129/    4461 :                     ;
   14130/    4461 :                     R_BKSPACE_FUN:							;4461H
   14131/    4461 : CD 5C 44                CALL    R_ESC_D_FUN				    ;ESC D routine (move cursor left)
   14132/    4464 : C0                      RNZ
   14133/    4465 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   14134/    4468 : 67                      MOV     H,A
   14135/    4469 :                     ;
   14136/    4469 :                     ; ESC A routine (move cursor up)
   14137/    4469 :                     ;
   14138/    4469 :                     R_ESC_A_FUN:							;4469H
   14139/    4469 : 2D                      DCR     L
   14140/    446A : C8                      RZ
   14141/    446B : C3 77 44                JMP     L_ESC_B_1
   14142/    446E :                     ;
   14143/    446E :                     ; ESC B routine (move cursor down)
   14144/    446E :                     ;
   14145/    446E :                     R_ESC_B_FUN:							;446EH
   14146/    446E : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   14147/    4471 : BD                      CMP     L
   14148/    4472 : C8                      RZ
   14149/    4473 : DA 7B 44                JC      +
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 238 - 9/5/2025 20:20:35


   14150/    4476 : 2C                      INR     L
   14151/    4477 :                     L_ESC_B_1:
   14152/    4477 : 22 39 F6                SHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   14153/    447A : C9                      RET
   14154/    447B :                     
   14155/    447B : 2D                  +	DCR     L
   14156/    447C : AF                      XRA     A
   14157/    447D : C3 77 44                JMP     L_ESC_B_1
   14158/    4480 :                     ;
   14159/    4480 :                     ; Tab routine
   14160/    4480 :                     ;
   14161/    4480 :                     R_TAB_FUN:								;4480H
   14162/    4480 : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   14163/    4483 : F5                      PUSH    PSW
   14164/    4484 : 3E 20                   MVI     A,' '
   14165/    4486 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14166/    4487 : C1                      POP     B
   14167/    4488 : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   14168/    448B : B8                      CMP     B
   14169/    448C : C8                      RZ
   14170/    448D : 3D                      DCR     A
   14171/    448E : E6 07                   ANI     07H
   14172/    4490 : C2 80 44                JNZ     R_TAB_FUN				    ;Loop
   14173/    4493 : C9                      RET
   14174/    4494 :                     ;
   14175/    4494 :                     ; Linefeed routine
   14176/    4494 :                     ;
   14177/    4494 :                     R_LF_FUN:								;4494H
   14178/    4494 : CD 6E 44                CALL    R_ESC_B_FUN				    ;ESC B routine (move cursor down)
   14179/    4497 : C0                      RNZ
   14180/    4498 : 3A 3E F6                LDA     SCRLDIS_R					;Scroll disable flag
   14181/    449B : A7                      ANA     A
   14182/    449C : C0                      RNZ									;retif Scroll disable flag != 0
   14183/    449D : CD 77 44                CALL    L_ESC_B_1
   14184/    44A0 : CD ED 45                CALL    L_SCROLL_LCD
   14185/    44A3 : 2E 01                   MVI     L,01H						;
   14186/    44A5 : C3 C7 44                JMP     L_ESC_M_1
   14187/    44A8 :                     ;
   14188/    44A8 :                     ; Verticle tab and ESC H routine (home cursor)
   14189/    44A8 :                     ;
   14190/    44A8 :                     R_ESC_H_FUN:							;44A8H
   14191/    44A8 : 2E 01                   MVI     L,01H
   14192/    44AA :                     ;
   14193/    44AA :                     ; CR routine
   14194/    44AA :                     ;
   14195/    44AA :                     R_CR_FUN:								;44AAH
   14196/    44AA : 26 01                   MVI     H,01H
   14197/    44AC : C3 77 44                JMP     L_ESC_B_1
   14198/    44AF :                     ;
   14199/    44AF :                     ; ESC P routine (turn cursor on)
   14200/    44AF :                     ;
   14201/    44AF :                     R_ESC_CapP_FUN:							;44AFH
   14202/    44AF : 3E 01                   MVI     A,01H
   14203/    44B1 : 32 3F F6                STA     CURSTAT_R				    ;Cursor status (0 = off)
   14204/    44B4 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14205/    44B7 : C3 D9 73                JMP     L_INIT_CRS_BLINK			;Initialize Cursor Blink to start blinking
   14206/    44BA :                     ;
   14207/    44BA :                     ; ESC Q routine (turn cursor off)
   14208/    44BA :                     ;
   14209/    44BA :                     R_ESC_CapQ_FUN:							;44BAH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 239 - 9/5/2025 20:20:35


   14210/    44BA : AF                      XRA     A
   14211/    44BB : 32 3F F6                STA     CURSTAT_R					;Cursor status (0 = off)
   14212/    44BE : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14213/    44C1 : C3 C5 73                JMP     L_BLINK_LCD					;Turn off background task, blink & reinitialize cursor blink time
   14214/    44C4 :                     ;
   14215/    44C4 :                     ; ESC M routine
   14216/    44C4 :                     ;
   14217/    44C4 :                     R_ESC_M_FUN:							;44C4H
   14218/    44C4 : CD AA 44                CALL    R_CR_FUN				    ;CR routine
   14219/    44C7 :                     L_ESC_M_1:
   14220/    44C7 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14221/    44CA : CD A9 43                CALL    L_UPD_LINPROT				;result in A
   14222/    44CD : 95                      SUB     L
   14223/    44CE : D8                      RC									;retif A < L
   14224/    44CF : =>FALSE             	if		HWSCROLL
   14225/    44CF :                     ;	•	Hardware scroll condition is detected
   14226/    44CF :                     ;	•	Scroll active flag is set
   14227/    44CF :                     ;	•	hardware scroll for top and bottom drivers at the same time
   14228/    44CF :                     ;	•	return to R_LCD_SCROLL (44D2H) routine
   14229/    44CF :                     	JMP		TRAP_M
   14230/    44CF : =>TRUE              	else
   14231/    44CF : CA 35 45                JZ      R_ESC_l_FUN					;ESC l routine (erase current line)
   14232/    44D2 : [14224]             	endif
   14233/    44D2 :                     ;
   14234/    44D2 :                     ;Scroll LCD screen A times at line number in L
   14235/    44D2 :                     ;
   14236/    44D2 :                     ; IN:
   14237/    44D2 :                     ;	A		# of scrolls
   14238/    44D2 :                     ;	L		starting line number
   14239/    44D2 :                     ;
   14240/    44D2 :                     R_LCD_SCROLL:							;44D2H
   14241/    44D2 : F5                      PUSH    PSW							;save A: #of scrolls
   14242/    44D3 : 26 28                   MVI     H,MAXCHRCOLUMN				;40	line count
   14243/    44D5 : 2C                  -	INR     L							;next line
   14244/    44D6 : CD 12 45                CALL    R_GET_LCD_CHAR				;Get character at HL from LCD RAM in C, RevVid status in A
   14245/    44D9 : 2D                      DCR     L							;back to previous line
   14246/    44DA : CD 66 45                CALL    R_CHAR_PLOT_6a				;draw char in C
   14247/    44DD : 25                      DCR     H							;count
   14248/    44DE : C2 D5 44                JNZ     -
   14249/    44E1 : 2C                      INR     L							;next line
   14250/    44E2 : F1                      POP     PSW							;restore #of scrolls
   14251/    44E3 : 3D                      DCR     A							;update #of scrolls
   14252/    44E4 : C2 D2 44                JNZ     R_LCD_SCROLL				;Loop until done
   14253/    44E7 :                     ; A now 0
   14254/    44E7 : =>FALSE             	if		HWSCROLL
   14255/    44E7 :                     ;	•	here, the return from software scrolling is intercepted
   14256/    44E7 :                     ;	•	scroll active flag is disabled here
   14257/    44E7 :                     	JMP		RET_M
   14258/    44E7 : =>TRUE              	else
   14259/    44E7 : C3 35 45                JMP     R_ESC_l_FUN				 	;ESC l routine (erase current line)
   14260/    44EA : [14254]             	endif
   14261/    44EA :                     ;
   14262/    44EA :                     ; ESC L routine (insert line)
   14263/    44EA :                     ;
   14264/    44EA :                     R_ESC_CapL_FUN:							;44EAH
   14265/    44EA : CD AA 44                CALL    R_CR_FUN				    ;CR routine
   14266/    44ED : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14267/    44F0 : CD A9 43                CALL    L_UPD_LINPROT				;result in A
   14268/    44F3 : 67                      MOV     H,A							;save
   14269/    44F4 : 95                      SUB     L							;sets Z flag and carry
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 240 - 9/5/2025 20:20:35


   14270/    44F5 : D8                      RC									;retif H < L
   14271/    44F6 : =>FALSE             	if		HWSCROLL
   14272/    44F6 :                     ;	•	Hardware scroll condition is detected
   14273/    44F6 :                     ;	•	Scroll active flag is set
   14274/    44F6 :                     ;	•	hardware scroll for top and bottom drivers at the same time
   14275/    44F6 :                     ;	•	return to 44EAH routine
   14276/    44F6 :                     ;	.	A holds # of scrolls
   14277/    44F6 :                     ;	.	L == the line number to process first
   14278/    44F6 :                     	JMP		TRAP_L
   14279/    44F6 : =>TRUE              	else
   14280/    44F6 : CA 35 45                JZ      R_ESC_l_FUN				    ;brif H == L: ESC l routine (erase current line)
   14281/    44F9 : [14271]             	endif
   14282/    44F9 : 6C                      MOV     L,H
   14283/    44FA :                     ; IN:
   14284/    44FA :                     ;	A		# of scrolls
   14285/    44FA :                     ;	L		starting line number
   14286/    44FA :                     R_LCD_SCROLL_DOWN:						;44FAH @STEVEADOLPH
   14287/    44FA : F5                      PUSH    PSW							;save # of scrolls
   14288/    44FB : 26 28                   MVI     H,MAXCHRCOLUMN				;40 column loop counter
   14289/    44FD : 2D                  -	DCR     L							;previous line
   14290/    44FE : CD 12 45                CALL    R_GET_LCD_CHAR				;Get character at HL from LCD RAM to C
   14291/    4501 : 2C                      INR     L							;backup to original line
   14292/    4502 : CD 66 45                CALL    R_CHAR_PLOT_6a				;draw char in C
   14293/    4505 : 25                      DCR     H
   14294/    4506 : C2 FD 44                JNZ     -
   14295/    4509 : 2D                      DCR     L							;previous line
   14296/    450A : F1                      POP     PSW							;restore # of scrolls
   14297/    450B : 3D                      DCR     A
   14298/    450C : C2 FA 44                JNZ     R_LCD_SCROLL_DOWN
   14299/    450F :                     
   14300/    450F : =>FALSE             	if		HWSCROLL
   14301/    450F :                     ;	•	Hardware scroll condition is detected
   14302/    450F :                     ;	•	Scroll active flag is set
   14303/    450F :                     ;	•	hardware scroll for top and bottom drivers at the same time
   14304/    450F :                     ;	•	return to R_ESC_CapL_FUN routine
   14305/    450F :                     	JMP		RET_L
   14306/    450F : =>TRUE              	else
   14307/    450F : C3 35 45                JMP     R_ESC_l_FUN				    ;ESC l routine (erase current line)
   14308/    4512 : [14300]             	endif
   14309/    4512 :                     ;
   14310/    4512 :                     ; Get character at HL from LCD RAM
   14311/    4512 :                     ;
   14312/    4512 :                     ; IN:
   14313/    4512 :                     ;	HL		H: column (base 1) L: row (base 1)
   14314/    4512 :                     ; OUT:
   14315/    4512 :                     ;	A		RevVid Status
   14316/    4512 :                     ;	C		char
   14317/    4512 :                     ;
   14318/    4512 :                     R_GET_LCD_CHAR:							;4512H
   14319/    4512 : E5                      PUSH    H							;save row/column
   14320/    4513 : E5                      PUSH    H							;again
   14321/    4514 : CD 86 45                CALL    L_LCD_LOC					;compute ptr to LCD_R
   14322/    4517 : 4E                      MOV     C,M							;get char
   14323/    4518 : E1                      POP     H							;restore row/column
   14324/    4519 : CD AA 45                CALL    L_LCD_REV_LOC				;LCD Reverse Video bitmap locator
   14325/    451C : A6                      ANA     M							;A & [HL]
   14326/    451D : E1                      POP     H							;restore row/column
   14327/    451E : C9                      RET
   14328/    451F :                     
   14329/    451F :                     L_DISP_BKSP:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 241 - 9/5/2025 20:20:35


   14330/    451F : 3A 48 F6                LDA     REVFLG_R					;Reverse video flag state
   14331/    4522 : F5                      PUSH    PSW							;save it
   14332/    4523 : CD 6E 42                CALL    R_INV_CHAR_DISABLE       	;Cancel inverse character mode
   14333/    4526 : 3E 08                   MVI     A,08H						;BKSP
   14334/    4528 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14335/    4529 : 3E 20                   MVI     A,' '
   14336/    452B : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14337/    452C : 3E 08                   MVI     A,08H						;BKSP
   14338/    452E : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14339/    452F : F1                      POP     PSW							;restore reverse video flag state
   14340/    4530 : A7                      ANA     A							;test it
   14341/    4531 : C8                      RZ									;retif not reverse video
   14342/    4532 : C3 69 42                JMP     R_INV_CHAR_ENABLE			;Set inverse character mode and return
   14343/    4535 :                     ;
   14344/    4535 :                     ; ESC l routine (erase current line)
   14345/    4535 :                     ;
   14346/    4535 :                     ; in
   14347/    4535 :                     ;	L		Line number
   14348/    4535 :                     ;
   14349/    4535 :                     R_ESC_l_FUN:							;4535H
   14350/    4535 : 26 01                   MVI     H,01H						;column number
   14351/    4537 :                     ;
   14352/    4537 :                     ; ESC K routine (erase to EOL)
   14353/    4537 :                     ;
   14354/    4537 :                     ; in
   14355/    4537 :                     ;	L		Line number
   14356/    4537 :                     ;	H		column to start
   14357/    4537 :                     ;
   14358/    4537 :                     R_ESC_K_FUN:							;4537H
   14359/    4537 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14360/    453A : 0E 20               -	MVI     C,' '
   14361/    453C : AF                      XRA     A							;no RevVid
   14362/    453D : CD 66 45                CALL    R_CHAR_PLOT_6a				;draw char in C
   14363/    4540 : 24                      INR     H							;next column
   14364/    4541 : 7C                      MOV     A,H
   14365/    4542 : FE 29                   CPI     MAXCHRCOLUMN+1				;41	column overflow
   14366/    4544 : DA 3A 45                JC      -
   14367/    4547 : C9                      RET
   14368/    4548 :                     ;
   14369/    4548 :                     ; Form Feed (0CH)), CLS), ESC E), and ESC J routine
   14370/    4548 :                     ;
   14371/    4548 :                     R_CLS_FUN:								;4548H
   14372/    4548 : CD A8 44                CALL    R_ESC_H_FUN				    ;Verticle tab and ESC H routine (home cursor)
   14373/    454B : CD D3 45                CALL    L_CLR_ALTLCD
   14374/    454E :                     ;
   14375/    454E :                     ; ESC J routine: erase to end of page
   14376/    454E :                     ;
   14377/    454E :                     ; IN:
   14378/    454E :                     ;	H
   14379/    454E :                     ;	L
   14380/    454E :                     ;
   14381/    454E :                     R_ESC_CapJ_FUN:							;454EH
   14382/    454E : CD A2 43                CALL    L_POPPSW
   14383/    4551 : CD 37 45            -	CALL    R_ESC_K_FUN				    ;ESC K routine (erase to EOL)
   14384/    4554 : CD A9 43                CALL    L_UPD_LINPROT				;result in A
   14385/    4557 : BD                      CMP     L
   14386/    4558 : D8                      RC									;retif A < L
   14387/    4559 : C8                      RZ									;retif A == L
   14388/    455A : 26 01                   MVI     H,01H
   14389/    455C : 2C                      INR     L
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 242 - 9/5/2025 20:20:35


   14390/    455D : C3 51 45                JMP     -
   14391/    4560 :                     
   14392/    4560 :                     ;
   14393/    4560 :                     ; Character plotting level 6.  Save character in C to LCD RAM & call level 7
   14394/    4560 :                     ;
   14395/    4560 :                     ; IN:
   14396/    4560 :                     ;	HL		LCD char coordinates
   14397/    4560 :                     ;	A		Reverse Video status
   14398/    4560 :                     ;	C		char
   14399/    4560 :                     ;
   14400/    4560 :                     R_CHAR_PLOT_6:							;4560H
   14401/    4560 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at FAC7H
   14402/    4563 : 3A 48 F6                LDA     REVFLG_R					;Reverse video switch
   14403/    4566 :                     R_CHAR_PLOT_6a:							;draw char in C
   14404/    4566 : E5                      PUSH    H
   14405/    4567 : F5                      PUSH    PSW							;save Reverse Video status
   14406/    4568 : E5                      PUSH    H
   14407/    4569 : E5                      PUSH    H							;save LCD char coordinates
   14408/    456A : CD 9A 45                CALL    L_LCD_REV_UPD				;input A
   14409/    456D : E1                      POP     H							;restore LCD char coordinates
   14410/    456E : CD 86 45                CALL    L_LCD_LOC					;compute ptr to LCD_R
   14411/    4571 : 71                      MOV     M,C							;update LCD_R
   14412/    4572 : D1                      POP     D							;restore LCD char coordinates to DE
   14413/    4573 : =>FALSE             	if		HWSCROLL
   14414/    4573 :                     ;	•	here the scroll active flag is tested
   14415/    4573 :                     ;	•	if a scroll is active then we look for the special condition where the line being “software scrolled” is occurring
   14416/    4573 :                     ;	•	when this happens, we actually employ the routine at R_CHAR_PLOT_7 (73EEH) to copy the new line into the LCD drivers,
   14417/    4573 :                     ;	•	the source being Video RAM.	if scroll is not active, then carry on to R_CHAR_PLOT_7
   14418/    4573 :                     	CALL	stop_access
   14419/    4573 : =>TRUE              	else
   14420/    4573 : CD EE 73                CALL    R_CHAR_PLOT_7				;Character plotting level 7.  Plot character in C on LCD at (HL)
   14421/    4576 : [14413]             	endif
   14422/    4576 : F1                      POP     PSW							;restore Reverse Video status
   14423/    4577 : A7                      ANA     A							;set flags
   14424/    4578 : E1                      POP     H
   14425/    4579 : C8                      RZ									;retif !Reverse Video
   14426/    457A : F3                      DI 
   14427/    457B : 3E 0D                   MVI     A,0DH						;00001101 MSE==1 Unmask 6.5. Mask INT 7.5 & 5.5
   14428/    457D : 30                      SIM    
   14429/    457E : FB                      EI     
   14430/    457F : CD A9 73                CALL    R_BLINK_CURSOR				;Blink the cursor
   14431/    4582 :                     ; TODO save a byte by jumping to L_ENA_INT_75_65()
   14432/    4582 : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   14433/    4584 : 30                      SIM    
   14434/    4585 : C9                      RET
   14435/    4586 :                     ;
   14436/    4586 :                     ; Compute ptr to LCD_R
   14437/    4586 :                     ; IN:
   14438/    4586 :                     ;	H: column L: row base 1
   14439/    4586 :                     ; compute (40 * (row - 1)) + Column - overflow (-100 or 0) + LCD_R + 255
   14440/    4586 :                     ; each row is 40 columns, range 1..8.
   14441/    4586 :                     ; L is 1 based so there is a -40 correction in the calculation
   14442/    4586 :                     ; H is also 1 based so another -1 correction
   14443/    4586 :                     ;
   14444/    4586 :                     L_LCD_LOC:
   14445/    4586 : 7D                      MOV     A,L
   14446/    4587 : 87                      ADD     A							;*2
   14447/    4588 : 87                      ADD     A							;*4
   14448/    4589 : 85                      ADD     L							;*5
   14449/    458A : 87                      ADD     A							;*10
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 243 - 9/5/2025 20:20:35


   14450/    458B : 87                      ADD     A							;*20
   14451/    458C : 87                      ADD     A							;*40	Carry!
   14452/    458D : 5F                      MOV     E,A
   14453/    458E :                     ;
   14454/    458E :                     ; make D == -1 if no overflow, D == 0 if overflow
   14455/    458E :                     ;
   14456/    458E : 9F                      SBB     A							;if Carry, result is 0FFH
   14457/    458F : 2F                      CMA									;complement to 0 else 0FFH
   14458/    4590 : 57                      MOV     D,A							;E now 40*Row, D is 0 or -1
   14459/    4591 : 6C                      MOV     L,H							;zero extend H to HL
   14460/    4592 : 26 00                   MVI     H,00H
   14461/    4594 : 19                      DAD     D							;HL += DE. Tricky binary math.
   14462/    4595 : 11 D7 FE                LXI     D,LCD_R+0D7H				;LCD_R+215 = LCD_R + 256 - 40 - 1
   14463/    4598 : 19                      DAD     D
   14464/    4599 : C9                      RET
   14465/    459A :                     ;
   14466/    459A :                     ; Update LCD char bitmap
   14467/    459A :                     ; this bitmap reflects the Reverse Video state of each char shown on the LCD
   14468/    459A :                     ; 40 char per line, 8 lines, total 320 bits
   14469/    459A :                     ;
   14470/    459A :                     ; IN:
   14471/    459A :                     ;	A		set or reset
   14472/    459A :                     ;	HL		Column & Row
   14473/    459A :                     ;
   14474/    459A :                     L_LCD_REV_UPD:
   14475/    459A : 47                      MOV     B,A
   14476/    459B : CD AA 45                CALL    L_LCD_REV_LOC				;LCD Reverse Video bitmap locator
   14477/    459E : 04                      INR     B							;test B for 0
   14478/    459F : 05                      DCR     B
   14479/    45A0 : CA A6 45                JZ      +							;L_LCDBITS_CLEAR brif B == 0
   14480/    45A3 :                     ;L_LCDBITS_SET:
   14481/    45A3 : B6                      ORA     M							;[HL] |= A
   14482/    45A4 : 77                      MOV     M,A
   14483/    45A5 : C9                      RET
   14484/    45A6 :                     ;L_LCDBITS_CLEAR:
   14485/    45A6 : 2F                  +	CMA									;complement bit mask
   14486/    45A7 : A6                      ANA     M							;[HL] &= ~A
   14487/    45A8 : 77                      MOV     M,A
   14488/    45A9 : C9                      RET
   14489/    45AA :                     ;
   14490/    45AA :                     ; LCD characters Reverese Video bitmap locator
   14491/    45AA :                     ;
   14492/    45AA :                     ; IN:
   14493/    45AA :                     ;	H: Column (1 based), L: Row (1 based)
   14494/    45AA :                     ; OUT:
   14495/    45AA :                     ;	HL returns ((Column - 1) / 8) + ((Row - 1) * 5) + LCDBITS_R
   14496/    45AA :                     ;	A		bitmask for M
   14497/    45AA :                     ;
   14498/    45AA :                     ; LCDBITS_R reflects the Reverse Video status of each char
   14499/    45AA :                     ;
   14500/    45AA :                     L_LCD_REV_LOC:
   14501/    45AA : 7D                      MOV     A,L							;row (1 based)
   14502/    45AB : 87                      ADD     A							;*2
   14503/    45AC : 87                      ADD     A							;*4
   14504/    45AD : 85                      ADD     L							;*5
   14505/    45AE : 6F                      MOV     L,A
   14506/    45AF : 7C                      MOV     A,H							;column
   14507/    45B0 : 3D                      DCR     A
   14508/    45B1 : F5                      PUSH    PSW							;save Column - 1
   14509/    45B2 : 0F                      RRC									;divide by 8
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 244 - 9/5/2025 20:20:35


   14510/    45B3 : 0F                      RRC
   14511/    45B4 : 0F                      RRC
   14512/    45B5 : E6 1F                   ANI     1FH							;00011111B
   14513/    45B7 : 85                      ADD     L							;+ row
   14514/    45B8 : 6F                      MOV     L,A							;zero extend to HL
   14515/    45B9 : 26 00                   MVI     H,00H
   14516/    45BB : 11 35 FB                LXI     D,LCDBITS_R-5				;LCD table. Offset by 5 since Row is 1 based.
   14517/    45BE : 19                      DAD     D							;index. result in HL
   14518/    45BF : F1                      POP     PSW							;restore Column - 1
   14519/    45C0 : E6 07                   ANI     07H							;mod 8
   14520/    45C2 : 57                      MOV     D,A							;loop count
   14521/    45C3 : AF                      XRA     A							;A == 0
   14522/    45C4 : 37                      STC									;set Carry
   14523/    45C5 :                     ;create a bit mask
   14524/    45C5 : 1F                  -	RAR									;rotate carry into bit 7 
   14525/    45C6 : 15                      DCR     D
   14526/    45C7 : F2 C5 45                JP      -
   14527/    45CA : C9                      RET
   14528/    45CB :                     
   14529/    45CB :                     L_FLIP_REV:
   14530/    45CB : E5                      PUSH    H							;save HL
   14531/    45CC : CD AA 45                CALL    L_LCD_REV_LOC				;LCD Reverse Video bitmap locator
   14532/    45CF : AE                      XRA     M							;[HL] ~= A
   14533/    45D0 : 77                      MOV     M,A
   14534/    45D1 : E1                      POP     H							;restore HL
   14535/    45D2 : C9                      RET
   14536/    45D3 :                     
   14537/    45D3 :                     L_CLR_ALTLCD:
   14538/    45D3 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   14539/    45D6 : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
   14540/    45D9 : 87                      ADD     A							;move bit 6 to sign bit
   14541/    45DA : F0                      RP  								;retif TEXT
   14542/    45DB :                     ;
   14543/    45DB :                     ; TELCOM app
   14544/    45DB :                     ;
   14545/    45DB : E5                      PUSH    H							;save HL
   14546/    45DC :                     ;
   14547/    45DC :                     ; clear ALTLCD screen buffer
   14548/    45DC :                     ;
   14549/    45DC : 21 C0 FC                LXI     H,ALTLCD_R				    ;Start of Alt LCD character buffer
   14550/    45DF : 01 40 01                LXI     B,MAXCHRCOLUMN*MAXCHRROW	;0140H/320 ALTLCD buffer counter
   14551/    45E2 : 36 20               -	MVI     M,' '						;set space
   14552/    45E4 : 23                      INX     H
   14553/    45E5 : 0B                      DCX     B							;decrement loop counter
   14554/    45E6 : 78                      MOV     A,B							;test loop counter
   14555/    45E7 : B1                      ORA     C
   14556/    45E8 : C2 E2 45                JNZ     -							;brif not done
   14557/    45EB : E1                      POP     H							;restore HL
   14558/    45EC : C9                      RET
   14559/    45ED :                     
   14560/    45ED :                     L_SCROLL_LCD:
   14561/    45ED : CD A2 43                CALL    L_POPPSW
   14562/    45F0 : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
   14563/    45F3 : 87                      ADD     A							;double
   14564/    45F4 : F0                      RP									;return if !TEXT
   14565/    45F5 :                     ; scroll and copies first line of LCD_R too
   14566/    45F5 : 11 C0 FC                LXI     D,ALTLCD_R				    ;Start of Alt LCD character buffer
   14567/    45F8 : 21 E8 FC                LXI     H,ALTLCD_R+MAXCHRCOLUMN		;+28H
   14568/    45FB : 01 40 01                LXI     B,MAXCHRCOLUMN*MAXCHRROW	;0140H/320
   14569/    45FE : C3 DB 6B                JMP     R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 245 - 9/5/2025 20:20:35


   14570/    4601 :                     ;
   14571/    4601 :                     ; LCDrefresh -- Refresh LCD from LCD_R
   14572/    4601 :                     ;
   14573/    4601 :                     L_LCDrefresh:
   14574/    4601 : CD C5 73                CALL    L_BLINK_LCD					;Turn off background task, blink & reinitialize cursor blink time
   14575/    4604 :                     L_LCDrefresh_0:							;used by VT100inROM
   14576/    4604 : 2E 01                   MVI     L,01H						;row loop counter
   14577/    4606 :                     L_LCDrefresh_1:
   14578/    4606 : 26 01                   MVI     H,01H						;Column loop counter
   14579/    4608 : CD 12 45            -	CALL    R_GET_LCD_CHAR				;Get character at HL from LCD RAM in C, Rev Vid status in A
   14580/    460B : CD 66 45                CALL    R_CHAR_PLOT_6a				;draw char in C
   14581/    460E : 24                      INR     H							;next column
   14582/    460F : 7C                      MOV     A,H
   14583/    4610 : FE 29                   CPI     MAXCHRCOLUMN+1				;41	;Columns 1..40
   14584/    4612 : C2 08 46                JNZ     -
   14585/    4615 : 2C                      INR     L							;next row
   14586/    4616 : 7D                      MOV     A,L
   14587/    4617 : FE 09                   CPI     MAXCHRROW+1					;09H rows 1..8
   14588/    4619 : C2 06 46                JNZ     L_LCDrefresh_1
   14589/    461C : C3 3B 43                JMP     L_CHAR_PLOT_4_1
   14590/    461F :                     
   14591/    461F :                     L_ALTLCDrefresh:
   14592/    461F : 21 C0 FC                LXI     H,ALTLCD_R				    ;Start of Alt LCD character buffer
   14593/    4622 : 1E 01                   MVI     E,01H						;row 1..8
   14594/    4624 :                     L_ALTLCDrefresh_1:
   14595/    4624 : 16 01                   MVI     D,01H						;column 1..40
   14596/    4626 : E5                  -	PUSH    H							;save HL, DE
   14597/    4627 : D5                      PUSH    D
   14598/    4628 : 4E                      MOV     C,M							;load character from ALTLCD_R
   14599/    4629 : CD EE 73                CALL    R_CHAR_PLOT_7				;Character plotting level 7: Plot character in C on LCD at (HL)
   14600/    462C : D1                      POP     D							;restore DE, HL
   14601/    462D : E1                      POP     H
   14602/    462E : 23                      INX     H							;next
   14603/    462F : 14                      INR     D							;next column
   14604/    4630 : 7A                      MOV     A,D
   14605/    4631 : FE 29                   CPI     MAXCHRCOLUMN+1				;Column Overflow
   14606/    4633 : C2 26 46                JNZ     -
   14607/    4636 : 1C                      INR     E							;next row
   14608/    4637 : 7B                      MOV     A,E
   14609/    4638 : FE 09                   CPI     MAXCHRROW+1					;Row overflow
   14610/    463A : C2 24 46                JNZ     L_ALTLCDrefresh_1
   14611/    463D : C9                      RET
   14612/    463E :                     ;
   14613/    463E :                     ; Input and display line and store
   14614/    463E :                     ;
   14615/    463E :                     R_INP_DISP_LINE:						;463EH
   14616/    463E : 3E 3F                   MVI     A,'?'
   14617/    4640 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14618/    4641 : 3E 20                   MVI     A,' '
   14619/    4643 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14620/    4644 :                     ;
   14621/    4644 :                     ; Input and display (no "?") line and store
   14622/    4644 :                     ;
   14623/    4644 :                     R_INP_DISP_LINE_NO_Q:					;4644H
   14624/    4644 : CD 1A 42                CALL    L_TST_FCBLAST
   14625/    4647 : C2 03 47                JNZ     L_INP_FILE					;brif FCBLAST != 0
   14626/    464A : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   14627/    464D : 32 CA FA                STA     CSRXSVD_R					;saved Cursor column
   14628/    4650 : 11 85 F6                LXI     D,INPBUF_R				    ;Keyboard buffer
   14629/    4653 : 06 01                   MVI     B,01H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 246 - 9/5/2025 20:20:35


   14630/    4655 :                     ;
   14631/    4655 :                     ; Continuation function magic here
   14632/    4655 :                     ;
   14633/    4655 :                     L_INP_LINE_1:
   14634/    4655 : CD CB 12                CALL    R_WAIT_KEY				    ;Blocking wait for key from keyboard
   14635/    4658 : 21 55 46                LXI     H,L_INP_LINE_1				;push address continuation function
   14636/    465B : E5                      PUSH    H
   14637/    465C : D8                      RC									;brif no key, keep checking
   14638/    465D :                     ;
   14639/    465D :                     ; L_INP_LINE_1 now on the stack. A return will continue reading chars
   14640/    465D :                     ;
   14641/    465D : FE 7F                   CPI     7FH							;DEL key
   14642/    465F : CA A0 46                JZ      R_INP_BKSP_HANDLER       	;Input routine backspace), left arrow), CTRL-H handler
   14643/    4662 : FE 20                   CPI     ' '
   14644/    4664 : D2 CC 46                JNC     R_INP_HANDLER				;brif A >= ' '
   14645/    4667 : 21 6D 46            	LXI		H,R_KEY_VECTOR_LKUP_TBL-2	;Code Based. Load pointer to key vector table
   14646/    466A : 0E 07               	MVI		C,07H						;Seven entries in table
   14647/    466C : C3 78 43            	JMP		R_VECTORTBL_LOOKUP			;Key Vector table lookup
   14648/    466F :                     ;
   14649/    466F :                     R_KEY_VECTOR_LKUP_TBL:
   14650/    466F : 03                      DB      03H
   14651/    4670 : 84 46                   DW		R_INP_CTRL_C_HANDLER
   14652/    4672 : 08                      DB      08H
   14653/    4673 : A0 46                   DW		R_INP_BKSP_HANDLER
   14654/    4675 : 09                      DB      09H
   14655/    4676 : CA 46                   DW		R_INP_TAB_HANDLER
   14656/    4678 : 0D                      DB      0DH
   14657/    4679 : 96 46                   DW		R_INP_ENTER_HANDLER
   14658/    467B : 15                      DB      15H
   14659/    467C : C3 46                   DW		R_INP_CTRL_U_HANDLER
   14660/    467E : 18                      DB      18H
   14661/    467F : C3 46                   DW		R_INP_CTRL_U_HANDLER
   14662/    4681 : 1D                      DB      1DH
   14663/    4682 : A0 46                   DW		R_INP_BKSP_HANDLER
   14664/    4684 :                     ;
   14665/    4684 :                     ; Input routine Control-C handler
   14666/    4684 :                     ;
   14667/    4684 :                     R_INP_CTRL_C_HANDLER:				    ;4684H
   14668/    4684 : E1                      POP     H							;remove continue checking return address
   14669/    4685 : 3E 5E                   MVI     A,'^'
   14670/    4687 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14671/    4688 : 3E 43                   MVI     A,'C'
   14672/    468A : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14673/    468B : CD 22 42                CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
   14674/    468E : 21 85 F6                LXI     H,INPBUF_R				    ;Keyboard buffer
   14675/    4691 : 36 00                   MVI     M,00H
   14676/    4693 : 2B                      DCX     H
   14677/    4694 : 37                      STC
   14678/    4695 : C9                      RET
   14679/    4696 :                     ;
   14680/    4696 :                     ; Input routine ENTER handler
   14681/    4696 :                     ;
   14682/    4696 :                     ; IN:
   14683/    4696 :                     ;	DE		current Buffer ptr
   14684/    4696 :                     ;
   14685/    4696 :                     ; OUT:
   14686/    4696 :                     ;	HL		start Buffer ptr - 1
   14687/    4696 :                     ;
   14688/    4696 :                     R_INP_ENTER_HANDLER:				  	;4696H
   14689/    4696 : E1                      POP     H							;remove continue checking return address
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 247 - 9/5/2025 20:20:35


   14690/    4697 : CD 22 42                CALL    R_SEND_CRLF				  	;Send CRLF to screen or printer
   14691/    469A : AF                      XRA     A							;terminate buffer
   14692/    469B : 12                      STAX    D
   14693/    469C : 21 84 F6                LXI     H,INPBUF_R-1				;Keyboard buffer
   14694/    469F : C9                      RET
   14695/    46A0 :                     ;
   14696/    46A0 :                     ; Input routine backspace), left arrow), CTRL-H handler
   14697/    46A0 :                     ;
   14698/    46A0 :                     R_INP_BKSP_HANDLER:						;46A0H
   14699/    46A0 : 78                      MOV     A,B							;buffer counter
   14700/    46A1 : 3D                      DCR     A							;backup
   14701/    46A2 : 37                      STC									;set carry
   14702/    46A3 : C8                      RZ									;retif now empty
   14703/    46A4 : 05                      DCR     B							;backup counter
   14704/    46A5 : 1B                      DCX     D							;backup buffer ptr
   14705/    46A6 : CD D8 46                CALL    L_INP_DO_BKSP				;returns value in A
   14706/    46A9 : F5                  -	PUSH    PSW							;save A
   14707/    46AA : 3E 7F                   MVI     A,7FH						;DEL
   14708/    46AC : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14709/    46AD : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   14710/    46B0 : 2D                      DCR     L							;decrement both
   14711/    46B1 : 25                      DCR     H
   14712/    46B2 : 7C                      MOV     A,H
   14713/    46B3 : B5                      ORA     L
   14714/    46B4 : CA C0 46                JZ      +							;brif row & column are 0
   14715/    46B7 : 21 3A F6                LXI     H,CSRX_R				  	;Cursor column (1-40)
   14716/    46BA : F1                      POP     PSW							;restore A
   14717/    46BB : BE                      CMP     M
   14718/    46BC : C2 A9 46                JNZ     -
   14719/    46BF : C9                      RET
   14720/    46C0 :                     
   14721/    46C0 : F1                  +	POP     PSW							;cleanup stack
   14722/    46C1 : 37                      STC
   14723/    46C2 : C9                      RET
   14724/    46C3 :                     ;
   14725/    46C3 :                     ; Input routine CTRL-U & X handler
   14726/    46C3 :                     ;
   14727/    46C3 :                     R_INP_CTRL_U_HANDLER:				  	;46C3H
   14728/    46C3 : CD A0 46                CALL    R_INP_BKSP_HANDLER         	;Input routine backspace), left arrow), CTRL-H handler
   14729/    46C6 : D2 C3 46                JNC     R_INP_CTRL_U_HANDLER       	;Input routine CTRL-U & X handler
   14730/    46C9 : C9                      RET
   14731/    46CA :                     ;
   14732/    46CA :                     ; Input routine Tab handler
   14733/    46CA :                     ;
   14734/    46CA :                     R_INP_TAB_HANDLER:						;46CAH
   14735/    46CA : 3E 09                   MVI     A,09H
   14736/    46CC :                     ;
   14737/    46CC :                     ; Input routine handler
   14738/    46CC :                     ;
   14739/    46CC :                     ; IN:
   14740/    46CC :                     ;	A		key char
   14741/    46CC :                     ;	B		buffer count (0..255)
   14742/    46CC :                     ;	DE		buffer ptr
   14743/    46CC :                     ;
   14744/    46CC :                     R_INP_HANDLER:
   14745/    46CC : 04                      INR     B
   14746/    46CD : CA D4 46                JZ      +							;brif count overflow (256)
   14747/    46D0 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14748/    46D1 : 12                      STAX    D							;store in buffer
   14749/    46D2 : 13                      INX     D							;next buffer ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 248 - 9/5/2025 20:20:35


   14750/    46D3 : C9                      RET
   14751/    46D4 :                     ;
   14752/    46D4 :                     ; keyboard buffer Overflow
   14753/    46D4 :                     ;
   14754/    46D4 :                     ; IN:
   14755/    46D4 :                     ;	B		0
   14756/    46D4 :                     ;
   14757/    46D4 : 05                  +	DCR     B							;undo previous increment
   14758/    46D5 : C3 29 42                JMP     R_BEEP_STMT				    ;BEEP and return
   14759/    46D8 :                     ;
   14760/    46D8 :                     ; backspace
   14761/    46D8 :                     ;
   14762/    46D8 :                     ; IN:
   14763/    46D8 :                     ;	B		keyboard buffer counter
   14764/    46D8 :                     ;
   14765/    46D8 :                     L_INP_DO_BKSP:
   14766/    46D8 : C5                      PUSH    B
   14767/    46D9 : 3A CA FA                LDA     CSRXSVD_R					;saved Cursor column
   14768/    46DC : 05                      DCR     B
   14769/    46DD : CA 01 47                JZ      L_INP_DO_BKSP_1				;brif buffer counter == 0
   14770/    46E0 : 4F                      MOV     C,A							;saved CSRX_R
   14771/    46E1 : 21 85 F6                LXI     H,INPBUF_R					;Keyboard buffer ptr
   14772/    46E4 : 0C                  -	INR     C
   14773/    46E5 : 7E                      MOV     A,M
   14774/    46E6 : FE 09                   CPI     09H							;TAB
   14775/    46E8 : C2 F2 46                JNZ     +
   14776/    46EB :                     ; key is TAB
   14777/    46EB : 79                      MOV     A,C
   14778/    46EC : 3D                      DCR     A
   14779/    46ED : E6 07                   ANI     07H							;mod 8
   14780/    46EF : C2 E4 46                JNZ     -							;brif result != 0
   14781/    46F2 : 3A 3C F6            +	LDA     LINWDT_R					;Active columns count (1-40)
   14782/    46F5 : B9                      CMP     C
   14783/    46F6 : D2 FB 46                JNC     +							;brif LINWDT_R >= C
   14784/    46F9 : 0E 01                   MVI     C,01H
   14785/    46FB : 23                  +	INX     H							;keyboard buffer ptr
   14786/    46FC : 05                      DCR     B							;keyboard buffer counter
   14787/    46FD : C2 E4 46                JNZ     -							;brif keyboard buffer counter != 0
   14788/    4700 : 79                      MOV     A,C
   14789/    4701 :                     L_INP_DO_BKSP_1:
   14790/    4701 : C1                      POP     B
   14791/    4702 : C9                      RET
   14792/    4703 :                     
   14793/    4703 :                     L_INP_FILE:
   14794/    4703 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   14795/    4706 : E5                      PUSH    H							;save FCB ptr
   14796/    4707 : 23                      INX     H							;to Device code in FCB
   14797/    4708 : 23                      INX     H
   14798/    4709 : 23                      INX     H
   14799/    470A : 23                      INX     H
   14800/    470B : 7E                      MOV     A,M							;get device code
   14801/    470C : D6 F8                   SUI     RAM_DEV						;0F8H
   14802/    470E : C2 28 47                JNZ     +							;brif !RAM_DEV
   14803/    4711 :                     ;
   14804/    4711 :                     ; FCBLAST_R was RAM_DEV. A now 0
   14805/    4711 :                     ;
   14806/    4711 : 6F                      MOV     L,A
   14807/    4712 : 67                      MOV     H,A
   14808/    4713 : 22 8C FC                SHLD    FCBLAST_R					;Clear FCB ptr for the last file used (2 bytes)
   14809/    4716 : 21 C4 FA                LXI     H,DOFILPTR_R				;increment [DOFILPTR_R]
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 249 - 9/5/2025 20:20:35


   14810/    4719 : 34                      INR     M
   14811/    471A : 7E                      MOV     A,M							;get it
   14812/    471B : 0F                      RRC									;bit 0 to carry
   14813/    471C : D4 69 42                CNC     R_INV_CHAR_ENABLE			;calif no carry: Start inverse character mode
   14814/    471F : 21 93 55                LXI     H,L_NEWLINE_MSG				;Code Based.
   14815/    4722 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   14816/    4725 : CD 6E 42                CALL    R_INV_CHAR_DISABLE         	;Cancel inverse character mode
   14817/    4728 : E1                  +	POP     H							;restore FCB ptr
   14818/    4729 : 22 8C FC                SHLD    FCBLAST_R					;restore FCB ptr for the last file used (2 bytes)
   14819/    472C : 06 00                   MVI     B,00H						;count 256
   14820/    472E : 21 85 F6                LXI     H,INPBUF_R				  	;Keyboard buffer
   14821/    4731 : AF                  -	XRA     A
   14822/    4732 : 32 A2 FA                STA     FILNUM_R					;clear FILNUM_R (2 bytes)
   14823/    4735 : 32 A3 FA                STA     FILNUM_R+1
   14824/    4738 : CD 7A 4E                CALL    L_DEV_INPUT
   14825/    473B : DA 59 47                JC      L_INP_FILE_2				;brif error
   14826/    473E : 77                      MOV     M,A
   14827/    473F : FE 0D                   CPI     0DH
   14828/    4741 : CA 53 47                JZ      L_INP_FILE_1				;brif CR
   14829/    4744 : FE 09                   CPI     09H
   14830/    4746 : CA 4E 47                JZ      +							;brif TAB
   14831/    4749 : FE 20                   CPI     ' '
   14832/    474B : DA 31 47                JC      -							;brif < ' ': loop
   14833/    474E :                     ;TAB
   14834/    474E : 23                  +	INX     H							;next buffer ptr
   14835/    474F : 05                      DCR     B							;count
   14836/    4750 : C2 31 47                JNZ     -							;brif B != 0
   14837/    4753 :                     L_INP_FILE_1:								;CR
   14838/    4753 : AF                      XRA     A							;terminate buffer
   14839/    4754 : 77                      MOV     M,A
   14840/    4755 : 21 84 F6                LXI     H,INPBUF_R-1				;Keyboard buffer
   14841/    4758 : C9                      RET
   14842/    4759 :                     L_INP_FILE_2:
   14843/    4759 : 78                      MOV     A,B							;count
   14844/    475A : A7                      ANA     A							;test
   14845/    475B : C2 53 47                JNZ     L_INP_FILE_1				;brif B != 0
   14846/    475E : 3A A7 FC                LDA     OPNFIL_R
   14847/    4761 : E6 80                   ANI     80H							;set bit 7
   14848/    4763 : 32 A7 FC                STA     OPNFIL_R
   14849/    4766 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   14850/    4769 : 3E 0D                   MVI     A,0DH						;CR
   14851/    476B : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   14852/    476C : CD 5D 42                CALL    R_ERASE_TO_EOL				;Erase from cursor to end of line
   14853/    476F : 3A 92 FC                LDA     EXCFLG_R
   14854/    4772 : A7                      ANA     A
   14855/    4773 : CA 7C 47                JZ      L_INP_FILE_3
   14856/    4776 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
   14857/    4779 : C3 04 08                JMP     L_NEWSTT					;Execute BASIC program
   14858/    477C :                     
   14859/    477C :                     L_INP_FILE_3:
   14860/    477C : 3A 51 F6                LDA     EDITFLG_R
   14861/    477F : A7                      ANA     A
   14862/    4780 : C2 BA 5E                JNZ     L_EDIT_MODE_3
   14863/    4783 : C3 01 05                JMP     R_POP_GO_BASIC_RDY         	;Pop stack and vector to BASIC ready
   14864/    4786 :                     
   14865/    4786 :                     L_DIM_CONT_FUN:
   14866/    4786 : 2B                      DCX     H							;backup text ptr
   14867/    4787 : (MACRO)                 CHRGET								;Get next non-white char from M
   14868/    4788 : C8                      RZ									;retif end of line
   14869/    4789 : (MACRO)             	SYNCHK	','
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 250 - 9/5/2025 20:20:35


   14870/    478B :                     ;
   14871/    478B :                     ; DIM statement
   14872/    478B :                     ;
   14873/    478B :                     R_DIM_STMT:								;478BH
   14874/    478B : 01 86 47                LXI     B,L_DIM_CONT_FUN			;continuation function
   14875/    478E : C5                      PUSH    B
   14876/    478F : (MACRO)             	SKIP_XRA_A							;ORI 0AFH. A != 0
   14877/    4790 :                     ;
   14878/    4790 :                     ; Find address of variable at M and store in DE
   14879/    4790 :                     ;
   14880/    4790 :                     R_FIND_VAR_ADDR:						;4790H
   14881/    4790 : AF                      XRA     A
   14882/    4791 : 32 64 FB                STA     CRELOC_R					;set Variable Create/Locate switch: != 0 => DIM
   14883/    4794 : 4E                      MOV     C,M							;first char of variable to C
   14884/    4795 : CD F1 40                CALL    R_ISLET_M				  	;Check if M is alpha character
   14885/    4798 : DA 46 04                JC      R_GEN_SN_ERROR				;brif not letter: Generate Syntax error
   14886/    479B : AF                      XRA     A
   14887/    479C : 47                      MOV     B,A							;clear A
   14888/    479D : (MACRO)                 CHRGET								;Get next non-white char from M. Carry set means numeric.
   14889/    479E : DA A7 47                JC      +							;brif numeric
   14890/    47A1 : CD F2 40                CALL    R_ISLET					  	;Check if A is alpha character
   14891/    47A4 : DA B2 47                JC      L_FIND_ADDR_1				;brif not letter
   14892/    47A7 : 47                  +	MOV     B,A							;save second char of variable
   14893/    47A8 : (MACRO)             -	CHRGET								;Get next non-white char from M
   14894/    47A9 : DA A8 47                JC      -							;brif numeric: skip
   14895/    47AC : CD F2 40                CALL    R_ISLET				  		;Check if A is alpha character
   14896/    47AF : D2 A8 47                JNC     -							;brif letter: skip
   14897/    47B2 :                     L_FIND_ADDR_1:
   14898/    47B2 : FE 26                   CPI     '&'							;26H
   14899/    47B4 : D2 CE 47                JNC     +							;brif char >= '&'
   14900/    47B7 : 11 DC 47                LXI     D,L_FIND_ADDR_2				;continuation function
   14901/    47BA : D5                      PUSH    D
   14902/    47BB : 16 02                   MVI     D,02H						;preset type to integer
   14903/    47BD : FE 25                   CPI     '%'							;25H
   14904/    47BF : C8                      RZ									;to continuation function
   14905/    47C0 : 14                      INR     D							;preset type to STRING
   14906/    47C1 : FE 24                   CPI     '$'
   14907/    47C3 : C8                      RZ									;to continuation function
   14908/    47C4 : 14                      INR     D							;preset type to SNGL
   14909/    47C5 : FE 21                   CPI     '!'
   14910/    47C7 : C8                      RZ 									;to continuation function
   14911/    47C8 : 16 08                   MVI     D,08H						;preset type to DBL
   14912/    47CA : FE 23                   CPI     '#'
   14913/    47CC : C8                      RZ									;to continuation function     
   14914/    47CD : F1                      POP     PSW							;remove continuation function
   14915/    47CE : 79                  +	MOV     A,C							;first character
   14916/    47CF : E6 7F                   ANI     7FH							;01111111
   14917/    47D1 : 5F                      MOV     E,A							;zero extend char to DE
   14918/    47D2 : 16 00                   MVI     D,00H
   14919/    47D4 : E5                      PUSH    H							;save text ptr
   14920/    47D5 : 21 79 FB                LXI     H,DEFTBL_R-41H				;DEFTBL_R start - 'A'
   14921/    47D8 : 19                      DAD     D							;index
   14922/    47D9 : 56                      MOV     D,M							;get default type
   14923/    47DA : E1                      POP     H							;restore text ptr
   14924/    47DB : 2B                      DCX     H							;backup
   14925/    47DC :                     ; Continuation function
   14926/    47DC :                     L_FIND_ADDR_2:
   14927/    47DC : 7A                      MOV     A,D							;get type
   14928/    47DD : 32 65 FB                STA     VALTYP_R					;Store Type of last expression used
   14929/    47E0 : (MACRO)                 CHRGET								;Get next non-white char from M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 251 - 9/5/2025 20:20:35


   14930/    47E1 : 3A 96 FB                LDA     SUBFLG_R					;DONT RECOGNIZE SUBSCRIPTED VARIABLES flag
   14931/    47E4 : 3D                      DCR     A							;test
   14932/    47E5 : CA BC 48                JZ      L_NO_SUBSCRIPT				;brif SUBFLG_R==1
   14933/    47E8 : F2 F6 47                JP      +							;brif SUBFLG_R > 1
   14934/    47EB : 7E                      MOV     A,M							;next char
   14935/    47EC : D6 28                   SUI     '('							;28H
   14936/    47EE : CA 8D 48                JZ      L_SUBSCRIPT					;brif subscript
   14937/    47F1 : D6 33                   SUI     '['-'('						;33H
   14938/    47F3 : CA 8D 48                JZ      L_SUBSCRIPT					;brif subscript
   14939/    47F6 :                     ; no subscript
   14940/    47F6 : AF                  +	XRA     A
   14941/    47F7 : 32 96 FB                STA     SUBFLG_R					;clear DONT RECOGNIZE SUBSCRIPTED VARIABLES flag
   14942/    47FA : E5                      PUSH    H							;save text ptr
   14943/    47FB : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
   14944/    47FE : C3 1A 48                JMP     L_FIND_ADDR_4				;start search at end of variables test
   14945/    4801 :                     ;
   14946/    4801 :                     ; DE points to Variable Descriptors
   14947/    4801 :                     ; BC has first 2 chars of variable
   14948/    4801 :                     ; Text Ptr on Stack
   14949/    4801 :                     ;
   14950/    4801 :                     L_FIND_ADDR_3:
   14951/    4801 : 1A                      LDAX    D							;get 2 bytes from *DE++ into L & A
   14952/    4802 : 6F                      MOV     L,A							;get type into L
   14953/    4803 : 13                      INX     D
   14954/    4804 : 1A                      LDAX    D							;get first char into A
   14955/    4805 : 13                      INX     D
   14956/    4806 : B9                      CMP     C							;compare first char
   14957/    4807 : C2 16 48                JNZ     +							;brif chars don't match
   14958/    480A : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   14959/    480D : BD                      CMP     L
   14960/    480E : C2 16 48                JNZ     +							;brif types don't match
   14961/    4811 : 1A                      LDAX    D							;get second char *DE
   14962/    4812 : B8                      CMP     B
   14963/    4813 : CA 76 48                JZ      L_FIND_ADDR_9				;brif chars and type match
   14964/    4816 : 13                  +	INX     D							;next
   14965/    4817 : 26 00                   MVI     H,00H						;zero extend type to HL
   14966/    4819 : 19                      DAD     D							;point to next variable descriptor
   14967/    481A :                     ; Entry point
   14968/    481A :                     ; HL = variable descriptor ptr
   14969/    481A :                     ; Check for end of variable descriptors table
   14970/    481A :                     L_FIND_ADDR_4:
   14971/    481A : EB                      XCHG								;next variable descriptor ptr to DE
   14972/    481B : 3A B4 FB                LDA     ARYTAB_R					;array table pointer
   14973/    481E : BB                      CMP     E
   14974/    481F : C2 01 48                JNZ     L_FIND_ADDR_3				;brif different: loop
   14975/    4822 : 3A B5 FB                LDA     ARYTAB_R+1					;0FBB5H
   14976/    4825 : BA                      CMP     D
   14977/    4826 : C2 01 48                JNZ     L_FIND_ADDR_3				;brif different: loop
   14978/    4829 : C3 35 48                JMP     L_FIND_ADDR_8				;next variable descriptor ptr == *ARYTAB_R
   14979/    482C :                     
   14980/    482C :                     L_FIND_ADDR_5:
   14981/    482C : CD 90 47                CALL    R_FIND_VAR_ADDR				;Find address of variable at M and store in DE
   14982/    482F :                     L_FIND_ADDR_6:
   14983/    482F : C9                      RET
   14984/    4830 :                     ;
   14985/    4830 :                     ; HL holds continuation address L_FIND_ADDR_6:
   14986/    4830 :                     ;	R_FIND_VAR_ADDR() called from L_FIND_ADDR_5
   14987/    4830 :                     ; 2 items on stack
   14988/    4830 :                     ; A == 0
   14989/    4830 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 252 - 9/5/2025 20:20:35


   14990/    4830 :                     ; OUT:
   14991/    4830 :                     ;	DE		ptr to Variable Descriptor
   14992/    4830 :                     ;
   14993/    4830 :                     L_FIND_ADDR_7:
   14994/    4830 : 57                      MOV     D,A							;Clear DE: no variable descriptor ptr
   14995/    4831 : 5F                      MOV     E,A
   14996/    4832 : C1                      POP     B							;remove saved DE				
   14997/    4833 : E3                      XTHL								;Text Ptr to HL, L_FIND_ADDR_6 on stack
   14998/    4834 : C9                      RET									;to L_FIND_ADDR_6
   14999/    4835 :                     ;
   15000/    4835 :                     ; variable not found. Add new Variable Descriptor
   15001/    4835 :                     ; DE is [ARYTAB_R]
   15002/    4835 :                     ; JMPed to, not called.
   15003/    4835 :                     ; Text Ptr on Stack
   15004/    4835 :                     ;
   15005/    4835 :                     L_FIND_ADDR_8:
   15006/    4835 :                     ; get value under TOS (return address) to HL
   15007/    4835 : E1                      POP     H							;restore Txt Ptr
   15008/    4836 : E3                      XTHL								;Txt Ptr to stack. Return address to HL
   15009/    4837 : D5                      PUSH    D							;save [ARYTAB_R]
   15010/    4838 :                     ; did we come from L_FIND_ADDR_5?
   15011/    4838 : 11 2F 48                LXI     D,L_FIND_ADDR_6				;"RET" code at L_FIND_ADDR_5 call
   15012/    483B : (MACRO)                 COMPAR								;HL - DE
   15013/    483C : CA 30 48                JZ      L_FIND_ADDR_7				;brif match. A == 0
   15014/    483F :                     ; did we come from R_ISVAR?
   15015/    483F : 11 DD 0F                LXI     D,L_ISVAR_1					;return address if called from R_ISVAR()
   15016/    4842 : (MACRO)                 COMPAR								;HL - DE
   15017/    4843 : D1                      POP     D							;restore [ARYTAB_R]
   15018/    4844 : CA 79 48                JZ      L_CLEAR_FAC1				;brif called from R_ISVAR(). A==0
   15019/    4847 : E3                      XTHL								;swap HL and [SP]		
   15020/    4848 : E5                      PUSH    H							;push previous [SP]
   15021/    4849 : C5                      PUSH    B
   15022/    484A : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   15023/    484D : 4F                      MOV     C,A							;type to C
   15024/    484E : C5                      PUSH    B							;save BC
   15025/    484F : 06 00                   MVI     B,00H						;zero extend C to BC
   15026/    4851 : 03                      INX     B							;BC += 3: size of variable descriptor
   15027/    4852 : 03                      INX     B
   15028/    4853 : 03                      INX     B
   15029/    4854 : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer
   15030/    4857 : E5                      PUSH    H							;save Unused memory pointer
   15031/    4858 : 09                      DAD     B							;add TYPE+3 (size, 2 chars, type) to Unused memory pointer
   15032/    4859 : C1                      POP     B							;restore BC
   15033/    485A : E5                      PUSH    H							;save new Unused memory pointer
   15034/    485B : CD F0 3E                CALL    L_CPY_BC_TO_HL_CHK			;Copy data from BC to HL down until BC == DE w/ check
   15035/    485E : E1                      POP     H							;restore new Unused memory pointer
   15036/    485F : 22 B6 FB                SHLD    STRGEND_R					;update Unused memory pointer
   15037/    4862 : 60                      MOV     H,B							;HL = BC
   15038/    4863 : 69                      MOV     L,C
   15039/    4864 : 22 B4 FB                SHLD    ARYTAB_R					;New ptr to Start of array table
   15040/    4867 :                     ;
   15041/    4867 :                     ; HL is ptr beyond Variable descriptor
   15042/    4867 :                     ; DE is ptr to Variable descriptor
   15043/    4867 :                     ; Clear Variable descriptor
   15044/    4867 :                     ; Variable type and name on stack
   15045/    4867 :                     ;
   15046/    4867 : 2B                  -	DCX     H
   15047/    4868 : 36 00                   MVI     M,00H
   15048/    486A : (MACRO)                 COMPAR								;HL - DE
   15049/    486B : C2 67 48                JNZ     -
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 253 - 9/5/2025 20:20:35


   15050/    486E :                     ; HL now points to new Variable Desciptor
   15051/    486E : D1                      POP     D							;restore Type
   15052/    486F : 73                      MOV     M,E							;store E at M: Type
   15053/    4870 : 23                      INX     H
   15054/    4871 : D1                      POP     D							;restore Name
   15055/    4872 : 73                      MOV     M,E							;store DE at M: variable name
   15056/    4873 : 23                      INX     H
   15057/    4874 : 72                      MOV     M,D
   15058/    4875 : EB                      XCHG		
   15059/    4876 :                     L_FIND_ADDR_9:							;tail merging
   15060/    4876 : 13                      INX     D							;point to Variable Value
   15061/    4877 : E1                      POP     H							;restore text ptr
   15062/    4878 : C9                      RET
   15063/    4879 :                     ;
   15064/    4879 :                     ; HL holds intercepted return address L_ISVAR_1
   15065/    4879 :                     ; 1 item on stack
   15066/    4879 :                     ; A == 0
   15067/    4879 :                     ; R_FIND_VAR_ADDR() called from R_ISVAR()
   15068/    4879 :                     ;
   15069/    4879 :                     L_CLEAR_FAC1:
   15070/    4879 : 32 18 FC                STA     DFACLO_R					;Clear FAC1
   15071/    487C : 67                      MOV     H,A							;Clear HL
   15072/    487D : 6F                      MOV     L,A
   15073/    487E : 22 1A FC                SHLD    IFACLO_R					;Clear FAC1 for integers
   15074/    4881 : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   15075/    4882 : C2 8B 48                JNZ     +							;brif !STRING type
   15076/    4885 : 21 F5 03                LXI     H,R_NULL_MSG				;Code Based. 
   15077/    4888 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   15078/    488B : E1                  +	POP     H							;restore text ptr
   15079/    488C : C9                      RET
   15080/    488D :                     ;
   15081/    488D :                     ; subscript found
   15082/    488D :                     ;
   15083/    488D :                     ; IN:
   15084/    488D :                     ;	A		== 0
   15085/    488D :                     ;
   15086/    488D :                     L_SUBSCRIPT:
   15087/    488D : E5                      PUSH    H							;save text ptr
   15088/    488E :                     ; CRELOC_R != 0 => DIM
   15089/    488E : 2A 64 FB                LHLD    CRELOC_R					;Variable Create/Locate switch (L) + VALTYP_R (H)
   15090/    4891 : E3                      XTHL								;swap text ptr and just loaded HL
   15091/    4892 : 57                      MOV     D,A							;subscripts counter
   15092/    4893 :                     ; push subscript values on the stack
   15093/    4893 :                     L_MULTIDIM:								;multi-dimensional loop start
   15094/    4893 : D5                      PUSH    D							;save count
   15095/    4894 : C5                      PUSH    B							;save BC
   15096/    4895 : CD D6 08                CALL    L_EVAL_POS_EXPR_PREINC		;get char & Evaluate positive expression at M-1 to DE
   15097/    4898 : C1                      POP     B							;restore BC
   15098/    4899 : F1                      POP     PSW							;restore count from DE to A
   15099/    489A : EB                      XCHG								;expression result to HL, txt ptr to DE
   15100/    489B : E3                      XTHL								;swap [SP] & HL
   15101/    489C : E5                      PUSH    H							;Variable Create/Locate switch (L) + VALTYP_R (H)
   15102/    489D : EB                      XCHG								;txt ptr back to HL
   15103/    489E : 3C                      INR     A							;increment subscripts count
   15104/    489F : 57                      MOV     D,A							;store in D
   15105/    48A0 : 7E                      MOV     A,M							;next char
   15106/    48A1 : FE 2C                   CPI     ','
   15107/    48A3 : CA 93 48                JZ      L_MULTIDIM					;brif multi-dimensional
   15108/    48A6 : FE 29                   CPI     ')'
   15109/    48A8 : CA B0 48                JZ      +							;brif end of subscripts found
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 254 - 9/5/2025 20:20:35


   15110/    48AB : FE 5D                   CPI     ']'
   15111/    48AD : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
   15112/    48B0 :                     ;
   15113/    48B0 :                     ; D contains subscripts counter. subscript expressions on stack
   15114/    48B0 :                     ; above Variable Create/Locate switch (L) + VALTYP_R (H)
   15115/    48B0 :                     ;
   15116/    48B0 : (MACRO)             +	CHRGET								;Get next non-white char from M
   15117/    48B1 : 22 A8 FB                SHLD    TEMP2_R					;save txt ptr
   15118/    48B4 : E1                      POP     H							;Variable Create/Locate switch (L) + VALTYP_R (H)
   15119/    48B5 : 22 64 FB                SHLD    CRELOC_R					;store it. TODO Apparently CRELOC_R could change
   15120/    48B8 : 1E 00                   MVI     E,00H						;zero extend subscripts counter
   15121/    48BA : D5                      PUSH    D							;save subscripts count
   15122/    48BB : (MACRO)             	SKIP_2BYTES_INST_DE					;skip PUSH H & PUSH PSW
   15123/    48BC :                     ;
   15124/    48BC :                     ; No subscript allowed entry point (DONT RECOGNIZE SUBSCRIPTED VARIABLES == 1)
   15125/    48BC :                     ;
   15126/    48BC :                     L_NO_SUBSCRIPT:
   15127/    48BC : E5                      PUSH    H							;txt ptr
   15128/    48BD : F5                      PUSH    PSW
   15129/    48BE : 2A B4 FB                LHLD    ARYTAB_R					;ptr to Start of array table
   15130/    48C1 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH. Skip DAD D first time through loop
   15131/    48C2 :                     L_SUBSCRIPT_1:
   15132/    48C2 : 19                      DAD     D							;index ARYTAB ptr + 
   15133/    48C3 : EB                      XCHG
   15134/    48C4 : 2A B6 FB                LHLD    STRGEND_R					;load Unused memory pointer to DE
   15135/    48C7 : EB                      XCHG
   15136/    48C8 : (MACRO)                 COMPAR								;Compare Unused memory pointer and ARYTAB ptr: HL - DE
   15137/    48C9 : CA FC 48                JZ      L_SUBSCRIPT_2				;brif ARYTAB ptr == Unused memory pointer: no Arrays yet
   15138/    48CC :                     ; Add to array space
   15139/    48CC : 5E                      MOV     E,M							;get VALTYP_R to E
   15140/    48CD : 23                      INX     H							;next
   15141/    48CE : 7E                      MOV     A,M							;get first letter name to A
   15142/    48CF : 23                      INX     H							;to second letter
   15143/    48D0 : B9                      CMP     C							;first letter existing array and new array match?
   15144/    48D1 : C2 DD 48                JNZ     +							;brif A != C
   15145/    48D4 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   15146/    48D7 : BB                      CMP     E							;compare with VARTAB_R of existing array
   15147/    48D8 : C2 DD 48                JNZ     +							;brif VALTYP_R != E
   15148/    48DB : 7E                      MOV     A,M							;get second letter existing variable to A
   15149/    48DC : B8                      CMP     B							;second letter existing array and new array match?
   15150/    48DD : 23                  +	INX     H							;next
   15151/    48DE : (MACRO)             	GETDEFROMM							;get extended size. flags unaffected. Used to find next array
   15152/    48E2 : C2 C2 48                JNZ     L_SUBSCRIPT_1				;brif second letter does not match: check next array
   15153/    48E5 :                     ; names and type match. Invalid if declaring an array (DIM)
   15154/    48E5 : 3A 64 FB                LDA     CRELOC_R					;Variable Create/Locate switch
   15155/    48E8 : B7                      ORA     A
   15156/    48E9 : C2 4F 04                JNZ     R_GEN_DD_ERROR				;brif switch set: Generate Double dimensioned array error
   15157/    48EC : F1                      POP     PSW							;subscripts count current variable
   15158/    48ED : 44                      MOV     B,H							;BC = HL
   15159/    48EE : 4D                      MOV     C,L
   15160/    48EF : CA 3E 38                JZ      L_POP_HL					;brif Z: POP txt ptr & return
   15161/    48F2 : 96                      SUB     M							;subscripts count existing variable
   15162/    48F3 : CA 5A 49                JZ      L_SUBSCRIPT_5				;brif A - subscripts count == 0
   15163/    48F6 :                     L_GEN_ERR_9:
   15164/    48F6 : 11 09 00                LXI     D,0009H
   15165/    48F9 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 9
   15166/    48FC :                     ;
   15167/    48FC :                     ; Add an array variable. subscripts count on stack
   15168/    48FC :                     ;
   15169/    48FC :                     ; HL == ARYTAB ptr, DE == Unused memory pointer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 255 - 9/5/2025 20:20:35


   15170/    48FC :                     ;
   15171/    48FC :                     ; Layout:	VALTYP_R			1 byte
   15172/    48FC :                     ;			variable name		2 bytes
   15173/    48FC :                     ;			size + 1 + 2 count	2 bytes. Helps finding end of array variable
   15174/    48FC :                     ;			subscripts count	1 byte
   15175/    48FC :                     ;			dimension			2 bytes:  subscripts count times
   15176/    48FC :                     ;			data				type size * dimension 1 * dimension 2...
   15177/    48FC :                     ;
   15178/    48FC :                     L_SUBSCRIPT_2:
   15179/    48FC : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   15180/    48FF : 77                      MOV     M,A							;store				
   15181/    4900 : 23                      INX     H							;next
   15182/    4901 : 5F                      MOV     E,A							;sign extend VALTYP_R to DE: size of each entry
   15183/    4902 : 16 00                   MVI     D,00H
   15184/    4904 : F1                      POP     PSW							;subscripts count count. TODO no flags!
   15185/    4905 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
   15186/    4908 : 71                      MOV     M,C							;store variable name
   15187/    4909 : 23                      INX     H
   15188/    490A : 70                      MOV     M,B
   15189/    490B : 23                      INX     H
   15190/    490C : 4F                      MOV     C,A							;save subscripts count
   15191/    490D : CD FF 3E                CALL    R_GETSTK					;Test for C units free in stack space
   15192/    4910 : 23                      INX     H							;reserve 2 bytes
   15193/    4911 : 23                      INX     H
   15194/    4912 : 22 8E FB                SHLD    TEMP3_R						;save ARYTAB ptr
   15195/    4915 : 71                      MOV     M,C							;store subscripts count
   15196/    4916 : 23                      INX     H							;next
   15197/    4917 : 3A 64 FB                LDA     CRELOC_R					;Variable Create/Locate switch
   15198/    491A : 17                      RAL									;Bit 7 to carry. Preserve during next loop.
   15199/    491B : 79                      MOV     A,C							;loop count
   15200/    491C :                     L_SUBSCRIPT_3:
   15201/    491C : 01 0B 00                LXI     B,000BH						;preset 11: default array size
   15202/    491F : D2 24 49                JNC     +							;brif CRELOC_R was 0: no dimensions on stack
   15203/    4922 : C1                      POP     B							;dimension on stack
   15204/    4923 : 03                      INX     B							;actual range is 1 larger
   15205/    4924 : 71                  +	MOV     M,C							;store dimension
   15206/    4925 : F5                      PUSH    PSW							;save loop counter
   15207/    4926 : 23                      INX     H
   15208/    4927 : 70                      MOV     M,B
   15209/    4928 : 23                      INX     H
   15210/    4929 : CD D8 36                CALL    L_INT16_MUL					;multiply DE (ACCUMULATED entry size) and BC to DE
   15211/    492C :                     ; DE is now accumulated array size
   15212/    492C : F1                      POP     PSW							;restore loop counter
   15213/    492D : 3D                      DCR     A							;count. carry unaffected
   15214/    492E : C2 1C 49                JNZ     L_SUBSCRIPT_3				;brif not done
   15215/    4931 : F5                      PUSH    PSW							;save carry (CRELOC_R). A == 0
   15216/    4932 : 42                      MOV     B,D							;BC now array size
   15217/    4933 : 4B                      MOV     C,E
   15218/    4934 : EB                      XCHG								;multiplication result to HL, ARYTAB_R ptr to DE
   15219/    4935 : 19                      DAD     D							;HL += DE
   15220/    4936 : DA 17 3F                JC      L_OUTOFMEMORY				;brif overflow (way overflow)
   15221/    4939 : CD 08 3F                CALL    R_GETSTK2					;Test HL against stack space for collision
   15222/    493C : 22 B6 FB                SHLD    STRGEND_R					;update unused memory pointer
   15223/    493F :                     ;
   15224/    493F :                     ; Clear array data until HL == ARYTAB_R ptr
   15225/    493F :                     ;
   15226/    493F : 2B                  -	DCX     H
   15227/    4940 : 36 00                   MVI     M,00H
   15228/    4942 : (MACRO)                 COMPAR								;HL - DE
   15229/    4943 : C2 3F 49                JNZ     -
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 256 - 9/5/2025 20:20:35


   15230/    4946 : 03                      INX     B							;increment array size 
   15231/    4947 : 57                      MOV     D,A							;prepare zero extend subscripts count
   15232/    4948 : 2A 8E FB                LHLD    TEMP3_R						;restore ARYTAB_R ptr to subscripts count
   15233/    494B : 5E                      MOV     E,M							;get subscripts count
   15234/    494C : EB                      XCHG								;to HL. ARYTAB_R ptr to subscripts count to DE
   15235/    494D : 29                      DAD     H							;double it
   15236/    494E : 09                      DAD     B							;add incremented array size
   15237/    494F : EB                      XCHG								;to DE. ARYTAB_R ptr to subscripts count to HL
   15238/    4950 : 2B                      DCX     H							;ptr to reserved space
   15239/    4951 : 2B                      DCX     H
   15240/    4952 : 73                      MOV     M,E							;store incremented array size + 2 * subscripts count
   15241/    4953 : 23                      INX     H							;this value is used to find the next array
   15242/    4954 : 72                      MOV     M,D
   15243/    4955 : 23                      INX     H
   15244/    4956 : F1                      POP     PSW							;restore carry (CRELOC_R = CREate or LOCate)
   15245/    4957 : DA 8D 49                JC      L_SUBSCRIPT_7				;brif declaration: load TEMP2_R & return
   15246/    495A :                     ;
   15247/    495A :                     ; Locate array
   15248/    495A :                     ; HL points to subscripts count in array
   15249/    495A :                     ; Data on stack
   15250/    495A :                     ;
   15251/    495A :                     L_SUBSCRIPT_5:							;A == 0 entry point
   15252/    495A : 47                      MOV     B,A							;start with BC == 0
   15253/    495B : 4F                      MOV     C,A
   15254/    495C : 7E                      MOV     A,M							;subscripts count
   15255/    495D : 23                      INX     H							;ptr to dimensions
   15256/    495E : (MACRO)             	SKIP_BYTE_INST_D
   15257/    495F :                     ; subscripts loop
   15258/    495F : E1                  -	POP     H							;array index ptr
   15259/    4960 : (MACRO)             	GETDEFROMM							;get dimension to DE
   15260/    4964 : E3                      XTHL								;swap dimension ptr and [SP]
   15261/    4965 : F5                      PUSH    PSW							;save subscripts count
   15262/    4966 : (MACRO)                 COMPAR								;Compare dimension and array index: HL - DE
   15263/    4967 : D2 F6 48                JNC     L_GEN_ERR_9					;brif HL >= DE: Generate error 9
   15264/    496A : CD D8 36                CALL    L_INT16_MUL					;multiply DE and BC to DE
   15265/    496D : 19                      DAD     D							;Add to HL
   15266/    496E : F1                      POP     PSW							;restore subscripts count
   15267/    496F : 3D                      DCR     A							;count down
   15268/    4970 : 44                      MOV     B,H							;update BC
   15269/    4971 : 4D                      MOV     C,L
   15270/    4972 : C2 5F 49                JNZ     -							;brif more subscripts
   15271/    4975 : 3A 65 FB                LDA     VALTYP_R					;Type of last expression used
   15272/    4978 : 44                      MOV     B,H							;BC = HL
   15273/    4979 : 4D                      MOV     C,L
   15274/    497A : 29                      DAD     H							;X2
   15275/    497B : D6 04                   SUI     04H							;SNGL type?
   15276/    497D : DA 85 49                JC      +							;brif type < SNGL: INT or STR
   15277/    4980 :                     ; type now >= SNGL
   15278/    4980 : 29                      DAD     H							;X4 flags not affected
   15279/    4981 : CA 8A 49                JZ      L_SUBSCRIPT_6				;brif type == SNGL
   15280/    4984 : 29                      DAD     H							;X8 flags not affected
   15281/    4985 : B7                  +	ORA     A
   15282/    4986 : E2 8A 49                JPO     L_SUBSCRIPT_6				;brif A >= 0
   15283/    4989 : 09                      DAD     B							;HL += BC
   15284/    498A :                     L_SUBSCRIPT_6:
   15285/    498A : C1                      POP     B							;restore BC
   15286/    498B : 09                      DAD     B							;HL += BC
   15287/    498C : EB                      XCHG								;result to DE
   15288/    498D :                     L_SUBSCRIPT_7:
   15289/    498D : 2A A8 FB                LHLD    TEMP2_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 257 - 9/5/2025 20:20:35


   15290/    4990 : C9                      RET
   15291/    4991 :                     ;
   15292/    4991 :                     ; USING function
   15293/    4991 :                     ;
   15294/    4991 :                     R_USING_FUN:							;4991H
   15295/    4991 : CD AC 0D                CALL    L_FRMCHK      				;Main BASIC_1 evaluation routine
   15296/    4994 : CD D9 35                CALL    L_CHKSTR
   15297/    4997 : (MACRO)             	SYNCHK	';'
   15298/    4999 : EB                      XCHG
   15299/    499A : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   15300/    499D : C3 A9 49                JMP     L_USING1
   15301/    49A0 :                     
   15302/    49A0 :                     L_USING0:
   15303/    49A0 : 3A 98 FB                LDA     PRT_USING_R
   15304/    49A3 : B7                      ORA     A
   15305/    49A4 : CA B4 49                JZ      L_USING2
   15306/    49A7 : D1                      POP     D
   15307/    49A8 : EB                      XCHG
   15308/    49A9 :                     L_USING1:
   15309/    49A9 : E5                      PUSH    H
   15310/    49AA : AF                      XRA     A
   15311/    49AB : 32 98 FB                STA     PRT_USING_R
   15312/    49AE : 3C                      INR     A
   15313/    49AF : F5                      PUSH    PSW
   15314/    49B0 : D5                      PUSH    D
   15315/    49B1 : 46                      MOV     B,M
   15316/    49B2 : 04                      INR     B
   15317/    49B3 : 05                      DCR     B
   15318/    49B4 :                     L_USING2:
   15319/    49B4 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
   15320/    49B7 : 23                      INX     H
   15321/    49B8 : (MACRO)             	GETHLFROMM							;get ptr to HL
   15322/    49BC : C3 DC 49                JMP     L_USING5
   15323/    49BF :                     
   15324/    49BF :                     L_USING3:
   15325/    49BF : 58                      MOV     E,B
   15326/    49C0 : E5                      PUSH    H
   15327/    49C1 : 0E 02                   MVI     C,02H
   15328/    49C3 : 7E                  -	MOV     A,M
   15329/    49C4 : 23                      INX     H
   15330/    49C5 : FE 5C                   CPI     '\\'
   15331/    49C7 : CA 07 4B                JZ      L_USING_BACK
   15332/    49CA : FE 20                   CPI     ' '
   15333/    49CC : C2 D4 49                JNZ     +
   15334/    49CF : 0C                      INR     C
   15335/    49D0 : 05                      DCR     B
   15336/    49D1 : C2 C3 49                JNZ     -
   15337/    49D4 : E1                  +	POP     H
   15338/    49D5 : 43                      MOV     B,E
   15339/    49D6 : 3E 5C                   MVI     A,'\\'						;5CH
   15340/    49D8 :                     L_USING4:
   15341/    49D8 : CD 3A 4B                CALL    L_USING_PLUS				;Print '+' if needed
   15342/    49DB : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   15343/    49DC :                     L_USING5:
   15344/    49DC : AF                      XRA     A							;clear A, DE
   15345/    49DD : 5F                      MOV     E,A
   15346/    49DE : 57                      MOV     D,A
   15347/    49DF : CD 3A 4B            -	CALL    L_USING_PLUS				;Print '+' if needed
   15348/    49E2 : 57                      MOV     D,A
   15349/    49E3 : 7E                      MOV     A,M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 258 - 9/5/2025 20:20:35


   15350/    49E4 : 23                      INX     H
   15351/    49E5 : FE 21                   CPI     '!'
   15352/    49E7 : CA 04 4B                JZ      L_USING_BANG
   15353/    49EA : FE 23                   CPI     '#'
   15354/    49EC : CA 2E 4A                JZ      L_USING_HASH
   15355/    49EF : 05                      DCR     B
   15356/    49F0 : CA F0 4A                JZ      L_USING12
   15357/    49F3 : FE 2B                   CPI     '+'
   15358/    49F5 : 3E 08                   MVI     A,08H
   15359/    49F7 : CA DF 49                JZ      -
   15360/    49FA : 2B                      DCX     H
   15361/    49FB : 7E                      MOV     A,M
   15362/    49FC : 23                      INX     H
   15363/    49FD : FE 2E                   CPI     '.'
   15364/    49FF : CA 4D 4A                JZ      L_USING6
   15365/    4A02 : FE 5C                   CPI     '\\'
   15366/    4A04 : CA BF 49                JZ      L_USING3
   15367/    4A07 : BE                      CMP     M
   15368/    4A08 : C2 D8 49                JNZ     L_USING4
   15369/    4A0B : FE 24                   CPI     '$'
   15370/    4A0D : CA 27 4A                JZ      L_USING_DLR
   15371/    4A10 : FE 2A                   CPI     '*'
   15372/    4A12 : C2 D8 49                JNZ     L_USING4
   15373/    4A15 : 23                      INX     H
   15374/    4A16 : 78                      MOV     A,B
   15375/    4A17 : FE 02                   CPI     02H
   15376/    4A19 : DA 1F 4A                JC      +
   15377/    4A1C : 7E                      MOV     A,M
   15378/    4A1D : FE 24                   CPI     '$'
   15379/    4A1F : 3E 20               +	MVI     A,' '
   15380/    4A21 : C2 2B 4A                JNZ     +
   15381/    4A24 : 05                      DCR     B
   15382/    4A25 : 1C                      INR     E
   15383/    4A26 : (MACRO)             	SKIP_XRA_A_CP						;A unaffected
   15384/    4A27 :                     L_USING_DLR:
   15385/    4A27 : AF                      XRA     A
   15386/    4A28 : C6 10                   ADI		10H
   15387/    4A2A : 23                      INX     H
   15388/    4A2B : 1C                  +	INR     E
   15389/    4A2C : 82                      ADD     D
   15390/    4A2D : 57                      MOV     D,A
   15391/    4A2E :                     L_USING_HASH:
   15392/    4A2E : 1C                      INR     E
   15393/    4A2F : 0E 00                   MVI     C,00H
   15394/    4A31 : 05                      DCR     B
   15395/    4A32 : CA 83 4A                JZ      L_USING8
   15396/    4A35 : 7E                      MOV     A,M
   15397/    4A36 : 23                      INX     H
   15398/    4A37 : FE 2E                   CPI     '.'
   15399/    4A39 : CA 58 4A                JZ      L_USING_DOT
   15400/    4A3C : FE 23                   CPI     '#'
   15401/    4A3E : CA 2E 4A                JZ      L_USING_HASH
   15402/    4A41 : FE 2C                   CPI     ','
   15403/    4A43 : C2 64 4A                JNZ     L_USING7
   15404/    4A46 : 7A                      MOV     A,D
   15405/    4A47 : F6 40                   ORI     40H
   15406/    4A49 : 57                      MOV     D,A
   15407/    4A4A : C3 2E 4A                JMP     L_USING_HASH
   15408/    4A4D :                     
   15409/    4A4D :                     L_USING6:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 259 - 9/5/2025 20:20:35


   15410/    4A4D : 7E                      MOV     A,M
   15411/    4A4E : FE 23                   CPI     '#'
   15412/    4A50 : 3E 2E                   MVI     A,'.'
   15413/    4A52 : C2 D8 49                JNZ     L_USING4
   15414/    4A55 : 0E 01                   MVI     C,01H
   15415/    4A57 : 23                      INX     H
   15416/    4A58 :                     L_USING_DOT:
   15417/    4A58 : 0C                      INR     C
   15418/    4A59 : 05                      DCR     B
   15419/    4A5A : CA 83 4A                JZ      L_USING8
   15420/    4A5D : 7E                      MOV     A,M
   15421/    4A5E : 23                      INX     H
   15422/    4A5F : FE 23                   CPI     '#'
   15423/    4A61 : CA 58 4A                JZ      L_USING_DOT
   15424/    4A64 :                     L_USING7:
   15425/    4A64 : D5                      PUSH    D
   15426/    4A65 : 11 81 4A                LXI     D,L_USING_CONT				;continuation function
   15427/    4A68 : D5                      PUSH    D
   15428/    4A69 : 54                      MOV     D,H
   15429/    4A6A : 5D                      MOV     E,L
   15430/    4A6B : FE 5E                   CPI     '^'
   15431/    4A6D : C0                      RNZ
   15432/    4A6E : BE                      CMP     M
   15433/    4A6F : C0                      RNZ
   15434/    4A70 : 23                      INX     H
   15435/    4A71 : BE                      CMP     M
   15436/    4A72 : C0                      RNZ
   15437/    4A73 : 23                      INX     H
   15438/    4A74 : BE                      CMP     M
   15439/    4A75 : C0                      RNZ
   15440/    4A76 : 23                      INX     H
   15441/    4A77 : 78                      MOV     A,B
   15442/    4A78 : D6 04                   SUI     04H
   15443/    4A7A : D8                      RC
   15444/    4A7B : D1                      POP     D
   15445/    4A7C : D1                      POP     D
   15446/    4A7D : 47                      MOV     B,A
   15447/    4A7E : 14                      INR     D
   15448/    4A7F : 23                      INX     H
   15449/    4A80 : (MACRO)             	SKIP_2BYTES_INST_JZ					;skip XCHG & POP D
   15450/    4A81 :                     L_USING_CONT:
   15451/    4A81 : EB                      XCHG
   15452/    4A82 : D1                      POP     D
   15453/    4A83 :                     L_USING8:
   15454/    4A83 : 7A                      MOV     A,D
   15455/    4A84 : 2B                      DCX     H
   15456/    4A85 : 1C                      INR     E
   15457/    4A86 : E6 08                   ANI     08H
   15458/    4A88 : C2 A3 4A                JNZ     L_USING9
   15459/    4A8B : 1D                      DCR     E
   15460/    4A8C : 78                      MOV     A,B
   15461/    4A8D : B7                      ORA     A
   15462/    4A8E : CA A3 4A                JZ      L_USING9
   15463/    4A91 : 7E                      MOV     A,M
   15464/    4A92 : D6 2D                   SUI     2DH
   15465/    4A94 : CA 9E 4A                JZ      +
   15466/    4A97 : FE FE                   CPI     0FEH
   15467/    4A99 : C2 A3 4A                JNZ     L_USING9
   15468/    4A9C : 3E 08                   MVI     A,08H
   15469/    4A9E : C6 04               +	ADI		04H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 260 - 9/5/2025 20:20:35


   15470/    4AA0 : 82                      ADD     D
   15471/    4AA1 : 57                      MOV     D,A
   15472/    4AA2 : 05                      DCR     B
   15473/    4AA3 :                     L_USING9:
   15474/    4AA3 : E1                      POP     H
   15475/    4AA4 : F1                      POP     PSW
   15476/    4AA5 : CA F9 4A                JZ      L_USING13
   15477/    4AA8 : C5                      PUSH    B
   15478/    4AA9 : D5                      PUSH    D
   15479/    4AAA : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
   15480/    4AAD : D1                      POP     D
   15481/    4AAE : C1                      POP     B
   15482/    4AAF : C5                      PUSH    B
   15483/    4AB0 : E5                      PUSH    H
   15484/    4AB1 : 43                      MOV     B,E
   15485/    4AB2 : 78                      MOV     A,B
   15486/    4AB3 : 81                      ADD     C
   15487/    4AB4 : FE 19                   CPI     19H
   15488/    4AB6 : D2 DB 08                JNC     R_GEN_FC_ERROR				;brif A >= 19H: Generate FC error
   15489/    4AB9 : 7A                      MOV     A,D
   15490/    4ABA : F6 80                   ORI     80H							;10000000H
   15491/    4ABC : CD E9 39                CALL    R_PRINT_FAC1
   15492/    4ABF : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   15493/    4AC2 :                     L_USING10:
   15494/    4AC2 : E1                      POP     H
   15495/    4AC3 : 2B                      DCX     H
   15496/    4AC4 : (MACRO)                 CHRGET								;Get next non-white char from M
   15497/    4AC5 : 37                      STC
   15498/    4AC6 : CA D7 4A                JZ      L_USING11
   15499/    4AC9 : 32 98 FB                STA     PRT_USING_R
   15500/    4ACC : FE 3B                   CPI     ';'
   15501/    4ACE : CA D6 4A                JZ      +
   15502/    4AD1 : FE 2C                   CPI     ','
   15503/    4AD3 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
   15504/    4AD6 : (MACRO)             +	CHRGET								;Get next non-white char from M
   15505/    4AD7 :                     L_USING11:
   15506/    4AD7 : C1                      POP     B
   15507/    4AD8 : EB                      XCHG
   15508/    4AD9 : E1                      POP     H
   15509/    4ADA : E5                      PUSH    H
   15510/    4ADB : F5                      PUSH    PSW
   15511/    4ADC : D5                      PUSH    D
   15512/    4ADD : 7E                      MOV     A,M
   15513/    4ADE : 90                      SUB     B
   15514/    4ADF : 23                      INX     H
   15515/    4AE0 : 16 00                   MVI     D,00H
   15516/    4AE2 : 5F                      MOV     E,A
   15517/    4AE3 : (MACRO)             	GETHLFROMM							;get ptr to HL
   15518/    4AE7 : 19                      DAD     D
   15519/    4AE8 : 78                      MOV     A,B
   15520/    4AE9 : B7                      ORA     A
   15521/    4AEA : C2 DC 49                JNZ     L_USING5
   15522/    4AED : C3 F4 4A                JMP     +
   15523/    4AF0 :                     
   15524/    4AF0 :                     L_USING12:
   15525/    4AF0 : CD 3A 4B                CALL    L_USING_PLUS				;Print '+' if needed
   15526/    4AF3 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   15527/    4AF4 : E1                  +	POP     H
   15528/    4AF5 : F1                      POP     PSW
   15529/    4AF6 : C2 A0 49                JNZ     L_USING0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 261 - 9/5/2025 20:20:35


   15530/    4AF9 :                     L_USING13:
   15531/    4AF9 : DC CB 4B                CC      L_PRINT_CRLF
   15532/    4AFC : E3                      XTHL
   15533/    4AFD : CD 1C 29                CALL    L_FRETM2
   15534/    4B00 : E1                      POP     H
   15535/    4B01 : C3 39 0C                JMP     L_FINPRT
   15536/    4B04 :                     
   15537/    4B04 :                     L_USING_BANG:
   15538/    4B04 : 0E 01                   MVI     C,01H
   15539/    4B06 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   15540/    4B07 :                     L_USING_BACK:
   15541/    4B07 : F1                      POP     PSW
   15542/    4B08 : 05                      DCR     B
   15543/    4B09 : CD 3A 4B                CALL    L_USING_PLUS				;Print '+' if needed
   15544/    4B0C : E1                      POP     H
   15545/    4B0D : F1                      POP     PSW
   15546/    4B0E : CA F9 4A                JZ      L_USING13
   15547/    4B11 : C5                      PUSH    B
   15548/    4B12 : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
   15549/    4B15 : CD D9 35                CALL    L_CHKSTR
   15550/    4B18 : C1                      POP     B
   15551/    4B19 : C5                      PUSH    B
   15552/    4B1A : E5                      PUSH    H
   15553/    4B1B : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   15554/    4B1E : 41                      MOV     B,C
   15555/    4B1F : 0E 00                   MVI     C,00H
   15556/    4B21 : 78                      MOV     A,B
   15557/    4B22 : F5                      PUSH    PSW
   15558/    4B23 : CD B2 29                CALL    L_LEFT_STR_2
   15559/    4B26 : CD B4 27                CALL    L_PRINT_LST_STR
   15560/    4B29 : 2A 1A FC                LHLD    IFACLO_R					;FAC1 for integers
   15561/    4B2C : F1                      POP     PSW
   15562/    4B2D : 96                      SUB     M
   15563/    4B2E : 47                      MOV     B,A
   15564/    4B2F : 3E 20                   MVI     A,' '
   15565/    4B31 : 04                      INR     B							;pre-increment
   15566/    4B32 :                     ;
   15567/    4B32 :                     ; output ' ' B times
   15568/    4B32 :                     ;
   15569/    4B32 : 05                  -	DCR     B
   15570/    4B33 : CA C2 4A                JZ      L_USING10					;brif done
   15571/    4B36 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   15572/    4B37 : C3 32 4B                JMP     -
   15573/    4B3A :                     ;
   15574/    4B3A :                     ; Print '+' if needed
   15575/    4B3A :                     ;
   15576/    4B3A :                     ; IN:
   15577/    4B3A :                     ;	D		need marker
   15578/    4B3A :                     ;
   15579/    4B3A :                     L_USING_PLUS:
   15580/    4B3A : F5                      PUSH    PSW
   15581/    4B3B : 7A                      MOV     A,D
   15582/    4B3C : B7                      ORA     A
   15583/    4B3D : 3E 2B                   MVI     A,'+'
   15584/    4B3F : C4 44 4B                CNZ     R_SEND_A_LCD_LPT			;Send A to screen or printer
   15585/    4B42 : F1                      POP     PSW
   15586/    4B43 : C9                      RET
   15587/    4B44 :                     ;
   15588/    4B44 :                     ; Send A to screen or printer
   15589/    4B44 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 262 - 9/5/2025 20:20:35


   15590/    4B44 :                     R_SEND_A_LCD_LPT:						;4B44H
   15591/    4B44 : F5                      PUSH    PSW
   15592/    4B45 : E5                      PUSH    H
   15593/    4B46 : CD 1A 42                CALL    L_TST_FCBLAST
   15594/    4B49 : C2 52 4E                JNZ     L_DEV_OUTPUT				;brif FCBLAST != 0
   15595/    4B4C : E1                      POP     H
   15596/    4B4D : 3A 75 F6                LDA     PRTFLG_R					;Output device for RST 20H (0=screen)
   15597/    4B50 : B7                      ORA     A
   15598/    4B51 : CA AA 4B                JZ      R_LCD_CHAR_OUT_FUN			;PSW pushed
   15599/    4B54 : F1                      POP     PSW
   15600/    4B55 :                     ;
   15601/    4B55 :                     ; Print A to printer), expanding tabs if necessary
   15602/    4B55 :                     ;
   15603/    4B55 :                     R_PRINT_A_EXPAND:						;4B55H
   15604/    4B55 : F5                      PUSH    PSW							;save char
   15605/    4B56 : FE 09                   CPI     09H
   15606/    4B58 : C2 6A 4B                JNZ     L_PRINT_A
   15607/    4B5B : 3E 20               -	MVI     A,' '
   15608/    4B5D : CD 55 4B                CALL    R_PRINT_A_EXPAND			;Print A to printer), expanding tabs if necessary
   15609/    4B60 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
   15610/    4B63 : E6 07                   ANI     07H							;modulo 8
   15611/    4B65 : C2 5B 4B                JNZ     -							;loop
   15612/    4B68 : F1                      POP     PSW							;restore char
   15613/    4B69 : C9                      RET
   15614/    4B6A :                     
   15615/    4B6A :                     L_PRINT_A:
   15616/    4B6A : D6 0D                   SUI     0DH							;CR
   15617/    4B6C : CA 76 4B                JZ      +							;brif char is CR. A == 0
   15618/    4B6F : DA 79 4B                JC      L_PRINT_A_1					;brif char < CR
   15619/    4B72 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
   15620/    4B75 : 3C                      INR     A
   15621/    4B76 : 32 74 F6            +	STA 	LPTPOS_R					;update Line printer head position
   15622/    4B79 :                     L_PRINT_A_1:
   15623/    4B79 : F1                      POP     PSW							;restore char
   15624/    4B7A :                     L_PRINT_A_2:
   15625/    4B7A : FE 0A                   CPI     0AH							;LF
   15626/    4B7C : C2 88 4B                JNZ     +							;brif char != LF
   15627/    4B7F :                     ; A == LF
   15628/    4B7F : C5                      PUSH    B							;save BC
   15629/    4B80 : 47                      MOV     B,A							;save LF
   15630/    4B81 : 3A AC FA                LDA     LASTLPT_R					;get Last char sent to printer
   15631/    4B84 : FE 0D                   CPI     0DH							;CR
   15632/    4B86 : 78                      MOV     A,B							;restore LF
   15633/    4B87 : C1                      POP     B							;restore BC
   15634/    4B88 : 32 AC FA            +	STA     LASTLPT_R					;update Last char sent to printer
   15635/    4B8B : C8                      RZ									;retif char == CR
   15636/    4B8C : FE 1A                   CPI     1AH
   15637/    4B8E : C8                      RZ									;retif char == ^Z
   15638/    4B8F : C3 70 14                JMP     R_OUT_CH_TO_LPT				;Output character to printer
   15639/    4B92 :                     ;
   15640/    4B92 :                     ; Reinitialize output back to LCD
   15641/    4B92 :                     ;
   15642/    4B92 :                     R_SET_OUT_DEV_LCD:						;4B92H
   15643/    4B92 : AF                      XRA     A
   15644/    4B93 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   15645/    4B96 : 3A 74 F6                LDA     LPTPOS_R					;Line printer head position
   15646/    4B99 : B7                      ORA     A
   15647/    4B9A : C8                      RZ
   15648/    4B9B : 3A CD FA                LDA     LPT_MOVING_R				;test
   15649/    4B9E : B7                      ORA     A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 263 - 9/5/2025 20:20:35


   15650/    4B9F : C8                      RZ
   15651/    4BA0 :                     L_LPT_NEWLINE:							;send CR to printer
   15652/    4BA0 : 3E 0D                   MVI     A,0DH						;CR
   15653/    4BA2 : CD 7A 4B                CALL    L_PRINT_A_2					;send to printer. TODO CALL R_PRINT_A_EXPAND shorter
   15654/    4BA5 : AF                      XRA     A
   15655/    4BA6 : 32 74 F6                STA     LPTPOS_R					;Line printer head position
   15656/    4BA9 : C9                      RET
   15657/    4BAA :                     ;
   15658/    4BAA :                     ; LCD character output routine
   15659/    4BAA :                     ;
   15660/    4BAA :                     R_LCD_CHAR_OUT_FUN:
   15661/    4BAA : F1                      POP     PSW							;retrieve PSW 
   15662/    4BAB : F5                      PUSH    PSW
   15663/    4BAC : CD 13 43                CALL    R_PRINT_A_TO_LCD			;Print A to the screen
   15664/    4BAF : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   15665/    4BB2 : 3D                      DCR     A
   15666/    4BB3 : 32 88 F7                STA     CURHPOS_R					;Horiz. position of cursor (0-39)
   15667/    4BB6 : F1                      POP     PSW
   15668/    4BB7 : C9                      RET
   15669/    4BB8 :                     ;
   15670/    4BB8 :                     ;Move LCD to blank line (send CRLF if needed)
   15671/    4BB8 :                     ;
   15672/    4BB8 :                     R_LCD_NEW_LINE:							;4BB8H
   15673/    4BB8 : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   15674/    4BBB : 3D                      DCR     A
   15675/    4BBC : C8                      RZ									;retif CSRX_R == 1
   15676/    4BBD : C3 CB 4B                JMP     L_PRINT_CRLF
   15677/    4BC0 :                     ;
   15678/    4BC0 :                     ; TODO unreachable code
   15679/    4BC0 :                     ;
   15680/    4BC0 : 36 00                   MVI     M,00H
   15681/    4BC2 : CD 1A 42                CALL    L_TST_FCBLAST
   15682/    4BC5 : 21 84 F6                LXI     H,INPBUF_R-1				;Keyboard buffer
   15683/    4BC8 : C2 D1 4B                JNZ     L_RECORD_CR					;brif FCBLAST != 0
   15684/    4BCB :                     L_PRINT_CRLF:
   15685/    4BCB : 3E 0D                   MVI     A,0DH
   15686/    4BCD : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   15687/    4BCE : 3E 0A                   MVI     A,0AH
   15688/    4BD0 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   15689/    4BD1 :                     ;
   15690/    4BD1 :                     ; record a CR
   15691/    4BD1 :                     ;
   15692/    4BD1 :                     L_RECORD_CR:
   15693/    4BD1 : CD 1A 42                CALL    L_TST_FCBLAST
   15694/    4BD4 :                     ;
   15695/    4BD4 :                     ; TODO: shorter to JNZ to XRA A, RET Code
   15696/    4BD4 :                     ;
   15697/    4BD4 : CA D9 4B                JZ      L_RESET_POS					;brif FCBLAST == 0
   15698/    4BD7 : AF                      XRA     A
   15699/    4BD8 : C9                      RET
   15700/    4BD9 :                     
   15701/    4BD9 :                     L_RESET_POS:
   15702/    4BD9 : 3A 75 F6                LDA     PRTFLG_R					;Output device for RST 20H (0=screen)
   15703/    4BDC : B7                      ORA     A
   15704/    4BDD : CA E5 4B                JZ      L_REST_POS_LCD				;brif 0 to screen
   15705/    4BE0 : AF                      XRA     A							;newline to printer
   15706/    4BE1 : 32 74 F6                STA     LPTPOS_R					;Line printer head position
   15707/    4BE4 : C9                      RET
   15708/    4BE5 :                     
   15709/    4BE5 :                     L_REST_POS_LCD:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 264 - 9/5/2025 20:20:35


   15710/    4BE5 : AF                      XRA     A							;newline to LCD
   15711/    4BE6 : 32 88 F7                STA     CURHPOS_R					;Horiz. position of cursor (0-39)
   15712/    4BE9 : C9                      RET
   15713/    4BEA :                     ;
   15714/    4BEA :                     ; INKEY$ function
   15715/    4BEA :                     ;
   15716/    4BEA :                     R_INKEY_FUN:							;4BEAH
   15717/    4BEA : (MACRO)                 CHRGET								;Get next non-white char from M
   15718/    4BEB : E5                      PUSH    H							;save text ptr
   15719/    4BEC : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   15720/    4BEF : CA FE 4B                JZ      +
   15721/    4BF2 : CD CB 12                CALL    R_WAIT_KEY				  	;Wait for key from keyboard
   15722/    4BF5 : F5                      PUSH    PSW							;save key
   15723/    4BF6 : CD 5B 27                CALL    L_PREP_STR_LEN1
   15724/    4BF9 : F1                      POP     PSW							;restore key
   15725/    4BFA : 5F                      MOV     E,A							;to E
   15726/    4BFB : CD 65 29                CALL    L_CHR_1						;Store character and add to String Stack. No return here.
   15727/    4BFE : 21 F5 03            +	LXI     H,R_NULL_MSG				;Code Based. 
   15728/    4C01 : 22 1A FC                SHLD    IFACLO_R					;FAC1 for integers
   15729/    4C04 : 3E 03                   MVI     A,03H						;type STRING
   15730/    4C06 : 32 65 FB                STA     VALTYP_R					;Type of last expression used
   15731/    4C09 : E1                      POP     H							;restore text ptr
   15732/    4C0A : C9                      RET
   15733/    4C0B :                     ;
   15734/    4C0B :                     ; push HL and eval Filename
   15735/    4C0B :                     ; IN:
   15736/    4C0B :                     ;	E
   15737/    4C0B :                     L_PSH_HL_EVAL_FILNAM:
   15738/    4C0B : E5                      PUSH    H							;save txt ptr
   15739/    4C0C : C3 21 4C                JMP     L_EVAL_FILNAM_1
   15740/    4C0F :                     ;
   15741/    4C0F :                     ; Evaluate arguments to RUN/OPEN/SAVE/NAME/MERGE commands
   15742/    4C0F :                     ;
   15743/    4C0F :                     ; OUT:
   15744/    4C0F :                     ;	D			Device Code
   15745/    4C0F :                     ;	Z			result of L_DEVTST_FUN call
   15746/    4C0F :                     ;
   15747/    4C0F :                     L_EVAL_FILNAM:
   15748/    4C0F : CD AB 0D                CALL    L_FRMEVL					;Main BASIC evaluation routine
   15749/    4C12 : E5                      PUSH    H							;save txt ptr
   15750/    4C13 : CD 16 29                CALL    L_FRESTR					;FREE UP TEMP & CHECK STRING
   15751/    4C16 : 7E                      MOV     A,M							;get length
   15752/    4C17 : B7                      ORA     A
   15753/    4C18 : CA 55 4C                JZ      L_BAD_FILESPEC				;brif 0 length string
   15754/    4C1B : 23                      INX     H							;to address of string
   15755/    4C1C : 5E                      MOV     E,M							;get address to HL
   15756/    4C1D : 23                      INX     H
   15757/    4C1E : 66                      MOV     H,M
   15758/    4C1F : 6B                      MOV     L,E
   15759/    4C20 : 5F                      MOV     E,A							;length of string in E
   15760/    4C21 :                     L_EVAL_FILNAM_1:
   15761/    4C21 : CD 75 50                CALL    L_DEVTST_FUN				;E == length of string
   15762/    4C24 : F5                      PUSH    PSW							;save result of L_DEVTST_FUN call
   15763/    4C25 : 01 93 FC                LXI     B,FILNAM_R				    ;Destination: Current Filename
   15764/    4C28 : 16 09                   MVI     D,09H						;max length+1
   15765/    4C2A : 1C                      INR     E							;pre-increment
   15766/    4C2B :                     L_EVAL_FILNAM_2:
   15767/    4C2B : 1D                  	DCR     E							;string length
   15768/    4C2C : CA 72 4C                JZ      L_PAD_FILESPEC				;brif done
   15769/    4C2F : CD E8 0F                CALL    R_CONV_M_TOUPPER			;Get char at M and convert to uppercase
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 265 - 9/5/2025 20:20:35


   15770/    4C32 : FE 20                   CPI     ' '
   15771/    4C34 : DA 55 4C                JC      L_BAD_FILESPEC				;brif < ' ': Bad Filename
   15772/    4C37 : FE 7F                   CPI     7FH							;DEL
   15773/    4C39 : CA 55 4C                JZ      L_BAD_FILESPEC				;brif Bad Filename
   15774/    4C3C : FE 2E                   CPI     '.'
   15775/    4C3E : CA 5C 4C                JZ      L_FOUND_DOT					;brif extension found
   15776/    4C41 : 02                      STAX    B							;copy char to filename
   15777/    4C42 : 03                      INX     B							;next destination
   15778/    4C43 : 23                      INX     H							;next source
   15779/    4C44 : 15                      DCR     D							;length 9..1
   15780/    4C45 : C2 2B 4C                JNZ     L_EVAL_FILNAM_2				;loop
   15781/    4C48 :                     L_EVAL_FILNAM_3:
   15782/    4C48 : F1                      POP     PSW							;restore result of L_DEVTST_FUN call
   15783/    4C49 : F5                      PUSH    PSW
   15784/    4C4A : 57                      MOV     D,A							;move to D
   15785/    4C4B : 3A 93 FC                LDA     FILNAM_R					;Current Filename
   15786/    4C4E : 3C                      INR     A							;test for 0FFH
   15787/    4C4F : CA 55 4C                JZ      L_BAD_FILESPEC				;error
   15788/    4C52 : F1                      POP     PSW							;result of L_DEVTST_FUN call
   15789/    4C53 : E1                      POP     H							;restore src ptr
   15790/    4C54 : C9                      RET
   15791/    4C55 :                     
   15792/    4C55 :                     L_BAD_FILESPEC:
   15793/    4C55 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error (Bad Filename)
   15794/    4C58 :                     ;
   15795/    4C58 :                     ; skip '.'
   15796/    4C58 :                     ;
   15797/    4C58 :                     L_SKIP_DOT:
   15798/    4C58 : 23                      INX     H
   15799/    4C59 : C3 2B 4C                JMP     L_EVAL_FILNAM_2				;continue
   15800/    4C5C :                     ;
   15801/    4C5C :                     ; found '.' in filespec
   15802/    4C5C :                     ;
   15803/    4C5C :                     L_FOUND_DOT:								
   15804/    4C5C : 7A                      MOV     A,D							;chars left
   15805/    4C5D : FE 09                   CPI     09H	
   15806/    4C5F : CA 55 4C                JZ      L_BAD_FILESPEC				;brif filename starts with '.'
   15807/    4C62 : FE 03                   CPI     03H
   15808/    4C64 : DA 55 4C                JC      L_BAD_FILESPEC				;brif < 2 characters left
   15809/    4C67 : CA 58 4C                JZ      L_SKIP_DOT					;exactly 2 chars left
   15810/    4C6A : 3E 20                   MVI     A,' '						;pad filename before extension
   15811/    4C6C : 02                      STAX    B
   15812/    4C6D : 03                      INX     B
   15813/    4C6E : 15                      DCR     D							;length
   15814/    4C6F : C3 5C 4C                JMP     L_FOUND_DOT					;loop
   15815/    4C72 :                     ;
   15816/    4C72 :                     ; filename padding
   15817/    4C72 :                     ;
   15818/    4C72 :                     L_PAD_FILESPEC:
   15819/    4C72 : 3E 20                   MVI     A,' '						;pad filename
   15820/    4C74 : 02                      STAX    B
   15821/    4C75 : 03                      INX     B
   15822/    4C76 : 15                      DCR     D							;length 9..1
   15823/    4C77 : C2 72 4C                JNZ     L_PAD_FILESPEC
   15824/    4C7A : C3 48 4C                JMP     L_EVAL_FILNAM_3				;finish
   15825/    4C7D :                     ;
   15826/    4C7D :                     ; get next char from HL, remaining length in E
   15827/    4C7D :                     ;
   15828/    4C7D :                     ; OUT:
   15829/    4C7D :                     ;	Z		if no more chars (E == 0)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 266 - 9/5/2025 20:20:35


   15830/    4C7D :                     ;
   15831/    4C7D :                     L_NEXTCHAR_DECE:
   15832/    4C7D : 7E                      MOV     A,M
   15833/    4C7E : 23                      INX     H
   15834/    4C7F : 1D                      DCR     E
   15835/    4C80 : C9                      RET
   15836/    4C81 :                     
   15837/    4C81 :                     R_GET_FCB:
   15838/    4C81 : CD 31 11                CALL    L_CONINT
   15839/    4C84 :                     ;
   15840/    4C84 :                     ; Get FCB for file # in A
   15841/    4C84 :                     ;
   15842/    4C84 :                     ; IN:
   15843/    4C84 :                     ;	A		file #
   15844/    4C84 :                     ; OUT:
   15845/    4C84 :                     ;	Z		file status
   15846/    4C84 :                     ;	carry	set if success
   15847/    4C84 :                     ;	HL		FCB ptr
   15848/    4C84 :                     ;	A		File Status
   15849/    4C84 :                     ;
   15850/    4C84 :                     R_GET_FCB_FROM_A:						;4C84H
   15851/    4C84 : 6F                      MOV     L,A							;file #
   15852/    4C85 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
   15853/    4C88 : BD                      CMP     L
   15854/    4C89 : DA 5D 50                JC      R_GEN_BN_ERR_FUN			;if Maxfile < file # Generate BN error
   15855/    4C8C : 26 00                   MVI     H,00H						;zero extend
   15856/    4C8E : 22 A2 FA                SHLD    FILNUM_R					;store validated file #
   15857/    4C91 : 29                      DAD     H							;double zero extended validated file number
   15858/    4C92 : EB                      XCHG								;offset to DE
   15859/    4C93 : 2A 83 FC                LHLD    FCBTBL_R					;HO now points to FCB table
   15860/    4C96 : 19                      DAD     D							;index into FCB table
   15861/    4C97 : (MACRO)             	GETHLFROMM							;get FCB ptr to HL
   15862/    4C9B : 7E                      MOV     A,M							;File Type
   15863/    4C9C : B7                      ORA     A
   15864/    4C9D : C8                      RZ									;retif File Not Open
   15865/    4C9E : E5                      PUSH    H							;save FCB ptr
   15866/    4C9F : 11 04 00                LXI     D,DEV_IN_FCB_OFS			;0004H offset in FCB: Device code
   15867/    4CA2 : 19                      DAD     D							;index
   15868/    4CA3 : 7E                      MOV     A,M							;get DCB code
   15869/    4CA4 : FE 09                   CPI     09H
   15870/    4CA6 : D2 AE 4C                JNC     +							;brif DCB code >= 9
   15871/    4CA9 : (MACRO)             	RST38H	1EH
   15872/    4CAB : C3 60 50                JMP     R_GEN_IE_ERR_FUN			;Generate IE error
   15873/    4CAE :                     
   15874/    4CAE : E1                  +	POP     H							;restore FCB ptr
   15875/    4CAF : 7E                      MOV     A,M							;get File status
   15876/    4CB0 : B7                      ORA     A							;test
   15877/    4CB1 : 37                      STC									;set carry: success
   15878/    4CB2 : C9                      RET
   15879/    4CB3 :                     ;
   15880/    4CB3 :                     ; Set FCBLAST_R from file#
   15881/    4CB3 :                     ;
   15882/    4CB3 :                     ; OUT:
   15883/    4CB3 :                     ;	A		File Status
   15884/    4CB3 :                     ;	HL		FCB ptr
   15885/    4CB3 :                     ;
   15886/    4CB3 :                     L_SET_FCBLAST:
   15887/    4CB3 : 2B                      DCX     H							;backup txt ptr
   15888/    4CB4 : (MACRO)                 CHRGET								;Get next non-white char from M
   15889/    4CB5 : FE 23                   CPI     '#'
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 267 - 9/5/2025 20:20:35


   15890/    4CB7 : CC 58 08                CZ      L_CHRGTR					;Get next non-white char from M
   15891/    4CBA : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   15892/    4CBD : E3                      XTHL								;swap HL and [SP]
   15893/    4CBE : E5                      PUSH    H							;push return address again
   15894/    4CBF :                     L_SETUP_FCB:
   15895/    4CBF : CD 84 4C                CALL    R_GET_FCB_FROM_A			;Get FCB for file in A
   15896/    4CC2 : CA 5A 50                JZ      R_GEN_CF_ERR_FUN			;brif if file not open: Generate CF error
   15897/    4CC5 : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   15898/    4CC8 : (MACRO)             	RST38H	0CH
   15899/    4CCA : C9                      RET
   15900/    4CCB :                     ;
   15901/    4CCB :                     ; OPEN statement:
   15902/    4CCB :                     ;	OPEN "filespec" FOR mode AS num
   15903/    4CCB :                     ;
   15904/    4CCB :                     R_OPEN_STMT:							;4CCBH
   15905/    4CCB : 01 39 0C                LXI     B,L_FINPRT					;ZERO PTRFIL WHEN DONE continuation function
   15906/    4CCE : C5                      PUSH    B
   15907/    4CCF : CD 0F 4C                CALL    L_EVAL_FILNAM				;Evaluate arguments to RUN/OPEN/SAVE commands
   15908/    4CD2 : C2 D7 4C                JNZ     +							;brif DEV was specified
   15909/    4CD5 : 16 F8                   MVI     D,RAM_DEV					;set to RAM_DEV if not
   15910/    4CD7 : (MACRO)             +	SYNCHK	_FOR						;81H
   15911/    4CD9 : FE 84                   CPI     _INPUT						;84H
   15912/    4CDB : 1E 01                   MVI     E,01H						;preload File open Mode
   15913/    4CDD : CA FC 4C                JZ      L_OPEN_INPUT
   15914/    4CE0 : FE 96                   CPI     _OUT						;96H
   15915/    4CE2 : CA F2 4C                JZ      L_OPEN_OUTPUT
   15916/    4CE5 : (MACRO)             	SYNCHK	'A'
   15917/    4CE7 : (MACRO)             	SYNCHK	'P'
   15918/    4CE9 : (MACRO)             	SYNCHK	'P'
   15919/    4CEB : (MACRO)             	SYNCHK	_END						;80H
   15920/    4CED : 1E 08                   MVI     E,08H						;append File open Mode
   15921/    4CEF : C3 FD 4C                JMP     L_OPEN_INPUT_1
   15922/    4CF2 :                     
   15923/    4CF2 :                     L_OPEN_OUTPUT:
   15924/    4CF2 : (MACRO)                 CHRGET								;Get next non-white char from M
   15925/    4CF3 : (MACRO)             	SYNCHK	'P'
   15926/    4CF5 : (MACRO)             	SYNCHK	'U'
   15927/    4CF7 : (MACRO)             	SYNCHK	'T'
   15928/    4CF9 : 1E 02                   MVI     E,02H						;File open Mode
   15929/    4CFB : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   15930/    4CFC :                     L_OPEN_INPUT:							;E == 1 File open Mode entry point
   15931/    4CFC : (MACRO)                 CHRGET								;Get next non-white char from M
   15932/    4CFD :                     L_OPEN_INPUT_1:							;E == 8 File open Mode entry point (append)
   15933/    4CFD : (MACRO)             	SYNCHK	'A'
   15934/    4CFF : (MACRO)             	SYNCHK	'S'
   15935/    4D01 : D5                      PUSH    D							;save markers in DE
   15936/    4D02 : 7E                      MOV     A,M							;get next char
   15937/    4D03 : FE 23                   CPI     '#'
   15938/    4D05 : CC 58 08                CZ      L_CHRGTR					;Get next non-white char from M: skip '#'
   15939/    4D08 : CD 2E 11                CALL    L_GETBYT    				;Evaluate byte expression at M-1: file number
   15940/    4D0B : B7                      ORA     A							;result
   15941/    4D0C : CA 5D 50                JZ      R_GEN_BN_ERR_FUN			;Generate BN error
   15942/    4D0F : (MACRO)             	RST38H	18H
   15943/    4D11 : (MACRO)             	SKIP_BYTE_INST_E					;skip markers in D,E push
   15944/    4D12 :                     ;
   15945/    4D12 :                     ; R_OPEN_FILE
   15946/    4D12 :                     ;
   15947/    4D12 :                     ; IN:
   15948/    4D12 :                     ;	A			File #
   15949/    4D12 :                     ;	D			Device code
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 268 - 9/5/2025 20:20:35


   15950/    4D12 :                     ;	E			DCB function: 1: Open for Input. 2: Open for Output 8: Open for append
   15951/    4D12 :                     ;
   15952/    4D12 :                     R_OPEN_FILE:							;A is argument for this entry point
   15953/    4D12 : D5                      PUSH    D							;save markers in D,E
   15954/    4D13 : 2B                      DCX     H							;backup text ptr
   15955/    4D14 : 5F                      MOV     E,A							;save file #
   15956/    4D15 : (MACRO)                 CHRGET								;Get next non-white char from M
   15957/    4D16 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error if more characters
   15958/    4D19 : E3                      XTHL								;swap return address & text ptr
   15959/    4D1A : 7B                      MOV     A,E							;restore file #
   15960/    4D1B : F5                      PUSH    PSW							;save it
   15961/    4D1C : E5                      PUSH    H							;return address?
   15962/    4D1D : CD 84 4C                CALL    R_GET_FCB_FROM_A			;Get FCB for file in A
   15963/    4D20 : C2 51 50                JNZ     R_GEN_AO_ERR_FUN			;brif file open: Generate AO error
   15964/    4D23 : D1                      POP     D							;restore markers in D,E
   15965/    4D24 : 7A                      MOV     A,D							;device code (0F8H..0FFH)
   15966/    4D25 : FE 09                   CPI     09H							;Max device code
   15967/    4D27 : (MACRO)             	RST38H	1CH
   15968/    4D29 : DA 60 50                JC      R_GEN_IE_ERR_FUN			;Generate IE error if device code < 9
   15969/    4D2C : E5                      PUSH    H							;save FCB ptr
   15970/    4D2D : 01 04 00                LXI     B,DEV_IN_FCB_OFS			;index to device code in FCB
   15971/    4D30 : 09                      DAD     B
   15972/    4D31 : 72                      MOV     M,D							;set device code
   15973/    4D32 : 3E 00                   MVI     A,DCBOPN_FUN				;00H no flags affected
   15974/    4D34 : E1                      POP     H							;restore FCB ptr
   15975/    4D35 : C3 23 51                JMP     L_EXEC_DCB_FUNC
   15976/    4D38 :                     ;
   15977/    4D38 :                     ; IN:
   15978/    4D38 :                     ;	A		File #
   15979/    4D38 :                     ;	Carry
   15980/    4D38 :                     ;
   15981/    4D38 :                     L_CLS_FILENUM:
   15982/    4D38 : E5                      PUSH    H
   15983/    4D39 : B7                      ORA     A
   15984/    4D3A : C2 45 4D                JNZ     +							;brif A != 0
   15985/    4D3D :                     ; A == 0. Close OPNFIL_R
   15986/    4D3D : 3A A7 FC                LDA     OPNFIL_R					;File status
   15987/    4D40 : E6 01                   ANI     01H							;isolate bit 0
   15988/    4D42 : C2 08 4F                JNZ     L_POPH_RET					;brif bit 0 set: POP H & RET
   15989/    4D45 : CD 84 4C            +	CALL    R_GET_FCB_FROM_A			;Get FCB for file in A. Carry set if success
   15990/    4D48 : CA 5D 4D                JZ      R_LCD_CLOSE_FUN_1			;brif File Status == 0. Carry still valid. A == 0
   15991/    4D4B : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   15992/    4D4E : E5                      PUSH    H
   15993/    4D4F : 3E 02                   MVI     A,DCBCLS_FUN				;02H DCB Close function
   15994/    4D51 : DA 23 51                JC      L_EXEC_DCB_FUNC				;brif success from R_GET_FCB_FROM_A
   15995/    4D54 : (MACRO)             	RST38H	14H
   15996/    4D56 : C3 60 50                JMP     R_GEN_IE_ERR_FUN			;Generate IE error
   15997/    4D59 :                     ;
   15998/    4D59 :                     ; LCD), CRT), and LPT file close routine
   15999/    4D59 :                     ; Jumped to (not called) with 2 ptrs pushed before a return address
   16000/    4D59 :                     ;
   16001/    4D59 :                     ; Top of Stack:	FCB ptr
   16002/    4D59 :                     ;
   16003/    4D59 :                     R_LCD_CLOSE_FUN:						;4D59H
   16004/    4D59 : CD FF 4E                CALL    L_CLR_FCBLAST_BUF			;Clear FCBLAST_R buffer. Returns A == 0
   16005/    4D5C : E1                      POP     H							;FCB ptr
   16006/    4D5D :                     R_LCD_CLOSE_FUN_1:						;A == 0
   16007/    4D5D : E5                      PUSH    H							;save FCB ptr
   16008/    4D5E : 11 07 00                LXI     D,FILPOS_IN_FCB_OFS			;0007H						
   16009/    4D61 : 19                      DAD     D							;index to Relative position
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 269 - 9/5/2025 20:20:35


   16010/    4D62 : 77                      MOV     M,A							;clear Relative position LSB field
   16011/    4D63 : 67                      MOV     H,A							;clear HL
   16012/    4D64 : 6F                      MOV     L,A
   16013/    4D65 : 22 8C FC                SHLD    FCBLAST_R					;clear FCB ptr for the last file used (2 bytes)
   16014/    4D68 : E1                      POP     H							;restore FCB ptr. A still 0
   16015/    4D69 : 86                      ADD     M							;A == previous File Status
   16016/    4D6A : 36 00                   MVI     M,00H						;clear File Status (0 == closed)
   16017/    4D6C : E1                      POP     H
   16018/    4D6D : C9                      RET
   16019/    4D6E :                     ;
   16020/    4D6E :                     ; RUN_2 statement
   16021/    4D6E :                     ;
   16022/    4D6E :                     R_RUN_STMT_2:							;4D6EH
   16023/    4D6E : 37                      STC									;marker for RUN
   16024/    4D6F : (MACRO)             	SKIP_2BYTES_INST_DE					;skip SKIP_XRA_A & XRA A
   16025/    4D70 :                     ;
   16026/    4D70 :                     ; LOAD statement
   16027/    4D70 :                     ;
   16028/    4D70 :                     R_LOAD_STMT:							;4D70H
   16029/    4D70 : (MACRO)             	SKIP_XRA_A							;ORI 0AFH Set A to 0AFH
   16030/    4D71 :                     ;
   16031/    4D71 :                     ; RUN (RUN,R), LOAD (LOAD,R) or MERGE statement
   16032/    4D71 :                     ;
   16033/    4D71 :                     R_MERGE_STMT:							;4D71H
   16034/    4D71 : AF                      XRA     A							;marker for MERGE
   16035/    4D72 : F5                      PUSH    PSW							;Marker: 0AFH (LOAD), Z (MERGE) and carry (RUN)
   16036/    4D73 : 2B                      DCX     H							;backup to current char
   16037/    4D74 : (MACRO)                 CHRGET								;Get next non-white char from M
   16038/    4D75 : FE 4D                   CPI     'M'							;extra 'M'?
   16039/    4D77 : CA 91 24                JZ      R_LOADM_STMT				;LOADM and RUNM statement
   16040/    4D7A : CD 0F 4C                CALL    L_EVAL_FILNAM				;Evaluate arguments to RUN/OPEN/SAVE commands
   16041/    4D7D : CA 7B 1E                JZ      L_RAMFILE					;brif Device was NOT specified
   16042/    4D80 : 7A                      MOV     A,D							;device code
   16043/    4D81 : FE F8                   CPI     RAM_DEV						;0F8H
   16044/    4D83 : CA 7B 1E                JZ      L_RAMFILE
   16045/    4D86 : FE FD                   CPI     CAS_DEV						;0FDH
   16046/    4D88 : CA 87 23                JZ      L_CLOAD_STMT_1				;brif CAS device
   16047/    4D8B : (MACRO)             	RST38H	1AH
   16048/    4D8D :                     ; not RAM or CAS device
   16049/    4D8D :                     L_MERGE_1:
   16050/    4D8D : F1                      POP     PSW							;retrieve marker
   16051/    4D8E : F5                      PUSH    PSW
   16052/    4D8F : CA 9F 4D                JZ      +							;brif MERGE
   16053/    4D92 : 7E                      MOV     A,M							;next char
   16054/    4D93 : D6 2C                   SUI     ','
   16055/    4D95 : B7                      ORA     A
   16056/    4D96 : C2 9F 4D                JNZ     +
   16057/    4D99 : (MACRO)                 CHRGET								;Get next non-white char from M
   16058/    4D9A : (MACRO)             	SYNCHK	'R'
   16059/    4D9C : F1                      POP     PSW							;set carry in marker
   16060/    4D9D : 37                      STC
   16061/    4D9E :                     L_MERGE_2:								;D has Device Code
   16062/    4D9E : F5                      PUSH    PSW
   16063/    4D9F : F5                  +	PUSH    PSW
   16064/    4DA0 : AF                      XRA     A							;File # == 0
   16065/    4DA1 : 1E 01                   MVI     E,01H						;Open for Input marker
   16066/    4DA3 : CD 12 4D                CALL    R_OPEN_FILE
   16067/    4DA6 :                     L_MERGE_3:								;entry point with 2 x PSW on stack
   16068/    4DA6 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16069/    4DA9 : 01 07 00                LXI     B,FILPOS_IN_FCB_OFS			;0007H 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 270 - 9/5/2025 20:20:35


   16070/    4DAC : 09                      DAD     B							;index
   16071/    4DAD : F1                      POP     PSW							;last pushed PSW
   16072/    4DAE : 9F                      SBB     A							;0 or 0FFH based on carry
   16073/    4DAF : E6 80                   ANI     80H							;isolate bit 7
   16074/    4DB1 : F6 01                   ORI     01H							;set bit 0: open for input
   16075/    4DB3 : 32 A7 FC                STA     OPNFIL_R
   16076/    4DB6 : F1                      POP     PSW							;first pushed PSW (Marker)
   16077/    4DB7 : F5                      PUSH    PSW
   16078/    4DB8 : 9F                      SBB     A							;0 or 0FFH based on carry: run program after load
   16079/    4DB9 : 32 92 FC                STA     EXCFLG_R					;Flag to execute BASIC program
   16080/    4DBC : 7E                      MOV     A,M
   16081/    4DBD : B7                      ORA     A
   16082/    4DBE : FA 1D 4E                JM      L_SAVE_ERR2					;Generate NM error
   16083/    4DC1 : F1                      POP     PSW
   16084/    4DC2 : C4 FF 20                CNZ     SCRTCH
   16085/    4DC5 : CD 22 4E                CALL    R_CLSALL					;Close Files
   16086/    4DC8 : AF                      XRA     A
   16087/    4DC9 : CD BF 4C                CALL    L_SETUP_FCB
   16088/    4DCC : C3 11 05                JMP     R_GO_BASIC_RDY				;Silent vector to BASIC ready
   16089/    4DCF :                     ;
   16090/    4DCF :                     ; SAVE statement
   16091/    4DCF :                     ;
   16092/    4DCF :                     R_SAVE_STMT:							;4DCFH
   16093/    4DCF : FE 4D                   CPI     'M'
   16094/    4DD1 : CA CC 22                JZ      R_SAVEM_STMT				;SAVEM statement
   16095/    4DD4 : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2
   16096/    4DD7 : CD 0F 4C                CALL    L_EVAL_FILNAM				;Evaluate arguments to RUN/OPEN/SAVE commands. returns Device Code in D
   16097/    4DDA : CA D9 1E                JZ      L_SAVE_RAM					;brif Device was NOT specified
   16098/    4DDD : 7A                      MOV     A,D							;get Device Code
   16099/    4DDE : FE F8                   CPI     RAM_DEV						;0F8H
   16100/    4DE0 : CA D9 1E                JZ      L_SAVE_RAM					;brif RAM device
   16101/    4DE3 : FE FD                   CPI     CAS_DEV						;0FDH
   16102/    4DE5 : CA 88 22                JZ      L_CSAVE_BAS					;brif Cassette device
   16103/    4DE8 :                     ; device other than RAM or CAS specified
   16104/    4DE8 : (MACRO)             	RST38H	16H
   16105/    4DEA : 2B                      DCX     H							;backup text ptr
   16106/    4DEB : (MACRO)                 CHRGET								;Get next non-white char from M
   16107/    4DEC : 1E 80                   MVI     E,80H						;set File Mode to 80H
   16108/    4DEE : 37                      STC									;preset carry
   16109/    4DEF : CA F9 4D                JZ      +							;brif end of statement
   16110/    4DF2 : (MACRO)             	SYNCHK	','							;save BASIC program in ASCII mode
   16111/    4DF4 : (MACRO)             	SYNCHK	'A'
   16112/    4DF6 : B7                      ORA     A							;set flags
   16113/    4DF7 : 1E 02                   MVI     E,02H						;File Mode Output
   16114/    4DF9 : F5                  +	PUSH    PSW
   16115/    4DFA : 7A                      MOV     A,D							;Device code
   16116/    4DFB : FE 09                   CPI     09H
   16117/    4DFD : DA 0B 4E                JC      L_SAVE_ASC					;brif Device code < 9
   16118/    4E00 : 7B                      MOV     A,E							;File Mode
   16119/    4E01 : E6 80                   ANI     80H							;isolate bit 7
   16120/    4E03 : CA 0B 4E                JZ      L_SAVE_ASC					;brif bit 7 set
   16121/    4E06 : 1E 02                   MVI     E,02H						;marker Open File for Output
   16122/    4E08 : F1                      POP     PSW
   16123/    4E09 : AF                      XRA     A							;clear carry on stack
   16124/    4E0A : F5                      PUSH    PSW
   16125/    4E0B :                     L_SAVE_ASC:								;PSW pushed for this entry point
   16126/    4E0B : AF                      XRA     A							;File # == 0
   16127/    4E0C : CD 12 4D                CALL    R_OPEN_FILE					;DE must be set
   16128/    4E0F : F1                      POP     PSW
   16129/    4E10 : DA 18 4E                JC      L_SAVE_ERR1					;brif carry (error)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 271 - 9/5/2025 20:20:35


   16130/    4E13 : 2B                      DCX     H
   16131/    4E14 : (MACRO)                 CHRGET								;Get next non-white char from M
   16132/    4E15 : C3 40 11                JMP     R_LIST_STMT				  	;use LIST statement code to save BASIC file
   16133/    4E18 :                     
   16134/    4E18 :                     L_SAVE_ERR1:
   16135/    4E18 : (MACRO)             	RST38H	22H
   16136/    4E1A : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16137/    4E1D :                     
   16138/    4E1D :                     L_SAVE_ERR2:
   16139/    4E1D : (MACRO)             	RST38H	24H
   16140/    4E1F : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16141/    4E22 :                     ;
   16142/    4E22 :                     ; Close Files
   16143/    4E22 :                     ;
   16144/    4E22 :                     R_CLSALL:
   16145/    4E22 : 3A A7 FC                LDA     OPNFIL_R					;Any open files flag
   16146/    4E25 : B7                      ORA     A
   16147/    4E26 : F8                      RM
   16148/    4E27 : AF                      XRA     A
   16149/    4E28 :                     ;
   16150/    4E28 :                     ; CLOSE statement
   16151/    4E28 :                     ;	CLOSE [file1, file2...]
   16152/    4E28 :                     ;
   16153/    4E28 :                     R_CLOSE_STMT:							;4E28H
   16154/    4E28 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
   16155/    4E2B : C2 3B 4E                JNZ     R_CLOSE_STMT_2				;brif if any File Number
   16156/    4E2E :                     ;
   16157/    4E2E :                     ; just CLOSE: close all active File Numbers.
   16158/    4E2E :                     ; default for MAXFILES_R is 1 so close file # 1 and 0
   16159/    4E2E :                     ;
   16160/    4E2E : E5                      PUSH    H							;text ptr
   16161/    4E2F : F5                  -	PUSH    PSW
   16162/    4E30 : B7                      ORA     A							;current file #
   16163/    4E31 : CD 38 4D                CALL    L_CLS_FILENUM			;close file #
   16164/    4E34 : F1                      POP     PSW
   16165/    4E35 : 3D                      DCR     A							;next File Number
   16166/    4E36 : F2 2F 4E                JP      -							;brif A >= 0
   16167/    4E39 : E1                      POP     H							;text ptr
   16168/    4E3A : C9                      RET
   16169/    4E3B :                     
   16170/    4E3B :                     R_CLOSE_STMT_2:
   16171/    4E3B : 7E                      MOV     A,M							;next char
   16172/    4E3C : FE 23                   CPI     '#'
   16173/    4E3E : CC 58 08                CZ      L_CHRGTR					;Get next non-white char from M
   16174/    4E41 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   16175/    4E44 : E5                      PUSH    H							;save text ptr
   16176/    4E45 : 37                      STC									;set Carry
   16177/    4E46 : CD 38 4D                CALL    L_CLS_FILENUM
   16178/    4E49 : E1                      POP     H							;restore text ptr
   16179/    4E4A : 7E                      MOV     A,M							;next char
   16180/    4E4B : FE 2C                   CPI     ','
   16181/    4E4D : C0                      RNZ									;return if done
   16182/    4E4E : (MACRO)                 CHRGET								;Get next non-white char from M
   16183/    4E4F : C3 3B 4E                JMP     R_CLOSE_STMT_2				;repeat
   16184/    4E52 :                     ;
   16185/    4E52 :                     ; Jumped too. AF) and HL) on STACK
   16186/    4E52 :                     ;
   16187/    4E52 :                     L_DEV_OUTPUT:
   16188/    4E52 : E1                      POP     H							;restore pushed registers
   16189/    4E53 : F1                      POP     PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 272 - 9/5/2025 20:20:35


   16190/    4E54 : E5                      PUSH    H							;save all registers
   16191/    4E55 : D5                      PUSH    D
   16192/    4E56 : C5                      PUSH    B
   16193/    4E57 : F5                      PUSH    PSW
   16194/    4E58 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16195/    4E5B : 3E 04                   MVI     A,DCBOUT_FUN
   16196/    4E5D : CD 65 4E                CALL    L_DEV_VALIDATOR				;HL contains FCB ptr. No return
   16197/    4E60 : (MACRO)             	RST38H	20H
   16198/    4E62 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			; Generate NM error
   16199/    4E65 :                     ;
   16200/    4E65 :                     ; I/O helper function.
   16201/    4E65 :                     ; HL, DE, BC pushed on stack before call
   16202/    4E65 :                     ;
   16203/    4E65 :                     ; L_DEV_OUTPUT() also pushes PSW
   16204/    4E65 :                     ;
   16205/    4E65 :                     ; Validates Device Code
   16206/    4E65 :                     ;
   16207/    4E65 :                     ; Only returns to caller if error
   16208/    4E65 :                     ; IN:
   16209/    4E65 :                     ;	A			DCB function
   16210/    4E65 :                     ;	HL			FCB ptr
   16211/    4E65 :                     ; OUT:
   16212/    4E65 :                     ;
   16213/    4E65 :                     ;
   16214/    4E65 :                     ; DE preserved
   16215/    4E65 :                     ;
   16216/    4E65 :                     L_DEV_VALIDATOR:
   16217/    4E65 : F5                      PUSH    PSW							;save DCB function
   16218/    4E66 : D5                      PUSH    D							;save DE ptr
   16219/    4E67 : EB                      XCHG								;FCB ptr to DE
   16220/    4E68 : 21 04 00                LXI     H,DEV_IN_FCB_OFS			;offset 4 
   16221/    4E6B : 19                      DAD     D							;index
   16222/    4E6C : 7E                      MOV     A,M							;get Device code (negative offset 0F8H..0FFH)
   16223/    4E6D : EB                      XCHG								;FCB ptr back to HL
   16224/    4E6E : D1                      POP     D							;restore DE ptr
   16225/    4E6F : FE 09                   CPI     09H							;Device code limit
   16226/    4E71 : DA 1A 4F                JC      L_POPPSW_RET				;brif A < 9: POP PSW & RET
   16227/    4E74 : F1                      POP     PSW							;restore DCB function
   16228/    4E75 : E3                      XTHL								;remove return address from stack
   16229/    4E76 : E1                      POP     H
   16230/    4E77 : C3 23 51                JMP     L_EXEC_DCB_FUNC
   16231/    4E7A :                     ;
   16232/    4E7A :                     ; Device Input Function.
   16233/    4E7A :                     ;
   16234/    4E7A :                     ; IN:
   16235/    4E7A :                     ;	HL			FCB ptr
   16236/    4E7A :                     ; OUT:
   16237/    4E7A :                     ;	carry		set if Error
   16238/    4E7A :                     ;
   16239/    4E7A :                     L_DEV_INPUT:
   16240/    4E7A : C5                      PUSH    B							;save BC, HL, DE
   16241/    4E7B : E5                      PUSH    H
   16242/    4E7C : D5                      PUSH    D
   16243/    4E7D : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16244/    4E80 : 3E 06                   MVI     A,DCBIN_FUN					;DCB In function 
   16245/    4E82 : CD 65 4E                CALL    L_DEV_VALIDATOR				;HL contains FCB ptr. No return
   16246/    4E85 : (MACRO)             	RST38H	0EH
   16247/    4E87 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			; Generate NM error
   16248/    4E8A :                     ;
   16249/    4E8A :                     ; Pops DE, HL, BC from stack
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 273 - 9/5/2025 20:20:35


   16250/    4E8A :                     ; Must be jumped to.
   16251/    4E8A :                     ;
   16252/    4E8A :                     L_POPDHBREGS:
   16253/    4E8A : D1                      POP     D
   16254/    4E8B : E1                      POP     H
   16255/    4E8C : C1                      POP     B
   16256/    4E8D : C9                      RET
   16257/    4E8E :                     ;
   16258/    4E8E :                     ; INPUT_2 statement
   16259/    4E8E :                     ;
   16260/    4E8E :                     ; INPUT$(num[, file])
   16261/    4E8E :                     ;
   16262/    4E8E :                     ; Chars read are store in a string which is pushed on the string stack
   16263/    4E8E :                     ;
   16264/    4E8E :                     ;
   16265/    4E8E :                     R_INPUT_STMT_2:							;4E8EH
   16266/    4E8E : (MACRO)                 CHRGET								;Get next non-white char from M
   16267/    4E8F : (MACRO)             	SYNCHK	'$'
   16268/    4E91 : (MACRO)             	SYNCHK	'('
   16269/    4E93 : E5                      PUSH    H
   16270/    4E94 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16271/    4E97 : E5                      PUSH    H
   16272/    4E98 : 21 00 00                LXI     H,0
   16273/    4E9B : 22 8C FC                SHLD    FCBLAST_R					;Clear FCB ptr for the last file used (2 bytes)
   16274/    4E9E : E1                      POP     H							;swap HL and [STK]
   16275/    4E9F : E3                      XTHL
   16276/    4EA0 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   16277/    4EA3 : D5                      PUSH    D							;save number of bytes to read
   16278/    4EA4 : 7E                      MOV     A,M							;get next char
   16279/    4EA5 : FE 2C                   CPI     ','
   16280/    4EA7 : C2 BB 4E                JNZ     L_INPUT_2_1					;brif no ',': use keyboard
   16281/    4EAA :                     ; ',' found
   16282/    4EAA : (MACRO)                 CHRGET								;Get next non-white char from M
   16283/    4EAB : CD B3 4C                CALL    L_SET_FCBLAST				;get FCB ptr from file#. Returns File status and text pointer on stack
   16284/    4EAE : FE 01                   CPI     01H							;00000001 internal use?
   16285/    4EB0 : CA B8 4E                JZ      +
   16286/    4EB3 : FE 04                   CPI     04H							;00000100 reserved?
   16287/    4EB5 : C2 63 50                JNZ     R_GEN_EF_ERR_FUN			;Generate EF error
   16288/    4EB8 : E1                  +	POP     H							;retrieve text ptr returned by L_SET_FCBLAST
   16289/    4EB9 : AF                      XRA     A							;TODO useless
   16290/    4EBA : 7E                      MOV     A,M							;get next char
   16291/    4EBB :                     L_INPUT_2_1:
   16292/    4EBB : F5                      PUSH    PSW							;save flags: File or keyboard
   16293/    4EBC : (MACRO)             	SYNCHK	')'
   16294/    4EBE : F1                      POP     PSW							;restore A
   16295/    4EBF : E3                      XTHL								;swap text ptr and [SP]
   16296/    4EC0 : F5                      PUSH    PSW							;save A
   16297/    4EC1 : 7D                      MOV     A,L							;test LSB File number
   16298/    4EC2 : B7                      ORA     A
   16299/    4EC3 : CA DB 08                JZ      R_GEN_FC_ERROR				;Generate FC error
   16300/    4EC6 : E5                      PUSH    H
   16301/    4EC7 : CD 5D 27                CALL    L_PREP_STR					;Reserve String space and set Transitory String
   16302/    4ECA : EB                      XCHG
   16303/    4ECB : C1                      POP     B							;number of bytes to read to BC
   16304/    4ECC :                     ; Actual read
   16305/    4ECC : F1                  -	POP     PSW							;retrieve flags:  flags: File or keyboard
   16306/    4ECD : F5                      PUSH    PSW
   16307/    4ECE : CA F6 4E                JZ      L_INPUT_2_4					;brif Z: read from Device
   16308/    4ED1 : CD CB 12                CALL    R_WAIT_KEY				  	;Wait for key from keyboard
   16309/    4ED4 : FE 03                   CPI     03H							;^C
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 274 - 9/5/2025 20:20:35


   16310/    4ED6 : CA EB 4E                JZ      L_INPUT_2_3
   16311/    4ED9 :                     ;
   16312/    4ED9 :                     ; store char read in Transient string
   16313/    4ED9 :                     ;
   16314/    4ED9 :                     L_INPUT_2_2:
   16315/    4ED9 : 77                      MOV     M,A							;keyboard char to Transient string
   16316/    4EDA : 23                      INX     H							;next
   16317/    4EDB : 0D                      DCR     C							;count
   16318/    4EDC : C2 CC 4E                JNZ     -							;read more
   16319/    4EDF : F1                      POP     PSW							;clear stack
   16320/    4EE0 : C1                      POP     B
   16321/    4EE1 : E1                      POP     H
   16322/    4EE2 : (MACRO)             	RST38H	10H
   16323/    4EE4 : 22 8C FC                SHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16324/    4EE7 : C5                      PUSH    B							;text ptr
   16325/    4EE8 : C3 8D 27                JMP     L_STRSTK_ADD				;add Transient String to String Stack
   16326/    4EEB :                     ;
   16327/    4EEB :                     ; ^C on keyboard
   16328/    4EEB :                     ;
   16329/    4EEB :                     L_INPUT_2_3:
   16330/    4EEB : F1                      POP     PSW
   16331/    4EEC : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
   16332/    4EEF : 22 9F FB                SHLD    ERRLIN_R					;Line number of last error
   16333/    4EF2 : E1                      POP     H
   16334/    4EF3 : C3 22 04                JMP     R_INIT_AND_READY			;Initialize system and go to BASIC ready
   16335/    4EF6 :                     ;
   16336/    4EF6 :                     ; read a char from DEVICE
   16337/    4EF6 :                     ;
   16338/    4EF6 :                     L_INPUT_2_4:
   16339/    4EF6 : CD 7A 4E                CALL    L_DEV_INPUT					;read char
   16340/    4EF9 : DA 63 50                JC      R_GEN_EF_ERR_FUN			;brif error: Generate EF error
   16341/    4EFC : C3 D9 4E                JMP     L_INPUT_2_2
   16342/    4EFF :                     ;
   16343/    4EFF :                     ; Clear FCB buffer if FCBLAST_R
   16344/    4EFF :                     ; OUT:
   16345/    4EFF :                     ;	A		0
   16346/    4EFF :                     ;	HL		&(FCBLAST_R->9)
   16347/    4EFF :                     ;
   16348/    4EFF :                     L_CLR_FCBLAST_BUF:
   16349/    4EFF : CD 12 4F                CALL    L_GET_FCBLAST_BUF
   16350/    4F02 : E5                      PUSH    H
   16351/    4F03 : 06 00                   MVI     B,00H						;256 count
   16352/    4F05 : CD 0A 4F                CALL    R_CLEAR_MEM				  	;Zero B bytes at M. A == 0
   16353/    4F08 :                     L_POPH_RET:								;tail merge
   16354/    4F08 : E1                      POP     H
   16355/    4F09 : C9                      RET
   16356/    4F0A :                     ;
   16357/    4F0A :                     ; Zero B bytes at M
   16358/    4F0A :                     ;
   16359/    4F0A :                     ; IN:
   16360/    4F0A :                     ;	HL
   16361/    4F0A :                     ; OUT:
   16362/    4F0A :                     ;	A == 0
   16363/    4F0A :                     ;
   16364/    4F0A :                     R_CLEAR_MEM:							;4F0AH
   16365/    4F0A : AF                      XRA     A
   16366/    4F0B :                     ;R_LOAD_MEM:							;4F0BH
   16367/    4F0B : 77                  -	MOV     M,A
   16368/    4F0C : 23                      INX     H
   16369/    4F0D : 05                      DCR     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 275 - 9/5/2025 20:20:35


   16370/    4F0E : C2 0B 4F                JNZ     -							;R_LOAD_MEM Load B bytes at M with A
   16371/    4F11 : C9                      RET
   16372/    4F12 :                     ;
   16373/    4F12 :                     ; OUT:
   16374/    4F12 :                     ;	HL		&(FCBLAST_R->BUFFER_IN_FCB)
   16375/    4F12 :                     ;
   16376/    4F12 :                     L_GET_FCBLAST_BUF
   16377/    4F12 : 2A 8C FC                LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16378/    4F15 : 11 09 00                LXI     D,BUFFER_IN_FCB_OFS			;offset 9
   16379/    4F18 : 19                      DAD     D							;index
   16380/    4F19 : C9                      RET
   16381/    4F1A :                     ;
   16382/    4F1A :                     ; POP PSW & RET
   16383/    4F1A :                     ;
   16384/    4F1A :                     L_POPPSW_RET:
   16385/    4F1A : F1                      POP     PSW
   16386/    4F1B : C9                      RET
   16387/    4F1C :                     ;
   16388/    4F1C :                     ; Generate "Direct Statement in File" error if FCBLAST != 0
   16389/    4F1C :                     ;
   16390/    4F1C :                     L_LINE_NONUM:
   16391/    4F1C : CD 1A 42                CALL    L_TST_FCBLAST
   16392/    4F1F : CA 3A 08                JZ      R_RUN_BASIC_AT_HL			;brif FCBLAST==NULL: Start executing BASIC program at HL
   16393/    4F22 : AF                      XRA     A
   16394/    4F23 : CD 38 4D                CALL    L_CLS_FILENUM
   16395/    4F26 : C3 54 50                JMP     R_GEN_DS_ERR_FUN			;Generate "Direct Statement in File" error
   16396/    4F29 :                     
   16397/    4F29 :                     L_VALIDATE_FILE:						;validate File #
   16398/    4F29 : 0E 01                   MVI     C,01H						;indicated INPUT file mode
   16399/    4F2B :                     L_VALIDATE_FILE_1:
   16400/    4F2B : FE 23                   CPI     '#'							;indicates filenumber coming
   16401/    4F2D : C0                      RNZ
   16402/    4F2E :                     ;
   16403/    4F2E :                     ; PRINT # or INPUT # initialization routine
   16404/    4F2E :                     ; INPUT # and LINE INPUT # do not allow for a prompt string
   16405/    4F2E :                     ;
   16406/    4F2E :                     ; IN:
   16407/    4F2E :                     ;	C		file mode
   16408/    4F2E :                     ;
   16409/    4F2E :                     R_PRINT_LB_INIT_FUN:					;4F2EH
   16410/    4F2E : C5                      PUSH    B							;save BC
   16411/    4F2F : CD 2D 11                CALL    L_GTBYTC					;Evaluate byte expression at M: filenumber to E
   16412/    4F32 : (MACRO)             	SYNCHK	','
   16413/    4F34 : 7B                      MOV     A,E
   16414/    4F35 : E5                      PUSH    H							;save txt ptr
   16415/    4F36 : CD BF 4C                CALL    L_SETUP_FCB
   16416/    4F39 : 7E                      MOV     A,M							;read from FCB: file mode
   16417/    4F3A : E1                      POP     H							;restore txt ptr
   16418/    4F3B : C1                      POP     B							;restore BC
   16419/    4F3C : B9                      CMP     C			
   16420/    4F3D : CA 43 4F                JZ      +							;TODO JNZ Err shorter
   16421/    4F40 : C3 5D 50                JMP     R_GEN_BN_ERR_FUN			;Generate BN error
   16422/    4F43 : 7E                  +	MOV     A,M							;next char from txt
   16423/    4F44 : C9                      RET
   16424/    4F45 :                     ;
   16425/    4F45 :                     ;close file 0 & Load LSTVAR_R
   16426/    4F45 :                     ;
   16427/    4F45 :                     L_CLS_FILE0:							;close file 0 & Load LSTVAR_R:
   16428/    4F45 : 01 9C 3F                LXI     B,L_INIT_BASIC_1			;Continuation function: "load Address of last variable assigned"
   16429/    4F48 : C5                      PUSH    B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 276 - 9/5/2025 20:20:35


   16430/    4F49 : AF                      XRA     A							
   16431/    4F4A : C3 38 4D                JMP     L_CLS_FILENUM				;close file# 0
   16432/    4F4D :                     ;
   16433/    4F4D :                     ; FCBLAST != 0
   16434/    4F4D :                     ; Called from R_READ_STMT
   16435/    4F4D :                     ; variable address on stack
   16436/    4F4D :                     ;
   16437/    4F4D :                     L_READ_STMT_9:
   16438/    4F4D : (MACRO)                 LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   16439/    4F4E :                     ; A now contains VALTYP_R - 3
   16440/    4F4E : 01 31 0D                LXI     B,L_READ_STMT_5				;continuation function
   16441/    4F51 : 11 20 2C                LXI     D,2C20H						;", "
   16442/    4F54 : C2 6F 4F                JNZ     L_LINE_IN_0					;brif not String type
   16443/    4F57 : 5A                      MOV     E,D							;',,' or 2C2CH
   16444/    4F58 : C3 6F 4F                JMP     L_LINE_IN_0
   16445/    4F5B :                     ;
   16446/    4F5B :                     ; LINE INPUT FILENUM statement
   16447/    4F5B :                     ; No prompt string allowed
   16448/    4F5B :                     ;
   16449/    4F5B :                     R_LINE_INPUT_FILE:						;4F5BH
   16450/    4F5B : 01 39 0C                LXI     B,L_FINPRT				;continuation function
   16451/    4F5E : C5                      PUSH    B							;L_FINPRT when done
   16452/    4F5F : CD 29 4F                CALL    L_VALIDATE_FILE				;process Filenum #
   16453/    4F62 : CD 90 47                CALL    R_FIND_VAR_ADDR				;Find address of variable at M and store in DE
   16454/    4F65 : CD D9 35                CALL    L_CHKSTR					;must be a string variable
   16455/    4F68 : D5                      PUSH    D							;save variable address
   16456/    4F69 : 01 BD 09                LXI     B,L_ASSIGN					;continuation function
   16457/    4F6C : AF                      XRA     A							;set A to be (VALTYP_R - 3)
   16458/    4F6D : 57                      MOV     D,A							;D == 0 means do not skip leading spaces
   16459/    4F6E : 5F                      MOV     E,A
   16460/    4F6F :                     ;
   16461/    4F6F :                     ; DE contains format (if jumped from L_READ_STMT_9/R_READ_STMT) or NULL
   16462/    4F6F :                     ; BC contains a continuation function Address
   16463/    4F6F :                     ; A contains (VALTYP_R - 3)
   16464/    4F6F :                     ; variable address on stack
   16465/    4F6F :                     ;
   16466/    4F6F :                     L_LINE_IN_0:							;on entry, DE contains char pattern
   16467/    4F6F : F5                      PUSH    PSW							;save PSW (VALTYP_R - 3)
   16468/    4F70 : C5                      PUSH    B							;continuation function
   16469/    4F71 : E5                      PUSH    H							;txt ptr
   16470/    4F72 : CD 7A 4E            -	CALL    L_DEV_INPUT					;get string
   16471/    4F75 : DA 63 50                JC      R_GEN_EF_ERR_FUN			;brif error: Generate EF error
   16472/    4F78 : FE 20                   CPI     ' '							;skip spaces, max D count
   16473/    4F7A : C2 82 4F                JNZ     +
   16474/    4F7D : 14                      INR     D							;test D
   16475/    4F7E : 15                      DCR     D
   16476/    4F7F : C2 72 4F                JNZ     -							;brif D != 0
   16477/    4F82 : FE 22               +	CPI     '"'
   16478/    4F84 : C2 97 4F                JNZ     +							;branch forward if A != '"'
   16479/    4F87 : 7B                      MOV     A,E							;char pattern
   16480/    4F88 : FE 2C                   CPI     ','
   16481/    4F8A : 3E 22                   MVI     A,'"'						;preload '"'
   16482/    4F8C : C2 97 4F                JNZ     +							;brif E != ','
   16483/    4F8F : 57                      MOV     D,A
   16484/    4F90 : 5F                      MOV     E,A
   16485/    4F91 : CD 7A 4E                CALL    L_DEV_INPUT
   16486/    4F94 : DA EA 4F                JC      L_LINE_IN_ERR				;brif error
   16487/    4F97 : 21 85 F6            +	LXI     H,INPBUF_R				    ;Keyboard buffer
   16488/    4F9A : 06 FF                   MVI     B,0FFH
   16489/    4F9C :                     L_LINE_IN_1:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 277 - 9/5/2025 20:20:35


   16490/    4F9C : 4F                      MOV     C,A
   16491/    4F9D : 7A                      MOV     A,D
   16492/    4F9E : FE 22                   CPI     '"'							;22H
   16493/    4FA0 : 79                      MOV     A,C
   16494/    4FA1 : CA D5 4F                JZ      L_LINE_IN_2
   16495/    4FA4 : FE 0D                   CPI     0DH							;CR
   16496/    4FA6 : E5                      PUSH    H
   16497/    4FA7 : CA 0A 50                JZ      L_LINE_IN_5
   16498/    4FAA : E1                      POP     H
   16499/    4FAB : FE 0A                   CPI     0AH							;LF
   16500/    4FAD : C2 D5 4F                JNZ     L_LINE_IN_2					;brif A != LF
   16501/    4FB0 : 4F                  -	MOV     C,A							;save A
   16502/    4FB1 : 7B                      MOV     A,E							;char pattern
   16503/    4FB2 : FE 2C                   CPI     ','
   16504/    4FB4 : 79                      MOV     A,C							;restore A
   16505/    4FB5 : C4 44 50                CNZ     L_LINE_IN_8
   16506/    4FB8 : CD 7A 4E                CALL    L_DEV_INPUT
   16507/    4FBB : DA EA 4F                JC      L_LINE_IN_ERR				;brif error
   16508/    4FBE : FE 0A                   CPI     0AH							;LF
   16509/    4FC0 : CA B0 4F                JZ      -							;brif A == LF
   16510/    4FC3 : FE 0D                   CPI     0DH							;CR
   16511/    4FC5 : C2 D5 4F                JNZ     L_LINE_IN_2					;brif A != CR
   16512/    4FC8 :                     ; A == CR
   16513/    4FC8 : 7B                      MOV     A,E
   16514/    4FC9 : FE 20                   CPI     ' '
   16515/    4FCB : CA E4 4F                JZ      L_LINE_IN_3
   16516/    4FCE : FE 2C                   CPI     ','
   16517/    4FD0 : 3E 0D                   MVI     A,0DH						;CR
   16518/    4FD2 : CA E4 4F                JZ      L_LINE_IN_3
   16519/    4FD5 :                     L_LINE_IN_2:
   16520/    4FD5 : B7                      ORA     A
   16521/    4FD6 : CA E4 4F                JZ      L_LINE_IN_3
   16522/    4FD9 : BA                      CMP     D
   16523/    4FDA : CA EA 4F                JZ      L_LINE_IN_ERR
   16524/    4FDD : BB                      CMP     E
   16525/    4FDE : CA EA 4F                JZ      L_LINE_IN_ERR
   16526/    4FE1 : CD 44 50                CALL    L_LINE_IN_8
   16527/    4FE4 :                     L_LINE_IN_3:
   16528/    4FE4 : CD 7A 4E                CALL    L_DEV_INPUT
   16529/    4FE7 : D2 9C 4F                JNC     L_LINE_IN_1					;brif if no error: loop
   16530/    4FEA :                     ; Error Condition
   16531/    4FEA :                     L_LINE_IN_ERR:
   16532/    4FEA : E5                      PUSH    H
   16533/    4FEB : FE 22                   CPI     '"'							;22H
   16534/    4FED : CA F5 4F                JZ      L_LINE_IN_4
   16535/    4FF0 : FE 20                   CPI     ' '	
   16536/    4FF2 : C2 23 50                JNZ     L_LINE_IN_6
   16537/    4FF5 :                     L_LINE_IN_4:
   16538/    4FF5 : CD 7A 4E                CALL    L_DEV_INPUT					;brif error
   16539/    4FF8 : DA 23 50                JC      L_LINE_IN_6
   16540/    4FFB : FE 20                   CPI     ' '
   16541/    4FFD : CA F5 4F                JZ      L_LINE_IN_4
   16542/    5000 : FE 2C                   CPI     ','
   16543/    5002 : CA 23 50                JZ      L_LINE_IN_6
   16544/    5005 : FE 0D                   CPI     0DH							;CR
   16545/    5007 : C2 15 50                JNZ     +				
   16546/    500A :                     L_LINE_IN_5:
   16547/    500A : CD 7A 4E                CALL    L_DEV_INPUT
   16548/    500D : DA 23 50                JC      L_LINE_IN_6					;brif error
   16549/    5010 : FE 0A                   CPI     0AH							;LF
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 278 - 9/5/2025 20:20:35


   16550/    5012 : CA 23 50                JZ      L_LINE_IN_6
   16551/    5015 : 2A 8C FC            +	LHLD    FCBLAST_R					;FCB ptr for the last file used (2 bytes)
   16552/    5018 : 4F                      MOV     C,A
   16553/    5019 : 3E 08                   MVI     A,DCBIO_FUN
   16554/    501B : CD 65 4E                CALL    L_DEV_VALIDATOR				;HL contains FCB ptr. No return
   16555/    501E : (MACRO)             	RST38H	12H
   16556/    5020 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16557/    5023 :                     L_LINE_IN_6:
   16558/    5023 : E1                      POP     H							;restore txt ptr
   16559/    5024 :                     L_LINE_IN_7:
   16560/    5024 : 36 00                   MVI     M,00H						;mark end of line
   16561/    5026 : 21 84 F6                LXI     H,INPBUF_R-1				;Keyboard buffer
   16562/    5029 : 7B                      MOV     A,E
   16563/    502A : D6 20                   SUI     ' '	
   16564/    502C : CA 36 50                JZ      +							;brif char < ' '
   16565/    502F : 06 00                   MVI     B,00H
   16566/    5031 : CD 6E 27                CALL    R_STRLTI_FOR_B				;Search string at M until 0 found
   16567/    5034 : E1                      POP     H
   16568/    5035 : C9                      RET
   16569/    5036 : (MACRO)             +	LSTTYP								;Determine type of last var used: C Clr = DBL P Clr = SNGL Z Set = String S: Set = Integer
   16570/    5037 : F5                      PUSH    PSW							;save result
   16571/    5038 : (MACRO)                 CHRGET								;Get next non-white char from M
   16572/    5039 : F1                      POP     PSW							;retrieve LSTTYP result
   16573/    503A : F5                      PUSH    PSW
   16574/    503B : DC 40 38                CC      R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
   16575/    503E : F1                      POP     PSW							;restore LSTTYP result
   16576/    503F : D4 40 38                CNC     R_ASCII_TO_DBL				;Convert ASCII number at M to double precision in FAC1
   16577/    5042 : E1                      POP     H
   16578/    5043 : C9                      RET
   16579/    5044 :                     
   16580/    5044 :                     L_LINE_IN_8:
   16581/    5044 : B7                      ORA     A							;test A
   16582/    5045 : C8                      RZ									;retif A == 0
   16583/    5046 : 77                      MOV     M,A							;update M
   16584/    5047 : 23                      INX     H							;next
   16585/    5048 : 05                      DCR     B							;counter
   16586/    5049 : C0                      RNZ									;retif not done
   16587/    504A : F1                      POP     PSW
   16588/    504B : C3 24 50                JMP     L_LINE_IN_7
   16589/    504E :                     ;
   16590/    504E :                     ; Generate NM error
   16591/    504E :                     ;
   16592/    504E :                     R_GEN_NM_ERR_FUN:						;504EH
   16593/    504E : 1E 37                   MVI     E,37H
   16594/    5050 : (MACRO)             	SKIP_2BYTES_INST_BC
   16595/    5051 :                     ;
   16596/    5051 :                     ; Generate AO error
   16597/    5051 :                     ;
   16598/    5051 :                     R_GEN_AO_ERR_FUN:						;5051H
   16599/    5051 : 1E 35                   MVI     E,35H
   16600/    5053 : (MACRO)             	SKIP_2BYTES_INST_BC
   16601/    5054 :                     ;
   16602/    5054 :                     ; Generate DS error
   16603/    5054 :                     ;
   16604/    5054 :                     R_GEN_DS_ERR_FUN:						;5054H
   16605/    5054 : 1E 38                   MVI     E,38H
   16606/    5056 : (MACRO)             	SKIP_2BYTES_INST_BC
   16607/    5057 :                     ;
   16608/    5057 :                     ; Generate FF error
   16609/    5057 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 279 - 9/5/2025 20:20:35


   16610/    5057 :                     R_GEN_FF_ERR_FUN:						;5057H
   16611/    5057 : 1E 34                   MVI     E,34H
   16612/    5059 : (MACRO)             	SKIP_2BYTES_INST_BC
   16613/    505A :                     ;
   16614/    505A :                     ; Generate CF error
   16615/    505A :                     ;
   16616/    505A :                     R_GEN_CF_ERR_FUN:						;505AH
   16617/    505A : 1E 3A                   MVI     E,3AH
   16618/    505C : (MACRO)             	SKIP_2BYTES_INST_BC
   16619/    505D :                     ;
   16620/    505D :                     ; Generate BN error
   16621/    505D :                     ;
   16622/    505D :                     R_GEN_BN_ERR_FUN:						;505DH
   16623/    505D : 1E 33                   MVI     E,33H
   16624/    505F : (MACRO)             	SKIP_2BYTES_INST_BC
   16625/    5060 :                     ;
   16626/    5060 :                     ; Generate IE error
   16627/    5060 :                     ;
   16628/    5060 :                     R_GEN_IE_ERR_FUN:						;5060H
   16629/    5060 : 1E 32                   MVI     E,32H
   16630/    5062 : (MACRO)             	SKIP_2BYTES_INST_BC
   16631/    5063 :                     ;
   16632/    5063 :                     ; Generate EF error
   16633/    5063 :                     ;
   16634/    5063 :                     R_GEN_EF_ERR_FUN:						;5063H
   16635/    5063 : 1E 36                   MVI     E,36H
   16636/    5065 : (MACRO)             	SKIP_2BYTES_INST_BC
   16637/    5066 :                     ;
   16638/    5066 :                     ; Generate FL error
   16639/    5066 :                     ;
   16640/    5066 :                     R_GEN_FL_ERR_FUN:						;5066H
   16641/    5066 : 1E 39                   MVI     E,39H
   16642/    5068 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error 39H
   16643/    506B :                     ;
   16644/    506B :                     ; LOF function
   16645/    506B :                     ;
   16646/    506B :                     R_LOF_FUN:								;506BH
   16647/    506B : (MACRO)             	RST38H	4EH
   16648/    506D :                     ;
   16649/    506D :                     ; LOC function
   16650/    506D :                     ;
   16651/    506D :                     R_LOC_FUN:								;506DH
   16652/    506D : (MACRO)             	RST38H	50H
   16653/    506F :                     ;
   16654/    506F :                     ; LFILES function
   16655/    506F :                     ;
   16656/    506F :                     R_LFILES_FUN:							;506FH
   16657/    506F : (MACRO)             	RST38H	52H
   16658/    5071 :                     ;
   16659/    5071 :                     ; DSKO$ function
   16660/    5071 :                     ;
   16661/    5071 :                     R_DSKO_FUN:								;5071H
   16662/    5071 : (MACRO)             	RST38H	56H
   16663/    5073 :                     ;
   16664/    5073 :                     ; DSKI$ function
   16665/    5073 :                     ;
   16666/    5073 :                     ; IN:
   16667/    5073 :                     ;	HL		string ptr
   16668/    5073 :                     ;	E		length of string
   16669/    5073 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 280 - 9/5/2025 20:20:35


   16670/    5073 :                     R_DSKI_FUN:								;5073H
   16671/    5073 : (MACRO)             	RST38H	54H
   16672/    5075 :                     L_DEVTST_FUN:							;test for DEVICE name
   16673/    5075 : (MACRO)             	RST38H	28H
   16674/    5077 : 7E                      MOV     A,M							;next char
   16675/    5078 : FE 3A                   CPI     ':'
   16676/    507A : DA 96 50                JC      L_NM_ERR					;brif < ':': Generate NM error
   16677/    507D : E5                      PUSH    H							;save txt ptr
   16678/    507E : 53                      MOV     D,E							;save length of string
   16679/    507F : CD 7D 4C                CALL    L_NEXTCHAR_DECE				;updates E
   16680/    5082 : CA 90 50                JZ      L_DEVTST_0					;brif no more chars
   16681/    5085 : FE 3A               -	CPI     ':'
   16682/    5087 : CA 9B 50                JZ      L_DEVSPEC_FND				;brif Device Specifier found
   16683/    508A : CD 7D 4C                CALL    L_NEXTCHAR_DECE
   16684/    508D : F2 85 50                JP      -							;brif E >= 0
   16685/    5090 :                     ; Device Specifier NOT found.
   16686/    5090 :                     ; string ptr on stack
   16687/    5090 :                     L_DEVTST_0:
   16688/    5090 : 5A                      MOV     E,D							;restore length of string
   16689/    5091 : E1                      POP     H							;restore txt ptr
   16690/    5092 : AF                      XRA     A
   16691/    5093 : (MACRO)             	RST38H	2AH							;RST 38H Vector entry based on argument
   16692/    5095 : C9                      RET
   16693/    5096 :                     
   16694/    5096 :                     L_NM_ERR:
   16695/    5096 : (MACRO)             	RST38H	2EH
   16696/    5098 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16697/    509B :                     ;
   16698/    509B :                     ; Device Specifier found
   16699/    509B :                     ; string ptr on stack
   16700/    509B :                     ;
   16701/    509B :                     L_DEVSPEC_FND:
   16702/    509B : 7A                      MOV     A,D							;A = original length of string
   16703/    509C : 93                      SUB     E							;	- remaining length of string - 1
   16704/    509D : 3D                      DCR     A
   16705/    509E : FE 02                   CPI     02H
   16706/    50A0 : D2 A8 50                JNC     +							;brif A >= 2
   16707/    50A3 : (MACRO)             	RST38H	2CH
   16708/    50A5 : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16709/    50A8 :                     
   16710/    50A8 : FE 05               +	CPI     05H							;length
   16711/    50AA : D2 4E 50                JNC     R_GEN_NM_ERR_FUN			;brif if A >= 5: Generate NM error 
   16712/    50AD : C1                      POP     B							;restore string ptr
   16713/    50AE : D5                      PUSH    D							;DE to stack
   16714/    50AF : C5                      PUSH    B							;save string ptr
   16715/    50B0 : 4F                      MOV     C,A							;count
   16716/    50B1 : 47                      MOV     B,A							;saved count
   16717/    50B2 : 11 F1 50                LXI     D,R_DEV_NAME_TBL			;Code Based.
   16718/    50B5 :                     										;	DE: "LCD","CRT","CAS","COM","WAND","LPT","MDM","RAM"
   16719/    50B5 : E3                      XTHL								;swap HL with saved string ptr
   16720/    50B6 : E5                      PUSH    H							;save string ptr	
   16721/    50B7 :                     ;
   16722/    50B7 :                     ; on stack
   16723/    50B7 :                     ;	string Ptr
   16724/    50B7 :                     ;	HL
   16725/    50B7 :                     ;	DE
   16726/    50B7 :                     ;		
   16727/    50B7 :                     LOOP_DEVNAME:
   16728/    50B7 : CD E8 0F            	CALL    R_CONV_M_TOUPPER			;Get char at M and convert to uppercase
   16729/    50BA : C5                      PUSH    B							;save BC: string length
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 281 - 9/5/2025 20:20:35


   16730/    50BB : 47                      MOV     B,A							;uppercase char
   16731/    50BC : 1A                      LDAX    D							;Code Based. from DEVNAMES
   16732/    50BD : 23                      INX     H							;next string ptr
   16733/    50BE : 13                      INX     D							;next DEVNAME ptr
   16734/    50BF : B8                      CMP     B
   16735/    50C0 : C1                      POP     B							;restore BC
   16736/    50C1 : C2 DC 50                JNZ     L_DEVNAME_NOMATCH			;brif A != B
   16737/    50C4 : 0D                      DCR     C							;count
   16738/    50C5 : C2 B7 50                JNZ     LOOP_DEVNAME
   16739/    50C8 :                     L_DEVSPEC_0:							;DEVNAME partial match
   16740/    50C8 : 1A                      LDAX    D							;DEVNAME device code
   16741/    50C9 : B7                      ORA     A
   16742/    50CA : FA D7 50                JM      +							;brif DEVNAME device code bit 7 set
   16743/    50CD : FE 31                   CPI     '1'
   16744/    50CF : C2 DC 50                JNZ     L_DEVNAME_NOMATCH			;brif DEVNAME device code != '1'
   16745/    50D2 :                     ;
   16746/    50D2 :                     ; since '1' is not in the DEVNAMEs table, must be old test code
   16747/    50D2 :                     ;
   16748/    50D2 : 13                      INX     D							;next
   16749/    50D3 : 1A                      LDAX    D							;load to D
   16750/    50D4 : C3 DC 50                JMP     L_DEVNAME_NOMATCH
   16751/    50D7 :                     ;
   16752/    50D7 :                     ; successful DEVNAME match
   16753/    50D7 :                     ;
   16754/    50D7 : E1                  +	POP     H							;string ptr
   16755/    50D8 : E1                      POP     H							;HL
   16756/    50D9 : D1                      POP     D							;DE
   16757/    50DA : B7                      ORA     A
   16758/    50DB : C9                      RET
   16759/    50DC :                     ;
   16760/    50DC :                     ; no DEVNAME match. Find next DEVNAME
   16761/    50DC :                     ;
   16762/    50DC :                     L_DEVNAME_NOMATCH:
   16763/    50DC : B7                      ORA     A							;test if char == DEVNAME device code
   16764/    50DD : FA C8 50                JM      L_DEVSPEC_0					;brif device code
   16765/    50E0 : 1A                  -	LDAX    D							;get char
   16766/    50E1 : B7                      ORA     A
   16767/    50E2 : 13                      INX     D							;next
   16768/    50E3 : F2 E0 50                JP      -							;brif !device code
   16769/    50E6 :                     ; found a device code
   16770/    50E6 : 48                      MOV     C,B							;restore count
   16771/    50E7 : E1                      POP     H							;restore string ptr
   16772/    50E8 : E5                      PUSH    H							;and save string ptr
   16773/    50E9 : 1A                      LDAX    D							;next char from DEVNAME table. DE not incremented
   16774/    50EA : B7                      ORA     A
   16775/    50EB : C2 B7 50                JNZ     LOOP_DEVNAME				;brif not end of table
   16776/    50EE : C3 4E 50                JMP     R_GEN_NM_ERR_FUN			;Generate NM error
   16777/    50F1 :                     ;
   16778/    50F1 :                     ; Device name table
   16779/    50F1 :                     ;
   16780/    50F1 :                     R_DEV_NAME_TBL:							;50F1H
   16781/    50F1 : 4C 43 44 FF             DB  "LCD", LCD_DEV	
   16782/    50F5 : 43 52 54 FE             DB  "CRT", CRT_DEV	
   16783/    50F9 : 43 41 53 FD             DB  "CAS", CAS_DEV	
   16784/    50FD : 43 4F 4D FC             DB  "COM", COM_DEV	
   16785/    5101 : 57 41 4E 44 FB          DB  "WAND", WAND_DEV
   16786/    5106 : 4C 50 54 FA             DB  "LPT", LPT_DEV	
   16787/    510A : 4D 44 4D F9             DB  "MDM", MDM_DEV
   16788/    510E : 52 41 4D F8             DB  "RAM", RAM_DEV
   16789/    5112 : 00                      DB	0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 282 - 9/5/2025 20:20:35


   16790/    5113 :                     ;
   16791/    5113 :                     ; Device control block vector addresses table
   16792/    5113 :                     ;
   16793/    5113 :                     ; Each DCB may have upto 5 functions:
   16794/    5113 :                     ;	0	Open
   16795/    5113 :                     ;	2	Close
   16796/    5113 :                     ;	4	Out
   16797/    5113 :                     ;	6	In
   16798/    5113 :                     ;	8	IO
   16799/    5113 :                     ;
   16800/    5113 :                     R_DCB_VCTR_TBL:							;5113H
   16801/    5113 : D2 14 F2 14 7F 16       DW      R_LCD_DCB, R_CRT_DCB, R_CAS_DCB
   16802/    5119 : 62 17 77 18 54 17       DW      R_COM_DCB, R_BCR_DCB, R_LPT_DCB
   16803/    511F : D1 17 FC 14             DW      R_MDM_DCB, R_RAM_DCB
   16804/    5123 :                     ;
   16805/    5123 :                     ; L_EXEC_DCB_FUNC
   16806/    5123 :                     ;
   16807/    5123 :                     ; HL, DE, BC pushed on stack
   16808/    5123 :                     ;
   16809/    5123 :                     ; IN:
   16810/    5123 :                     ;	HL			;FCB ptr
   16811/    5123 :                     ;	DE			;E has function code
   16812/    5123 :                     ;	A			DCB function (word corrected)
   16813/    5123 :                     ;
   16814/    5123 :                     L_EXEC_DCB_FUNC:
   16815/    5123 : (MACRO)             	RST38H	30H
   16816/    5125 : E5                      PUSH    H							;save FCB ptr
   16817/    5126 : D5                      PUSH    D							;save DE. E has function code
   16818/    5127 : F5                      PUSH    PSW							;save DCB function
   16819/    5128 : 11 04 00                LXI     D,DEV_IN_FCB_OFS
   16820/    512B : 19                      DAD     D							;index to device code
   16821/    512C : 3E FF                   MVI     A,0FFH						;0FFH - device code => index into R_DCB_VCTR_TBL
   16822/    512E : 96                      SUB     M
   16823/    512F : 87                      ADD     A							;double
   16824/    5130 : 5F                      MOV     E,A							;offset
   16825/    5131 : 16 00                   MVI     D,00H						;zero extend
   16826/    5133 : 21 13 51                LXI     H,R_DCB_VCTR_TBL			;Code Based. 
   16827/    5136 : 19                      DAD     D							;index into R_DCB_VCTR_TBL
   16828/    5137 : (MACRO)             	GETDEFROMMNOINC						;DCB function block: Code Based. 
   16829/    513A : F1                      POP     PSW							;restore DCB function
   16830/    513B : 6F                      MOV     L,A							;zero extend DCB function into HL
   16831/    513C : 26 00                   MVI     H,00H
   16832/    513E : 19                      DAD     D							;index into DCB function block
   16833/    513F : (MACRO)             	GETDEFROMMNOINC						;function
   16834/    5142 : EB                      XCHG								;action to HL
   16835/    5143 : D1                      POP     D							;restore. E has function code
   16836/    5144 : E3                      XTHL								;action to stack, restore FCB ptr
   16837/    5145 : C9                      RET									;jump to function
   16838/    5146 :                     
   16839/    5146 : =>FALSE             	if HWMODEM
   16840/    5146 :                     ;
   16841/    5146 :                     ; TELCOM Entry point
   16842/    5146 :                     ;
   16843/    5146 :                     R_TELCOM_ENTRY:							;5146H
   16844/    5146 :                         CALL    R_RESUME_AUTO_SCROLL     	;Resume automatic scrolling
   16845/    5146 :                         LXI     H,R_TELCOM_LABEL_TXT		;Code Based.
   16846/    5146 :                         CALL    R_SET_DISP_FKEY				;Set and display function keys (M has key table)
   16847/    5146 :                         JMP     R_PRINT_TELCOM_STAT      	;Print current STAT settings
   16848/    5146 :                     
   16849/    5146 :                     L_TELCOM_ERR:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 283 - 9/5/2025 20:20:35


   16850/    5146 :                         CALL    R_BEEP_STMT				    ;BEEP statement
   16851/    5146 :                         LXI     H,R_TELCOM_LABEL_TXT
   16852/    5146 :                         CALL    R_SET_FKEYS				    ;Set new function key table
   16853/    5146 :                     ;
   16854/    5146 :                     ; Re-entry point for TELCOM commands
   16855/    5146 :                     ;
   16856/    5146 :                     R_TELCOM_RE_ENTRY:						;515BH
   16857/    5146 :                         CALL    L_RESET_SP_0				;Stop BASIC, Restore BASIC SP
   16858/    5146 :                         LXI     H,L_TELCOM_ERR
   16859/    5146 :                         SHLD    ACTONERR_R					;active ON ERROR handler vector
   16860/    5146 :                         LXI     H,L_TELCOM_MSG				;Code Based.
   16861/    5146 :                         CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   16862/    5146 :                         CALL    R_INP_DISP_LINE_NO_Q     	;Input and display (no "?") line and store
   16863/    5146 :                         CHRGET								;Get next non-white char from M
   16864/    5146 :                         ANA     A
   16865/    5146 :                         JZ      R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   16866/    5146 :                         LXI     D,R_TELCOM_CMD_VCTR_TBL		;Code Based.
   16867/    5146 :                         CALL    L_TELCOM_EXEC_CMD
   16868/    5146 :                         JZ      L_TELCOM_ERR
   16869/    5146 :                         RET
   16870/    5146 :                     
   16871/    5146 :                     L_TELCOM_MSG:
   16872/    5146 :                         DB      "Telcom: ",00H
   16873/    5146 :                     ;
   16874/    5146 :                     ; TELCOM command vector table
   16875/    5146 :                     ;
   16876/    5146 :                     R_TELCOM_CMD_VCTR_TBL:				    ;5185H
   16877/    5146 :                         DB      "STAT"
   16878/    5146 :                         DW      R_TELCOM_STAT_FUN		 	;51C0H
   16879/    5146 :                         DB      "TERM"
   16880/    5146 :                         DW      R_TELCOM_TERM_FUN		 	;5455H
   16881/    5146 :                         DB      "CALL"
   16882/    5146 :                         DW      R_TELCOM_CALL_FUN		 	;522FH
   16883/    5146 :                         DB      "FIND"
   16884/    5146 :                         DW      R_TELCOM_FIND_FUN		 	;524DH
   16885/    5146 :                         DB      "MENU"
   16886/    5146 :                         DW      R_MENU_ENTRY			 	;5797H
   16887/    5146 :                         DB      0FFH
   16888/    5146 :                     ;
   16889/    5146 :                     ; TELCOM label line text table
   16890/    5146 :                     ;
   16891/    5146 :                     R_TELCOM_LABEL_TXT:						;51A4H
   16892/    5146 :                         DB      "Find",0A0H
   16893/    5146 :                         DB      "Call",0A0H
   16894/    5146 :                         DB      "Stat",0A0H
   16895/    5146 :                         DB      "Term",8DH
   16896/    5146 :                         DB      80H
   16897/    5146 :                         DB      80H
   16898/    5146 :                         DB      80H
   16899/    5146 :                         DB      "Menu",8DH
   16900/    5146 :                     ;
   16901/    5146 :                     ; TELCOM STAT instruction routine
   16902/    5146 :                     ;
   16903/    5146 :                     R_TELCOM_STAT_FUN:						;51C0H
   16904/    5146 :                         DCX     H
   16905/    5146 :                         CHRGET								;Get next non-white char from M. Returns Carry flag if Numeric. Zero flag if 0.
   16906/    5146 :                         INR     A							;check for string after "STAT"
   16907/    5146 :                         DCR     A
   16908/    5146 :                         JNZ     R_SET_TELCOM_STAT			;Set STAT and return to TELCOM ready
   16909/    5146 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 284 - 9/5/2025 20:20:35


   16910/    5146 :                     ; Print current STAT settings
   16911/    5146 :                     ;
   16912/    5146 :                     R_PRINT_TELCOM_STAT:				    ;51C7H
   16913/    5146 :                         LXI     H,SERMOD_R				    ;Serial initialization string
   16914/    5146 :                         MVI     B,05H
   16915/    5146 :                     -	MOV     A,M
   16916/    5146 :                         OUTCHR								;Send character in A to screen/printer
   16917/    5146 :                         INX     H
   16918/    5146 :                         DCR     B
   16919/    5146 :                         JNZ     -
   16920/    5146 :                         MVI     A,','
   16921/    5146 :                         OUTCHR								;Send character in A to screen/printer
   16922/    5146 :                         LDA     MDMSPD_R					;Dial speed (1=10pps), 2=20pps
   16923/    5146 :                         RRC									;bit 0 to carry
   16924/    5146 :                         MVI     A,'2'						;32H
   16925/    5146 :                         SBB     B							;B == 0
   16926/    5146 :                         OUTCHR								;Send character in A to screen/printer
   16927/    5146 :                         LXI     H,L_PPS_MSG					;Code Based.
   16928/    5146 :                         CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   16929/    5146 :                         JMP     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   16930/    5146 :                     
   16931/    5146 :                     L_PPS_MSG:
   16932/    5146 :                         DB      "0 pps",00H
   16933/    5146 :                     ;
   16934/    5146 :                     ; Set STAT and return to TELCOM ready
   16935/    5146 :                     ;
   16936/    5146 :                     ; IN: carry means CHRGET returned Numeric
   16937/    5146 :                     ;
   16938/    5146 :                     R_SET_TELCOM_STAT:						;51EDH
   16939/    5146 :                         JC      +							;brif numeric char 
   16940/    5146 :                         CPI     ','
   16941/    5146 :                         JZ      L_SET_STAT_1
   16942/    5146 :                         CALL    R_CONV_A_TOUPPER			;Convert A to uppercase
   16943/    5146 :                         CPI     'M'							;4DH
   16944/    5146 :                         JNZ     L_TELCOM_ERR
   16945/    5146 :                         INX     H							;skip 'M'
   16946/    5146 :                     +	CALL    R_SET_RS232_PARAMS       	;Set RS232 parameters from string at M
   16947/    5146 :                         CALL    R_UNINIT_RS232_MDM       	;Deactivate RS232 or modem
   16948/    5146 :                         DCX     H
   16949/    5146 :                         CHRGET								;Get next non-white char from M
   16950/    5146 :                         ANA     A
   16951/    5146 :                         JZ      R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   16952/    5146 :                     L_SET_STAT_1:
   16953/    5146 :                     	SYNCHK	','
   16954/    5146 :                         CALL    L_GETBYT    				;Evaluate byte expression at M-1
   16955/    5146 :                         CPI     14H
   16956/    5146 :                         JZ      +
   16957/    5146 :                         SUI     0AH
   16958/    5146 :                         JNZ     L_TELCOM_ERR
   16959/    5146 :                         INR     A
   16960/    5146 :                     +	STA     MDMSPD_R					;Dial speed (1=10pps), 2=20pps
   16961/    5146 :                         JMP     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   16962/    5146 :                     
   16963/    5146 :                     L_TELCOM_CALL:
   16964/    5146 :                         LXI     H,L_CALLING_MSG				;Code Based.
   16965/    5146 :                         CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   16966/    5146 :                         POP     D
   16967/    5146 :                         CALL    L_UTILS_FND_COLON
   16968/    5146 :                         JZ      L_TELCOM_ERR
   16969/    5146 :                         XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 285 - 9/5/2025 20:20:35


   16970/    5146 :                     	SKIP_XRA_A							;actually skip STC
   16971/    5146 :                     ;
   16972/    5146 :                     ; TELCOM CALL instruction routine
   16973/    5146 :                     ;
   16974/    5146 :                     R_TELCOM_CALL_FUN:						;522FH
   16975/    5146 :                         STC
   16976/    5146 :                         PUSH    H
   16977/    5146 :                         LXI     H,L_CALLING_MSG				;Code Based.
   16978/    5146 :                         CC      R_PRINT_STRING2				;Print NULL terminated string at M
   16979/    5146 :                         POP     H
   16980/    5146 :                         CALL    R_EXEC_LOGON_SEQ			; Execute logon sequence at M
   16981/    5146 :                         JC      L_TELCOM_ERR
   16982/    5146 :                         JNZ     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   16983/    5146 :                         JMP     L_TELCOM_TERM_1
   16984/    5146 :                     
   16985/    5146 :                     L_CALLING_MSG:
   16986/    5146 :                         DB      "Calling ",00H
   16987/    5146 :                     ;
   16988/    5146 :                     ; TELCOM FIND instruction routine
   16989/    5146 :                     ; text in buffer
   16990/    5146 :                     ;
   16991/    5146 :                     R_TELCOM_FIND_FUN:						;524DH
   16992/    5146 :                         SUB     A							;fnd flag
   16993/    5146 :                         CALL    L_SET_UTILS_OUTPUT
   16994/    5146 :                         PUSH    H
   16995/    5146 :                         CALL    L_SEARCH_ADRS
   16996/    5146 :                         JZ      L_TELCOM_ERR
   16997/    5146 :                         CALL    R_GET_FILE_ADDR_PREINC_HL	;Get start address of file at M
   16998/    5146 :                         XCHG
   16999/    5146 :                         POP     H
   17000/    5146 :                     -	CALL    R_FIND_TEXT_IN_FILE      	;Find text at M in the file at (DE)
   17001/    5146 :                         JNC     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   17002/    5146 :                         PUSH    H
   17003/    5146 :                         PUSH    D
   17004/    5146 :                         CALL    L_SET_UTIL_WIDTH
   17005/    5146 :                         CALL    L_UTILS_FND_COLON
   17006/    5146 :                         CNZ     L_UTILS_FND_AUTOLOG
   17007/    5146 :                         CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
   17008/    5146 :                         CALL    L_TELCOM_FOUND
   17009/    5146 :                         JZ      R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   17010/    5146 :                         CPI     'C'							;43H
   17011/    5146 :                         JZ      L_TELCOM_CALL
   17012/    5146 :                         POP     D
   17013/    5146 :                         CALL    R_FIND_NEXT_LINE_IN_FILE 	;Increment DE past next CRLF in text file at (DE)
   17014/    5146 :                         POP     H
   17015/    5146 :                         JMP     -
   17016/    5146 :                     
   17017/    5146 :                     L_UTILS_FND_COLON:
   17018/    5146 :                         CALL    L_CHK_UTILS_EOL
   17019/    5146 :                         RZ
   17020/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17021/    5146 :                         CPI     ':'
   17022/    5146 :                         INX     D
   17023/    5146 :                         JNZ     L_UTILS_FND_COLON
   17024/    5146 :                     ; A == ':'
   17025/    5146 :                         JMP     L_CHK_UTILS_EOF				;TODO no purpose. Just ret
   17026/    5146 :                     
   17027/    5146 :                     L_UTILS_FND_AUTOLOG:
   17028/    5146 :                         CALL    L_CHK_UTILS_EOL
   17029/    5146 :                         RZ
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 286 - 9/5/2025 20:20:35


   17030/    5146 :                         CPI     '<'
   17031/    5146 :                         JZ      L_UTILS_DISP_AUTOLOG
   17032/    5146 :                         CPI     ':'
   17033/    5146 :                         RZ
   17034/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17035/    5146 :                         INX     D
   17036/    5146 :                         JMP     L_UTILS_FND_AUTOLOG
   17037/    5146 :                     
   17038/    5146 :                     L_UTILS_DISP_AUTOLOG:
   17039/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17040/    5146 :                         MVI     A,'>'
   17041/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17042/    5146 :                         RET
   17043/    5146 :                     
   17044/    5146 :                     L_CHK_UTILS_EOL:
   17045/    5146 :                         CALL    R_CHECK_FOR_CRLF			;Check next byte(s) at (DE) for CRLF
   17046/    5146 :                         DCX     D							;backup ptr
   17047/    5146 :                         LDAX    D
   17048/    5146 :                         RZ									;retif NULL char	
   17049/    5146 :                     L_CHK_UTILS_EOF:
   17050/    5146 :                         CPI     1AH							;^Z
   17051/    5146 :                         JZ      L_TELCOM_ERR
   17052/    5146 :                         RET
   17053/    5146 :                     ;
   17054/    5146 :                     ; Go off-hook
   17055/    5146 :                     ;
   17056/    5146 :                     R_GO_OFFHOOK:							;52B4H
   17057/    5146 :                         INPORT	0BAH						;read 8155 PIO Port B
   17058/    5146 :                         ANI     7FH							;clear bit 7: RTS (not) line for RS232
   17059/    5146 :                         OUTPORT	0BAH						;set 8155 PIO Port B
   17060/    5146 :                         RET
   17061/    5146 :                     ;
   17062/    5146 :                     ; Disconnect phone line and disable modem carrier
   17063/    5146 :                     ;
   17064/    5146 :                     R_DISCONNECT_PHONE:						;52BBH
   17065/    5146 :                         CALL    L_DIS_MODEM
   17066/    5146 :                         CALL    L_DIS_MODEM_RELAY
   17067/    5146 :                     L_DISCONNECT_SERIAL:
   17068/    5146 :                         INPORT	0BAH						;read 8155 PIO Port B
   17069/    5146 :                         ORI     80H							;set bit 7: RTS (not) line for RS232
   17070/    5146 :                         OUTPORT	0BAH						;set 8155 PIO Port B
   17071/    5146 :                         RET
   17072/    5146 :                     
   17073/    5146 :                     L_ENA_MODEM_RELAY:
   17074/    5146 :                         LDA     PORTA8_R					;Contents of port 0A8H
   17075/    5146 :                         ORI     01H							;set MODEM relay
   17076/    5146 :                         JMP     L_SET_MODEM
   17077/    5146 :                     ;
   17078/    5146 :                     ; Connect phone line and enable modem carrier
   17079/    5146 :                     ;
   17080/    5146 :                     R_CONNECT_PHONE:						;52D0H
   17081/    5146 :                         CALL    R_GO_OFFHOOK				;Go off-hook
   17082/    5146 :                         MVI     A,03H						;bit 0: MODEM relay bit 1: MODEM ENABLE
   17083/    5146 :                         JMP     L_SET_MODEM
   17084/    5146 :                     
   17085/    5146 :                     L_DIS_MODEM:
   17086/    5146 :                         LDA     PORTA8_R					;Contents of port 0A8H
   17087/    5146 :                         ANI     01H							;isolate bit 0/clear bit 1
   17088/    5146 :                     L_SET_MODEM:
   17089/    5146 :                         STA     PORTA8_R					;Contents of port 0A8H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 287 - 9/5/2025 20:20:35


   17090/    5146 :                         OUTPORT	0A8H
   17091/    5146 :                         STC
   17092/    5146 :                         RET
   17093/    5146 :                     ;
   17094/    5146 :                     ; Go off-hook and wait for carrier
   17095/    5146 :                     ;
   17096/    5146 :                     R_GO_OFFHOOK_WAIT:						;52E4H
   17097/    5146 :                         INPORT	0BBH						;read 8155 PIO Port C
   17098/    5146 :                         ANI     10H
   17099/    5146 :                         JZ      +
   17100/    5146 :                         CALL    R_CONNECT_PHONE				;Connect phone line and enable modem carrier
   17101/    5146 :                     L_WAIT_CD:
   17102/    5146 :                         CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   17103/    5146 :                         RC									;retif pressed
   17104/    5146 :                         CALL    R_CHECK_CD				    ;Check for carrier detect
   17105/    5146 :                         JNZ     L_WAIT_CD
   17106/    5146 :                         RET
   17107/    5146 :                     +	CALL    L_ENA_MODEM_RELAY
   17108/    5146 :                         CALL    R_GO_OFFHOOK				;Go off-hook
   17109/    5146 :                         NOP    
   17110/    5146 :                         NOP    
   17111/    5146 :                         NOP    
   17112/    5146 :                         CALL    L_WAIT_CD
   17113/    5146 :                         RC									;retif Shift-Break pressed
   17114/    5146 :                         MVI     A,05H
   17115/    5146 :                         CALL    L_PAUSE						;pause
   17116/    5146 :                         CALL    R_CONNECT_PHONE				;Connect phone line and enable modem carrier
   17117/    5146 :                         ANA     A
   17118/    5146 :                         RET
   17119/    5146 :                     ;
   17120/    5146 :                     ; Pause for about 2 seconds
   17121/    5146 :                     ;
   17122/    5146 :                     R_TELCOM_PAUSE:							;5310H
   17123/    5146 :                         XRA     A
   17124/    5146 :                         MVI     A,05H
   17125/    5146 :                     -	CNZ     L_PAUSE_400MSEC				;skip first time through loop
   17126/    5146 :                     L_PAUSE:								;Entry Point with A loaded.
   17127/    5146 :                         DCR     A
   17128/    5146 :                         JNZ     -
   17129/    5146 :                     ; Pause for about 400 mSeconds
   17130/    5146 :                     L_PAUSE_400MSEC:
   17131/    5146 :                         MVI     C,200						;0C8H
   17132/    5146 :                     -	CALL    L_PAUSE_1400uSec
   17133/    5146 :                         CALL    L_PAUSE_1400uSec
   17134/    5146 :                         DCR     C
   17135/    5146 :                         JNZ     -
   17136/    5146 :                     ; Pause 172 * (10 (DCR) + 10 (JNZ)) T-States = 3440 T-states (400 nSec) = 1.376 mSecs
   17137/    5146 :                     L_PAUSE_1400uSec:
   17138/    5146 :                         MVI     B,172						;0ACH
   17139/    5146 :                     -	DCR     B
   17140/    5146 :                         JNZ     -
   17141/    5146 :                         RET
   17142/    5146 :                     ;
   17143/    5146 :                     ; Execute logon sequence at M
   17144/    5146 :                     ;
   17145/    5146 :                     R_EXEC_LOGON_SEQ:						;532DH
   17146/    5146 :                         INPORT	0BAH						;read 8155 PIO Port B
   17147/    5146 :                         PUSH    PSW							;save result
   17148/    5146 :                         ORI     08H							;00001000 set bit 3: Serial toggle (1-Modem, 0-RS232)
   17149/    5146 :                         OUTPORT	0BAH						;set 8155 PIO Port B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 288 - 9/5/2025 20:20:35


   17150/    5146 :                         CALL    R_DIALING_FUN				;Dialing routine. Returns carry
   17151/    5146 :                         POP     B							;last 8155 PIO Port B read
   17152/    5146 :                         PUSH    PSW							;save A/Flags
   17153/    5146 :                         MOV     A,B							;isolate bit 3 in B
   17154/    5146 :                         ANI     08H
   17155/    5146 :                         MOV     B,A
   17156/    5146 :                         INPORT	0BAH						;read 8155 PIO Port B
   17157/    5146 :                         ANI     0F7H						;11110111 clear bit 3
   17158/    5146 :                         ORA     B							;or in B bit 3
   17159/    5146 :                         OUTPORT	0BAH						;set 8155 PIO Port B
   17160/    5146 :                         POP     PSW							;restore A/Flags
   17161/    5146 :                         RNC									;retif carry not set
   17162/    5146 :                         CALL    R_DISCONNECT_PHONE       	;Disconnect phone line and disable modem carrier
   17163/    5146 :                         CALL    L_ENA_MODEM_RELAY
   17164/    5146 :                         MVI     A,03H
   17165/    5146 :                         CALL    L_PAUSE						;pause
   17166/    5146 :                     L_DIS_MODEM_RELAY:
   17167/    5146 :                         LDA     PORTA8_R					;Contents of port 0A8H
   17168/    5146 :                         ANI     02H							;00000010 Isolate bit 1/Clear bit 0
   17169/    5146 :                         JMP     L_SET_MODEM
   17170/    5146 :                     ;
   17171/    5146 :                     ; Dialing routine
   17172/    5146 :                     ;
   17173/    5146 :                     R_DIALING_FUN:							;5359H
   17174/    5146 :                         XRA     A
   17175/    5146 :                         STA     PORTA8_R					;clear Contents of port 0A8H
   17176/    5146 :                         CALL    L_DISCONNECT_SERIAL
   17177/    5146 :                         CALL    L_ENA_MODEM_RELAY
   17178/    5146 :                         CALL    L_PAUSE_400MSEC
   17179/    5146 :                         CALL    R_CONNECT_PHONE				;Connect phone line and enable modem carrier
   17180/    5146 :                         CALL    L_DIS_MODEM
   17181/    5146 :                         CALL    R_TELCOM_PAUSE				;Pause for about 2 seconds
   17182/    5146 :                         DCX     H
   17183/    5146 :                     -	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   17184/    5146 :                         RC									;retif pressed
   17185/    5146 :                         PUSH    H
   17186/    5146 :                         XCHG
   17187/    5146 :                         CALL    R_CHECK_FOR_CRLF			;Check next byte(s) at (DE) for CRLF
   17188/    5146 :                         DCX     D
   17189/    5146 :                         LDAX    D
   17190/    5146 :                         POP     H
   17191/    5146 :                         JZ      R_AUTO_LOGIN_SEQ			;Auto logon sequence
   17192/    5146 :                         CPI     1AH							;ESC
   17193/    5146 :                         JZ      R_AUTO_LOGIN_SEQ			;Auto logon sequence
   17194/    5146 :                         CHRGET								;Get next non-white char from M
   17195/    5146 :                         JZ      R_AUTO_LOGIN_SEQ			;Auto logon sequence
   17196/    5146 :                         PUSH    PSW
   17197/    5146 :                         CC      R_DIAL_DIGIT				;Dial the digit in A & print on LCD
   17198/    5146 :                         POP     PSW
   17199/    5146 :                         JC      -
   17200/    5146 :                         CPI     '<'
   17201/    5146 :                         STC
   17202/    5146 :                         JZ      R_AUTO_LOGIN_SEQ			;Auto logon sequence
   17203/    5146 :                         CPI     '='
   17204/    5146 :                         CZ      R_TELCOM_PAUSE				;Pause for about 2 seconds
   17205/    5146 :                         JMP     -
   17206/    5146 :                     ;
   17207/    5146 :                     ;Auto logon sequence
   17208/    5146 :                     ;
   17209/    5146 :                     R_AUTO_LOGIN_SEQ:						;539EH
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 289 - 9/5/2025 20:20:35


   17210/    5146 :                         PUSH    PSW
   17211/    5146 :                         LDA     MDMSPD_R					;Dial speed (1=10pps), 2=20pps
   17212/    5146 :                         RRC									;bit 0 to carry
   17213/    5146 :                         CNC     L_PAUSE_400MSEC				;calif 
   17214/    5146 :                         POP     PSW
   17215/    5146 :                         JNC     R_DISCONNECT_PHONE       	;Disconnect phone line and disable modem carrier
   17216/    5146 :                         LDA     SERMOD_R					;Serial initialization string
   17217/    5146 :                         CPI     'M'
   17218/    5146 :                         STC
   17219/    5146 :                         RNZ									;retif first char != 'M'
   17220/    5146 :                         PUSH    H							;save HL
   17221/    5146 :                         LXI     H,SERMOD_R+1				;skip 'M'
   17222/    5146 :                         ANA     A							;clear carry
   17223/    5146 :                         CALL    R_SET_RS232_PARAMS       	;Set RS232 parameters from string at M
   17224/    5146 :                         MVI     A,04H
   17225/    5146 :                         CALL    L_PAUSE						;pause
   17226/    5146 :                         POP     H							;restore HL
   17227/    5146 :                         CALL    R_GO_OFFHOOK_WAIT			;Go off-hook and wait for carrier
   17228/    5146 :                         RC
   17229/    5146 :                     L_AUTO_LOG_1:
   17230/    5146 :                         CALL    L_DRAIN_RS232_IN_QUEUE
   17231/    5146 :                         CALL    L_NXTCHR_FROM_M
   17232/    5146 :                         RZ									;retif 0
   17233/    5146 :                         CPI     '>'
   17234/    5146 :                         RZ
   17235/    5146 :                         CPI     '='
   17236/    5146 :                         JZ      L_AUTO_LOG_3
   17237/    5146 :                         CPI     '^'
   17238/    5146 :                         JZ      L_AUTO_LOG_5
   17239/    5146 :                         CPI     '?'
   17240/    5146 :                         JZ      L_AUTO_LOG_4
   17241/    5146 :                         CPI     '!'
   17242/    5146 :                         CZ      L_NXTCHR_FROM_M
   17243/    5146 :                         RZ
   17244/    5146 :                     L_AUTO_LOG_2:
   17245/    5146 :                         CALL    R_SEND_A_USING_XON       	;Send character in A to serial port using XON/XOFF
   17246/    5146 :                         XRA     A
   17247/    5146 :                         INR     A
   17248/    5146 :                     L_AUTO_LOG_3:
   17249/    5146 :                         CZ      R_TELCOM_PAUSE				;Pause for about 2 seconds
   17250/    5146 :                         JMP     L_AUTO_LOG_1
   17251/    5146 :                     
   17252/    5146 :                     L_AUTO_LOG_4:
   17253/    5146 :                         CALL    L_NXTCHR_FROM_M
   17254/    5146 :                         RZ									;retif 0
   17255/    5146 :                     -	CALL    R_READ_RS232_QUEUE       	;Get a character from RS232 receive queue
   17256/    5146 :                         RC									;retif SHIFT_BREAK 
   17257/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17258/    5146 :                         CMP     M
   17259/    5146 :                         JNZ     -
   17260/    5146 :                         JMP     L_AUTO_LOG_1
   17261/    5146 :                     
   17262/    5146 :                     L_AUTO_LOG_5:
   17263/    5146 :                         CALL    L_NXTCHR_FROM_M
   17264/    5146 :                         RZ									;retif char == 0
   17265/    5146 :                         ANI     1FH							;00011111
   17266/    5146 :                         JMP     L_AUTO_LOG_2
   17267/    5146 :                     
   17268/    5146 :                     L_NXTCHR_FROM_M:
   17269/    5146 :                         INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 290 - 9/5/2025 20:20:35


   17270/    5146 :                         MOV     A,M
   17271/    5146 :                         ANA     A
   17272/    5146 :                         RET
   17273/    5146 :                     ;
   17274/    5146 :                     ; Dial the digit in A & print on LCD
   17275/    5146 :                     ;
   17276/    5146 :                     R_DIAL_DIGIT:							;540AH
   17277/    5146 :                         OUTCHR								;Send character in A to screen/printer
   17278/    5146 :                         DI 
   17279/    5146 :                         ANI     0FH
   17280/    5146 :                         MOV     C,A
   17281/    5146 :                         JNZ     L_DIAL_DIGIT_1
   17282/    5146 :                         MVI     C,0AH
   17283/    5146 :                     L_DIAL_DIGIT_1:
   17284/    5146 :                         LDA     MDMSPD_R					;Dial speed (1=10pps), 2=20pps
   17285/    5146 :                         RRC
   17286/    5146 :                         LXI     D,161CH						;delay constants
   17287/    5146 :                         JNC     +
   17288/    5146 :                         LXI     D,2440H						;delay constants
   17289/    5146 :                     +	CALL    L_DISCONNECT_SERIAL
   17290/    5146 :                     -	CALL    L_PAUSE_1400uSec
   17291/    5146 :                         DCR     E
   17292/    5146 :                         JNZ     -
   17293/    5146 :                         CALL    R_GO_OFFHOOK				;Go off-hook
   17294/    5146 :                     -	CALL    L_PAUSE_1400uSec
   17295/    5146 :                         DCR     D
   17296/    5146 :                         JNZ     -
   17297/    5146 :                         DCR     C
   17298/    5146 :                         JNZ     L_DIAL_DIGIT_1
   17299/    5146 :                         EI     
   17300/    5146 :                         LDA     MDMSPD_R					;Dial speed (1=10pps), 2=20pps
   17301/    5146 :                         ANI     01H
   17302/    5146 :                         INR     A
   17303/    5146 :                         JMP     L_PAUSE						;pause
   17304/    5146 :                     
   17305/    5146 : =>TRUE              	else								;HWMODEM
   17306/    5146 :                     ;
   17307/    5146 :                     ;Unused RAM locations if !HWMODEM
   17308/    5146 :                     ;
   17309/    5146 :                     ;	MDMSPD_R (0F62BH)	Dial speed (1=10pps), 2=20pps
   17310/    5146 :                     ;	PORTA8_R (0FAAEH)   Contents of port 0A8H
   17311/    5146 :                     ;
   17312/    5146 :                     ;
   17313/    5146 :                     ; TELCOM Entry point
   17314/    5146 :                     ;
   17315/    5146 :                     R_TELCOM_ENTRY:							;5146H
   17316/    5146 : CD 44 42                CALL    R_RESUME_AUTO_SCROLL     	;Resume automatic scrolling
   17317/    5149 : 21 99 51                LXI     H,R_TELCOM_LABEL_TXT		;Code Based.
   17318/    514C : CD A5 42                CALL    R_SET_DISP_FKEY				;Set and display function keys (M has key table)
   17319/    514F : C3 B4 51                JMP     R_PRINT_TELCOM_STAT      	;Print current STAT settings
   17320/    5152 :                     
   17321/    5152 :                     L_TELCOM_ERR:
   17322/    5152 : CD 29 42                CALL    R_BEEP_STMT				    ;BEEP statement
   17323/    5155 : 21 99 51                LXI     H,R_TELCOM_LABEL_TXT		;Code Based.
   17324/    5158 : CD 7C 5A                CALL    R_SET_FKEYS				    ;Set new function key table
   17325/    515B :                     ;
   17326/    515B :                     ; Re-entry point for TELCOM commands
   17327/    515B :                     ;
   17328/    515B :                     R_TELCOM_RE_ENTRY:						;515BH
   17329/    515B : CD 53 5D                CALL    L_RESET_SP_0				;Stop BASIC, Restore BASIC SP
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 291 - 9/5/2025 20:20:35


   17330/    515E : 21 52 51                LXI     H,L_TELCOM_ERR
   17331/    5161 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   17332/    5164 : 21 7D 51                LXI     H,R_TELCOM_TXT				;Code Based.
   17333/    5167 : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17334/    516A : CD 44 46                CALL    R_INP_DISP_LINE_NO_Q     	;Input and display (no "?") line and store
   17335/    516D : (MACRO)                 CHRGET								;Get next non-white char from M
   17336/    516E : A7                      ANA     A
   17337/    516F : CA 5B 51                JZ      R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   17338/    5172 : 11 86 51                LXI     D,R_TELCOM_CMD_VCTR_TBL		;Code Based.
   17339/    5175 : CD A7 6C                CALL    L_TELCOM_EXEC_CMD
   17340/    5178 : CA 52 51                JZ      L_TELCOM_ERR
   17341/    517B : C9                      RET
   17342/    517C :                     
   17343/    517C :                     R_DISCONNECT_PHONE:
   17344/    517C : C9                  	RET
   17345/    517D :                     
   17346/    517D :                     R_TELCOM_TXT:
   17347/    517D : 54 65 6C 63 6F 6D       DB      "Telcom: ",00H
                    3A 20 00 
   17348/    5186 :                     ;
   17349/    5186 :                     ; TELCOM instruction vector table
   17350/    5186 :                     ;
   17351/    5186 :                     R_TELCOM_CMD_VCTR_TBL:				    ;5185H
   17352/    5186 : 53 54 41 54             DB      "STAT"
   17353/    518A : AD 51                   DW      R_TELCOM_STAT_FUN
   17354/    518C : 54 45 52 4D             DB      "TERM"
   17355/    5190 : 55 54                   DW      R_TELCOM_TERM_FUN		 	;5455H
   17356/    5192 : 4D 45 4E 55             DB      "MENU"
   17357/    5196 : 97 57                   DW      R_MENU_ENTRY			 	;5797H
   17358/    5198 : FF                      DB      0FFH
   17359/    5199 :                     ;
   17360/    5199 :                     ; TELCOM label line text table
   17361/    5199 :                     ;
   17362/    5199 :                     R_TELCOM_LABEL_TXT:
   17363/    5199 : 80                      DB      80H
   17364/    519A : 80                      DB      80H
   17365/    519B : 53 74 61 74 A0          DB      "Stat",0A0H
   17366/    51A0 : 54 65 72 6D 8D          DB      "Term",8DH
   17367/    51A5 : 80                      DB      80H
   17368/    51A6 : 80                      DB      80H
   17369/    51A7 : 80                      DB      80H
   17370/    51A8 : 4D 65 6E 75 8D          DB      "Menu",8DH
   17371/    51AD :                     ;
   17372/    51AD :                     ; TELCOM STAT instruction routine
   17373/    51AD :                     ;
   17374/    51AD :                     R_TELCOM_STAT_FUN:
   17375/    51AD : 2B                      DCX     H
   17376/    51AE : (MACRO)                 CHRGET								;Get next non-white char from M. Returns Carry flag if Numeric. Zero flag if 0.
   17377/    51AF : 3C                      INR     A							;check for string after "STAT"
   17378/    51B0 : 3D                      DCR     A
   17379/    51B1 : C2 C3 51                JNZ     R_SET_TELCOM_STAT			;Set STAT and return to TELCOM ready
   17380/    51B4 :                     ;
   17381/    51B4 :                     ; Print current STAT settings
   17382/    51B4 :                     ;
   17383/    51B4 :                     R_PRINT_TELCOM_STAT:
   17384/    51B4 : 21 5B F6                LXI     H,SERMOD_R				    ;Serial initialization string
   17385/    51B7 : 06 05                   MVI     B,05H
   17386/    51B9 : 7E                  -	MOV     A,M
   17387/    51BA : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   17388/    51BB : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 292 - 9/5/2025 20:20:35


   17389/    51BC : 05                      DCR     B
   17390/    51BD : C2 B9 51                JNZ     -
   17391/    51C0 : C3 5B 51                JMP     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   17392/    51C3 :                     ;
   17393/    51C3 :                     ; Set STAT and return to TELCOM ready
   17394/    51C3 :                     ;
   17395/    51C3 :                     ; IN: carry means CHRGET returned Numeric, HL
   17396/    51C3 :                     ;
   17397/    51C3 :                     R_SET_TELCOM_STAT:
   17398/    51C3 : DA CF 51                JC		+							;brif numeric
   17399/    51C6 : CD E9 0F                CALL    R_CONV_A_TOUPPER			;Convert A to uppercase
   17400/    51C9 : FE 4D                   CPI     'M'							;use modem
   17401/    51CB : C2 52 51                JNZ     L_TELCOM_ERR
   17402/    51CE : 23                      INX     H
   17403/    51CF : CD E6 17            +	CALL    R_SET_RS232_PARAMS       	;Set RS232 parameters from string at M
   17404/    51D2 : CD CB 6E                CALL    R_UNINIT_RS232_MDM       	;Deactivate RS232 or modem
   17405/    51D5 : 2B                      DCX     H
   17406/    51D6 : (MACRO)                 CHRGET								;Get next non-white char from M
   17407/    51D7 : A7                      ANA     A
   17408/    51D8 : C3 5B 51                JMP     R_TELCOM_RE_ENTRY			;Re-entry point for TELCOM commands
   17409/    51DB :                     
   17410/    51DB :                     R_END_MDM_PATCH:
   17411/    51DB :                     
   17412/    51DB : =>TRUE              	if	VT100INROM
   17413/    51DB :                     	include "vt100inrom.asm"
(1)    1/    51DB :                     ;
(1)    2/    51DB :                     ; VT100 code to be included in M100 ROM
(1)    3/    51DB :                     ;
(1)    4/    51DB :                     ; define labels used in the VT100 code
(1)    5/    51DB :                     ;
(1)    6/    51DB : =7E97H              coldboot	EQU	L_RESET_TIME			;cold boot
(1)    7/    51DB :                     ;puhook		EQU	BOOTHK_R		        
(1)    8/    51DB : =F5F4H              himem		EQU	HIMEM_R			        ;location of himem
(1)    9/    51DB : =72FBH              initsys		EQU	L_BEEP_RESET            
(1)   10/    51DB : =8DBH               FCERR 		EQU	R_GEN_FC_ERROR	        ;Generate FC error
(1)   11/    51DB : =434CH              L5char		EQU	R_CHAR_PLOT_5	        ;level 5 character print
(1)   12/    51DB : =1297H              evalbuf		EQU	R_EVAL_EXPR_2	        ;Evaluate the expression in the buffer pointed to by HL
(1)   13/    51DB : =446H               SNERR		EQU	R_GEN_SN_ERROR	        ;Generate Syntax error
(1)   14/    51DB : =FADEH              HCHGET		EQU	HCHGET_R		        ;CHGET hook entry
(1)   15/    51DB : =FAE0H              HCHSNS		EQU	HCHSNS_R		        ;CHSNS hook entry
(1)   16/    51DB : =FAE2H              HCHPUT		EQU	HCHPUT_R		        ;CHPUT (print) hook entry
(1)   17/    51DB : =63F4H              txtload		EQU	L_TEXT_BYTE		        ;Load Address of call within TEXT program
(1)   18/    51DB : =73C5H              blnk		EQU	L_BLINK_LCD		        ;Turn off background task, blink & reinitialize cursor blink time
(1)   19/    51DB : =F63DH              labelprot	EQU	LINPROT_R		        ;Label line protect status
(1)   20/    51DB : =F639H              SYSrowcol	EQU	CSRY_R			        ;SYS current row/col
(1)   21/    51DB : =F63BH              SYSmaxrow	EQU LINCNT_R		        ;MAX SYS row col count
(1)   22/    51DB : =F63CH              SYSmaxcol	EQU	LINWDT_R		        ;MAX SYS col count
(1)   23/    51DB : =F640H              PRTrowcol	EQU	LCDCSY_R		        ;last printed cursor row col
(1)   24/    51DB : =8D7H               CLEAR1		EQU	L_EVAL_POS_EXPR	        ;called by Clear hook handler
(1)   25/    51DB : =FB67H              filebufptr	EQU	MEMSIZ_R		        ;File buffer area pointer
(1)   26/    51DB :                     ;
(1)   27/    51DB :                     ; Unused RAM locations if !HWMODEM (required for VT100INROM)
(1)   28/    51DB :                     ;
(1)   29/    51DB :                     ;	MDMSPD_R		Dial speed (1=10pps, 2=20pps)
(1)   30/    51DB :                     ;	PORTA8_R		Contents of port A8H
(1)   31/    51DB :                     ;
(1)   32/    51DB : =F62BH              ESC_pending	EQU MDMSPD_R				;stores pending ESC condition 0 = no ESC, 1=ESC
(1)   33/    51DB : =FAAEH              Ypending	EQU	PORTA8_R				;ESC Y is pending (00 = cleared, 01 = Y received, 02 = col received)
(1)   34/    51DB :                     ;
(1)   35/    51DB :                     ; next 2 locations are unused RAM locations
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 293 - 9/5/2025 20:20:35


(1)   36/    51DB :                     ;
(1)   37/    51DB : =>TRUE              	if	AUXCON
(1)   38/    51DB : =FFFDH              aux_console	EQU 0FFFDH					;store which serial output to use (0=RS232,1=TTL)
(1)   39/    51DB : [37]                	endif
(1)   40/    51DB : =FFFEH              var1		EQU	0FFFEH					;Flag. Initialized to 1 on cold boot
(1)   41/    51DB :                     ;
(1)   42/    51DB :                     ; TODO use last 8 bytes of Alt LCD Buffer for ESCY sequence
(1)   43/    51DB :                     ;
(1)   44/    51DB : =FDF8H              ESCY		EQU		0FDF8H
(1)   45/    51DB :                     
(1)   46/    51DB :                     dbstart:
(1)   47/    51DB : CD FB 72            		call initsys					;stop beep, reset 8155
(1)   48/    51DE :                     										; cursor status, FF = on, 0 = off
(1)   49/    51DE :                     dbstart1:
(1)   50/    51DE : C3 97 7E            		JMP	coldboot					;Jump into Cold boot routine to set YEAR to 0.  Why???					
(1)   51/    51E1 :                     ;
(1)   52/    51E1 :                     ;RST7 44H - CRT PUT Hook
(1)   53/    51E1 :                     ;
(1)   54/    51E1 :                     hk_crtput:
(1)   55/    51E1 : E1                  		POP	H
(1)   56/    51E2 : F1                  		POP	PSW							;Get Byte to be sent from stack
(1)   57/    51E3 : F5                  		push PSW						;But byte back on stack
(1)   58/    51E4 : CD C7 52            		call snda2dvi					;Call routine to send A to DVI SCREEN Mailbox
(1)   59/    51E7 : C3 ED 14            		JMP	R_POP_ALL_REGS				;Pop AF, BC, DE, HL from stack
(1)   60/    51EA :                     ;
(1)   61/    51EA :                     ;RST7 40H - CRT OPEN Hook
(1)   62/    51EA :                     ;
(1)   63/    51EA :                     hk_crtopen:
(1)   64/    51EA : F1                  		POP	PSW	
(1)   65/    51EB : C3 D8 14            		JMP	R_LCD_OPEN		;LCD and PRT file open routine			
(1)   66/    51EE :                     ;
(1)   67/    51EE :                     ;RST7 08H - Print A to SCREEN hook handler 
(1)   68/    51EE :                     ; all printing loops through this routine, LCD or CRT
(1)   69/    51EE :                     ; include function to turn off cursor on CRT when console is LCD
(1)   70/    51EE :                     ;
(1)   71/    51EE :                     hk_rst4:
(1)   72/    51EE : 4F                  		MOV	C,A							;Save byte to be printed in C
(1)   73/    51EF : 3A 38 F6            		LDA	CONDEV_R					;New Console device flag
(1)   74/    51F2 : B7                  		ORA	A							;Test if New Console flag set
(1)   75/    51F3 : 79                  		MOV	A,C							;Get byte to be printed in A
(1)   76/    51F4 :                     		
(1)   77/    51F4 : 21 FE FF            		LXI	H,var1						;Load cursor status
(1)   78/    51F7 : C2 08 52            		JNZ	hk_rst4_2					;Jump to Print byte to SCREEN if New Console flag set
(1)   79/    51FA :                     ;
(1)   80/    51FA :                     ; CONDEV_R == 0
(1)   81/    51FA :                     ; new console device flag reset, so display on LCD (SCREEN 0)
(1)   82/    51FA :                     ;
(1)   83/    51FA : 7E                  		MOV	A,M							;Get cursor status flag in A
(1)   84/    51FB : 36 00               		MVI	M,00H						;indicate cursor is to be off. TODO var1 ever reset? Reset to 1 on warm reboot?
(1)   85/    51FD : A7                  		ANA	A							;test was it off already?
(1)   86/    51FE : 79                  		MOV	A,C							;Get byte to Print in A 
(1)   87/    51FF : C8                  		RZ								;Return here to print character on LCD, cursor was turned off already
(1)   88/    5200 :                     ;
(1)   89/    5200 :                     ;ok so turn off the cursor
(1)   90/    5200 :                     ;
(1)   91/    5200 : F5                  		push	PSW						;Save byte to be printed on Stack
(1)   92/    5201 : 3E 51               		mvi		a,'Q'					;turn cursor off escape sequence
(1)   93/    5203 : CD 17 53            		call	sendESCa
(1)   94/    5206 : F1                  		POP		PSW						;Restore byte to be printed from stack
(1)   95/    5207 : C9                  		RET								;Return here to print character on LCD
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 294 - 9/5/2025 20:20:35


(1)   96/    5208 :                     
(1)   97/    5208 :                     ;
(1)   98/    5208 :                     ; IN:
(1)   99/    5208 :                     ;	HL		ptr to cursor status variable
(1)  100/    5208 :                     ;
(1)  101/    5208 :                     hk_rst4_2:
(1)  102/    5208 : 36 FF               		MVI	M,0FFH						;Indicate DVI SCREEN initialized (or maybe a byte printed)???
(1)  103/    520A : 21 ED 14            		LXI	H,R_POP_ALL_REGS			;pop all registers on return
(1)  104/    520D : E3                  		XTHL							;swap HL with [SP]
(1)  105/    520E : C3 C7 52            		jmp	snda2dvi	
(1)  106/    5211 :                     
(1)  107/    5211 :                     ;
(1)  108/    5211 :                     ;RST7 04H - CHGET.  Test if called from TEXT program and intialize SCREEN.
(1)  109/    5211 :                     ;
(1)  110/    5211 :                     hk_chget:
(1)  111/    5211 :                     ;
(1)  112/    5211 :                     ; check if we were called from R_TEXT_GET_NEXT_BYTE().
(1)  113/    5211 :                     ; the call to R_WAIT_KEY() pushes the return address (L_TEXT_BYTE/txtload)
(1)  114/    5211 :                     ; plus 3 word registers plus L_WAIT_KEY_1, so there are 5 words on the stack
(1)  115/    5211 :                     ;
(1)  116/    5211 : 21 0A 00            	LXI	H,000AH							;Prepare to inspect stack 10 bytes in the past
(1)  117/    5214 : 39                  	DAD	SP								;Get SP + 10 in HL
(1)  118/    5215 : 7E                  	MOV	A,M								;Get LSB of the address that called us
(1)  119/    5216 : 23                  	INX	H								;Increment to MSB
(1)  120/    5217 : 66                  	MOV	H,M								;Get MSB of the address that called us
(1)  121/    5218 : 6F                  	MOV	L,A								;Move LSB to HL
(1)  122/    5219 : 11 F4 63            	LXI	D,txtload						;Load Address of call within TEXT program
(1)  123/    521C : DF                  	RST	3								;Compare DE and HL - Test if called from TEXT
(1)  124/    521D : C0                  	RNZ									;Return if not called from TEXT
(1)  125/    521E :                     	
(1)  126/    521E : CD 4E 42            	call R_TURN_CURSOR_OFF 				;Turn the cursor off
(1)  127/    5221 : 3A 38 F6            	LDA	CONDEV_R							;New Console device flag
(1)  128/    5224 : A7                  	ANA	A								;Test if the Console has been initialized already
(1)  129/    5225 : C8                  	RZ									;Return if console already initialized
(1)  130/    5226 :                     
(1)  131/    5226 : C3 C5 73            	JMP	blnk	
(1)  132/    5229 :                     		
(1)  133/    5229 :                     ;
(1)  134/    5229 :                     ;RST7 3CH - Initialize New Console for LCD/DVI Hook
(1)  135/    5229 :                     ; this routine is hit once, when console flag is set to 1
(1)  136/    5229 :                     ;
(1)  137/    5229 :                     hk_newconsole:
(1)  138/    5229 :                     
(1)  139/    5229 : E1                  	POP	H
(1)  140/    522A : 3A 3D F6            	LDA	labelprot						;Get Label line protect status
(1)  141/    522D : F5                  	push PSW							;Save current Label Line Protect status to stack
(1)  142/    522E :                     	
(1)  143/    522E : AF                  	XRA	A								;Prepare to clear Label Line Protect status
(1)  144/    522F : 32 3D F6            	STA	labelprot						;Clear Label line protect status
(1)  145/    5232 :                     	
(1)  146/    5232 : 2A 39 F6            	lhld SYSrowcol						;SYS current row/col
(1)  147/    5235 : E5                  	push H								;Push current cursor row/col to stack
(1)  148/    5236 :                     	
(1)  149/    5236 : 2A 40 F6            	lhld PRTrowcol						;last printed cursor row col
(1)  150/    5239 : 22 39 F6            	shld SYSrowcol						;SYS current row/col
(1)  151/    523C :                     	
(1)  152/    523C : 21 08 28            	LXI	H,2808H							;Prepare to configure for 8 ROWS, 40 COLS
(1)  153/    523F : 22 3B F6            	shld SYSmaxrow						;MAX SYS row col count	
(1)  154/    5242 : CD 4C 43            	call L5char							;Character plotting level 5. Handle ESC sequences & call level 6
(1)  155/    5245 :                     										;clears label line, 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 295 - 9/5/2025 20:20:35


(1)  156/    5245 :                     				
(1)  157/    5245 : 2A 39 F6            	lhld SYSrowcol						;SYS current row/col
(1)  158/    5248 : 22 40 F6            	shld PRTrowcol						;last printed cursor row col
(1)  159/    524B :                     	
(1)  160/    524B : 2A 44 F6            	lhld DVIMAXROW_R					;MAX DVI row col count
(1)  161/    524E : 22 3B F6            	shld SYSmaxrow						;MAX SYS row col count
(1)  162/    5251 :                     	
(1)  163/    5251 : E1                  	POP	H								;Restore original Cursor ROW,COL from stack
(1)  164/    5252 : 22 39 F6            	shld SYSrowcol						;SYS current row/col
(1)  165/    5255 : F1                  	POP	PSW								;Get original Label Line protect from stack
(1)  166/    5256 : 32 3D F6            	STA	labelprot						;Save as current Label line protect status
(1)  167/    5259 : C9                  	RET	
(1)  168/    525A :                     	
(1)  169/    525A :                     ;
(1)  170/    525A :                     ;RST7 3EH - SCREEN command hook handler.  Initializes DVI SCREEN mode.
(1)  171/    525A :                     ;	
(1)  172/    525A :                     ;Return:  HL = Current row,col
(1)  173/    525A :                     ;         DE = Active rows,cols (25,40)
(1)  174/    525A :                     ;
(1)  175/    525A :                     ;	only gets called if SCREEN 1 or 2, not 0
(1)  176/    525A :                     ; 	implies that the LCD configuration must be detected.
(1)  177/    525A :                     ;
(1)  178/    525A :                     ;	enter with HL pointing to comma of 0,0 argumemnt on stack
(1)  179/    525A :                     ;
(1)  180/    525A :                     hk_screen:
(1)  181/    525A : CD C5 73            	call	blnk						;Turn off background task, blink & reinitialize cursor blink time
(1)  182/    525D : C1                  	pop		b							;get return vector
(1)  183/    525E : E1                  	pop		h							;get txt ptr or directory ptr
(1)  184/    525F : E5                  	push	h
(1)  185/    5260 : C5                  	push	b							;rebuild stack
(1)  186/    5261 :                     ;
(1)  187/    5261 :                     ; if HL points to a directory entry (happens when called from L_SCREEN_STMT_1()
(1)  188/    5261 :                     ; and L_MENU_CTRLU_1() and the extension of the file before the current file
(1)  189/    5261 :                     ; ends in '1' or '2', this code will fail.
(1)  190/    5261 :                     ;
(1)  191/    5261 : 2B                  	dcx		h							;backup
(1)  192/    5262 : 7E                  	mov		a,m							;get arg 1
(1)  193/    5263 :                     
(1)  194/    5263 : =>TRUE              	if	AUXCON
(1)  195/    5263 : FE 32               	cpi		'2'
(1)  196/    5265 : CA C2 52            	jz		screen_TTL					;if 2 then jump to TTL output definition
(1)  197/    5268 : [194]               	endif								;AUXCON
(1)  198/    5268 :                     
(1)  199/    5268 : FE 31               	cpi		'1'
(1)  200/    526A : CA BB 52            	jz		screen_RS232				;if 1 then jump to RS-232 output definition
(1)  201/    526D :                     
(1)  202/    526D : 23                  	inx		h							;next
(1)  203/    526E : 7E                  	mov		a,m
(1)  204/    526F : 21 82 52            	lxi		h,setnewcons				;jmp address for conditional calls
(1)  205/    5272 : E5                  	push	h
(1)  206/    5273 : FE B0               	cpi		0B0h						;ROM command file if HL points to directory
(1)  207/    5275 : C8                  	rz									;if called from F8 process, restore newconsole, leave aux_console
(1)  208/    5276 : FE C0               	cpi		0C0h						;TXT file if HL points to directory
(1)  209/    5278 : C8                  	rz									;if called from F8 process (back to MENU), restore newconsole, leave aux_console
(1)  210/    5279 : FE 80               	cpi		080h						;BASIC file if HL points to directory
(1)  211/    527B : C8                  	rz									;if called from F8 process (back to MENU), restore newconsole, leave aux_console
(1)  212/    527C :                     
(1)  213/    527C : =>FALSE             	if 0
(1)  214/    527C :                     ; FCERR recovers the stack and we need a byte
(1)  215/    527C :                     	pop		H							;remove jmp address
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 296 - 9/5/2025 20:20:35


(1)  216/    527C : [213]               	endif
(1)  217/    527C :                     
(1)  218/    527C : C3 DB 08            	jmp		FCERR						;if not a "1" or a "2" then FC error
(1)  219/    527F :                     ;
(1)  220/    527F :                     ; console request valid
(1)  221/    527F :                     ; aux console = 0 means RS232
(1)  222/    527F :                     ; aux console = 1 means TTL
(1)  223/    527F :                     ;
(1)  224/    527F :                     hk_screen2:
(1)  225/    527F : =>TRUE              	if	AUXCON
(1)  226/    527F : 32 FD FF            	sta		aux_console					;store auxiliary console indicator
(1)  227/    5282 : [225]               	endif
(1)  228/    5282 :                     ; fall through
(1)  229/    5282 :                     setnewcons:
(1)  230/    5282 : 3E 01               	MVI		A,01H						;Prepare to set New Console flag so we re-initialize
(1)  231/    5284 : 32 38 F6            	STA		CONDEV_R					;New Console device flag
(1)  232/    5287 : 2A 42 F6            	lhld	DVIROWCOL_R					;DVI current ROW,COL
(1)  233/    528A : E5                  	push	H							;Save current cursor row, col on stack
(1)  234/    528B : 22 39 F6            	shld	SYSrowcol					;update SYS current row/col
(1)  235/    528E : CD 44 42            	call	R_RESUME_AUTO_SCROLL		;Resume automatic scrolling
(1)  236/    5291 : CD 4E 42            	call	R_TURN_CURSOR_OFF			;Turn the cursor off
(1)  237/    5294 : 2A 44 F6            	lhld	DVIMAXROW_R					;MAX DVI row col count
(1)  238/    5297 : EB                  	XCHG								;Put active (??) rows,cols in DE (used by SCREEN command upon return)
(1)  239/    5298 : E1                  	POP		H							;Get current cursor row,col from stack
(1)  240/    5299 : 7A                  	mov		A,D							;D was just loaded with DVIMAXCOL_R
(1)  241/    529A : 47                  	MOV		B,A							;Save max col WIDTH in B
(1)  242/    529B :                     ; compute COLWRAP_R: max col WIDTH modulo 14, add 14
(1)  243/    529B : D6 0E               -	SUI		14
(1)  244/    529D : D2 9B 52            	JNC		-							;Subtract repeatedly until negative
(1)  245/    52A0 : C6 1C               	ADI		2*14						;Add 14 to get modulo result. Then add 14
(1)  246/    52A2 : 2F                  	CMA									;negate result
(1)  247/    52A3 : 3C                  	INR		A
(1)  248/    52A4 : 80                  	ADD		B							;Add original WIDTH to it.
(1)  249/    52A5 :                     ;
(1)  250/    52A5 :                     ; This is the last column for PRINT, 56. if DVIMAXROW_R==80
(1)  251/    52A5 :                     ; 14. if DVIMAXROW_R==40
(1)  252/    52A5 :                     ;
(1)  253/    52A5 :                     ;add this function just to redisplay function key line if required
(1)  254/    52A5 :                     ;
(1)  255/    52A5 : F5                  	push	PSW
(1)  256/    52A6 : E5                  	push	H
(1)  257/    52A7 : D5                  	push	D
(1)  258/    52A8 : 3A 3D F6            	LDA		labelprot					;Label line protect status
(1)  259/    52AB : B7                  	ora		a							;Test if Function Key line is visible
(1)  260/    52AC : C4 A8 42            	CNZ		R_DISP_FKEY_LINE			;calif visible: Display function key line
(1)  261/    52AF : D1                  	pop		d							;sys max row, col
(1)  262/    52B0 : E1                  	pop		h							;sys current row, col
(1)  263/    52B1 : F1                  	pop		psw							;a = comma value for print, a, hl, de ready for use by calling routine								
(1)  264/    52B2 : C9                  	RET					
(1)  265/    52B3 :                     					
(1)  266/    52B3 :                     init_RS232:								;init serial port		
(1)  267/    52B3 : 21 71 75            	lxi		h,RS232						;Code based. 19200 8N1
(1)  268/    52B6 : 37                  	stc
(1)  269/    52B7 : CD E6 17            	call	R_SET_RS232_PARAMS			;Set RS232 parameters from string at M
(1)  270/    52BA : C9                  	ret
(1)  271/    52BB :                     
(1)  272/    52BB :                     screen_RS232:
(1)  273/    52BB : CD B3 52            	call	init_RS232
(1)  274/    52BE : AF                  	xra		a							;aux console = 0 means RS232
(1)  275/    52BF : C3 7F 52            	jmp		hk_screen2
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 297 - 9/5/2025 20:20:35


(1)  276/    52C2 :                     
(1)  277/    52C2 : =>TRUE              	if	AUXCON
(1)  278/    52C2 :                     screen_TTL:
(1)  279/    52C2 : 3E 01               	mvi		a,1							;aux console = 1 means TTL
(1)  280/    52C4 : C3 7F 52            	jmp		hk_screen2
(1)  281/    52C7 : [277]               	endif
(1)  282/    52C7 :                     ;
(1)  283/    52C7 :                     ;Call routine to send A to DVI SCREEN Mailbox
(1)  284/    52C7 :                     ;  only gets here if newconsole flag set.
(1)  285/    52C7 :                     ;
(1)  286/    52C7 :                     snda2dvi:
(1)  287/    52C7 : CD E1 52            	call	sndA2vid					;Send A to DVI SCREEN Mailbox. Checks for TAB or DEL
(1)  288/    52CA : 4F                  	MOV		C,A							;Move Byte to send to DVI to C
(1)  289/    52CB : 3E 01               	MVI		A,01H						;Prepare to indicate extra POP PSW needed
(1)  290/    52CD : 32 C7 FA            	STA		POPPSW_R					;Indicate extra PSW POP needed during Char level 5 plot   
(1)  291/    52D0 : 3A 38 F6            	LDA		CONDEV_R					;New Console device flag
(1)  292/    52D3 : A7                  	ANA		A							;Test if New Console flag set
(1)  293/    52D4 : CA C9 53            	JZ		lcdconf						;Jump if not new console - reconfigure for LCD here
(1)  294/    52D7 :                     										;CRT still selected
(1)  295/    52D7 :                     	
(1)  296/    52D7 : CD 4C 43            	call	L5char						;Character plotting level 5. Handle ESC sequences & call level 6
(1)  297/    52DA :                     										;not sure what this does
(1)  298/    52DA :                     										;perhaps the POP above gets this L5 routine to update cursor location
(1)  299/    52DA :                     ;
(1)  300/    52DA :                     ; update location
(1)  301/    52DA :                     ;
(1)  302/    52DA : 2A 39 F6            	lhld	SYSrowcol					;SYS current row/col
(1)  303/    52DD : 22 42 F6            	shld	DVIROWCOL_R					;DVI current ROW,COL
(1)  304/    52E0 : C9                  	RET	
(1)  305/    52E1 :                     
(1)  306/    52E1 :                     ;
(1)  307/    52E1 :                     ; Send A to DVI SCREEN. Checks for TAB or DEL
(1)  308/    52E1 :                     ; preserves A
(1)  309/    52E1 :                     ;
(1)  310/    52E1 :                     sndA2vid:
(1)  311/    52E1 : FE 09               	CPI		09H							;Test if Byte to print is TAB
(1)  312/    52E3 : C8                  	RZ									;Return if printing a TAB
(1)  313/    52E4 : FE 7F               	CPI		7FH							;Test if Byte to print is DEL
(1)  314/    52E6 : C8                  	RZ									;Return if printing DEL
(1)  315/    52E7 : E5                  	push	H				
(1)  316/    52E8 : D5                  	push	D							;Save all registers to stack
(1)  317/    52E9 : C5                  	push	B				
(1)  318/    52EA : F5                  	push	PSW			
(1)  319/    52EB : 4F                  	MOV		C,A							;Move byte to print to C
(1)  320/    52EC : CD F2 52            	call	sendc						;Send byte in C to the DVI SCREEN Mailbox
(1)  321/    52EF :                     ; 	LDA		pwrflg						;Load POWER CONT flag perhaps?
(1)  322/    52EF :                     ; 	ANA		A							;Test if POWER CONT flag is zero?
(1)  323/    52EF :                     ; 	JZ		R_POP_ALL_REGS				;Pop AF, BC, DE, HL from stack 7 RET
(1)  324/    52EF :                     ; 	MOV		A,C							;Restore byte printed to DVI to A
(1)  325/    52EF :                     ; 	CPI		58H							;Test if "X" was printed
(1)  326/    52EF :                     ; 	CZ		initdvi						;Call routine to initialize DVI mode if "X" printed. Why??
(1)  327/    52EF : C3 ED 14            	JMP		R_POP_ALL_REGS				;Pop AF, BC, DE, HL from stack & RET
(1)  328/    52F2 :                     ;
(1)  329/    52F2 :                     ; pwrflg might also indicate if an escape code was sent?  esc-X?		
(1)  330/    52F2 :                     ;
(1)  331/    52F2 :                     ;Send byte in C to the DVI SCREEN
(1)  332/    52F2 :                     ;
(1)  333/    52F2 :                     sendc:
(1)  334/    52F2 :                     ;
(1)  335/    52F2 :                     ; first test for escape sequence occurring
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 298 - 9/5/2025 20:20:35


(1)  336/    52F2 :                     ;
(1)  337/    52F2 : 3A 2B F6            	lda		ESC_pending
(1)  338/    52F5 : B7                  	ora		a
(1)  339/    52F6 : 79                  	mov		a,c							;place byte to print in A
(1)  340/    52F7 : C2 2A 53            	jnz		mapM100ESC					;escape is pending. map M100 Escape code to VT100/VT52 code
(1)  341/    52FA : FE 0C               	cpi		0Ch							;no escape pending. is the character 0CH
(1)  342/    52FC : CA 2A 53            	jz		mapM100ESC					;match and send characters
(1)  343/    52FF : FE 0B               	cpi		0Bh							;no escape pending. is the character 0BH
(1)  344/    5301 : CA 2A 53            	jz		mapM100ESC					;match and send characters
(1)  345/    5304 : FE 1B               	cpi		01Bh						;no escape pending. is the character escape?
(1)  346/    5306 : C2 1E 53            	jnz		senda						;value to print in C and A
(1)  347/    5309 : 3E 01               	mvi		a,01
(1)  348/    530B : 32 2B F6            	sta		ESC_pending					;indicate an ESC is pending
(1)  349/    530E : C9                  	ret									;ESC is trapped, just return with no print	
(1)  350/    530F :                     ;
(1)  351/    530F :                     ;Send A protected register
(1)  352/    530F :                     ;
(1)  353/    530F :                     senda_protected:
(1)  354/    530F : E5                  	push	h
(1)  355/    5310 : C5                  	push	b
(1)  356/    5311 : CD 1E 53            	call	senda
(1)  357/    5314 : C1                  	pop		b
(1)  358/    5315 : E1                  	pop		h
(1)  359/    5316 : C9                  	ret
(1)  360/    5317 :                     ;
(1)  361/    5317 :                     ;Send ESC + byte in A to the DVI SCREEN
(1)  362/    5317 :                     ;
(1)  363/    5317 :                     sendESCa:
(1)  364/    5317 : F5                  	push	psw							;temp store
(1)  365/    5318 : 3E 1B               	mvi		a,01BH						;load ESC
(1)  366/    531A : CD 1E 53            	call	senda						;send it
(1)  367/    531D : F1                  	pop		psw							;reload
(1)  368/    531E :                     ;
(1)  369/    531E :                     ;Send byte in A to the DVI SCREEN
(1)  370/    531E :                     ;
(1)  371/    531E :                     senda:
(1)  372/    531E : =>TRUE              	if	AUXCON
(1)  373/    531E : 4F                  	mov		c,a							;temp store
(1)  374/    531F : 3A FD FF            	lda		aux_console
(1)  375/    5322 : B7                  	ora		a
(1)  376/    5323 : 79                  	mov		a,c							;restore
(1)  377/    5324 : CA 32 6E            	jz		R_SEND_A_USING_XON			;send A via RS232
(1)  378/    5327 : C3 15 76            	jmp		fascas						;send at 57600 bits/sec on TTL port
(1)  379/    532A : =>FALSE             	else
(1)  380/    532A :                     	jmp		R_SEND_A_USING_XON			;send A via RS232
(1)  381/    532A : [372]               	endif
(1)  382/    532A :                     ;
(1)  383/    532A :                     ; Map M100 Escape codes to VT100/VT52 + extended codes
(1)  384/    532A :                     ;   look at character after ESC, and send the required sequence
(1)  385/    532A :                     ;   works only for single escape codes, not nested or longer sequences.
(1)  386/    532A :                     ;	ESC Y c,r	Set Cursor Location
(1)  387/    532A :                     ;
(1)  388/    532A :                     mapM100ESC:								;a holds byte following ESC. or direct 0C, 0B	
(1)  389/    532A : 4F                  	mov		c,a							;store next byte to send in C
(1)  390/    532B : 3A AE FA            	lda		Ypending					;0, 1 or 2
(1)  391/    532E : B7                  	ora		a
(1)  392/    532F : C2 75 53            	jnz		processxy					;C holds data, jump here when Ypending flag
(1)  393/    5332 : 79                  	mov		a,c
(1)  394/    5333 : FE 59               	cpi		'Y'							;no Y pending, now check if a Y followed ESC
(1)  395/    5335 : C2 3E 53            	jnz		mapcont	
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 299 - 9/5/2025 20:20:35


(1)  396/    5338 : 3E 01               	mvi		a,1
(1)  397/    533A : 32 AE FA            	sta		Ypending					;Y detected - enable Ypending flag
(1)  398/    533D : C9                  	ret
(1)  399/    533E :                     ;
(1)  400/    533E :                     mapcont:	
(1)  401/    533E : 3E 58               	mvi		a,'X'
(1)  402/    5340 : B9                  	cmp		c
(1)  403/    5341 : CA 70 53            	jz		mapdone						;filter out ESCX
(1)  404/    5344 : 21 77 75            	lxi		h,ESCcodes
(1)  405/    5347 :                     ;
(1)  406/    5347 :                     maploop:								;c holds data
(1)  407/    5347 : 7E                  	mov		a,m	
(1)  408/    5348 : B7                  	ora		a
(1)  409/    5349 : CA 6C 53            	jz		nomatch						;get lookup and compare to 00
(1)  410/    534C : B9                  	cmp		c
(1)  411/    534D : CA 56 53            	jz		match						;get lookup and compare to c
(1)  412/    5350 : 23                  	inx		h
(1)  413/    5351 : 23                  	inx		h
(1)  414/    5352 : 23                  	inx		h
(1)  415/    5353 : C3 47 53            	jmp		maploop
(1)  416/    5356 :                     ;	
(1)  417/    5356 :                     match:									;hl points to match byte
(1)  418/    5356 : E5                  	push	h
(1)  419/    5357 : 3E 5B               	mvi		a,'['
(1)  420/    5359 : CD 17 53            	call	sendESCa
(1)  421/    535C : E1                  	pop		h
(1)  422/    535D : 23                  	inx		h							;advance hl
(1)  423/    535E : EB                  	xchg								;place in d
(1)  424/    535F : ED                  	lhlx								;load hl with [de] 8085 instruction
(1)  425/    5360 :                     ;		
(1)  426/    5360 :                     maploop2:
(1)  427/    5360 : 7E                  	mov		a,m							;byte to send
(1)  428/    5361 : B7                  	ora 	a							;end of sequence?
(1)  429/    5362 : CA 70 53            	jz	 	mapdone						;yes, done
(1)  430/    5365 : CD 0F 53            	call	senda_protected 			;send byte saving registers BC,HL
(1)  431/    5368 : 23                  	inx		h
(1)  432/    5369 : C3 60 53            	jmp		maploop2
(1)  433/    536C :                     ;
(1)  434/    536C :                     nomatch:								;no match found so just send original escape sequence
(1)  435/    536C : 79                  	mov		a,c
(1)  436/    536D : CD 17 53            	call	sendESCa					;send uncorrected byte
(1)  437/    5370 :                     ;
(1)  438/    5370 :                     mapdone:
(1)  439/    5370 : AF                  	xra		a
(1)  440/    5371 : 32 2B F6            	sta		ESC_pending					;reset the flag
(1)  441/    5374 : C9                  	ret									;done
(1)  442/    5375 :                     ;
(1)  443/    5375 :                     ; processxy - handle ESC Y r,c and convert to ESC [<v>;<h>H 
(1)  444/    5375 :                     ; C holds next byte
(1)  445/    5375 :                     ;
(1)  446/    5375 :                     processxy:								;ESC Y received. next 2 bytes are R and C		
(1)  447/    5375 : 3A AE FA            	lda		Ypending					;value is 1 or 2
(1)  448/    5378 : FE 02               	cpi		2
(1)  449/    537A : CA 89 53            	jz		get_row
(1)  450/    537D :                     ;
(1)  451/    537D :                     get_col:								;Ypending is 1
(1)  452/    537D : 21 FA FD            	lxi		h,ESCY+2					;col = ascii target
(1)  453/    5380 : 3E 02               	mvi		a,02
(1)  454/    5382 : 32 AE FA            	sta		Ypending					;next state
(1)  455/    5385 : CD B6 53            	call	convertnum					;write row ascii in C number to location
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 300 - 9/5/2025 20:20:35


(1)  456/    5388 : C9                  	ret
(1)  457/    5389 :                     ;
(1)  458/    5389 :                     get_row:
(1)  459/    5389 : 21 F8 FD            	lxi		h, ESCY
(1)  460/    538C : 36 1B               	mvi		m,1BH						;ESC to ESCY+0
(1)  461/    538E : 23                  	inx		h
(1)  462/    538F : 36 5B               	mvi		m,'['						;ESCY+1
(1)  463/    5391 : 21 FC FD            	lxi		h,ESCY+4
(1)  464/    5394 : 36 3B               	mvi		m,';'						;'m' to ESCY+4
(1)  465/    5396 : 23                  	inx		h							;ESCY+5
(1)  466/    5397 :                     ;row = ascii target
(1)  467/    5397 : CD B6 53            	call	convertnum					;write col ascii in C number to location
(1)  468/    539A : 3E 66               	mvi		a,'f'						;'f'
(1)  469/    539C : 32 FF FD            	sta		ESCY+7
(1)  470/    539F : 0E 08               	mvi		c,8							;send 8  bytes
(1)  471/    53A1 : 21 F8 FD            	lxi		h, ESCY
(1)  472/    53A4 :                     ;
(1)  473/    53A4 :                     xyloop:
(1)  474/    53A4 : 7E                  	mov		a,m							;get byte
(1)  475/    53A5 : B7                  	ora		a							;test. Skipping NULL here 
(1)  476/    53A6 : C4 0F 53            	cnz		senda_protected				;send byte saving registers BC,HL
(1)  477/    53A9 : 23                  	inx		h
(1)  478/    53AA : 0D                  	dcr		c							;end of sequence?
(1)  479/    53AB : C2 A4 53            	jnz		xyloop						;no, loop back
(1)  480/    53AE :                     ;
(1)  481/    53AE :                     xydone:
(1)  482/    53AE : AF                  	xra		a
(1)  483/    53AF : 32 AE FA            	sta		Ypending
(1)  484/    53B2 : 32 2B F6            	sta		ESC_pending
(1)  485/    53B5 : C9                  	ret
(1)  486/    53B6 :                     ;
(1)  487/    53B6 :                     ; hl points to memory for number conversion
(1)  488/    53B6 :                     ; c holds value. Must start with '0' if C <= 9
(1)  489/    53B6 :                     ; currently fails to do that but MVT100.exe was
(1)  490/    53B6 :                     ; updated to accept 1 or 2 digits for the
(1)  491/    53B6 :                     ; row/column values.
(1)  492/    53B6 :                     ;
(1)  493/    53B6 :                     convertnum:
(1)  494/    53B6 : E5                  	push	h							;save destination buffer ptr
(1)  495/    53B7 : 79                  	mov		a,c
(1)  496/    53B8 : D6 1F               	sui 	31							;01FH
(1)  497/    53BA : 6F                  	mov		l,a							;zero extend A to HL
(1)  498/    53BB : 26 00               	mvi		h,0
(1)  499/    53BD : CD 10 35            	call	L_MAKINT 					;load FAC1 with hl
(1)  500/    53C0 : CD E9 39            	call	R_PRINT_FAC1				;Convert binary number in FAC1 to ASCII at M
(1)  501/    53C3 :                     ;
(1)  502/    53C3 :                     ; R_PRINT_FAC1 returns &MBUFFER_R in HL.
(1)  503/    53C3 :                     ; if C <= 9, say 4, the result will be " 4"<0>, should be " 04"<0>
(1)  504/    53C3 :                     ;
(1)  505/    53C3 : D1                  	pop		d							;destination buffer ptr to DE
(1)  506/    53C4 : 2A E9 FB            	lhld	MBUFFER_R+1					;get 2 characters from M buffer
(1)  507/    53C7 : D9                  	shlx								;8085 instruction. Store HL at [DE]
(1)  508/    53C8 : C9                  	ret
(1)  509/    53C9 :                     ;
(1)  510/    53C9 :                     ;Configure for LCD output format (8 lines, 40 columns)
(1)  511/    53C9 :                     ;
(1)  512/    53C9 :                     lcdconf:
(1)  513/    53C9 : 3A 3D F6            	LDA		labelprot					;Label line protect status
(1)  514/    53CC : F5                  	push	PSW							;Save old Label Line protect status on stack
(1)  515/    53CD : AF                  	XRA		A							;Prepare to clear Label line protect status
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 301 - 9/5/2025 20:20:35


(1)  516/    53CE : 32 3D F6            	STA		labelprot					;Clear Label line protect status
(1)  517/    53D1 : 2A 39 F6            	lhld	SYSrowcol					;SYS current row/col
(1)  518/    53D4 : E5                  	push	H							;Save current Cursor / Row to stack
(1)  519/    53D5 : 2A 42 F6            	lhld	DVIROWCOL_R					;DVI current ROW,COL
(1)  520/    53D8 : 22 39 F6            	shld	SYSrowcol					;SYS current row/col
(1)  521/    53DB : 2A 44 F6            	lhld	DVIMAXROW_R					;MAX DVI row col count
(1)  522/    53DE : 22 3B F6            	shld	SYSmaxrow					;MAX SYS row col count
(1)  523/    53E1 : CD 4C 43            	call	L5char						;Character plotting level 5. Handle ESC sequences & call level 6
(1)  524/    53E4 :                     										;clear label line
(1)  525/    53E4 : 2A 39 F6            	lhld	SYSrowcol					;SYS current row/col
(1)  526/    53E7 : 22 42 F6            	shld	DVIROWCOL_R					;DVI current ROW,COL
(1)  527/    53EA : 21 08 28            	LXI		H,2808H						;Switch to 40 COL, 8 ROW mode
(1)  528/    53ED : 22 3B F6            	shld	SYSmaxrow					;MAX SYS row col count
(1)  529/    53F0 : E1                  	POP		H							;Get original current Cursor/Row from stack
(1)  530/    53F1 : 22 39 F6            	shld	SYSrowcol					;SYS current row/col
(1)  531/    53F4 : F1                  	POP		PSW							;Get Original Lable Protect Status from stack
(1)  532/    53F5 : 32 3D F6            	STA		labelprot					;Save as current Label line protect status
(1)  533/    53F8 : C9                  	RET	
(1)  534/    53F9 :                     ;	
(1)  535/    53F9 :                     ; Boot-up Hook. This hook is called by the Main ROM at Boot-up. (We Hooked it).
(1)  536/    53F9 :                     ; Warm boot only.
(1)  537/    53F9 :                     ;	
(1)  538/    53F9 :                     phook:
(1)  539/    53F9 : F3                  	DI									;Disable interrupts during initialization	
(1)  540/    53FA :                     phook1:
(1)  541/    53FA : 01 E8 03            	LXI	B,1000							;Setup Delay counter value	
(1)  542/    53FD :                     phook2:
(1)  543/    53FD : CD 9F 72            	call R_CHK_SHIFT_BREAK 				;Check if SHIFT-BREAK is being pressed	
(1)  544/    5400 : DA FA 53            	JC	phook1							;Keep looping until SHIFT-BREAK released	
(1)  545/    5403 : 0B                  	DCX	B				        	    ;Decrement count (16-bit decrement)	
(1)  546/    5404 : 78                  	MOV	A,B				        	    ;test 16-bit count	
(1)  547/    5405 : B1                  	ORA	C
(1)  548/    5406 : C2 FD 53            	JNZ	phook2			        	    ;Keep looping until count = 0	
(1)  549/    5409 : E1                  	POP	H				         	 	;Get address from where we were called	
(1)  550/    540A : E5                  	push H				        	    ;Put the address back so we can RET properly
(1)  551/    540B : 11 94 7D            	LXI		D,L_PWR_DOWN_BOOT			;Prepare to test if we were called from Auto PowerDown
(1)  552/    540E : (MACRO)             	COMPAR								;compare return address and L_PWR_DOWN_BOOT
(1)  553/    540F : C0                  	RNZ									;If not called from Auto-PowerDown reboot routine, then just exit
(1)  554/    5410 : 3A 38 F6            	LDA	CONDEV_R				        ;New Console device flag	
(1)  555/    5413 : A7                  	ANA	A					            ;Test if Console has been intialized	
(1)  556/    5414 : C8                  	RZ						            ;Return if it has	
(1)  557/    5415 :                     ;
(1)  558/    5415 :                     ; We only get here if we rebooted after an auto power shutdown and CONDEV_R != 0
(1)  559/    5415 :                     ;									
(1)  560/    5415 : E1                  	POP	H					            ;Get address where we would return
(1)  561/    5416 : 21 9F 7D            	LXI	H,L_PWR_DOWN_BOOT2				;or jmp there without pushing this address
(1)  562/    5419 : E5                  	push H					            ;Push new RET address to stack	
(1)  563/    541A :                     ; copy of some of the ROM code here. See "reboot after auto power down"					
(1)  564/    541A : CD D0 7D            	call L_BOOT_2
(1)  565/    541D : 2A F8 FF            	lhld SAVEDSP_R
(1)  566/    5420 : E5                  	push H                          
(1)  567/    5421 : CD 01 46            	call L_LCDrefresh					;Refresh LCD from LCD RAM
(1)  568/    5424 :                     ; start added code
(1)  569/    5424 : CD C5 73            	call blnk							;This is new! Turn off background task, reinitialize cursor blink time
(1)  570/    5427 :                     ; end added code
(1)  571/    5427 : E1                  	POP	H                           
(1)  572/    5428 : C9                  	RET									;Return to normal Boot-up processing
(1)  573/    5429 :                     ;
(1)  574/    5429 :                     ; This code needs to be called on a cold boot.
(1)  575/    5429 :                     ; Could be integrated with R_INIT_RST_38H_TBL()
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 302 - 9/5/2025 20:20:35


(1)  576/    5429 :                     ;
(1)  577/    5429 :                     L_VT100_HOOK_INIT:
(1)  578/    5429 : 01 02 76            	LXI	B,hookdat						;Load pointer to our RST 38H Vector addresses
(1)  579/    542C :                     ;
(1)  580/    542C :                     ; TODO:
(1)  581/    542C :                     ;	CHGET (entry at offset 4, wait for keyboard input) also used by Rex
(1)  582/    542C :                     ;	Need to chain the VT100 replacement with the Rex replacement
(1)  583/    542C :                     ;	This code is executed at cold boot so presumably before any Rex code,
(1)  584/    542C :                     ;	similar to TS-DOS.
(1)  585/    542C :                     ;
(1)  586/    542C : 11 DA FA            	LXI	D,RST38_R						;Load Start address of RST 38H vector table
(1)  587/    542F :                     hookloop:
(1)  588/    542F : 0A                  	ldax b								;Get offset of 1st vector to update
(1)  589/    5430 : 03                  	INX	B								;Point to LSB of 1st RST 38H vector
(1)  590/    5431 : 6F                  	MOV	L,A								;Move Vector offset to HL             
(1)  591/    5432 : 3C                  	INR	A								;Increment A to test for FFH termination byte
(1)  592/    5433 : CA EB 75            	JZ init_vid							;Jump if termination byte (FFH)
(1)  593/    5436 : 26 00               	MVI	H,00H							;Zero MSB of HL for offset calculation
(1)  594/    5438 : 19                  	DAD	D								;Offset into RST 38H vector table
(1)  595/    5439 : 0A                  	LDAX B								;Load LSB of next RST 38 vector
(1)  596/    543A : 03                  	INX	B								;Increment to MSB of vector
(1)  597/    543B : 77                  	MOV	M,A								;Save LSB of our routine to RST 38H vector table
(1)  598/    543C : 23                  	INX	H								;Increment to MSB location in vector table
(1)  599/    543D : 0A                  	LDAX B								;Load MSB of our address
(1)  600/    543E : 03                  	INX	B								;Point to next RST 38H offset in our local table
(1)  601/    543F : 77                  	MOV	M,A								;Save MSB of next vector address to RST 38 Vector table
(1)  602/    5440 : C3 2F 54            	JMP	hookloop						;Jump to load next RST 38 vector table entry	
(1)  603/    5443 :                     
(1)  604/    5443 : =>FALSE             	if 0
(1)  605/    5443 :                     ;
(1)  606/    5443 :                     ; code to reset the hook table to R_RET_INSTR.
(1)  607/    5443 :                     ; Ignores potential conflicting hooks (REX)
(1)  608/    5443 :                     ;
(1)  609/    5443 :                      Wrong: entries above offset 0x1E require R_GEN_FC_ERROR address.
(1)  610/    5443 :                     
(1)  611/    5443 :                     L_VT100_UNHOOK:
(1)  612/    5443 :                     	LXI	B,hookdat						;Load pointer to our RST 38H Vector addresses
(1)  613/    5443 :                     unhookloop:
(1)  614/    5443 :                     	ldax b								;Get offset of 1st vector to update
(1)  615/    5443 :                     	INX	B								;Point to LSB of 1st RST 38H vector
(1)  616/    5443 :                     	INX	B								;Increment to MSB of vector
(1)  617/    5443 :                     	INX	B								;Point to next RST 38H offset in our local table
(1)  618/    5443 :                     	MOV	L,A								;Move Vector offset to HL             
(1)  619/    5443 :                     	INR	A								;Increment A to test for FFH termination byte
(1)  620/    5443 :                     	JZ init_vid3						;Jump if termination byte (FFH)
(1)  621/    5443 :                     	MVI	H,00H							;Zero MSB of HL for offset calculation
(1)  622/    5443 :                     	LXI	D,RST38_R						;Load Start address of RST 38H vector table
(1)  623/    5443 :                     	DAD	D								;Offset into RST 38H vector table
(1)  624/    5443 :                     	if 1
(1)  625/    5443 :                     	xchg								;resulting table ptr to DE
(1)  626/    5443 :                     	lxi	h,R_RET_INSTR					;replacement address
(1)  627/    5443 :                     	shlx								;store address in table. Note 8085 only instruction.
(1)  628/    5443 :                     	else
(1)  629/    5443 :                     	MVI	M,R_RET_INSTR & 256				;Save LSB of our routine to RST 38H vector table
(1)  630/    5443 :                     	INX	H								;Increment to MSB location in vector table
(1)  631/    5443 :                     	MVI	M,R_RET_INSTR >> 8				;Save MSB of next vector address to RST 38 Vector table
(1)  632/    5443 : [624]               	endif
(1)  633/    5443 :                     	JMP	unhookloo2						;Jump to load next RST 38 vector table entry
(1)  634/    5443 :                     init_vid3:
(1)  635/    5443 : [604]               	endif
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(vt100inrom.asm) - page 303 - 9/5/2025 20:20:35


(1)  636/    5443 :                     	
(1)  637/    5443 : =>FALSE             	if 0
(1)  638/    5443 :                     ;
(1)  639/    5443 :                     ; Hack to exclude VT100.CO from the HIMEM check
(1)  640/    5443 :                     ; Need to return Load address of current program in HL
(1)  641/    5443 :                     ; Unused
(1)  642/    5443 :                     ;
(1)  643/    5443 :                     R_CMP_HIMEM2:
(1)  644/    5443 :                     	lhld	LASTLEN_R					;size of .CO File
(1)  645/    5443 :                     ;
(1)  646/    5443 :                     ; test if bit 7 of H is set, normally not possible.
(1)  647/    5443 :                     ; must clear bit 7 in size field if set.
(1)  648/    5443 :                     ;
(1)  649/    5443 :                     	mvi		c,0							;preset flag to FALSE
(1)  650/    5443 :                     	mov		a,h
(1)  651/    5443 :                     	ora		a
(1)  652/    5443 :                     	jp		+							;brif bit 7 clear
(1)  653/    5443 :                     	inr		c							;set Flag
(1)  654/    5443 :                     	ani		7FH							;clear bit 7
(1)  655/    5443 :                     	mov		h,a							;update size of .CO File
(1)  656/    5443 :                     	shld	LASTLEN_R
(1)  657/    5443 :                     +	LHLD    LOADADR_R					;'Load address' of current program
(1)  658/    5443 :                     	mov		a,c							;get Flag
(1)  659/    5443 :                     	ora		a							;test
(1)  660/    5443 :                     	rnz									;brif TRUE. Carry NOT set
(1)  661/    5443 :                     	XCHG								;'Load address' of current program to DE
(1)  662/    5443 :                         LHLD    HIMEM_R						;HIMEM to HL
(1)  663/    5443 :                         XCHG								;'Load address' of current program back to HL
(1)  664/    5443 :                     										;HIMEM to DE
(1)  665/    5443 :                         COMPAR								;HL - DE
(1)  666/    5443 :                         RET
(1)  667/    5443 : [637]               	endif								;if 0
(1)  668/    5443 :                     
   17414/    5443 :                     	
   17415/    5443 :                     R_END_VT100_PATCH:
   17416/    5443 :                     
> > >M100-Source.asm(17417): warning: no memory reserved, are you sure you wanted that?
   17417/    5443 :                     	DS		5443H-R_END_VT100_PATCH		;fill gap 12 FREE CODE SPACE
   17418/    5443 : =>FALSE             	else								;VT100INROM
   17419/    5443 :                     	DS		5443H-R_END_MDM_PATCH		;269H bytes (to update) 617 FREE CODE SPACE
   17420/    5443 : [17412]             	endif								;VT100INROM
   17421/    5443 : [16839]             	endif								;HWMODEM
   17422/    5443 :                     
   17423/    5443 :                     L_TERM_FUN_KEYS:						;5443H
   17424/    5443 : 50 72 65 F6             DB      "Pre",80H | 'v'				;0F6H
   17425/    5447 : 44 6F 77 EE             DB      "Dow",80H | 'n'				;0EEH
   17426/    544B : 20 55 F0                DB      " U",80H | 'p'				;0F0H
   17427/    544E : 80                      DB      80H
   17428/    544F : 80                      DB      80H
   17429/    5450 : 80                      DB      80H
   17430/    5451 : 80                      DB      80H
   17431/    5452 : 42 79 E5                DB      "By",80H | 'e'				;0E5H
   17432/    5455 :                     	
   17433/    5455 :                     ;
   17434/    5455 :                     ; TELCOM TERM instruction routine
   17435/    5455 :                     ; Serial initialization string starting with 'M' means modem
   17436/    5455 :                     ;
   17437/    5455 :                     R_TELCOM_TERM_FUN:						;5455H
   17438/    5455 : 21 5A F6                LXI     H,SERMOD_R-1				;Serial initialization string-1
   17439/    5458 : (MACRO)                 CHRGET								;Get next non-white char from M. Return Carry if numeric (terminal)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 304 - 9/5/2025 20:20:35


   17440/    5459 : D4 57 34                CNC     L_INCHL						;Increment HL. Carry unaffected. Skip 'M' if present
   17441/    545C : F5                      PUSH    PSW							;save Carry (set if numeric)
   17442/    545D : CD E6 17                CALL    R_SET_RS232_PARAMS			;Set RS232 parameters from string at M
   17443/    5460 : F1                      POP     PSW							;restore carry
   17444/    5461 : 3F                      CMC									;complement carry => Carry clear if numeric, set if modem
   17445/    5462 : =>FALSE             	if	HWMODEM
   17446/    5462 :                         CC      R_GO_OFFHOOK_WAIT			;Go off-hook and wait for carrier if Modem.
   17447/    5462 : =>TRUE              	else
   17448/    5462 : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   17449/    5465 : [17445]             	endif
   17450/    5465 : DA 39 57                JC      L_TELCOM_DISCNNCT			;carry if SHIFT-BREAK pressed
   17451/    5468 :                     L_TELCOM_TERM_1:
   17452/    5468 : 3E 40                   MVI     A,40H						;set TELCOM mode
   17453/    546A : 32 50 F6                STA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
   17454/    546D : 32 7B F6                STA     CURLIN_R+1					;MSB of CURLIN_R
   17455/    5470 : AF                      XRA     A
   17456/    5471 : 32 C2 FA                STA     SER_UPDWN_R					;clear
   17457/    5474 : 32 C3 FA                STA     SER_UPDWN_R+1
   17458/    5477 : CD D3 45                CALL    L_CLR_ALTLCD
   17459/    547A : 21 43 54            	LXI     H,L_TERM_FUN_KEYS			;Code Based.
   17460/    547D : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   17461/    5480 : CD 44 55                CALL    L_TELCOM_FULL_1
   17462/    5483 : CD 56 55                CALL    L_TELCOM_ECHO_1
   17463/    5486 : CD 62 55                CALL    L_TELCOM_ECHO_2
   17464/    5489 : CD A8 42                CALL    R_DISP_FKEY_LINE			;Display function key line
   17465/    548C : CD 49 42                CALL    R_TURN_CURSOR_ON			;Turn the cursor on
   17466/    548F :                     L_TELCOM_TERM_2:
   17467/    548F : CD 5D 5D                CALL    L_RESET_SP					;Restore BASIC SP
   17468/    5492 : 21 EF 54                LXI     H,L_TELCOM_TERM_4			;continuation function
   17469/    5495 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   17470/    5498 : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   17471/    549B : A7                      ANA     A
   17472/    549C : CA AA 54                JZ      L_TERMLOOP
   17473/    549F : 3A 40 FF                LDA     XONXOFF_R					;XON/XOFF protocol control
   17474/    54A2 : 21 D9 F7                LXI     H,FNKSTR_R+50H				;F6
   17475/    54A5 : AE                      XRA     M
   17476/    54A6 : 0F                      RRC
   17477/    54A7 : DC 62 55                CC      L_TELCOM_ECHO_2
   17478/    54AA :                     L_TERMLOOP:								;check for keyboard character
   17479/    54AA : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   17480/    54AD : CA C6 54                JZ      +							;brif no key available
   17481/    54B0 : CD CB 12                CALL    R_WAIT_KEY					;Wait for key from keyboard
   17482/    54B3 : DA FC 54                JC      R_TELCOM_DISPATCH			;TELCOM "dispatcher" routine
   17483/    54B6 : 47                      MOV     B,A							;save character
   17484/    54B7 : 3A 58 F6                LDA     DUPLEX_R					;Full/Half duplex switch
   17485/    54BA : A7                      ANA     A
   17486/    54BB : 78                      MOV     A,B							;reload character
   17487/    54BC : CC 44 4B                CZ      R_SEND_A_LCD_LPT 			;Send A to screen or printer
   17488/    54BF : A7                      ANA     A							;test
   17489/    54C0 : C4 32 6E                CNZ     R_SEND_A_USING_XON       	;Send key character in A to serial port using XON/XOFF
   17490/    54C3 : DA E2 54                JC      L_TELCOM_TERM_3
   17491/    54C6 :                     ;check for incoming serial character
   17492/    54C6 : CD 6D 6D            +	CALL    R_CHECK_RS232_QUEUE      	;Check RS232 queue for pending characters
   17493/    54C9 : CA 8F 54                JZ      L_TELCOM_TERM_2
   17494/    54CC : CD 7E 6D                CALL    R_READ_RS232_QUEUE       	;Get a character from RS232 receive queue
   17495/    54CF : DA 8F 54                JC      L_TELCOM_TERM_2
   17496/    54D2 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   17497/    54D3 : 47                      MOV     B,A
   17498/    54D4 : 3A 59 F6                LDA     ECHO_R
   17499/    54D7 : A7                      ANA     A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 305 - 9/5/2025 20:20:35


   17500/    54D8 : 78                      MOV     A,B
   17501/    54D9 : C4 55 4B                CNZ     R_PRINT_A_EXPAND			; Print A to printer), expanding tabs if necessary
   17502/    54DC : CD C5 56                CALL    L_TELCOM_DOWN_2
   17503/    54DF : C3 8F 54                JMP     L_TELCOM_TERM_2
   17504/    54E2 :                     
   17505/    54E2 :                     L_TELCOM_TERM_3:
   17506/    54E2 : AF                      XRA     A
   17507/    54E3 : 32 40 FF                STA     XONXOFF_R					;XON/XOFF protocol control
   17508/    54E6 : CD 9F 72            -	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   17509/    54E9 : DA E6 54                JC      -							;brif pressed
   17510/    54EC : C3 8F 54                JMP     L_TELCOM_TERM_2
   17511/    54EF :                     
   17512/    54EF :                     L_TELCOM_TERM_4:
   17513/    54EF : CD 29 42                CALL    R_BEEP_STMT				    ;BEEP statement
   17514/    54F2 : AF                      XRA     A
   17515/    54F3 : 32 59 F6                STA     ECHO_R
   17516/    54F6 : CD 56 55                CALL    L_TELCOM_ECHO_1
   17517/    54F9 : C3 8F 54                JMP     L_TELCOM_TERM_2
   17518/    54FC :                     ;
   17519/    54FC :                     ; TELCOM "dispatcher" routine
   17520/    54FC :                     ;
   17521/    54FC :                     R_TELCOM_DISPATCH:						;54FCH
   17522/    54FC : 5F                      MOV     E,A							;index
   17523/    54FD : 16 FF                   MVI     D,0FFH						;negative
   17524/    54FF : 21 1D 55                LXI     H,R_TERM_FKEY_VCTR_TBL+2*8	;Code Based.
   17525/    5502 :                     										;	Beyond TERM Mode function key vector table
   17526/    5502 : 19                      DAD     D
   17527/    5503 : 19                      DAD     D
   17528/    5504 : (MACRO)             	GETHLFROMM							;get ptr to HL
   17529/    5508 : 11 8F 54                LXI     D,L_TELCOM_TERM_2					;continuation function
   17530/    550B : D5                      PUSH    D
   17531/    550C : E9                      PCHL   
   17532/    550D :                     ;
   17533/    550D :                     ; TERM Mode function key vector table
   17534/    550D :                     ;
   17535/    550D :                     R_TERM_FKEY_VCTR_TBL:				    ;550DH
   17536/    550D : 23 55 7E 56 9D 55       DW      R_TELCOM_PREV_FUN, R_TELCOM_DOWN_FUN, R_TELCOM_UP_FUN
   17537/    5513 : 3E 55 50 55 1D 55       DW      R_TELCOM_FULL_FUN, R_TELCOM_ECHO_FUN, R_TERM_FKEY_VCTR_F6
   17538/    5519 : 20 55 1E 57             DW      R_TERM_FKEY_VCTR_F7, R_TELCOM_BYE_FUN
   17539/    551D :                     ;TERM Mode function key vector table
   17540/    551D :                     R_TERM_FKEY_VCTR_F6:
   17541/    551D : (MACRO)             	RST38H	32H
   17542/    551F : C9                  	RET
   17543/    5520 :                     	
   17544/    5520 :                     R_TERM_FKEY_VCTR_F7:
   17545/    5520 : (MACRO)             	RST38H	34H
   17546/    5522 : C9                      RET
   17547/    5523 :                     ;
   17548/    5523 :                     ; TELCOM PREV function routine
   17549/    5523 :                     ;
   17550/    5523 :                     R_TELCOM_PREV_FUN:						;5523H
   17551/    5523 : CD A2 43                CALL    L_POPPSW					;Conditionally POP PSW from stack based on value at POPPSW_R
   17552/    5526 : CD 4E 42                CALL    R_TURN_CURSOR_OFF			;Turn the cursor off
   17553/    5529 : CD 1F 46                CALL    L_ALTLCDrefresh
   17554/    552C : CD DB 13            -	CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   17555/    552F : CA 2C 55                JZ      -
   17556/    5532 : CD CB 12                CALL    R_WAIT_KEY				    ;Wait for key from keyboard
   17557/    5535 : CD 01 46                CALL    L_LCDrefresh
   17558/    5538 : CD 49 42                CALL    R_TURN_CURSOR_ON			; Turn the cursor on
   17559/    553B : C3 62 42                JMP     R_SEND_ESC_X				;Send ESC X
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 306 - 9/5/2025 20:20:35


   17560/    553E :                     ;
   17561/    553E :                     ; TELCOM FULL/HALF function routine
   17562/    553E :                     ;
   17563/    553E :                     R_TELCOM_FULL_FUN:						;553EH
   17564/    553E : 21 58 F6                LXI     H,DUPLEX_R				  	;Full/Half duplex switch
   17565/    5541 : 7E                      MOV     A,M
   17566/    5542 : 2F                      CMA									;complement
   17567/    5543 : 77                      MOV     M,A
   17568/    5544 :                     L_TELCOM_FULL_1:
   17569/    5544 : 3A 58 F6                LDA     DUPLEX_R					;Full/Half duplex switch
   17570/    5547 : 11 B9 F7                LXI     D,FNKSTR_R+30H				;F4
   17571/    554A : 21 83 55                LXI     H,L_FULLHALF_MSG			;Code Based.
   17572/    554D : C3 6B 55                JMP     L_TELCOM_ECHO_3
   17573/    5550 :                     ;
   17574/    5550 :                     ; TELCOM ECHO function routine
   17575/    5550 :                     ;
   17576/    5550 :                     R_TELCOM_ECHO_FUN:						;5550H
   17577/    5550 : 21 59 F6                LXI     H,ECHO_R
   17578/    5553 : 7E                      MOV     A,M
   17579/    5554 : 2F                      CMA									;complement
   17580/    5555 : 77                      MOV     M,A
   17581/    5556 :                     L_TELCOM_ECHO_1:
   17582/    5556 : 3A 59 F6                LDA     ECHO_R
   17583/    5559 : 11 C9 F7                LXI     D,FNKSTR_R+40H				;F5
   17584/    555C : 21 8B 55                LXI     H,L_ECHO_MSG				;Code Based.
   17585/    555F : C3 6B 55                JMP     L_TELCOM_ECHO_3
   17586/    5562 :                     
   17587/    5562 :                     L_TELCOM_ECHO_2:
   17588/    5562 : 3A 40 FF                LDA     XONXOFF_R					;XON/XOFF protocol control
   17589/    5565 : 11 D9 F7                LXI     D,FNKSTR_R+50H				;F6
   17590/    5568 : 21 95 55                LXI     H,L_WAIT_MSG				;Code Based.
   17591/    556B :                     ;
   17592/    556B :                     ; Update Function Keys Labels
   17593/    556B :                     ;
   17594/    556B :                     L_TELCOM_ECHO_3:
   17595/    556B : A7                      ANA     A							;[DUPLEX_R] or [ECHO_R] or [XONXOFF_R]
   17596/    556C : 01 04 00                LXI     B,0004H
   17597/    556F : C2 73 55                JNZ     +
   17598/    5572 : 09                      DAD     B							;add 4 to HL: Full=>Half, Echo=>"    ", Wait=>" \0  "
   17599/    5573 : 41                  +	MOV     B,C							;4
   17600/    5574 : CD 42 25                CALL    R_MOVE_B_BYTES				;Move 4 bytes from M to (DE)
   17601/    5577 : 06 0C                   MVI     B,12						;0CH
   17602/    5579 :                     R_CLR_B_BYTES:							;clear B bytes at (DE)
   17603/    5579 : AF                      XRA     A
   17604/    557A : 12                  -	STAX    D
   17605/    557B : 13                      INX     D
   17606/    557C : 05                      DCR     B
   17607/    557D : C2 7A 55                JNZ     -
   17608/    5580 : C3 9E 5A                JMP     R_DISP_FKEYS				;Display function keys on 8th line
   17609/    5583 :                     
   17610/    5583 :                     L_FULLHALF_MSG:
   17611/    5583 : 46 75 6C 6C 48 61       DB      "FullHalf"
                    6C 66 
   17612/    558B :                     L_ECHO_MSG:
   17613/    558B : 45 63 68 6F 20 20       DB      "Echo    "
                    20 20 
   17614/    5593 :                     L_NEWLINE_MSG:
   17615/    5593 : 0D 20                   DB      0DH," "
   17616/    5595 :                     L_WAIT_MSG:
   17617/    5595 : 57 61 69 74 20 00       DB      "Wait ",00H,"  "
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 307 - 9/5/2025 20:20:35


                    20 20 
   17618/    559D :                     ;
   17619/    559D :                     ; TELCOM UPLOAD function routine
   17620/    559D :                     ;
   17621/    559D :                     R_TELCOM_UP_FUN:						;559DH
   17622/    559D : 21 EF 56                LXI     H,L_UP_ABORTED				;continuation function
   17623/    55A0 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   17624/    55A3 : E5                      PUSH    H
   17625/    55A4 : 3A C2 FA                LDA     SER_UPDWN_R
   17626/    55A7 : A7                      ANA     A
   17627/    55A8 : C0                      RNZ
   17628/    55A9 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
   17629/    55AC : 21 51 57                LXI     H,L_FileToUpload_MSG		;Code Based.
   17630/    55AF : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17631/    55B2 : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
   17632/    55B5 : (MACRO)                 CHRGET								;Get next non-white char from M
   17633/    55B6 : A7                      ANA     A
   17634/    55B7 : C8                      RZ
   17635/    55B8 : 32 C6 FA                STA     TLCMKEY_R
   17636/    55BB : CD FA 21                CALL    R_STRLEN				    ;Count length of string at M
   17637/    55BE : CD 0B 4C                CALL    L_PSH_HL_EVAL_FILNAM		;push HL and eval Filename
   17638/    55C1 : C0                      RNZ
   17639/    55C2 : CD 8F 20                CALL    R_FINDFILE
   17640/    55C5 : 21 7C 57                LXI     H,L_NoFile_MSG				;Code Based.
   17641/    55C8 : CA 91 57                JZ      R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17642/    55CB : EB                      XCHG
   17643/    55CC : E3                      XTHL
   17644/    55CD : E5                      PUSH    H
   17645/    55CE : 21 0C 67                LXI     H,L_Width_MSG				;Code Based. 
   17646/    55D1 : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17647/    55D4 : CD 44 46                CALL    R_INP_DISP_LINE_NO_Q		;Input and display (no "?") line and store
   17648/    55D7 : D8                      RC
   17649/    55D8 : (MACRO)                 CHRGET								;Get next non-white char from M
   17650/    55D9 : A7                      ANA     A
   17651/    55DA : 3E 01                   MVI     A,01H
   17652/    55DC : 32 C3 FA                STA     SER_UPDWN_R+1
   17653/    55DF : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   17654/    55E2 : CA FD 55                JZ      +
   17655/    55E5 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   17656/    55E8 : FE 0A                   CPI     0AH
   17657/    55EA : D8                      RC
   17658/    55EB : FE 85                   CPI     85H
   17659/    55ED : D0                      RNC
   17660/    55EE : 21 94 F8                LXI     H,LINBUF_R
   17661/    55F1 : 22 92 F8                SHLD    CURPOS_R
   17662/    55F4 : 32 22 F9                STA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   17663/    55F7 : 32 C3 FA                STA     SER_UPDWN_R+1
   17664/    55FA : F1                      POP     PSW
   17665/    55FB : D1                      POP     D
   17666/    55FC : (MACRO)             	SKIP_2BYTES_INST_BC					;skip POP PSW & POP H
   17667/    55FD : F1                  +	POP     PSW
   17668/    55FE : E1                      POP     H
   17669/    55FF : D5                      PUSH    D
   17670/    5600 : E5                      PUSH    H
   17671/    5601 : CD 9E 5A                CALL    R_DISP_FKEYS				;Display function keys on 8th line
   17672/    5604 : E1                      POP     H
   17673/    5605 : D1                      POP     D
   17674/    5606 :                     L_TELCOM_UP_1:
   17675/    5606 : 3A C3 FA                LDA     SER_UPDWN_R+1
   17676/    5609 : 3D                      DCR     A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 308 - 9/5/2025 20:20:35


   17677/    560A : CA 2D 56                JZ      L_TELCOM_UP_2
   17678/    560D : D5                      PUSH    D
   17679/    560E : EB                      XCHG
   17680/    560F : 2A 92 F8                LHLD    CURPOS_R
   17681/    5612 : EB                      XCHG
   17682/    5613 : (MACRO)                 COMPAR								;HL - DE
   17683/    5614 : D1                      POP     D
   17684/    5615 : C2 2D 56                JNZ     L_TELCOM_UP_2
   17685/    5618 : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into line buffer
   17686/    561B : 7A                      MOV     A,D							;test DE for 0FFFFH
   17687/    561C : A3                      ANA     E
   17688/    561D : 3C                      INR     A
   17689/    561E : C2 2A 56                JNZ     +							;brif ! EOF
   17690/    5621 :                     ; EOF reached
   17691/    5621 : 2A 92 F8                LHLD    CURPOS_R
   17692/    5624 : 36 1A                   MVI     M,1AH						;set [CURPOS_R] to ^Z
   17693/    5626 : 23                      INX     H
   17694/    5627 : 22 92 F8                SHLD    CURPOS_R
   17695/    562A : 21 94 F8            +	LXI     H,LINBUF_R
   17696/    562D :                     L_TELCOM_UP_2:
   17697/    562D : 7E                      MOV     A,M							;get char
   17698/    562E : FE 1A                   CPI     1AH							;^Z
   17699/    5630 : (MACRO)             	RST38H	36H
   17700/    5632 : CA 6C 56                JZ      L_TELCOM_UP_3						;brif A == 1AH
   17701/    5635 : FE 0A                   CPI     0AH							;LF
   17702/    5637 : C2 46 56                JNZ     +							;brif A != 0AH
   17703/    563A : 3A 5A F6                LDA     LFFLG_R						;RS232 auto linefeed switch
   17704/    563D : A7                      ANA     A
   17705/    563E : C2 46 56                JNZ     +							;brif LFFLG_R != 0
   17706/    5641 : 3A C6 FA                LDA     TLCMKEY_R
   17707/    5644 : FE 0D                   CPI     0DH							;CR
   17708/    5646 : 7E                  +	MOV     A,M
   17709/    5647 : 32 C6 FA                STA     TLCMKEY_R					;update
   17710/    564A : CA 53 56                JZ      +
   17711/    564D : CD 32 6E                CALL    R_SEND_A_USING_XON       	;Send character in A to serial port using XON/XOFF
   17712/    5650 : CD 73 56                CALL    L_DRAIN_RS232_IN_QUEUE
   17713/    5653 : 23                  +	INX     H
   17714/    5654 : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   17715/    5657 : CA 06 56                JZ      L_TELCOM_UP_1
   17716/    565A : CD CB 12                CALL    R_WAIT_KEY				    ;Wait for key from keyboard
   17717/    565D : FE 03                   CPI     03H							;^C
   17718/    565F : CA 6C 56                JZ      L_TELCOM_UP_3				;brif ^C
   17719/    5662 : FE 13                   CPI     13H
   17720/    5664 : CC CB 12                CZ      R_WAIT_KEY				    ;Wait for key from keyboard
   17721/    5667 : FE 03                   CPI     03H
   17722/    5669 : C2 06 56                JNZ     L_TELCOM_UP_1
   17723/    566C :                     L_TELCOM_UP_3:
   17724/    566C : AF                      XRA     A
   17725/    566D : 32 C3 FA                STA     SER_UPDWN_R+1
   17726/    5670 : C3 9E 5A                JMP     R_DISP_FKEYS				;Display function keys on 8th line
   17727/    5673 :                     
   17728/    5673 :                     L_DRAIN_RS232_IN_QUEUE:
   17729/    5673 : CD 6D 6D                CALL    R_CHECK_RS232_QUEUE      	;Check RS232 queue for pending characters
   17730/    5676 : C8                      RZ									;retif empty
   17731/    5677 : CD 7E 6D                CALL    R_READ_RS232_QUEUE       	;Get a character from RS232 receive queue
   17732/    567A : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   17733/    567B : C3 73 56                JMP     L_DRAIN_RS232_IN_QUEUE
   17734/    567E :                     ;
   17735/    567E :                     ; TELCOM DOWNLOAD function routine
   17736/    567E :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 309 - 9/5/2025 20:20:35


   17737/    567E :                     R_TELCOM_DOWN_FUN:						;567EH
   17738/    567E : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
   17739/    5681 : 3A C2 FA                LDA     SER_UPDWN_R
   17740/    5684 : EE FF                   XRI     0FFH						;Flip
   17741/    5686 : 32 C2 FA                STA     SER_UPDWN_R
   17742/    5689 : CA BF 56                JZ      L_TELCOM_DOWN_1				;brif SER_UPDWN_R == 0
   17743/    568C : 21 E2 56                LXI     H,L_TELCOM_DOWN_4			;error handler
   17744/    568F : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   17745/    5692 : E5                      PUSH    H
   17746/    5693 : 21 60 57                LXI     H,L_FileToDownload_MSG		;Code Based.
   17747/    5696 : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17748/    5699 : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
   17749/    569C : (MACRO)                 CHRGET								;Get next non-white char from M
   17750/    569D : A7                      ANA     A
   17751/    569E : C8                      RZ
   17752/    569F : 32 C6 FA                STA     TLCMKEY_R					;update with non-zero value
   17753/    56A2 : F1                      POP     PSW
   17754/    56A3 : E5                  -	PUSH    H
   17755/    56A4 : CD 06 22                CALL    R_GET_FIND_DO_FILE       	;Get .DO filename and locate in RAM directory
   17756/    56A7 : DA B7 56                JC      +
   17757/    56AA : 22 C4 FA                SHLD    DOFILPTR_R					;ptr to DO file
   17758/    56AD : CD 2D 6B                CALL    L_FNDEOFTXT					;Find EOF at HL Text Line
   17759/    56B0 : F1                      POP     PSW
   17760/    56B1 : CD 4A 63                CALL    L_EXPND_DO					;Expand .DO file so it fills all memory for editing
   17761/    56B4 : C3 9E 5A                JMP     R_DISP_FKEYS				;Display function keys on 8th line
   17762/    56B7 :                     
   17763/    56B7 : EB                  +	XCHG
   17764/    56B8 : CD BF 1F                CALL    KILASC						;kill text file:  DE & HL are inputs
   17765/    56BB : E1                      POP     H
   17766/    56BC : C3 A3 56                JMP     -
   17767/    56BF :                     
   17768/    56BF :                     L_TELCOM_DOWN_1:
   17769/    56BF : CD 9E 5A                CALL    R_DISP_FKEYS				;Display function keys on 8th line
   17770/    56C2 : C3 83 63                JMP     L_DEL_ZEROS					;Delete zeros from end of edited DO file and update pointers
   17771/    56C5 :                     
   17772/    56C5 :                     L_TELCOM_DOWN_2:
   17773/    56C5 : 4F                      MOV     C,A
   17774/    56C6 : 3A C2 FA                LDA     SER_UPDWN_R
   17775/    56C9 : A7                      ANA     A
   17776/    56CA : 79                      MOV     A,C
   17777/    56CB : C8                      RZ
   17778/    56CC : CD FE 56                CALL    L_IS_CTRL_CHAR
   17779/    56CF : C8                      RZ
   17780/    56D0 : D2 D8 56                JNC     L_TELCOM_DOWN_3
   17781/    56D3 : CD D8 56                CALL    L_TELCOM_DOWN_3
   17782/    56D6 : 3E 0A                   MVI     A,0AH
   17783/    56D8 :                     L_TELCOM_DOWN_3:
   17784/    56D8 : 2A C4 FA                LHLD    DOFILPTR_R					;get ptr to DO file
   17785/    56DB : CD 96 63                CALL    L_INSRT_DO					;Insert byte in A to .DO file at address HL.
   17786/    56DE : 22 C4 FA                SHLD    DOFILPTR_R					;update ptr to DO file
   17787/    56E1 : D0                      RNC
   17788/    56E2 :                     L_TELCOM_DOWN_4:						;Error handler
   17789/    56E2 : AF                      XRA     A
   17790/    56E3 : 32 C2 FA                STA     SER_UPDWN_R
   17791/    56E6 : CD 9E 5A                CALL    R_DISP_FKEYS				;Display function keys on 8th line
   17792/    56E9 : 21 68 57                LXI     H,L_Download_MSG			;Code Based.
   17793/    56EC : C3 F2 56                JMP     +							;Aborted Message
   17794/    56EF :                     
   17795/    56EF :                     L_UP_ABORTED:
   17796/    56EF : 21 59 57                LXI     H,L_Upload_MSG				;Code Based.
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 310 - 9/5/2025 20:20:35


   17797/    56F2 : CD 91 57            +	CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17798/    56F5 : 21 71 57                LXI     H,L_Aborted_MSG				;Code Based.
   17799/    56F8 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   17800/    56FB : C3 8F 54                JMP     L_TELCOM_TERM_2
   17801/    56FE :                     
   17802/    56FE :                     L_IS_CTRL_CHAR:
   17803/    56FE : 4F                      MOV     C,A							;save char
   17804/    56FF : A7                      ANA     A							;test it
   17805/    5700 : C8                      RZ
   17806/    5701 : FE 1A                   CPI     1AH							;^Z
   17807/    5703 : C8                      RZ
   17808/    5704 : FE 7F                   CPI     7FH							;DEL
   17809/    5706 : C8                      RZ
   17810/    5707 : FE 0A                   CPI     0AH							;LF
   17811/    5709 : C2 11 57                JNZ     +							;brif A != Linefeed
   17812/    570C : 3A C6 FA                LDA     TLCMKEY_R
   17813/    570F : FE 0D                   CPI     0DH							;CR
   17814/    5711 : 79                  +	MOV     A,C							;restore
   17815/    5712 : 32 C6 FA                STA     TLCMKEY_R
   17816/    5715 : C8                      RZ
   17817/    5716 : FE 0D                   CPI     0DH							;CR
   17818/    5718 : 37                      STC									;clear carry
   17819/    5719 : 3F                      CMC
   17820/    571A : C0                      RNZ
   17821/    571B : A7                      ANA     A
   17822/    571C : 37                      STC									;set carry
   17823/    571D : C9                      RET
   17824/    571E :                     ;
   17825/    571E :                     ; TELCOM BYE function routine
   17826/    571E :                     ;
   17827/    571E :                     R_TELCOM_BYE_FUN:						;571EH
   17828/    571E : 21 86 57                LXI     H,L_Disconnect_MSG			;Code Based.
   17829/    5721 : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17830/    5724 : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
   17831/    5727 : (MACRO)                 CHRGET								;Get next non-white char from M
   17832/    5728 : CD E9 0F                CALL    R_CONV_A_TOUPPER			;Convert A to uppercase
   17833/    572B : FE 59                   CPI     'Y'
   17834/    572D : CA 39 57                JZ      L_TELCOM_DISCNNCT
   17835/    5730 : 21 71 57                LXI     H,L_Aborted_MSG				;Code Based.
   17836/    5733 : CD 91 57                CALL    R_PRINT_STRING_2			;Print_2 buffer at M until NULL or '"'
   17837/    5736 : C3 8F 54                JMP     L_TELCOM_TERM_2
   17838/    5739 :                     
   17839/    5739 :                     L_TELCOM_DISCNNCT:
   17840/    5739 : AF                      XRA     A
   17841/    573A : 32 50 F6                STA     FNKMOD_R					;Clear function key mode/ BIT 7=in TEXT (0x80), BIT 6=in TELCOM (0x40)
   17842/    573D : 6F                      MOV     L,A							;Clear HL
   17843/    573E : 67                      MOV     H,A
   17844/    573F : 22 C2 FA                SHLD    SER_UPDWN_R
   17845/    5742 : CD CB 6E                CALL    R_UNINIT_RS232_MDM       	;Deactivate RS232 or modem
   17846/    5745 : CD 4E 42                CALL    R_TURN_CURSOR_OFF			;Turn the cursor off
   17847/    5748 : CD 7C 51                CALL    R_DISCONNECT_PHONE       	;Disconnect phone line and disable modem carrier
   17848/    574B : CD 70 63                CALL    L_FND_END_DO_FILES
   17849/    574E : C3 46 51                JMP     R_TELCOM_ENTRY				;TELCOM Entry point
   17850/    5751 :                     
   17851/    5751 :                     L_FileToUpload_MSG:
   17852/    5751 : 46 69 6C 65 20 74       DB      "File to "
                    6F 20 
   17853/    5759 :                     L_Upload_MSG:
   17854/    5759 : 55 70 6C 6F 61 64       DB      "Upload",00H
                    00 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 311 - 9/5/2025 20:20:35


   17855/    5760 :                     
   17856/    5760 :                     L_FileToDownload_MSG:
   17857/    5760 : 46 69 6C 65 20 74       DB      "File to "
                    6F 20 
   17858/    5768 :                     L_Download_MSG:
   17859/    5768 : 44 6F 77 6E 6C 6F       DB      "Download",00H
                    61 64 00 
   17860/    5771 :                     
   17861/    5771 :                     L_Aborted_MSG:
   17862/    5771 : 20 61 62 6F 72 74       DB      " aborted",0DH,0AH,00H
                    65 64 0D 0A 00 
   17863/    577C :                     
   17864/    577C :                     L_NoFile_MSG:
   17865/    577C : 4E 6F 20 66 69 6C       DB      "No file",0DH,0AH,00H
                    65 0D 0A 00 
   17866/    5786 :                     
   17867/    5786 :                     L_Disconnect_MSG:
   17868/    5786 : 44 69 73 63 6F 6E       DB      "Disconnect",00H
                    6E 65 63 74 00 
   17869/    5791 :                     
   17870/    5791 :                     ;
   17871/    5791 :                     ; Print_2 buffer at M until NULL or '"'
   17872/    5791 :                     ;
   17873/    5791 :                     R_PRINT_STRING_2:						;5791H
   17874/    5791 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
   17875/    5794 : C3 B1 27                JMP     R_PRINT_STRING				;Print buffer at M until NULL or '"'
   17876/    5797 :                     ;
   17877/    5797 :                     ; MENU Program
   17878/    5797 :                     ;
   17879/    5797 :                     R_MENU_ENTRY:							;5797H
   17880/    5797 : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   17881/    579A : 22 78 F6                SHLD    STRBUF_R					;BASIC string buffer pointer
   17882/    579D : CD 2C 3F                CALL    R_INIT_BASIC_VARS_2			;Initialize BASIC variables for new execution
   17883/    57A0 : CD CB 6E                CALL    R_UNINIT_RS232_MDM       	;Deactivate RS232 or modem
   17884/    57A3 : CD 70 63                CALL    L_FND_END_DO_FILES
   17885/    57A6 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
   17886/    57A9 : CD 6E 42                CALL    R_INV_CHAR_DISABLE       	;Cancel inverse character mode
   17887/    57AC : CD 4E 42                CALL    R_TURN_CURSOR_OFF			;Turn the cursor off
   17888/    57AF : CD 8A 42                CALL    R_ERASE_FKEY_DISP			;Erase function key display
   17889/    57B2 : CD 3F 42                CALL    R_STOP_AUTO_SCROLL       	;Stop automatic scrolling
   17890/    57B5 : 3A 38 F6                LDA     CONDEV_R					;New Console device flag
   17891/    57B8 : 32 FA FD                STA     TMPCONDEV_R					;temporary Console device flag
   17892/    57BB : 3E FF                   MVI     A,0FFH
   17893/    57BD : 32 C8 FA                STA     UNUSED5_R
   17894/    57C0 : 3C                      INR     A							;A now 0
   17895/    57C1 : 32 50 F6                STA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
   17896/    57C4 : 32 AD FA                STA     LINENA_R					;clear Label line enable flag
   17897/    57C7 : CD 3C 1E                CALL    L_SCREEN_STMT_1				;arg A == 0
   17898/    57CA : CD 4D 5D                CALL    L_RESET_SP_1				;Stop BASIC, Restore BASIC SP &	clear SHIFT-PRINT Key
   17899/    57CD : 21 97 57                LXI     H,R_MENU_ENTRY				;Set MENU program as the ON ERROR handler
   17900/    57D0 : 22 52 F6                SHLD    ACTONERR_R					;Save as active ON ERROR handler vector
   17901/    57D3 : CD 79 5A                CALL    R_CLEAR_FKEY_TBL			;Clear function key definition table
   17902/    57D6 : CD 12 5A                CALL    R_CLS_PRINT_TIME_DAY     	;Print time, day and date on first line of screen
   17903/    57D9 : 21 01 1C                LXI     H,1C01H						;Row 28, column 1
   17904/    57DC : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   17905/    57DF : 21 0D 5B                LXI     H,L_MSFT_MSG				;Code Based. Microsoft string
   17906/    57E2 : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   17907/    57E5 : 21 A1 FD                LXI     H,MNU2RAM_R				    ;Map of MENU entry positions to RAM directory positions
   17908/    57E8 : 22 D7 FD                SHLD    TMP_UTIL_R
   17909/    57EB : 06 36                   MVI     B,RAMDIRCNT*2				;54 => 27 items
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 312 - 9/5/2025 20:20:35


   17910/    57ED : 36 FF               -	MVI     M,0FFH						;initialize the map
   17911/    57EF : 23                      INX     H
   17912/    57F0 : 05                      DCR     B
   17913/    57F1 : C2 ED 57                JNZ		-
   17914/    57F4 : 68                      MOV     L,B							;B == 0
   17915/    57F5 : 11 1E 5B                LXI     D,R_DIR_DISP_ORDER_TBL   	;Code Based. Directory file-type display order table
   17916/    57F8 :                     ;
   17917/    57F8 :                     ; Display directory entries
   17918/    57F8 :                     ;
   17919/    57F8 :                     ; IN:
   17920/    57F8 :                     ;	DE
   17921/    57F8 :                     ;
   17922/    57F8 :                     ;
   17923/    57F8 :                     R_DISP_DIR:								;57F8H
   17924/    57F8 : 1A                      LDAX    D
   17925/    57F9 : B7                      ORA     A
   17926/    57FA : CA 07 58                JZ      +							;brif [DE] == 0
   17927/    57FD : 4F                      MOV     C,A
   17928/    57FE : D5                      PUSH    D
   17929/    57FF : CD 70 59                CALL    R_DISP_DIR_TYPE_C			;Display directory entries of type in register C
   17930/    5802 : D1                      POP     D
   17931/    5803 : 13                      INX     D
   17932/    5804 : C3 F8 57                JMP     R_DISP_DIR				    ;loop
   17933/    5807 : 7D                  +	MOV     A,L
   17934/    5808 : 3D                      DCR     A
   17935/    5809 : 32 EF FD                STA     MENMAX_R					;Maximum MENU directory location
   17936/    580C : FE 17                   CPI     17H							;23
   17937/    580E : CA 23 58                JZ      +
   17938/    5811 : CD C9 59            -	CALL    R_NEXT_DIR_ENTRY			;Position cursor for next directory entry
   17939/    5814 : E5                      PUSH    H							;save HL
   17940/    5815 : 21 1A 5B                LXI     H,L_NOENTRY_MSG				;Code Based.
   17941/    5818 : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   17942/    581B : E1                      POP     H							;restore HL
   17943/    581C : 2C                      INR     L
   17944/    581D : 7D                      MOV     A,L
   17945/    581E : FE 18                   CPI     18H							;24
   17946/    5820 : C2 11 58                JNZ     -
   17947/    5823 : 97                  +	SUB     A							;clear A
   17948/    5824 : 32 D9 FD                STA     STRNAM_R
   17949/    5827 : 32 EE FD                STA     MENPOS_R					;Current MENU directory location
   17950/    582A : 6F                      MOV     L,A							;L == 0
   17951/    582B : CD E5 59                CALL    L_REV_VID_FNAME
   17952/    582E : 21 08 18                LXI     H,1808H						;H == 24, L == 8
   17953/    5831 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   17954/    5834 : CD AC 7E                CALL    R_DISP_FREE_BYTES			;Display number of free bytes on LCD
   17955/    5837 :                     ;
   17956/    5837 :                     ; Handle CTRL-U key from MENU command loop
   17957/    5837 :                     ;
   17958/    5837 :                     R_MENU_CTRL_U_HANDLER:					;5837H
   17959/    5837 : CD 4D 5D                CALL    L_RESET_SP_1				;Stop BASIC, Restore BASIC SP &	clear SHIFT-PRINT Key
   17960/    583A : 21 06 59                LXI     H,L_MENU_CTRLU_HANDLER		;error handler
   17961/    583D : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   17962/    5840 : 21 08 01                LXI     H,0108H						;Row 1, Column 1
   17963/    5843 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   17964/    5846 : 21 24 5B                LXI     H,L_Select_MSG				;Code Based. 
   17965/    5849 : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   17966/    584C : 21 08 09                LXI     H,0908H						;Row 9, column 9
   17967/    584F : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   17968/    5852 : 97                      SUB     A							;clear A
   17969/    5853 : 32 ED FD                STA     MENUCMD_R					;Menu command entry count: clear
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 313 - 9/5/2025 20:20:35


   17970/    5856 : 21 D9 FD                LXI     H,STRNAM_R
   17971/    5859 : 3C                      INR     A							;A now 1
   17972/    585A :                     ;
   17973/    585A :                     ; MENU Program command loop
   17974/    585A :                     ;
   17975/    585A :                     R_MENU_CMD_LOOP:						;585AH
   17976/    585A : CC 29 42                CZ      R_BEEP_STMT					;BEEP statement
   17977/    585D :                     L_MENU_CMD_LOOP_NOBEEP:					;also continuation function
   17978/    585D : CD 70 5D                CALL    R_PRINT_TIME_LOOP			;Print time on top line until key pressed
   17979/    5860 : CD 64 5D                CALL    R_GET_KEY_CONV_TOUPPER     	;Wait for char from keyboard & convert to uppercase
   17980/    5863 : FE 0D                   CPI     0DH							;CR
   17981/    5865 : CA F7 58                JZ      R_MENU_ENTER_HANDLER       	;Handle ENTER key from MENU command loop
   17982/    5868 : FE 08                   CPI     08H							;BKSP
   17983/    586A : CA 8E 58                JZ      R_MENU_BKSP_HANDLER        	;Handle Backspace key from MENU command loop
   17984/    586D : FE 7F                   CPI     7FH							;DEL
   17985/    586F : CA 8E 58                JZ      R_MENU_BKSP_HANDLER        	;Handle Backspace key from MENU command loop
   17986/    5872 : FE 15                   CPI     15H							;^U
   17987/    5874 : CA 37 58                JZ      R_MENU_CTRL_U_HANDLER      	;Handle CTRL-U key from MENU command loop
   17988/    5877 : FE 20                   CPI     ' '
   17989/    5879 : DA 9C 58                JC      L_MENU_HANDLER_1			;brif A < ' '. A is argument
   17990/    587C : 4F                      MOV     C,A
   17991/    587D : 3A ED FD                LDA     MENUCMD_R					;Menu command entry count
   17992/    5880 : CC 97 58                CZ      + 
   17993/    5883 : FE 09               	CPI     09H							;TAB
   17994/    5885 : CA 5A 58                JZ      R_MENU_CMD_LOOP				;MENU Program command loop
   17995/    5888 : CD 88 5D                CALL    L_CMD_CHAR					;store char as a command
   17996/    588B : C3 5D 58                JMP     L_MENU_CMD_LOOP_NOBEEP
   17997/    588E :                     ;
   17998/    588E :                     ; Handle Backspace key from MENU command loop
   17999/    588E :                     ;
   18000/    588E :                     R_MENU_BKSP_HANDLER:				    ;588EH
   18001/    588E : CD 9E 5D                CALL    L_RUBOUT_CMD
   18002/    5891 : CA 5A 58                JZ      R_MENU_CMD_LOOP				;MENU Program command loop
   18003/    5894 : C3 5D 58                JMP     L_MENU_CMD_LOOP_NOBEEP
   18004/    5897 :                     
   18005/    5897 : B7                  +	ORA     A
   18006/    5898 : C0                      RNZ
   18007/    5899 : F1                      POP     PSW
   18008/    589A : 3E 1C                   MVI     A,1CH						;28
   18009/    589C :                     L_MENU_HANDLER_1:
   18010/    589C : F5                      PUSH    PSW							;save A
   18011/    589D : 3A EE FD                LDA     MENPOS_R					;Current MENU directory location
   18012/    58A0 : 5F                      MOV     E,A							;to E
   18013/    58A1 : F1                      POP     PSW							;restore A
   18014/    58A2 : D6 1C                   SUI     1CH							;28
   18015/    58A4 : 01 5D 58                LXI     B,L_MENU_CMD_LOOP_NOBEEP	;continuation function
   18016/    58A7 : C5                      PUSH    B
   18017/    58A8 : F8                      RM									;retif A was <1CH/28
   18018/    58A9 : 01 C3 58                LXI     B,L_MENU_HANDLER_2			;another continuation function
   18019/    58AC : C5                      PUSH    B
   18020/    58AD : CA EB 58                JZ      L_MENU_HANDLER_5
   18021/    58B0 : 3D                      DCR     A
   18022/    58B1 : CA E2 58                JZ      L_MENU_HANDLER_4			;brif A == 0
   18023/    58B4 : 3D                      DCR     A
   18024/    58B5 : C1                      POP     B
   18025/    58B6 : CA DB 58                JZ      L_MENU_HANDLER_3			;brif A == 0
   18026/    58B9 : 7B                      MOV     A,E
   18027/    58BA : C6 04                   ADI		04H							;4 files per line
   18028/    58BC : 57                      MOV     D,A
   18029/    58BD : 3A EF FD                LDA     MENMAX_R					;Maximum MENU directory location
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 314 - 9/5/2025 20:20:35


   18030/    58C0 : BA                      CMP     D
   18031/    58C1 : F8                      RM									;retif MENMAX_R < D
   18032/    58C2 : 7A                      MOV     A,D
   18033/    58C3 :                     L_MENU_HANDLER_2:						;also continuation function
   18034/    58C3 : 32 EE FD                STA     MENPOS_R					;Current MENU directory location
   18035/    58C6 : E5                      PUSH    H
   18036/    58C7 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   18037/    58CA : E5                      PUSH    H
   18038/    58CB : 6B                      MOV     L,E
   18039/    58CC : D5                      PUSH    D
   18040/    58CD : CD E5 59                CALL    L_REV_VID_FNAME
   18041/    58D0 : D1                      POP     D
   18042/    58D1 : 6A                      MOV     L,D
   18043/    58D2 : CD E5 59                CALL    L_REV_VID_FNAME
   18044/    58D5 : E1                      POP     H
   18045/    58D6 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   18046/    58D9 : E1                      POP     H
   18047/    58DA : C9                      RET
   18048/    58DB :                     
   18049/    58DB :                     L_MENU_HANDLER_3:
   18050/    58DB : 7B                      MOV     A,E
   18051/    58DC : D6 04                   SUI     04H
   18052/    58DE : 57                      MOV     D,A
   18053/    58DF : F8                      RM
   18054/    58E0 : C5                      PUSH    B
   18055/    58E1 : C9                      RET
   18056/    58E2 :                     ;
   18057/    58E2 :                     ; IN:
   18058/    58E2 :                     ;	E
   18059/    58E2 :                     ; OUT:
   18060/    58E2 :                     ;	A
   18061/    58E2 :                     ;
   18062/    58E2 :                     L_MENU_HANDLER_4:
   18063/    58E2 : 7B                      MOV     A,E							;D = E - 1
   18064/    58E3 : 3D                      DCR     A
   18065/    58E4 : 57                      MOV     D,A
   18066/    58E5 : F0                      RP     
   18067/    58E6 : 3A EF FD                LDA     MENMAX_R					;Maximum MENU directory location
   18068/    58E9 : 57                      MOV     D,A
   18069/    58EA : C9                      RET
   18070/    58EB :                     ;
   18071/    58EB :                     ; IN:
   18072/    58EB :                     ;	E
   18073/    58EB :                     ; OUT:
   18074/    58EB :                     ;	A
   18075/    58EB :                     ;
   18076/    58EB :                     L_MENU_HANDLER_5:
   18077/    58EB : 7B                      MOV     A,E							;D = E + 1
   18078/    58EC : 3C                      INR     A
   18079/    58ED : 57                      MOV     D,A
   18080/    58EE : 3A EF FD                LDA     MENMAX_R					;Maximum MENU directory location
   18081/    58F1 : BA                      CMP     D
   18082/    58F2 : 7A                      MOV     A,D
   18083/    58F3 : F0                      RP     
   18084/    58F4 : 97                      SUB     A							;clear A
   18085/    58F5 : 57                      MOV     D,A
   18086/    58F6 : C9                      RET
   18087/    58F7 :                     ;
   18088/    58F7 :                     ; Handle ENTER key from MENU command loop
   18089/    58F7 :                     ; in HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 315 - 9/5/2025 20:20:35


   18090/    58F7 :                     ;
   18091/    58F7 :                     R_MENU_ENTER_HANDLER:				  	;58F7H
   18092/    58F7 : 3A ED FD                LDA     MENUCMD_R					;Menu command entry count
   18093/    58FA : B7                      ORA     A
   18094/    58FB : CA 0C 59                JZ      +							;brif MENUCMD_R == 0
   18095/    58FE : 36 00                   MVI     M,00H
   18096/    5900 : CD B1 5A                CALL    L_CHKDC_1
   18097/    5903 : C2 21 59                JNZ     L_MENU_CTRLU_1
   18098/    5906 :                     ;
   18099/    5906 :                     ; MENU CTRL-U ON ERROR Handler
   18100/    5906 :                     ;
   18101/    5906 :                     L_MENU_CTRLU_HANDLER:
   18102/    5906 : CD 29 42                CALL    R_BEEP_STMT					;BEEP statement
   18103/    5909 : C3 37 58                JMP     R_MENU_CTRL_U_HANDLER		;Handle CTRL-U key from MENU command loop
   18104/    590C :                     
   18105/    590C : 3A EE FD            +	LDA     MENPOS_R					;Current MENU directory location
   18106/    590F : 21 A1 FD                LXI     H,MNU2RAM_R				    ;Map of MENU entry positions to RAM directory positions
   18107/    5912 : 11 02 00                LXI     D,0002H
   18108/    5915 : B7                  -	ORA     A
   18109/    5916 : CA 1E 59                JZ      +							;brif A == 0
   18110/    5919 : 19                      DAD     D							;add 2 to HL
   18111/    591A : 3D                      DCR     A
   18112/    591B : C3 15 59                JMP     -
   18113/    591E : CD E4 5A            +	CALL    R_GET_FILE_ADDR
   18114/    5921 :                     L_MENU_CTRLU_1:
   18115/    5921 : E5                      PUSH    H							;save HL
   18116/    5922 : CD 31 42                CALL    R_CLS_STMT				    ;Clear Screen
   18117/    5925 : CD 44 42                CALL    R_RESUME_AUTO_SCROLL		;Resume automatic scrolling
   18118/    5928 : 3A FA FD                LDA     TMPCONDEV_R					;temporary Console device flag
   18119/    592B : CD 3C 1E                CALL    L_SCREEN_STMT_1
   18120/    592E : 3E 0C                   MVI     A,0CH						;CR
   18121/    5930 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   18122/    5931 : 97                      SUB     A							;clear A
   18123/    5932 : 32 C8 FA                STA     UNUSED5_R
   18124/    5935 : 6F                      MOV     L,A							;clear HL
   18125/    5936 : 65                      MOV     H,L
   18126/    5937 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   18127/    593A : 3D                      DCR     A							;A == 0FFH
   18128/    593B : 32 AD FA                STA     LINENA_R					;Label line enable flag
   18129/    593E : E1                      POP     H							;restore HL
   18130/    593F : 7E                      MOV     A,M							;get file type
   18131/    5940 : CD E3 5A                CALL    R_GET_FILE_ADDR_PREINC_HL	;Get start address of file at M
   18132/    5943 : FE A0                   CPI     0A0H						;10100000 Filetype
   18133/    5945 : CA 4B 25                JZ      R_EXEC_CO_FILE				;Launch .CO files from MENU
   18134/    5948 : FE B0                   CPI     0B0H						;10110000 Filetype
   18135/    594A : CA 6F 59                JZ      R_EXEC_ROM_FILE				;Launch ROM command file from MENU program
   18136/    594D : FE F0                   CPI     0F0H						;11110000 Filetype
   18137/    594F : CA 24 F6                JZ      ROMJMP_R					;launch option ROM. Code in RAM
   18138/    5952 : FE C0                   CPI     0C0H						;11000000 Filetype
   18139/    5954 : CA 65 5F                JZ      R_EDIT_DO_FILE_FUN			;Edit .DO files
   18140/    5957 :                     ; assume we have a BASIC file here
   18141/    5957 : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
   18142/    595A : 1B                      DCX     D
   18143/    595B : 1B                      DCX     D
   18144/    595C : EB                      XCHG
   18145/    595D : 22 8C FA                SHLD    RAMDIRPTR_R
   18146/    5960 : CD F0 05                CALL    R_UPDATE_LINE_ADDR			;Update line addresses for current BASIC program
   18147/    5963 : CD 9C 6C                CALL    R_LOAD_BASIC_FKEYS			;Copy BASIC Function key table to key definition area
   18148/    5966 : CD 7F 6C                CALL    L_SET_STRBUF
   18149/    5969 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 316 - 9/5/2025 20:20:35


   18150/    596C : C3 04 08                JMP     L_NEWSTT					;Execute BASIC program
   18151/    596F :                     ;
   18152/    596F :                     ; Launch ROM command file from MENU program
   18153/    596F :                     ;
   18154/    596F :                     R_EXEC_ROM_FILE:						;596FH
   18155/    596F : E9                      PCHL   
   18156/    5970 :                     ;
   18157/    5970 :                     ; Display directory entries of type in register C
   18158/    5970 :                     ; RAMDIR_R size = 27 * 11 = 297 (129H) bytes
   18159/    5970 :                     ;
   18160/    5970 :                     R_DISP_DIR_TYPE_C:						;5970H
   18161/    5970 : 06 1B                   MVI     B,RAMDIRCNT					;max directory entries
   18162/    5972 : 11 62 F9                LXI     D,RAMDIR_R					;Start of RAM directory
   18163/    5975 :                     L_DISP_DIR_TYPE_C_1:
   18164/    5975 : 1A                      LDAX    D
   18165/    5976 : 3C                      INR     A							;test for 0FFH
   18166/    5977 : C8                      RZ									;end of directory
   18167/    5978 : 3D                      DCR     A
   18168/    5979 : B9                      CMP     C							;desired type?
   18169/    597A : C2 A1 59                JNZ     +							;check next entry
   18170/    597D : C5                      PUSH    B							;save all W regs
   18171/    597E : D5                      PUSH    D
   18172/    597F : E5                      PUSH    H
   18173/    5980 : 2A D7 FD                LHLD    TMP_UTIL_R
   18174/    5983 : 73                      MOV     M,E
   18175/    5984 : 23                      INX     H
   18176/    5985 : 72                      MOV     M,D
   18177/    5986 : 23                      INX     H
   18178/    5987 : 13                      INX     D
   18179/    5988 : 13                      INX     D
   18180/    5989 : 13                      INX     D
   18181/    598A : 22 D7 FD                SHLD    TMP_UTIL_R					;update
   18182/    598D : E1                      POP     H
   18183/    598E : CD C9 59                CALL    R_NEXT_DIR_ENTRY			;Position cursor for next directory entry
   18184/    5991 : E5                      PUSH    H
   18185/    5992 : 21 D9 FD                LXI     H,STRNAM_R
   18186/    5995 : E5                      PUSH    H
   18187/    5996 : CD AD 59                CALL    R_CONV_FILENAME				;Convert filename from space padded to '.ext' format
   18188/    5999 : E1                      POP     H
   18189/    599A : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18190/    599D : E1                      POP     H
   18191/    599E : 2C                      INR     L
   18192/    599F : D1                      POP     D
   18193/    59A0 : C1                      POP     B
   18194/    59A1 : E5                  +	PUSH    H
   18195/    59A2 : 21 0B 00                LXI     H,RAMDIRLEN					;000BH	length of directory item
   18196/    59A5 : 19                      DAD     D
   18197/    59A6 : EB                      XCHG
   18198/    59A7 : E1                      POP     H
   18199/    59A8 : 05                      DCR     B
   18200/    59A9 : C2 75 59                JNZ     L_DISP_DIR_TYPE_C_1
   18201/    59AC : C9                      RET
   18202/    59AD :                     ;
   18203/    59AD :                     ;Convert filename from space padded to '.ext' format
   18204/    59AD :                     ;
   18205/    59AD :                     ; IN:
   18206/    59AD :                     ;	DE		space padded filename ptr
   18207/    59AD :                     ;	HL		. format destination ptr
   18208/    59AD :                     ;
   18209/    59AD :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 317 - 9/5/2025 20:20:35


   18210/    59AD :                     R_CONV_FILENAME:						;59ADH
   18211/    59AD : 3E 06                   MVI     A,06H
   18212/    59AF : CD 62 5A                CALL    R_COPY_MEM_DE_M				;Copy 6 bytes from (DE) to M
   18213/    59B2 : 3E 20                   MVI     A,' '						;backup over spaces
   18214/    59B4 : 2B                  -	DCX     H
   18215/    59B5 : BE                      CMP     M
   18216/    59B6 : CA B4 59                JZ      -							;brif [HL] == ' '
   18217/    59B9 : 23                      INX     H							;potential dot location
   18218/    59BA : 36 00                   MVI     M,00H						;terminate speculatively
   18219/    59BC : 1A                      LDAX    D							;get ext char
   18220/    59BD : FE 20                   CPI     ' '
   18221/    59BF : C8                      RZ									;return if ext char == ' '
   18222/    59C0 : 36 2E                   MVI     M,'.'						
   18223/    59C2 : 23                      INX     H
   18224/    59C3 : CD 60 5A                CALL    R_COPY_WORD_DE_M			;copy 2 byte extension
   18225/    59C6 : 36 00                   MVI     M,00H						;terminate
   18226/    59C8 : C9                      RET
   18227/    59C9 :                     ;
   18228/    59C9 :                     ; Position cursor for next directory entry
   18229/    59C9 :                     ;
   18230/    59C9 :                     R_NEXT_DIR_ENTRY:						;59C9H
   18231/    59C9 : D5                      PUSH    D
   18232/    59CA : E5                      PUSH    H
   18233/    59CB : 7D                      MOV     A,L
   18234/    59CC : 1F                      RAR
   18235/    59CD : 1F                      RAR
   18236/    59CE : E6 3F                   ANI     3FH							;00111111
   18237/    59D0 : 5F                      MOV     E,A
   18238/    59D1 : 1C                      INR     E
   18239/    59D2 : 1C                      INR     E
   18240/    59D3 : 7D                      MOV     A,L
   18241/    59D4 : E6 03                   ANI     03H							;00000011
   18242/    59D6 : 87                      ADD     A
   18243/    59D7 : 57                      MOV     D,A
   18244/    59D8 : 87                      ADD     A
   18245/    59D9 : 87                      ADD     A
   18246/    59DA : 82                      ADD     D
   18247/    59DB : 57                      MOV     D,A
   18248/    59DC : 14                      INR     D
   18249/    59DD : 14                      INR     D
   18250/    59DE : EB                      XCHG
   18251/    59DF : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   18252/    59E2 : E1                      POP     H
   18253/    59E3 : D1                      POP     D
   18254/    59E4 : C9                      RET
   18255/    59E5 :                     ;
   18256/    59E5 :                     ; IN:
   18257/    59E5 :                     ;
   18258/    59E5 :                     L_REV_VID_FNAME:
   18259/    59E5 : CD C5 73                CALL    L_BLINK_LCD					;Turn off background task, blink & reinitialize cursor blink time
   18260/    59E8 : CD C9 59                CALL    R_NEXT_DIR_ENTRY			;Position cursor for next directory entry
   18261/    59EB : 06 0A                   MVI     B,10						;leading space+6+dot+2
   18262/    59ED : E5                      PUSH    H							;save HL
   18263/    59EE : 21 3A F6                LXI     H,CSRX_R					;Cursor column (1-40)
   18264/    59F1 : 35                      DCR     M
   18265/    59F2 : C5                  -	PUSH    B							;save loop counter
   18266/    59F3 : D5                      PUSH    D							;save DE
   18267/    59F4 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   18268/    59F7 : CD CB 45                CALL    L_FLIP_REV				;set reverse video bit
   18269/    59FA : EB                      XCHG
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 318 - 9/5/2025 20:20:35


   18270/    59FB : CD 40 74                CALL    L_SET_LCTEYX				;Rebase LCD column # & row #
   18271/    59FE : F3                      DI 
   18272/    59FF : CD A9 73                CALL    R_BLINK_CURSOR				;Blink the cursor
   18273/    5A02 : FB                      EI     
   18274/    5A03 : D1                      POP     D							;restore DE
   18275/    5A04 : 21 3A F6                LXI     H,CSRX_R					;Cursor column (1-40)
   18276/    5A07 : 34                      INR     M							;increment Cursor column
   18277/    5A08 : C1                      POP     B							;restore loop counter
   18278/    5A09 : 05                      DCR     B							;decrement loop counter
   18279/    5A0A : C2 F2 59                JNZ     -
   18280/    5A0D : CD C5 73                CALL    L_BLINK_LCD					;Turn off background task, blink & reinitialize cursor blink time
   18281/    5A10 : E1                      POP     H							;restore HL
   18282/    5A11 : C9                      RET
   18283/    5A12 :                     ;
   18284/    5A12 :                     ; Print time, day and date on first line of screen
   18285/    5A12 :                     ;
   18286/    5A12 :                     R_CLS_PRINT_TIME_DAY:				    ;5A12H
   18287/    5A12 : CD 31 42                CALL    R_CLS_STMT				    ;Clear Screen
   18288/    5A15 :                     ;
   18289/    5A15 :                     ; Print time),day),date on first line w/o CLS
   18290/    5A15 :                     ;
   18291/    5A15 :                     R_PRINT_TIME_DAY:						;5A15H
   18292/    5A15 : CD 6A 5D                CALL    R_SEND_CURSOR_HOME         	;Home cursor
   18293/    5A18 : 21 8B FD                LXI     H,ALTLCD_R+203				;0FD8BH temp storage in ALTLCD_R
   18294/    5A1B : CD 2F 19                CALL    R_READ_DATE				    ;DATE$ function
   18295/    5A1E : 36 20                   MVI     M,' '
   18296/    5A20 : 23                      INX     H
   18297/    5A21 : CD 62 19                CALL    R_READ_DAY				    ;Read day and store at M
   18298/    5A24 : EB                      XCHG
   18299/    5A25 : 36 20                   MVI     M,' '
   18300/    5A27 : 23                      INX     H
   18301/    5A28 : CD 0F 19                CALL    R_READ_TIME				    ;Read time and store it at M
   18302/    5A2B : 36 00                   MVI     M,00H
   18303/    5A2D : 3A 2C F9                LDA     TIMBUF_R+9					;Month (1-12). Loop counter
   18304/    5A30 : 21 E6 5A                LXI     H,L_Months_MSG-3			;Code Based. pre-decremented
   18305/    5A33 : 01 03 00                LXI     B,3
   18306/    5A36 : 09                  -	DAD     B
   18307/    5A37 : 3D                      DCR     A
   18308/    5A38 : C2 36 5A                JNZ     -
   18309/    5A3B : 11 88 FD                LXI     D,ALTLCD_R+200				;0FD88H	temp storage in ALTLCD_R
   18310/    5A3E : EB                      XCHG
   18311/    5A3F : E5                      PUSH    H
   18312/    5A40 : 79                      MOV     A,C
   18313/    5A41 : CD 62 5A                CALL    R_COPY_MEM_DE_M				;Copy A bytes from (DE) to M
   18314/    5A44 : 54                      MOV     D,H							;DE = HL
   18315/    5A45 : 5D                      MOV     E,L
   18316/    5A46 : 36 20                   MVI     M,' '
   18317/    5A48 : 13                      INX     D							;DE += 3
   18318/    5A49 : 13                      INX     D
   18319/    5A4A : 13                      INX     D
   18320/    5A4B : 23                      INX     H
   18321/    5A4C : CD 60 5A                CALL    R_COPY_WORD_DE_M
   18322/    5A4F : 36 2C                   MVI     M,','						;2CH
   18323/    5A51 : 23                      INX     H
   18324/    5A52 : 36 32                   MVI     M,'2'
   18325/    5A54 : 23                      INX     H
   18326/    5A55 : 36 30                   MVI     M,'0'
   18327/    5A57 : E1                      POP     H
   18328/    5A58 :                     ;
   18329/    5A58 :                     ; Print NULL terminated string at M
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 319 - 9/5/2025 20:20:35


   18330/    5A58 :                     ;
   18331/    5A58 :                     R_PRINT_STRING2:						;5A58H
   18332/    5A58 : 7E                      MOV     A,M
   18333/    5A59 : B7                      ORA     A
   18334/    5A5A : C8                      RZ
   18335/    5A5B : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   18336/    5A5C : 23                      INX     H
   18337/    5A5D : C3 58 5A                JMP     R_PRINT_STRING2				;Print NULL terminated string at M
   18338/    5A60 :                     ;
   18339/    5A60 :                     ; Copy 2 bytes from (DE) to M
   18340/    5A60 :                     ;
   18341/    5A60 :                     R_COPY_WORD_DE_M:
   18342/    5A60 : 3E 02                   MVI     A,02H
   18343/    5A62 :                     ;
   18344/    5A62 :                     ; Copy A bytes from (DE) to M
   18345/    5A62 :                     ;
   18346/    5A62 :                     R_COPY_MEM_DE_M:						;5A62H
   18347/    5A62 : F5                      PUSH    PSW
   18348/    5A63 : 1A                      LDAX    D
   18349/    5A64 : 77                      MOV     M,A
   18350/    5A65 : 13                      INX     D
   18351/    5A66 : 23                      INX     H
   18352/    5A67 : F1                      POP     PSW
   18353/    5A68 : 3D                      DCR     A
   18354/    5A69 : C2 62 5A                JNZ     R_COPY_MEM_DE_M				;Copy A bytes from (DE) to M
   18355/    5A6C : C9                      RET
   18356/    5A6D :                     ;
   18357/    5A6D :                     ; Compare string at DE with that at M (max C bytes)
   18358/    5A6D :                     ; TODO Only called ONCE so could be inlined. Saves 4 bytes
   18359/    5A6D :                     ;
   18360/    5A6D :                     R_CMP_MEM_DE_M:							;5A6DH
   18361/    5A6D : 1A                      LDAX    D
   18362/    5A6E : BE                      CMP     M
   18363/    5A6F : C0                      RNZ
   18364/    5A70 : B7                      ORA     A
   18365/    5A71 : C8                      RZ
   18366/    5A72 : 23                      INX     H
   18367/    5A73 : 13                      INX     D
   18368/    5A74 : 0D                      DCR     C
   18369/    5A75 : C2 6D 5A                JNZ     R_CMP_MEM_DE_M				;Compare string at DE with that at M (max C bytes)
   18370/    5A78 : C9                      RET
   18371/    5A79 :                     ;
   18372/    5A79 :                     ; Clear function key definition table
   18373/    5A79 :                     ;
   18374/    5A79 :                     R_CLEAR_FKEY_TBL:						;5A79H
   18375/    5A79 : 21 3E 5B                LXI     H,L_EMPTY_KEY_FUNC			;Code Based. empty function key definition table
   18376/    5A7C :                     ;
   18377/    5A7C :                     ; Set new function key table
   18378/    5A7C :                     ; 8 entries, each 16 bytes.
   18379/    5A7C :                     ;
   18380/    5A7C :                     R_SET_FKEYS:							;5A7CH
   18381/    5A7C : 11 89 F7                LXI     D,FNKSTR_R					;Function key definition area
   18382/    5A7F : 06 08                   MVI     B,08H						;8 entries
   18383/    5A81 :                     L_SET_FKEYS_1:
   18384/    5A81 : 0E 10                   MVI     C,10H						;max 16 chars per label
   18385/    5A83 : 7E                  -	MOV     A,M							;source
   18386/    5A84 : 23                      INX     H							;next
   18387/    5A85 : B7                      ORA     A							;test bit 7
   18388/    5A86 : F5                      PUSH    PSW							;save flags
   18389/    5A87 : E6 7F                   ANI     7FH							;clear bit 7
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 320 - 9/5/2025 20:20:35


   18390/    5A89 : 12                      STAX    D							;update Function keys
   18391/    5A8A : F1                      POP     PSW							;restore flags
   18392/    5A8B : FA 93 5A                JM      +							;brif bit 7 set
   18393/    5A8E : 13                      INX     D							;next
   18394/    5A8F : 0D                      DCR     C
   18395/    5A90 : C2 83 5A                JNZ     -
   18396/    5A93 : 97                  +	SUB     A							;clear A
   18397/    5A94 : 13                  -	INX     D							;zero fill
   18398/    5A95 : 0D                      DCR     C
   18399/    5A96 : 12                      STAX    D
   18400/    5A97 : C2 94 5A                JNZ     -
   18401/    5A9A : 05                      DCR     B
   18402/    5A9B : C2 81 5A                JNZ     L_SET_FKEYS_1
   18403/    5A9E :                     ;
   18404/    5A9E :                     ; Display function keys on 8th line
   18405/    5A9E :                     ;
   18406/    5A9E :                     R_DISP_FKEYS:							;5A9EH
   18407/    5A9E : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   18408/    5AA1 : B7                      ORA     A
   18409/    5AA2 : C4 A8 42                CNZ     R_DISP_FKEY_LINE			;Display function key line
   18410/    5AA5 : C9                      RET
   18411/    5AA6 :                     
   18412/    5AA6 :                     L_SEARCH_ADRS:
   18413/    5AA6 : 11 CE 5C                LXI     D,L_ADRS_DO_MSG				;Code Based. "ADRS.DO"
   18414/    5AA9 :                     ;
   18415/    5AA9 :                     ; Search directory for filename
   18416/    5AA9 :                     ;
   18417/    5AA9 :                     R_CHKDC:
   18418/    5AA9 :                     R_SEARCH_DIR:							;5AA9H
   18419/    5AA9 : 3E 08                   MVI     A,08H
   18420/    5AAB : 21 D9 FD                LXI     H,STRNAM_R
   18421/    5AAE : CD 62 5A                CALL    R_COPY_MEM_DE_M				;Copy A bytes from (DE) to M
   18422/    5AB1 :                     L_CHKDC_1:
   18423/    5AB1 : 06 1B                   MVI     B,RAMDIRCNT
   18424/    5AB3 : 11 62 F9                LXI     D,RAMDIR_R					;Start of RAM directory
   18425/    5AB6 :                     L_CHKDC_2:
   18426/    5AB6 : 21 F0 FD                LXI     H,0FDF0H
   18427/    5AB9 : 1A                      LDAX    D
   18428/    5ABA : 3C                      INR     A
   18429/    5ABB : C8                      RZ
   18430/    5ABC : E6 80                   ANI     80H
   18431/    5ABE : CA D9 5A                JZ      L_CHKDC_3
   18432/    5AC1 : D5                      PUSH    D
   18433/    5AC2 : 13                      INX     D
   18434/    5AC3 : 13                      INX     D
   18435/    5AC4 : 13                      INX     D
   18436/    5AC5 : E5                      PUSH    H
   18437/    5AC6 : CD AD 59                CALL    R_CONV_FILENAME				;Convert filename from space padded to '.ext' format
   18438/    5AC9 : E1                      POP     H
   18439/    5ACA : 0E 09                   MVI     C,09H
   18440/    5ACC : 11 D9 FD                LXI     D,STRNAM_R
   18441/    5ACF : CD 6D 5A                CALL    R_CMP_MEM_DE_M				;Compare string at DE with that at M (max C bytes)
   18442/    5AD2 : C2 D8 5A                JNZ     +
   18443/    5AD5 : E1                      POP     H
   18444/    5AD6 : 0C                      INR     C
   18445/    5AD7 : C9                      RET
   18446/    5AD8 : D1                  +	POP     D
   18447/    5AD9 :                     L_CHKDC_3:
   18448/    5AD9 : 21 0B 00                LXI     H,000BH
   18449/    5ADC : 19                      DAD     D
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 321 - 9/5/2025 20:20:35


   18450/    5ADD : EB                      XCHG
   18451/    5ADE : 05                      DCR     B
   18452/    5ADF : C2 B6 5A                JNZ     L_CHKDC_2
   18453/    5AE2 : C9                      RET
   18454/    5AE3 :                     ;
   18455/    5AE3 :                     ; Get start address of file at M
   18456/    5AE3 :                     ; result in HL
   18457/    5AE3 :                     ;
   18458/    5AE3 :                     R_GET_FILE_ADDR_PREINC_HL:				;5AE3H
   18459/    5AE3 : 23                      INX     H
   18460/    5AE4 :                     R_GET_FILE_ADDR:
   18461/    5AE4 : 5E                      MOV     E,M							;[HL] -> DE
   18462/    5AE5 : 23                      INX     H
   18463/    5AE6 : 56                      MOV     D,M
   18464/    5AE7 : EB                      XCHG								;to HL
   18465/    5AE8 : C9                      RET
   18466/    5AE9 :                     
   18467/    5AE9 :                     L_Months_MSG:
   18468/    5AE9 : 4A 61 6E                DB      "Jan"
   18469/    5AEC : 46 65 62                DB      "Feb"
   18470/    5AEF : 4D 61 72                DB      "Mar"
   18471/    5AF2 : 41 70 72                DB      "Apr"
   18472/    5AF5 : 4D 61 79                DB      "May"
   18473/    5AF8 : 4A 75 6E                DB      "Jun"
   18474/    5AFB : 4A 6C 79                DB      "Jly"
   18475/    5AFE : 41 75 67                DB      "Aug"
   18476/    5B01 : 53 65 70                DB      "Sep"
   18477/    5B04 : 4F 63 74                DB      "Oct"
   18478/    5B07 : 4E 6F 76                DB      "Nov"
   18479/    5B0A : 44 65 63                DB      "Dec"
   18480/    5B0D :                     L_MSFT_MSG:
   18481/    5B0D : 28 43 29 4D 69 63       DB      "(C)Microsoft",00H
                    72 6F 73 6F 66 74 
                    00 
   18482/    5B1A :                     
   18483/    5B1A :                     L_NOENTRY_MSG:
   18484/    5B1A : 2D 2E 2D 00             DB      "-.-",00H
   18485/    5B1E :                     ;
   18486/    5B1E :                     ; Directory file-type display order table
   18487/    5B1E :                     ;
   18488/    5B1E :                     R_DIR_DISP_ORDER_TBL:					;5B1EH
   18489/    5B1E : B0 F0 C0 80 A0 00       DB      0B0H,0F0H,0C0H,80H,0A0H,00H
   18490/    5B24 :                     
   18491/    5B24 :                     L_Select_MSG:
   18492/    5B24 : 53 65 6C 65 63 74       DB      "Select: _         ",00H
                    3A 20 5F 20 20 20 
                    20 20 20 20 20 20 
                    00 
   18493/    5B37 :                     
   18494/    5B37 :                     L_SPACE_MSG:
   18495/    5B37 : 20 08 08                DB      ' ',08H,08H					;20H,08H,08H
   18496/    5B3A :                     
   18497/    5B3A :                     L_UNDERSCORE_MSG:
   18498/    5B3A : 5F 08                   DB      '_',08H						;5FH,08H
   18499/    5B3C :                     
   18500/    5B3C :                     L_NULL_MSG:
   18501/    5B3C : 00 00                   DB      00H,00H
   18502/    5B3E :                     ;
   18503/    5B3E :                     ; empty function key definition table
   18504/    5B3E :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 322 - 9/5/2025 20:20:35


   18505/    5B3E :                     L_EMPTY_KEY_FUNC:
   18506/    5B3E : 80 80 80 80 80 80       DB      80H,80H,80H,80H,80H,80H,80H,80H
                    80 80 
   18507/    5B46 :                     ;
   18508/    5B46 :                     ; Function Key Labels for BASIC
   18509/    5B46 :                     ;
   18510/    5B46 :                     R_BASIC_FKEYS_TBL:						;5B46H
   18511/    5B46 : 46 69 6C 65 73 8D       DB      "Files",8DH
   18512/    5B4C : 4C 6F 61 64 20 A2       DB      "Load ",0A2H
   18513/    5B52 : 53 61 76 65 20 A2       DB      "Save ",0A2H
   18514/    5B58 : 52 75 6E 8D             DB      "Run",8DH
   18515/    5B5C : 4C 69 73 74 8D          DB      "List",8DH
   18516/    5B61 : 80                      DB      80H
   18517/    5B62 : 80                      DB      80H
   18518/    5B63 : 4D 65 6E 75 8D          DB      "Menu",8DH
   18519/    5B68 :                     ;
   18520/    5B68 :                     ; ADDRSS Entry point
   18521/    5B68 :                     ;
   18522/    5B68 :                     R_ADDRSS_ENTRY:							;5B68H
   18523/    5B68 : 11 CE 5C                LXI     D,L_ADRS_DO_MSG				;Code Based. "ADRS.DO"
   18524/    5B6B :                     ;R_ADDRSS_ENTRY_W_FILE:				    ;5B6BH
   18525/    5B6B : 97                      SUB     A							;ADDRSS_ENTRY flag
   18526/    5B6C : C3 74 5B                JMP     L_ADDRSS_SCHEDL
   18527/    5B6F :                     ;
   18528/    5B6F :                     ; SCHEDL Entry point
   18529/    5B6F :                     ;
   18530/    5B6F :                     R_SCHEDL_ENTRY:							;5B6FH
   18531/    5B6F : 11 02 5D                LXI     D,L_NOTE_DO_MSG				;Code Based. "NOTE.DO"
   18532/    5B72 :                     ;R_SCHEDL_ENTRY_W_FILE:				    ;5B72H
   18533/    5B72 : 3E FF                   MVI     A,0FFH						;SCHEDL_ENTRY flag
   18534/    5B74 :                     ; joint entry point
   18535/    5B74 :                     L_ADDRSS_SCHEDL:
   18536/    5B74 : 32 ED FD                STA     MENUCMD_R					;Flag to ADDRSS_ENTRY or SCHEDL_ENTRY
   18537/    5B77 : CD 4D 5D                CALL    L_RESET_SP_1				;Stop BASIC, Restore BASIC SP &	clear SHIFT-PRINT Key
   18538/    5B7A : D5                      PUSH    D							;save ptr to desired filename
   18539/    5B7B : CD A9 5A                CALL    R_SEARCH_DIR				;Search directory for filename
   18540/    5B7E : CD E3 5A                CALL    R_GET_FILE_ADDR_PREINC_HL	;Get start address of file at M
   18541/    5B81 : C2 A9 5B                JNZ     L_UTIL_FILE_FND				;ADRS.DO or NOTE.DO found
   18542/    5B84 : E1                      POP     H							;restore ptr to desired filename
   18543/    5B85 : 22 EE FD                SHLD    MENPOS_R					;Used for filename ptr here
   18544/    5B88 :                     ;
   18545/    5B88 :                     ; Could not open NOTE.DO or ADRS.DO
   18546/    5B88 :                     ;
   18547/    5B88 :                     L_UTIL_NOT_OPEN:						;ON ERROR handler vector
   18548/    5B88 : 21 88 5B                LXI     H,L_UTIL_NOT_OPEN
   18549/    5B8B : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   18550/    5B8E : CD 31 42                CALL    R_CLS_STMT				    ;Clear Screen
   18551/    5B91 : CD 29 42                CALL    R_BEEP_STMT				    ;BEEP statement
   18552/    5B94 : 2A EE FD                LHLD    MENPOS_R					;filename ptr
   18553/    5B97 : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18554/    5B9A : 21 D6 5C                LXI     H,L_notfound_MSG			;Code Based.
   18555/    5B9D : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18556/    5BA0 : 21 03 00                LXI     H,L_MENU_MSG
   18557/    5BA3 : CD 24 5F                CALL    R_SPACE_KEY
   18558/    5BA6 : C3 97 57                JMP     R_MENU_ENTRY				;MENU Program
   18559/    5BA9 :                     ;
   18560/    5BA9 :                     ; NOTE.DO or ADRS.DO found. Open and start SCHEDL.
   18561/    5BA9 :                     ;
   18562/    5BA9 :                     L_UTIL_FILE_FND:
   18563/    5BA9 : 22 D7 FD                SHLD    TMP_UTIL_R					;store start address of file
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 323 - 9/5/2025 20:20:35


   18564/    5BAC : CD 31 42                CALL    R_CLS_STMT				    ;Clear Screen
   18565/    5BAF : 21 0A 5D                LXI     H,L_FUNC_KEYS_TBL_UTIL		;Code Based.
   18566/    5BB2 : CD A5 42                CALL    R_SET_DISP_FKEY				;Set and display function keys (M has key table)
   18567/    5BB5 : 21 E2 5B                LXI     H,L_UTIL_FILE_1				;ON ERROR handler vector
   18568/    5BB8 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   18569/    5BBB :                     L_UTIL_FILE_FND_0:
   18570/    5BBB : CD 5D 5D            	CALL    L_RESET_SP					;Restore BASIC SP
   18571/    5BBE : 97                      SUB     A
   18572/    5BBF : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   18573/    5BC2 : 21 E1 5C                LXI     H,L_Adrs_MSG				;Code Based. "Adrs: "
   18574/    5BC5 : 3A ED FD                LDA     MENUCMD_R					;Menu command entry count
   18575/    5BC8 : B7                      ORA     A
   18576/    5BC9 : CA CF 5B                JZ      + 
   18577/    5BCC : 21 E8 5C            	LXI     H,L_Schd_MSG				;Code Based. "Schd: "
   18578/    5BCF : CD 58 5A            +	CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18579/    5BD2 : CD 44 46                CALL    R_INP_DISP_LINE_NO_Q		;Input and display (no "?") line and store
   18580/    5BD5 : 23                      INX     H
   18581/    5BD6 : 7E                      MOV     A,M
   18582/    5BD7 : B7                      ORA     A
   18583/    5BD8 : CA BB 5B                JZ      L_UTIL_FILE_FND_0
   18584/    5BDB : 11 EF 5C                LXI     D,R_ADDRSS_INST_VCTR_TBL	;Code Based. ADDRSS/SCHEDL instruction vector table
   18585/    5BDE : CD A7 6C                CALL    L_TELCOM_EXEC_CMD
   18586/    5BE1 : C0                      RNZ
   18587/    5BE2 :                     L_UTIL_FILE_1:
   18588/    5BE2 : 97                      SUB     A							;clear A
   18589/    5BE3 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   18590/    5BE6 : CD B8 4B                CALL    R_LCD_NEW_LINE				;Move LCD to blank line (send CRLF if needed)
   18591/    5BE9 : CD 29 42                CALL    R_BEEP_STMT				    ;BEEP statement
   18592/    5BEC : 21 0A 5D                LXI     H,L_FUNC_KEYS_TBL_UTIL		;Code Based.
   18593/    5BEF : CD 7C 5A                CALL    R_SET_FKEYS				    ;Set new function key table
   18594/    5BF2 : C3 BB 5B                JMP     L_UTIL_FILE_FND_0
   18595/    5BF5 :                     ;
   18596/    5BF5 :                     ; FIND instruction for ADDRSS/SCHEDL
   18597/    5BF5 :                     ;
   18598/    5BF5 :                     R_ADDRSS_FIND_FUN:						;5BF5H
   18599/    5BF5 : 97                      SUB     A							;fnd flag
   18600/    5BF6 : (MACRO)             	SKIP_2BYTES_INST_BC
   18601/    5BF7 :                     ;
   18602/    5BF7 :                     ; LFND instruction for ADDRSS/SCHEDL
   18603/    5BF7 :                     ;
   18604/    5BF7 :                     R_ADDRSS_LFND_FUN:						;5BF7H
   18605/    5BF7 : 3E FF                   MVI     A,0FFH						;Lfnd flag
   18606/    5BF9 : CD B1 5D                CALL    L_SET_UTILS_OUTPUT
   18607/    5BFC :                     L_ADDRSS_LFND_FUN_1:
   18608/    5BFC : CD 3F 5C                CALL    R_FIND_TEXT_IN_FILE        	;Find text at M in the file at (DE)
   18609/    5BFF : D2 BB 5B                JNC     L_UTIL_FILE_FND_0
   18610/    5C02 : E5                      PUSH    H
   18611/    5C03 : D5                      PUSH    D
   18612/    5C04 : CD C5 5D                CALL    L_SET_UTIL_WIDTH
   18613/    5C07 :                     L_ADDRSS_LFND_FUN_2:
   18614/    5C07 : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into line buffer
   18615/    5C0A : 3A EE FD                LDA     MENPOS_R					;Used as Lfnd flag here
   18616/    5C0D : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   18617/    5C10 : CD 10 6A                CALL    L_DISP_LINE_1
   18618/    5C13 : 97                      SUB     A
   18619/    5C14 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   18620/    5C17 : 3A EE FD                LDA     MENPOS_R					;Used as Lfnd flag here
   18621/    5C1A : B7                      ORA     A
   18622/    5C1B : C2 24 5C                JNZ     +
   18623/    5C1E : CD E4 5D                CALL    L_TST_FOR_Q
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 324 - 9/5/2025 20:20:35


   18624/    5C21 : CA BB 5B                JZ      L_UTIL_FILE_FND_0
   18625/    5C24 : 1B                  +	DCX     D
   18626/    5C25 : 1A                      LDAX    D
   18627/    5C26 : 13                      INX     D
   18628/    5C27 : FE 0A                   CPI     0AH							;LF
   18629/    5C29 : CA 37 5C                JZ      + 
   18630/    5C2C : D5                  	PUSH    D
   18631/    5C2D : 13                      INX     D
   18632/    5C2E : 7B                      MOV     A,E
   18633/    5C2F : B2                      ORA     D
   18634/    5C30 : D1                      POP     D
   18635/    5C31 : C2 07 5C                JNZ     L_ADDRSS_LFND_FUN_2
   18636/    5C34 : C3 BB 5B                JMP     L_UTIL_FILE_FND_0
   18637/    5C37 :                     
   18638/    5C37 : D1                  +	POP     D
   18639/    5C38 : CD 6D 5C                CALL    R_FIND_NEXT_LINE_IN_FILE	;Increment DE past next CRLF in text file at (DE)
   18640/    5C3B : E1                      POP     H
   18641/    5C3C : C3 FC 5B                JMP     L_ADDRSS_LFND_FUN_1
   18642/    5C3F :                     
   18643/    5C3F :                     ;
   18644/    5C3F :                     ; Find text at M in the file at (DE)
   18645/    5C3F :                     ;
   18646/    5C3F :                     R_FIND_TEXT_IN_FILE:					;5C3FH
   18647/    5C3F : D5                      PUSH    D
   18648/    5C40 :                     L_FIND_TEXT_IN_FILE_1:
   18649/    5C40 : E5                      PUSH    H
   18650/    5C41 : D5                      PUSH    D
   18651/    5C42 : 1A                  -	LDAX    D
   18652/    5C43 : CD E9 0F                CALL    R_CONV_A_TOUPPER			;Convert A to uppercase
   18653/    5C46 : 4F                      MOV     C,A
   18654/    5C47 : CD E8 0F                CALL    R_CONV_M_TOUPPER			;Get char at M and convert to uppercase
   18655/    5C4A : B9                      CMP     C
   18656/    5C4B : C2 53 5C                JNZ     +
   18657/    5C4E : 13                      INX     D
   18658/    5C4F : 23                      INX     H
   18659/    5C50 : C3 42 5C                JMP     -
   18660/    5C53 : FE 00               +	CPI     00H
   18661/    5C55 : 79                      MOV     A,C
   18662/    5C56 : C1                      POP     B
   18663/    5C57 : E1                      POP     H
   18664/    5C58 : CA 6A 5C                JZ      +
   18665/    5C5B : FE 1A                   CPI     1AH
   18666/    5C5D : CA 96 5C                JZ      L_POP_RET
   18667/    5C60 : CD 74 5C                CALL    R_CHECK_FOR_CRLF			;Check next byte(s) at (DE) for CRLF
   18668/    5C63 : C2 40 5C                JNZ     L_FIND_TEXT_IN_FILE_1
   18669/    5C66 : F1                      POP     PSW
   18670/    5C67 : C3 3F 5C                JMP     R_FIND_TEXT_IN_FILE			;Find text at M in the file at (DE)
   18671/    5C6A : D1                  +	POP     D
   18672/    5C6B : 37                      STC
   18673/    5C6C : C9                      RET
   18674/    5C6D :                     ;
   18675/    5C6D :                     ; Increment DE past next CRLF in text file at (DE)
   18676/    5C6D :                     ;
   18677/    5C6D :                     R_FIND_NEXT_LINE_IN_FILE:				;5C6DH
   18678/    5C6D : CD 74 5C                CALL    R_CHECK_FOR_CRLF			;Check next byte(s) at (DE) for CRLF
   18679/    5C70 : C2 6D 5C                JNZ     R_FIND_NEXT_LINE_IN_FILE   	;Increment DE past next CRLF in text file at (DE)
   18680/    5C73 : C9                      RET
   18681/    5C74 :                     ;
   18682/    5C74 :                     ; Check next byte(s) at (DE) for CRLF
   18683/    5C74 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 325 - 9/5/2025 20:20:35


   18684/    5C74 :                     R_CHECK_FOR_CRLF:						;5C74H
   18685/    5C74 : 1A                      LDAX    D
   18686/    5C75 : FE 0D                   CPI     0DH
   18687/    5C77 : 13                      INX     D
   18688/    5C78 : C0                      RNZ
   18689/    5C79 : 1A                      LDAX    D
   18690/    5C7A : FE 0A                   CPI     0AH
   18691/    5C7C : C0                      RNZ
   18692/    5C7D : 13                      INX     D
   18693/    5C7E : C9                      RET
   18694/    5C7F :                     
   18695/    5C7F :                     L_TELCOM_FOUND:
   18696/    5C7F : D5                      PUSH    D
   18697/    5C80 : 21 2B 5D                LXI     H,L_FUNC_KEYS_TBL_TELCOM	;Code Based.
   18698/    5C83 : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   18699/    5C86 : CD AE 5C                CALL    L_MENU_KEY					;get key
   18700/    5C89 : F5                      PUSH    PSW							;save it
   18701/    5C8A : 21 99 51                LXI     H,R_TELCOM_LABEL_TXT		;Code Based.
   18702/    5C8D :                     L_SET_FUNC_KEYS:
   18703/    5C8D : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   18704/    5C90 : CD BC 5D                CALL    L_SET_UTIL_MAXLINE
   18705/    5C93 : F1                      POP     PSW							;restore key
   18706/    5C94 : FE 51                   CPI     'Q'							;51H
   18707/    5C96 :                     L_POP_RET:
   18708/    5C96 : D1                      POP     D
   18709/    5C97 : C9                      RET
   18710/    5C98 :                     ;
   18711/    5C98 :                     ; set extended function keys table.
   18712/    5C98 :                     ; this happens if more than 6 entries are available to display
   18713/    5C98 :                     ;
   18714/    5C98 :                     L_SET_EXT_FUNC_KEYS:
   18715/    5C98 : D5                      PUSH    D
   18716/    5C99 : 21 1E 5D                LXI     H,L_FUNC_KEYS_TBL_UTIL_EXT	;Code Based.
   18717/    5C9C : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   18718/    5C9F : CD AE 5C            -	CALL    L_MENU_KEY
   18719/    5CA2 : FE 43                   CPI     'C'							;43H
   18720/    5CA4 : CA 9F 5C                JZ      -
   18721/    5CA7 : F5                      PUSH    PSW							;save key
   18722/    5CA8 : 21 0A 5D                LXI     H,L_FUNC_KEYS_TBL_UTIL		;Code Based.
   18723/    5CAB : C3 8D 5C                JMP     L_SET_FUNC_KEYS
   18724/    5CAE :                     
   18725/    5CAE :                     L_MENU_KEY:
   18726/    5CAE : CD CB 12                CALL    R_WAIT_KEY				  	;Wait for key from keyboard
   18727/    5CB1 : F5                      PUSH    PSW
   18728/    5CB2 : 97                      SUB     A							;clear
   18729/    5CB3 : 32 2D F6                STA     FNKMAC_R+1
   18730/    5CB6 : F1                      POP     PSW
   18731/    5CB7 : CD E9 0F                CALL    R_CONV_A_TOUPPER			;Convert A to uppercase
   18732/    5CBA : FE 51                   CPI     'Q'
   18733/    5CBC : C8                      RZ
   18734/    5CBD : FE 20                   CPI     ' '
   18735/    5CBF : C8                      RZ
   18736/    5CC0 : FE 4D                   CPI     'M'
   18737/    5CC2 : C8                      RZ
   18738/    5CC3 : FE 43                   CPI     'C'
   18739/    5CC5 : C8                      RZ
   18740/    5CC6 : FE 0D                   CPI     0DH
   18741/    5CC8 : C2 AE 5C                JNZ     L_MENU_KEY
   18742/    5CCB :                     ; A is now 0DH
   18743/    5CCB : C6 36                   ADI		36H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 326 - 9/5/2025 20:20:35


   18744/    5CCD : C9                      RET
   18745/    5CCE :                     
   18746/    5CCE :                     L_ADRS_DO_MSG:
   18747/    5CCE : 41 44 52 53 2E 44       DB      "ADRS.DO",00H
                    4F 00 
   18748/    5CD6 :                     
   18749/    5CD6 :                     L_notfound_MSG:
   18750/    5CD6 : 20 6E 6F 74 20 66       DB      " not found",00H
                    6F 75 6E 64 00 
   18751/    5CE1 :                     
   18752/    5CE1 :                     L_Adrs_MSG:
   18753/    5CE1 : 41 64 72 73 3A 20       DB      "Adrs: ",00H
                    00 
   18754/    5CE8 :                     
   18755/    5CE8 :                     L_Schd_MSG:
   18756/    5CE8 : 53 63 68 64 3A 20       DB      "Schd: ",00H
                    00 
   18757/    5CEF :                     ;
   18758/    5CEF :                     ; ADDRSS/SCHEDL instruction vector table
   18759/    5CEF :                     ;
   18760/    5CEF :                     R_ADDRSS_INST_VCTR_TBL:				    	;5CEFH
   18761/    5CEF : 46 49 4E 44             DB      "FIND"
   18762/    5CF3 : F5 5B                   DW      R_ADDRSS_FIND_FUN				;5BF5H
   18763/    5CF5 : 4C 46 4E 44             DB      "LFND"
   18764/    5CF9 : F7 5B                   DW      R_ADDRSS_LFND_FUN				;5BF7H
   18765/    5CFB : 4D 45 4E 55             DB      "MENU"
   18766/    5CFF : 97 57                   DW      R_MENU_ENTRY					;5797H
   18767/    5D01 : FF                      DB      0FFH
   18768/    5D02 :                     
   18769/    5D02 :                     L_NOTE_DO_MSG:
   18770/    5D02 : 4E 4F 54 45 2E 44       DB      "NOTE.DO",00H
                    4F 00 
   18771/    5D0A :                     ;
   18772/    5D0A :                     ; Function Key Tables
   18773/    5D0A :                     ;
   18774/    5D0A :                     L_FUNC_KEYS_TBL_UTIL:
   18775/    5D0A : 46 69 6E 64 A0          DB      "Find",0A0H					;' ' OR 80H
   18776/    5D0F : 80                      DB      80H
   18777/    5D10 : 80                      DB      80H
   18778/    5D11 : 80                      DB      80H
   18779/    5D12 : 4C 66 6E 64 A0          DB      "Lfnd",0A0H					;' ' OR 80H
   18780/    5D17 : 80                      DB      80H
   18781/    5D18 : 80                      DB      80H
   18782/    5D19 : 4D 65 6E 75 8D          DB      "Menu",8DH					;CR OR 80H
   18783/    5D1E :                     L_FUNC_KEYS_TBL_UTIL_EXT:
   18784/    5D1E : 80                      DB      80H
   18785/    5D1F : 80                      DB      80H
   18786/    5D20 : 4D 6F 72 E5             DB      "Mor",0E5H					;'e' OR 80H
   18787/    5D24 : 51 75 69 F4             DB      "Qui",0F4H					;'t' OR 80H
   18788/    5D28 : 80 80 80                DB      80H,80H,80H
   18789/    5D2B :                     
   18790/    5D2B :                     L_FUNC_KEYS_TBL_TELCOM:
   18791/    5D2B : 80                      DB      80H
   18792/    5D2C : 43 61 6C 6C A0          DB      "Call",0A0H					;' ' OR 80H
   18793/    5D31 : 4D 6F 72 E5             DB      "Mor",0E5H					;'e' OR 80H
   18794/    5D35 : 51 75 69 F4             DB      "Qui",0F4H					;'t' OR 80H
   18795/    5D39 : 80 80 80 80             DB      80H,80H,80H,80H
   18796/    5D3D :                     
   18797/    5D3D : C3 97 57                JMP     R_MENU_ENTRY				;MENU Program
   18798/    5D40 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 327 - 9/5/2025 20:20:35


   18799/    5D40 :                     ; TODO unreachable
   18800/    5D40 :                     ;
   18801/    5D40 : 11 10 00                LXI     D,0010H
   18802/    5D43 : 19                      DAD     D
   18803/    5D44 : 0D                      DCR     C
   18804/    5D45 : C9                      RET
   18805/    5D46 :                     
   18806/    5D46 :                     L_SKIP_SPACE_AT_M:						;skip space at M
   18807/    5D46 : 7E                      MOV     A,M
   18808/    5D47 : 23                      INX     H
   18809/    5D48 : FE 20                   CPI     ' '
   18810/    5D4A : C8                      RZ
   18811/    5D4B : 2B                      DCX     H
   18812/    5D4C : C9                      RET
   18813/    5D4D :                     ;
   18814/    5D4D :                     ; Stop BASIC, Restore BASIC SP & clear SHIFT-PRINT Key
   18815/    5D4D :                     ;
   18816/    5D4D :                     L_RESET_SP_1:
   18817/    5D4D : 21 3C 5B                LXI     H,L_NULL_MSG				;Code Based
   18818/    5D50 : 22 8A F8                SHLD    SHFTPRNT_R
   18819/    5D53 :                     ;
   18820/    5D53 :                     ; Stop BASIC, Restore BASIC SP
   18821/    5D53 :                     ;
   18822/    5D53 :                     L_RESET_SP_0:
   18823/    5D53 : 21 FF FF                LXI     H,0FFFFH
   18824/    5D56 : 22 7A F6                SHLD    CURLIN_R					;Currently executing line number
   18825/    5D59 : 23                      INX     H							;Clear HL
   18826/    5D5A : 22 C2 FA                SHLD    SER_UPDWN_R
   18827/    5D5D :                     ;
   18828/    5D5D :                     ; Restore BASIC SP
   18829/    5D5D :                     ;
   18830/    5D5D :                     L_RESET_SP:
   18831/    5D5D : C1                      POP     B							;pop return address
   18832/    5D5E : 2A 9D FB                LHLD    BASSTK_R					;SP used by BASIC to reinitialize the stack
   18833/    5D61 : F9                      SPHL								;set SP
   18834/    5D62 : C5                      PUSH    B							;push return address
   18835/    5D63 : C9                      RET
   18836/    5D64 :                     ;
   18837/    5D64 :                     ; Wait for char from keyboard & convert to uppercase
   18838/    5D64 :                     ;
   18839/    5D64 :                     R_GET_KEY_CONV_TOUPPER:				  	;5D64H
   18840/    5D64 : CD CB 12                CALL    R_WAIT_KEY				  	;Wait for key from keyboard
   18841/    5D67 : C3 E9 0F                JMP     R_CONV_A_TOUPPER			;Convert A to uppercase
   18842/    5D6A :                     ;
   18843/    5D6A :                     ; Home cursor
   18844/    5D6A :                     ;
   18845/    5D6A :                     R_SEND_CURSOR_HOME:						;5D6AH
   18846/    5D6A : 21 01 01                LXI     H,0101H
   18847/    5D6D : C3 7C 42                JMP     R_SET_CURSOR_POS			;Set the current cursor position
   18848/    5D70 :                     ;
   18849/    5D70 :                     ; Print time on top line until key pressed
   18850/    5D70 :                     ;
   18851/    5D70 :                     R_PRINT_TIME_LOOP:						;5D70H
   18852/    5D70 : E5                      PUSH    H
   18853/    5D71 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   18854/    5D74 : E5                      PUSH    H
   18855/    5D75 : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   18856/    5D78 : F5                      PUSH    PSW
   18857/    5D79 : CC 15 5A                CZ      R_PRINT_TIME_DAY			;Print time),day),date on first line w/o CLS
   18858/    5D7C : F1                      POP     PSW
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 328 - 9/5/2025 20:20:35


   18859/    5D7D : E1                      POP     H							;Cursor row + column
   18860/    5D7E : F5                      PUSH    PSW
   18861/    5D7F : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   18862/    5D82 : F1                      POP     PSW
   18863/    5D83 : E1                      POP     H
   18864/    5D84 : CA 70 5D                JZ      R_PRINT_TIME_LOOP			;Print time on top line until key pressed
   18865/    5D87 : C9                      RET
   18866/    5D88 :                     ;
   18867/    5D88 :                     ; IN:
   18868/    5D88 :                     ;	C		character typed
   18869/    5D88 :                     ;	HL		ptr to buffer
   18870/    5D88 :                     ;
   18871/    5D88 :                     L_CMD_CHAR:
   18872/    5D88 : 71                      MOV     M,C
   18873/    5D89 : 23                      INX     H
   18874/    5D8A : E5                      PUSH    H
   18875/    5D8B : 21 ED FD                LXI     H,MENUCMD_R				  	;Menu command entry count
   18876/    5D8E : 34                      INR     M
   18877/    5D8F : 79                      MOV     A,C
   18878/    5D90 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   18879/    5D91 : 21 3A 5B                LXI     H,L_UNDERSCORE_MSG			;Code Based. Prompt cursor
   18880/    5D94 : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18881/    5D97 : E1                      POP     H
   18882/    5D98 : C9                      RET
   18883/    5D99 :                     ;
   18884/    5D99 :                     ; CMD mode means typing into the SELECT: field
   18885/    5D99 :                     ; MENUCMD_R has the char count
   18886/    5D99 :                     ;
   18887/    5D99 :                     L_MENU_OR_CMD:
   18888/    5D99 : 3A ED FD                LDA     MENUCMD_R					;Flag to indicate MENU entry (0) or command entry
   18889/    5D9C : B7                      ORA     A
   18890/    5D9D : C9                      RET
   18891/    5D9E :                     
   18892/    5D9E :                     L_RUBOUT_CMD:
   18893/    5D9E : CD 99 5D                CALL    L_MENU_OR_CMD				;TODO inline
   18894/    5DA1 : C8                      RZ									;retif MENUCMD_R == 0: ignore
   18895/    5DA2 : 3D                      DCR     A							;decrement MENUCMD_R
   18896/    5DA3 : 32 ED FD                STA     MENUCMD_R					;update MENUCMD_R
   18897/    5DA6 : 2B                      DCX     H
   18898/    5DA7 : E5                      PUSH    H
   18899/    5DA8 : 21 37 5B                LXI     H,L_SPACE_MSG				;Code Based.
   18900/    5DAB : CD 58 5A                CALL    R_PRINT_STRING2				;Print NULL terminated string at M
   18901/    5DAE : E1                      POP     H
   18902/    5DAF : 3C                      INR     A
   18903/    5DB0 : C9                      RET
   18904/    5DB1 :                     ;
   18905/    5DB1 :                     ; Set output target for utils
   18906/    5DB1 :                     ;
   18907/    5DB1 :                     L_SET_UTILS_OUTPUT:
   18908/    5DB1 : 32 EE FD                STA     MENPOS_R					;Used as Lfnd flag here
   18909/    5DB4 : CD 46 5D                CALL    L_SKIP_SPACE_AT_M			;skip space at M
   18910/    5DB7 : EB                      XCHG
   18911/    5DB8 : 2A D7 FD                LHLD    TMP_UTIL_R					;start address of file to DE
   18912/    5DBB : EB                      XCHG
   18913/    5DBC :                     L_SET_UTIL_MAXLINE:
   18914/    5DBC : 3A 3B F6                LDA     LINCNT_R					;Console height
   18915/    5DBF : 3D                      DCR     A
   18916/    5DC0 : 3D                      DCR     A
   18917/    5DC1 : 32 EF FD                STA     MENMAX_R					;Maximum output window line here
   18918/    5DC4 : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 329 - 9/5/2025 20:20:35


   18919/    5DC5 :                     
   18920/    5DC5 :                     L_SET_UTIL_WIDTH:
   18921/    5DC5 : 21 3C F6                LXI     H,LINWDT_R				  	;Active columns count (1-40)
   18922/    5DC8 : 3E FF                   MVI     A,0FFH
   18923/    5DCA : 32 21 F9                STA     WWRAP_R						;Get word-wrap enable flag
   18924/    5DCD : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   18925/    5DD0 : 3A EE FD                LDA     MENPOS_R					;Used as Lfnd flag here
   18926/    5DD3 : B7                      ORA     A
   18927/    5DD4 : CA DF 5D                JZ      +							;brif MENPOS_R == 0
   18928/    5DD7 :                     ; output to printer
   18929/    5DD7 : 3E 01                   MVI     A,01H
   18930/    5DD9 : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   18931/    5DDC : 21 49 F6                LXI     H,PRTWDTH_R					;Printer output width from CTRL-Y
   18932/    5DDF : 7E                  +	MOV     A,M
   18933/    5DE0 : 32 22 F9                STA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   18934/    5DE3 : C9                      RET
   18935/    5DE4 :                     
   18936/    5DE4 :                     L_TST_FOR_Q:
   18937/    5DE4 : 21 EF FD                LXI     H,MENMAX_R				  	;Maximum MENU directory location
   18938/    5DE7 : 35                      DCR     M
   18939/    5DE8 : CC 98 5C                CZ      L_SET_EXT_FUNC_KEYS
   18940/    5DEB : FE 51                   CPI     51H							;'Q'
   18941/    5DED : C9                      RET
   18942/    5DEE :                     ;
   18943/    5DEE :                     ; TEXT Entry point
   18944/    5DEE :                     ;
   18945/    5DEE :                     R_TEXT_ENTRY:							;5DEEH
   18946/    5DEE : 21 FB 5D                LXI     H,L_TEXT_ENTRY_1			;ON ERROR handler vector
   18947/    5DF1 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   18948/    5DF4 : 21 22 5E                LXI     H,R_TEXT_FKEY_TBL			;Code Based. TEXT Function key table - empty
   18949/    5DF7 : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   18950/    5DFA : AF                      XRA     A
   18951/    5DFB :                     L_TEXT_ENTRY_1:							;ON ERROR handler vector
   18952/    5DFB : C4 29 42                CNZ     R_BEEP_STMT				  	;BEEP statement
   18953/    5DFE : CD 53 5D                CALL    L_RESET_SP_0				;Stop BASIC, Restore BASIC SP
   18954/    5E01 : 21 15 5E                LXI     H,L_EDITFILE_MSG			;Code Based.
   18955/    5E04 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   18956/    5E07 : CD 3E 46                CALL    R_INP_DISP_LINE				;Input and display line and store
   18957/    5E0A : (MACRO)                 CHRGET								;Get next non-white char from M
   18958/    5E0B : A7                      ANA     A
   18959/    5E0C : CA 97 57                JZ      R_MENU_ENTRY				;MENU Program
   18960/    5E0F : CD 06 22                CALL    R_GET_FIND_DO_FILE         	;Get .DO filename and locate in RAM directory
   18961/    5E12 : C3 65 5F                JMP     R_EDIT_DO_FILE_FUN         	;Edit .DO files
   18962/    5E15 :                     
   18963/    5E15 :                     L_EDITFILE_MSG:
   18964/    5E15 : 46 69 6C 65 20 74       DB      "File to edit",00H
                    6F 20 65 64 69 74 
                    00 
   18965/    5E22 :                     ;
   18966/    5E22 :                     ; TEXT Function key table - empty
   18967/    5E22 :                     ;
   18968/    5E22 :                     R_TEXT_FKEY_TBL:						;5E22H
   18969/    5E22 : 80 80 80 80 80 80       DB      80H,80H,80H,80H,80H,80H,80H,83H
                    80 83 
   18970/    5E2A :                     ;
   18971/    5E2A :                     ; TEXT Function key table - Normal FKeys
   18972/    5E2A :                     ;
   18973/    5E2A :                     R_TEXT_FKEY2_TBL:
   18974/    5E2A : 46 69 6E 64 8E          DB      "Find",8EH
   18975/    5E2F : 4C 6F 61 64 96          DB      "Load",96H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 330 - 9/5/2025 20:20:35


   18976/    5E34 : 53 61 76 65 87          DB      "Save",87H
   18977/    5E39 : 80                      DB      80H
   18978/    5E3A : 43 6F 70 79 8F          DB      "Copy",8FH
   18979/    5E3F : 43 75 74 20 95          DB      "Cut ",95H
   18980/    5E44 : 53 65 6C 20 8C          DB      "Sel ",8CH
   18981/    5E49 : 4D 65 6E 75 1B          DB      "Menu",1BH
   18982/    5E4E : 9B                  	DB		9BH
   18983/    5E4F :                     ;
   18984/    5E4F :                     ; CTRL-Y (Print) Keystroke emulation
   18985/    5E4F :                     ;
   18986/    5E4F :                     L_CTRLY:
   18987/    5E4F : 19 00               	DB		19H, 00H
   18988/    5E51 :                     ;
   18989/    5E51 :                     ; EDIT statement
   18990/    5E51 :                     ; Z Flag means no EDIT linenumbers were specified
   18991/    5E51 :                     ;
   18992/    5E51 :                     ; EDIT clears the screen, list statements in range and enters EDIT mode
   18993/    5E51 :                     ;
   18994/    5E51 :                     R_EDIT_STMT:							;5E51H
   18995/    5E51 : E5                      PUSH    H							;save txt ptr
   18996/    5E52 : F5                      PUSH    PSW							;save Z flag
   18997/    5E53 : 3E 01                   MVI     A,01H						;preload A no EDIT linenumbers were specified
   18998/    5E55 : CA 5A 5E                JZ      +
   18999/    5E58 : 3E FF                   MVI     A,0FFH						;A value if EDIT linenumbers were specified
   19000/    5E5A : 32 51 F6            +	STA     EDITFLG_R
   19001/    5E5D : AF                      XRA     A
   19002/    5E5E : 32 95 FC                STA     FILNAM_R+2					;clear
   19003/    5E61 : 21 20 20                LXI     H,2020H						;"  "
   19004/    5E64 : 22 99 FC                SHLD    FILNAM_R+6					;Filename extension
   19005/    5E67 : 21 DA 5E                LXI     H,L_EDIT_ERR2				;EDIT ERROR handler vector
   19006/    5E6A : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   19007/    5E6D : 11 02 F8                LXI     D,0F802H					;E == Marker 2: Open for Output. D == RAM_DEV
   19008/    5E70 : 21 48 5F                LXI     H,L_NULL_STR
   19009/    5E73 : CD 12 4D                CALL    R_OPEN_FILE
   19010/    5E76 : 21 D5 5E                LXI     H,L_EDIT_ERR1				;EDIT ERROR handler vector
   19011/    5E79 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   19012/    5E7C : F1                      POP     PSW							;restore Z flag
   19013/    5E7D : E1                      POP     H							;restore txt ptr
   19014/    5E7E : E5                      PUSH    H							;and push a fake return address
   19015/    5E7F : C3 40 11                JMP     R_LIST_STMT				   	;shared code in LIST statement
   19016/    5E82 :                     
   19017/    5E82 :                     L_EDIT_MODE:
   19018/    5E82 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R						
   19019/    5E85 : CD 2D 21                CALL    L_DEL_LINES
   19020/    5E88 : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   19021/    5E8B : 32 CC FA                STA     LINPROT2_R					;save it
   19022/    5E8E : 21 00 00                LXI     H,0
   19023/    5E91 : 22 E7 F6                SHLD    TMPLIN_R					;temp storage for line ptr
   19024/    5E94 :                     L_EDIT_MODE_1:
   19025/    5E94 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
   19026/    5E97 : CD 09 40                CALL    R_CLEAR_COM_INT_DEF       	;Clear all COM), TIME), and KEY interrupt definitions
   19027/    5E9A : 2A B0 F9                LHLD    RICKY_R+1
   19028/    5E9D : 7E                      MOV     A,M
   19029/    5E9E : FE 1A                   CPI     1AH							;^Z
   19030/    5EA0 : CA BD 5E                JZ      L_EOF_FND					;brif ^Z found
   19031/    5EA3 : E5                      PUSH    H
   19032/    5EA4 : AF                      XRA     A
   19033/    5EA5 : 21 AB 5E                LXI     H,L_EDIT_MODE_2				;continuation function
   19034/    5EA8 : C3 71 5F                JMP     L_EDIT_DO_FILE_FUN_1
   19035/    5EAB :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 331 - 9/5/2025 20:20:35


   19036/    5EAB :                     L_EDIT_MODE_2:
   19037/    5EAB : AF                      XRA     A
   19038/    5EAC : 21 EB 5E                LXI     H,L_EDIT_ERR3				;ERROR handler vector
   19039/    5EAF : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   19040/    5EB2 : 21 48 5F                LXI     H,L_NULL_STR
   19041/    5EB5 : 16 F8                   MVI     D,RAM_DEV					;0F8H Device Code
   19042/    5EB7 : C3 9E 4D                JMP     L_MERGE_2
   19043/    5EBA :                     
   19044/    5EBA :                     L_EDIT_MODE_3:
   19045/    5EBA : CD 31 42                CALL    R_CLS_STMT				    ;Clear Screen
   19046/    5EBD :                     L_EOF_FND:
   19047/    5EBD : AF                      XRA     A
   19048/    5EBE : 32 51 F6                STA     EDITFLG_R					;leave EDIT mode
   19049/    5EC1 : 6F                      MOV     L,A							;clear HL
   19050/    5EC2 : 67                      MOV     H,A
   19051/    5EC3 : 22 52 F6                SHLD    ACTONERR_R					;clear active ON ERROR handler vector
   19052/    5EC6 : CD F8 1F                CALL    L_CLR_SELECTION				;Clear selection
   19053/    5EC9 : CD 6D 3F                CALL    L_INIT_BASIC				;Initialize BASIC for new execution
   19054/    5ECC : 3A CC FA                LDA     LINPROT2_R					;restore Label line protect status
   19055/    5ECF : 32 3D F6                STA     LINPROT_R
   19056/    5ED2 : C3 5B 6C                JMP     L_ALT_BASIC_ENTRY
   19057/    5ED5 :                     ;
   19058/    5ED5 :                     ; EDIT ERROR handler vectors
   19059/    5ED5 :                     ;
   19060/    5ED5 :                     L_EDIT_ERR1:
   19061/    5ED5 : D5                      PUSH    D							;save DE
   19062/    5ED6 : CD F8 1F                CALL    L_CLR_SELECTION				;Clear selection
   19063/    5ED9 : D1                      POP     D							;restore DE
   19064/    5EDA :                     L_EDIT_ERR2:							;ERROR handler vector
   19065/    5EDA : D5                      PUSH    D							;save DE
   19066/    5EDB : AF                      XRA     A							;clear EDITFLG_R & HL
   19067/    5EDC : 32 51 F6                STA     EDITFLG_R
   19068/    5EDF : 6F                      MOV     L,A
   19069/    5EE0 : 67                      MOV     H,A
   19070/    5EE1 : 22 52 F6                SHLD    ACTONERR_R					;clear active ON ERROR handler vector
   19071/    5EE4 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   19072/    5EE7 : D1                      POP     D							;restore DE
   19073/    5EE8 : C3 5D 04                JMP     R_GEN_ERR_IN_E				;Generate error in E
   19074/    5EEB :                     
   19075/    5EEB :                     L_EDIT_ERR3:
   19076/    5EEB : 7B                      MOV     A,E
   19077/    5EEC : F5                      PUSH    PSW
   19078/    5EED : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
   19079/    5EF0 : 2B                      DCX     H
   19080/    5EF1 : 46                      MOV     B,M
   19081/    5EF2 : 05                      DCR     B
   19082/    5EF3 : 2B                      DCX     H
   19083/    5EF4 : 4E                      MOV     C,M
   19084/    5EF5 : 2B                      DCX     H
   19085/    5EF6 : 6E                      MOV     L,M
   19086/    5EF7 : AF                      XRA     A
   19087/    5EF8 : 67                      MOV     H,A
   19088/    5EF9 : 09                      DAD     B
   19089/    5EFA : 01 FF FF                LXI     B,0FFFFH
   19090/    5EFD : 09                      DAD     B
   19091/    5EFE : DA 03 5F                JC      +
   19092/    5F01 : 6F                      MOV     L,A
   19093/    5F02 : 67                      MOV     H,A
   19094/    5F03 : 22 E7 F6            +	SHLD    TMPLIN_R					;temp storage for line ptr
   19095/    5F06 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 332 - 9/5/2025 20:20:35


   19096/    5F09 : F1                      POP     PSW
   19097/    5F0A : FE 07                   CPI     07H
   19098/    5F0C : 21 B1 60                LXI     H,L_MEMFULL_MSG
   19099/    5F0F : CA 15 5F                JZ      + 
   19100/    5F12 : 21 38 5F            	LXI     H,L_ILL_FRMD_TXT			;Code Based.
   19101/    5F15 : CD 31 42            +	CALL    R_CLS_STMT					;Clear Screen
   19102/    5F18 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   19103/    5F1B : 21 60 5F                LXI     H,L_TEXT_MSG				;Code Based.
   19104/    5F1E : CD 24 5F                CALL    R_SPACE_KEY
   19105/    5F21 : C3 94 5E                JMP     L_EDIT_MODE_1
   19106/    5F24 :                     
   19107/    5F24 :                     R_SPACE_KEY:
   19108/    5F24 : E5                      PUSH    H
   19109/    5F25 : 21 49 5F                LXI     H,L_PRESS_SPACE				;Code Based.
   19110/    5F28 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   19111/    5F2B : E1                      POP     H
   19112/    5F2C : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   19113/    5F2F :                     ;
   19114/    5F2F :                     ; Wait for a space to be entered on keyboard
   19115/    5F2F :                     ;
   19116/    5F2F :                     R_WAIT_FOR_SPACE_KEY:				    ;5F2FH
   19117/    5F2F : CD CB 12                CALL    R_WAIT_KEY				    ;Wait for key from keyboard
   19118/    5F32 : FE 20                   CPI     ' '	
   19119/    5F34 : C2 2F 5F                JNZ     R_WAIT_FOR_SPACE_KEY     	;Wait for a space to be entered on keyboard
   19120/    5F37 : C9                      RET
   19121/    5F38 :                     
   19122/    5F38 :                     L_ILL_FRMD_TXT:
   19123/    5F38 : 54 65 78 74 20 69       DB      "Text ill-formed",07H
                    6C 6C 2D 66 6F 72 
                    6D 65 64 07 
   19124/    5F48 :                     L_NULL_STR:
   19125/    5F48 : 00                      DB      00H
   19126/    5F49 :                     
   19127/    5F49 :                     L_PRESS_SPACE:
   19128/    5F49 : 0D 0A                   DB      0DH,0AH
   19129/    5F4B : 50 72 65 73 73 20       DB      "Press space bar for ",00H
                    73 70 61 63 65 20 
                    62 61 72 20 66 6F 
                    72 20 00 
   19130/    5F60 :                     
   19131/    5F60 :                     L_TEXT_MSG:
   19132/    5F60 : 54 45 58 54 00          DB      "TEXT",00H
   19133/    5F65 :                     ;
   19134/    5F65 :                     ; Edit .DO files
   19135/    5F65 :                     ;
   19136/    5F65 :                     R_EDIT_DO_FILE_FUN:						;5F65H
   19137/    5F65 : E5                      PUSH    H
   19138/    5F66 : 21 00 00                LXI     H,0
   19139/    5F69 : 22 E7 F6                SHLD    TMPLIN_R					;temp storage for line ptr
   19140/    5F6C : 3E 01                   MVI     A,01H
   19141/    5F6E : 21 97 57                LXI     H,R_MENU_ENTRY
   19142/    5F71 :                     L_EDIT_DO_FILE_FUN_1:
   19143/    5F71 : 32 21 F9                STA     WWRAP_R						;Get word-wrap enable flag
   19144/    5F74 : 22 65 F7                SHLD    0F765H
   19145/    5F77 : CD 6E 42                CALL    R_INV_CHAR_DISABLE         	;Cancel inverse character mode
   19146/    5F7A : CD 8A 42                CALL    R_ERASE_FKEY_DISP			;Erase function key display
   19147/    5F7D : CD 3F 42                CALL    R_STOP_AUTO_SCROLL        	;Stop automatic scrolling
   19148/    5F80 : CD 4E 42                CALL    R_TURN_CURSOR_OFF			;Turn the cursor off
   19149/    5F83 : CD B9 65                CALL    L_GET_KEY
   19150/    5F86 : 21 2A 5E                LXI     H,R_TEXT_FKEY2_TBL			;Code Based.
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 333 - 9/5/2025 20:20:35


   19151/    5F89 : CD 7C 5A                CALL    R_SET_FKEYS				  	;Set new function key table
   19152/    5F8C : 3A 51 F6                LDA     EDITFLG_R
   19153/    5F8F : A7                      ANA     A
   19154/    5F90 : CA 9F 5F                JZ      +
   19155/    5F93 : 21 45 78                LXI     H,7845H						;"EX"
   19156/    5F96 : 22 F9 F7                SHLD    FNKSTR_R+70H				;F8
   19157/    5F99 : 21 69 74                LXI     H,7469H						;"IT"
   19158/    5F9C : 22 FB F7                SHLD    FNKSTR_R+72H
   19159/    5F9F : 21 4F 5E            +	LXI     H,L_CTRLY					;^Y Code Based.
   19160/    5FA2 : 22 8A F8                SHLD    SHFTPRNT_R
   19161/    5FA5 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   19162/    5FA8 : 32 22 F9                STA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   19163/    5FAB : 3E 80                   MVI     A,80H						;set TEXT mode
   19164/    5FAD : 32 50 F6                STA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80) BIT 6=in TELCOM (0x40)
   19165/    5FB0 : AF                      XRA     A							;clear A, HL
   19166/    5FB1 : 6F                      MOV     L,A
   19167/    5FB2 : 67                      MOV     H,A
   19168/    5FB3 : 32 DF F6                STA     ESCESC_R					;Clear storage for key read from keyboard to test for ESC ESC (1 byts)
   19169/    5FB6 : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   19170/    5FB9 : 32 E1 F6                STA     PNDERR_R
   19171/    5FBC : 32 1F F7                STA     SEARCHSTR_R
   19172/    5FBF : 22 E2 F6                SHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   19173/    5FC2 : E1                      POP     H
   19174/    5FC3 : 22 67 F7                SHLD    DOLOAD_R					;Load start address of .DO file being edited
   19175/    5FC6 : E5                      PUSH    H
   19176/    5FC7 : CD 2A 6B                CALL    L_FNDEOFDO					;Find end of DO file
   19177/    5FCA : CD 4A 63                CALL    L_EXPND_DO					;Expand .DO file so it fills all memory for editing
   19178/    5FCD : D1                      POP     D
   19179/    5FCE : 2A E7 F6                LHLD    TMPLIN_R					;temp storage for line ptr
   19180/    5FD1 : 19                      DAD     D
   19181/    5FD2 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19182/    5FD5 : E5                      PUSH    H
   19183/    5FD6 : CD 86 69                CALL    L_DISP_A_LINES				;Display 'A' lines of the .DO file at HL for editing
   19184/    5FD9 : E1                      POP     H
   19185/    5FDA : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   19186/    5FDD :                     ;
   19187/    5FDD :                     ; Main TEXT edit loop
   19188/    5FDD :                     ;
   19189/    5FDD :                     R_TEXT_EDIT_LOOP:						;5FDDH
   19190/    5FDD : CD 53 5D                CALL    L_RESET_SP_0				;Stop BASIC, Restore BASIC SP
   19191/    5FE0 : 21 DD 5F                LXI     H,R_TEXT_EDIT_LOOP
   19192/    5FE3 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   19193/    5FE6 : E5                      PUSH    H
   19194/    5FE7 : 3A DF F6                LDA     ESCESC_R					;Clear storage for key read from keyboard to test for ESC ESC (1 byts)
   19195/    5FEA : 32 E0 F6                STA     SAVESCESC_R
   19196/    5FED : CD E5 63                CALL    R_TEXT_GET_NEXT_BYTE     	;Get next byte for TEXT Program entry
   19197/    5FF0 : 32 DF F6                STA     ESCESC_R					;Clear storage for key read from keyboard to test for ESC ESC (1 byts)
   19198/    5FF3 : F5                      PUSH    PSW
   19199/    5FF4 : CD EC 65                CALL    L_CLR_PNDERR
   19200/    5FF7 : F1                      POP     PSW
   19201/    5FF8 : DA 01 65                JC      L_INSRT_PASTE				;Insert PASTE buffer into .DO file
   19202/    5FFB : FE 7F                   CPI     7FH							;DEL
   19203/    5FFD : CA 18 61                JZ      L_TEXT_CTRL_H_FUN_1
   19204/    6000 : FE 20                   CPI     ' '	
   19205/    6002 : D2 8A 60                JNC     R_TEXT_CTRL_I_FUN			;brif A >= ' ': TEXT control I routine
   19206/    6005 : 4F                      MOV     C,A							;zero extend A to BC
   19207/    6006 : 06 00                   MVI     B,00H
   19208/    6008 : 21 16 60                LXI     H,R_TEXT_CTRL_VCTR_TBL		;Code Based.
   19209/    600B : 09                      DAD     B							;index word address
   19210/    600C : 09                      DAD     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 334 - 9/5/2025 20:20:35


   19211/    600D : 4E                      MOV     C,M							;Code Based.
   19212/    600E : 23                      INX     H							;get vector into HL
   19213/    600F : 66                      MOV     H,M
   19214/    6010 : 69                      MOV     L,C
   19215/    6011 : E5                      PUSH    H							;set as continuation function
   19216/    6012 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   19217/    6015 :                     R_RET_FUN:
   19218/    6015 : C9                      RET
   19219/    6016 :                     
   19220/    6016 :                     ;
   19221/    6016 :                     ; TEXT control character vector table
   19222/    6016 :                     ;
   19223/    6016 :                     R_TEXT_CTRL_VCTR_TBL:				    ;6016H
   19224/    6016 : 15 60 8C 61 D7 61       DW      R_RET_FUN, R_TEXT_CTRL_A_FUN, R_TEXT_CTRL_B_FUN
   19225/    601C : 8F 62 DE 60 55 61       DW      R_TEXT_CTRL_C_FUN, R_TEXT_CTRL_D_FUN, R_TEXT_CTRL_E_FUN
   19226/    6022 : 7A 61 13 67 0B 61       DW      R_TEXT_CTRL_F_FUN, R_TEXT_CTRL_G_FUN, R_TEXT_CTRL_H_FUN
   19227/    6028 : 8A 60 15 60 15 60       DW      R_TEXT_CTRL_I_FUN, R_RET_FUN, R_RET_FUN
   19228/    602E : 42 62 BE 60 51 65       DW      R_TEXT_CTRL_L_FUN, R_TEXT_CTRL_M_FUN, R_TEXT_CTRL_N_FUN
   19229/    6034 : 31 64 7C 60 0B 62       DW      R_TEXT_CTRL_O_FUN, R_TEXT_CTRL_P_FUN, R_TEXT_CTRL_Q_FUN
   19230/    603A : FD 61 51 61 C2 61       DW      R_TEXT_CTRL_R_FUN, R_TEXT_CTRL_S_FUN, R_TEXT_CTRL_T_FUN
   19231/    6040 : 45 64 74 67 10 62       DW      R_TEXT_CTRL_U_FUN, R_TEXT_CTRL_V_FUN, R_TEXT_CTRL_W_FUN
   19232/    6046 : E2 60 91 66 1C 62       DW      R_TEXT_CTRL_X_FUN, R_TEXT_CTRL_Y_FUN, R_TEXT_CTRL_Z_FUN
   19233/    604C : 56 60 DE 60 51 61       DW      R_TEXT_ESC_FUN, R_TEXT_CTRL_D_FUN, R_TEXT_CTRL_S_FUN
   19234/    6052 : 55 61 E2 60             DW      R_TEXT_CTRL_E_FUN, R_TEXT_CTRL_X_FUN
   19235/    6056 :                     
   19236/    6056 :                     ;
   19237/    6056 :                     ; TEXT ESCape routine
   19238/    6056 :                     ;
   19239/    6056 :                     R_TEXT_ESC_FUN:							;6056H
   19240/    6056 : 3A E0 F6                LDA     SAVESCESC_R
   19241/    6059 : D6 1B                   SUI     1BH
   19242/    605B : C0                      RNZ
   19243/    605C : 6F                      MOV     L,A							;clear HL
   19244/    605D : 67                      MOV     H,A
   19245/    605E : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   19246/    6061 : (MACRO)             	RST38H	38H
   19247/    6063 : CD B9 65                CALL    L_GET_KEY
   19248/    6066 : CD 44 42                CALL    R_RESUME_AUTO_SCROLL     	;Resume automatic scrolling
   19249/    6069 : CD 8A 42                CALL    R_ERASE_FKEY_DISP			;Erase function key display
   19250/    606C : CD DB 63                CALL    L_NUM_LCD_ROWS						;Get # of LCD rows based on label protect + cols in HL
   19251/    606F : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   19252/    6072 : CD 22 42                CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
   19253/    6075 : CD 83 63                CALL    L_DEL_ZEROS					;Delete zeros from end of edited DO file and update pointers
   19254/    6078 : 2A 65 F7                LHLD    0F765H
   19255/    607B : E9                      PCHL   
   19256/    607C :                     
   19257/    607C :                     ;
   19258/    607C :                     ; TEXT control P routine
   19259/    607C :                     ;
   19260/    607C :                     R_TEXT_CTRL_P_FUN:						;607CH
   19261/    607C : CD E5 63                CALL    R_TEXT_GET_NEXT_BYTE     	;Get next byte for TEXT Program entry
   19262/    607F : DA 01 65                JC      L_INSRT_PASTE				;Insert PASTE buffer into .DO file
   19263/    6082 : A7                      ANA     A
   19264/    6083 : C8                      RZ
   19265/    6084 : FE 1A                   CPI     1AH
   19266/    6086 : C8                      RZ
   19267/    6087 : FE 7F                   CPI     7FH
   19268/    6089 : C8                      RZ
   19269/    608A :                     ;
   19270/    608A :                     ; TEXT control I routine: insert a char
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 335 - 9/5/2025 20:20:35


   19271/    608A :                     ;
   19272/    608A :                     R_TEXT_CTRL_I_FUN:						;608AH
   19273/    608A : F5                      PUSH    PSW							;save char
   19274/    608B : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19275/    608E : CD 9B 6A                CALL    L_SAV_PREV_LINEPTR
   19276/    6091 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19277/    6094 : F1                      POP     PSW							;restore char
   19278/    6095 :                     L_TEXT_CTRL_I_FUN_1:
   19279/    6095 : CD 96 63                CALL    L_INSRT_DO					;Insert byte in A to .DO file at address HL.
   19280/    6098 : DA A3 60                JC      L_ERR_MEMFULL				;brif failure
   19281/    609B : E5                      PUSH    H
   19282/    609C : CD 53 62                CALL    L_UPDATE_LINE_PTRS
   19283/    609F : E1                      POP     H
   19284/    60A0 : C3 46 61                JMP     L_TEXT_CTRL_H_FUN_2
   19285/    60A3 :                     
   19286/    60A3 :                     L_ERR_MEMFULL:
   19287/    60A3 : CD 9B 65                CALL    L_CHECK_LCD_SCROLL_1
   19288/    60A6 : E5                      PUSH    H
   19289/    60A7 : 21 B1 60                LXI     H,L_MEMFULL_MSG				;Code Based. 
   19290/    60AA : CD AE 65                CALL    L_PRNT_ERRMSG
   19291/    60AD :                     L_SET_CURSOR_POS_FROM_STACK:			;Set the cursor position from pushed position
   19292/    60AD : E1                      POP     H							;arg
   19293/    60AE : C3 7C 42                JMP     R_SET_CURSOR_POS			;Set the current cursor position
   19294/    60B1 :                     
   19295/    60B1 :                     L_MEMFULL_MSG:
   19296/    60B1 : 4D 65 6D 6F 72 79       DB      "Memory full",07H,00H
                    20 66 75 6C 6C 07 
                    00 
   19297/    60BE :                     ;
   19298/    60BE :                     ; TEXT control M routine: Carriage Return & Linefeed
   19299/    60BE :                     ;
   19300/    60BE :                     R_TEXT_CTRL_M_FUN:						;60BEH
   19301/    60BE : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19302/    60C1 : CD 9B 6A                CALL    L_SAV_PREV_LINEPTR
   19303/    60C4 : 2A 62 FB                LHLD    TXTEND_R
   19304/    60C7 : 23                      INX     H
   19305/    60C8 : 7E                      MOV     A,M							;test for double 0
   19306/    60C9 : 23                      INX     H
   19307/    60CA : B6                      ORA     M
   19308/    60CB : C2 A3 60                JNZ     L_ERR_MEMFULL				;brif NOT double 0
   19309/    60CE : CD 53 62                CALL    L_UPDATE_LINE_PTRS
   19310/    60D1 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19311/    60D4 : 3E 0D                   MVI     A,0DH
   19312/    60D6 : CD 96 63                CALL    L_INSRT_DO					;Insert byte in A to .DO file at address HL.
   19313/    60D9 : 3E 0A                   MVI     A,0AH
   19314/    60DB : C3 95 60                JMP     L_TEXT_CTRL_I_FUN_1
   19315/    60DE :                     ;
   19316/    60DE :                     ; TEXT right arrow/control D routine
   19317/    60DE :                     ;
   19318/    60DE :                     R_TEXT_CTRL_D_FUN:								 ; 60DEH
   19319/    60DE : CD E8 60                CALL    L_CURSOR_RIGHT
   19320/    60E1 : 37                      STC											;fall through with carry set
   19321/    60E2 :                     ;
   19322/    60E2 :                     ; TEXT down arrow/control X routine. Carry must be clear if called
   19323/    60E2 :                     ;
   19324/    60E2 :                     R_TEXT_CTRL_X_FUN:								 ; 60E2H
   19325/    60E2 : D4 F5 60                CNC     L_CURSOR_DOWN
   19326/    60E5 : C3 A0 62                JMP     L_UPDATE_SEL
   19327/    60E8 :                     
   19328/    60E8 :                     L_CURSOR_RIGHT:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 336 - 9/5/2025 20:20:35


   19329/    60E8 : 2A 39 F6                LHLD    CSRY_R						;L: Cursor row (1-8), H: column (1-40)
   19330/    60EB : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   19331/    60EE : 24                      INR     H							;increment column
   19332/    60EF : BC                      CMP     H							;compare new column with Line Width
   19333/    60F0 : D2 75 61                JNC     L_TEXT_CTRL_E_FUN_3			;brif LINWDT_R >= H: Set the current cursor position
   19334/    60F3 : 26 01                   MVI     H,01H						;set column
   19335/    60F5 :                     L_CURSOR_DOWN:
   19336/    60F5 : 2C                      INR     L							;increment row
   19337/    60F6 : 7D                      MOV     A,L
   19338/    60F7 : E5                      PUSH    H							;save HL
   19339/    60F8 : CD 48 6A                CALL    L_GET_LINEPTR				;Get address in .DO file of start of row in 'A'  
   19340/    60FB : 7B                      MOV     A,E							;test DE for 0FFFFH
   19341/    60FC : A2                      ANA     D
   19342/    60FD : 3C                      INR     A
   19343/    60FE : E1                      POP     H							;restore HL
   19344/    60FF : 37                      STC
   19345/    6100 : C8                      RZ									;brif DE was 0FFFFH
   19346/    6101 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19347/    6104 : BD                      CMP     L
   19348/    6105 : DC 11 63                CC      L_UPD_LCD_DWN						;calif LCD_ROWS < rows
   19349/    6108 : C3 75 61                JMP     L_TEXT_CTRL_E_FUN_3			;Set the current cursor position
   19350/    610B :                     ;
   19351/    610B :                     ; TEXT control H routine: delete pprevious char
   19352/    610B :                     ;
   19353/    610B :                     R_TEXT_CTRL_H_FUN:						;610BH
   19354/    610B : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19355/    610E : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19356/    6111 : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   19357/    6114 : CD 5B 61                CALL    L_TEXT_CTRL_E_FUN_1
   19358/    6117 : D8                      RC
   19359/    6118 :                     L_TEXT_CTRL_H_FUN_1:
   19360/    6118 : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19361/    611B : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19362/    611E : E5                      PUSH    H
   19363/    611F : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   19364/    6122 : E1                      POP     H
   19365/    6123 : 7E                      MOV     A,M
   19366/    6124 : FE 1A                   CPI     1AH							;^Z
   19367/    6126 : C8                      RZ
   19368/    6127 : F5                      PUSH    PSW
   19369/    6128 : E5                      PUSH    H
   19370/    6129 : E5                      PUSH    H
   19371/    612A : CD 9B 6A                CALL    L_SAV_PREV_LINEPTR
   19372/    612D : E1                      POP     H
   19373/    612E : CD B6 63            -	CALL    L_DELETE_DO					;Delete byte in .DO file at address HL
   19374/    6131 : CD 56 62                CALL    L_UPDATE_LINE_PTRS_1
   19375/    6134 : E1                      POP     H
   19376/    6135 : F1                      POP     PSW
   19377/    6136 : FE 0D                   CPI     0DH
   19378/    6138 : C2 46 61                JNZ     L_TEXT_CTRL_H_FUN_2
   19379/    613B : 7E                      MOV     A,M
   19380/    613C : FE 0A                   CPI     0AH
   19381/    613E : C2 46 61                JNZ     L_TEXT_CTRL_H_FUN_2
   19382/    6141 : F5                      PUSH    PSW
   19383/    6142 : E5                      PUSH    H
   19384/    6143 : C3 2E 61                JMP     -
   19385/    6146 :                     
   19386/    6146 :                     L_TEXT_CTRL_H_FUN_2:
   19387/    6146 : E5                      PUSH    H
   19388/    6147 : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 337 - 9/5/2025 20:20:35


   19389/    614A : CD 9E 69                CALL    L_DISP_LINENUM
   19390/    614D : E1                      POP     H
   19391/    614E : C3 F6 62                JMP     L_VALIDATE_TEXT_PTR
   19392/    6151 :                     ;
   19393/    6151 :                     ; TEXT left arrow and control S routine
   19394/    6151 :                     ;
   19395/    6151 :                     R_TEXT_CTRL_S_FUN:						;6151H
   19396/    6151 : CD 5B 61                CALL    L_TEXT_CTRL_E_FUN_1
   19397/    6154 : 37                      STC
   19398/    6155 :                     ;
   19399/    6155 :                     ; TEXT up arrow and control E routine
   19400/    6155 :                     ;
   19401/    6155 :                     R_TEXT_CTRL_E_FUN:						;6155H
   19402/    6155 : D4 66 61                CNC     L_TEXT_CTRL_E_FUN_2
   19403/    6158 : C3 A0 62                JMP     L_UPDATE_SEL
   19404/    615B :                     
   19405/    615B :                     L_TEXT_CTRL_E_FUN_1:
   19406/    615B : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8), Column (1-40)
   19407/    615E : 25                      DCR     H
   19408/    615F : C2 75 61                JNZ     L_TEXT_CTRL_E_FUN_3			;brif Column != 0: Set the current cursor position
   19409/    6162 : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   19410/    6165 : 67                      MOV     H,A
   19411/    6166 :                     L_TEXT_CTRL_E_FUN_2:
   19412/    6166 : E5                      PUSH    H
   19413/    6167 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE
   19414/    616A : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   19415/    616D : (MACRO)                 COMPAR								;HL - DE
   19416/    616E : E1                      POP     H
   19417/    616F : 3F                      CMC
   19418/    6170 : D8                      RC
   19419/    6171 : 2D                      DCR     L
   19420/    6172 : CC 1D 63                CZ      L_UPD_LCD_UP
   19421/    6175 :                     L_TEXT_CTRL_E_FUN_3:
   19422/    6175 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   19423/    6178 : A7                      ANA     A
   19424/    6179 : C9                      RET
   19425/    617A :                     
   19426/    617A :                     ;
   19427/    617A :                     ; TEXT control F routine
   19428/    617A :                     ;
   19429/    617A :                     R_TEXT_CTRL_F_FUN:						;617AH
   19430/    617A : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19431/    617D : CD A4 61            -	CALL    L_TEXT_CTRL_A_FUN_2
   19432/    6180 : C2 7D 61                JNZ     -
   19433/    6183 : CD A4 61            -	CALL    L_TEXT_CTRL_A_FUN_2
   19434/    6186 : CA 83 61                JZ      -
   19435/    6189 : C3 9E 61                JMP     L_TEXT_CTRL_A_FUN_1
   19436/    618C :                     
   19437/    618C :                     ;
   19438/    618C :                     ; TEXT control A routine
   19439/    618C :                     ;
   19440/    618C :                     R_TEXT_CTRL_A_FUN:						;618CH
   19441/    618C : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19442/    618F : CD AF 61            -	CALL    L_TEXT_CTRL_A_FUN_3
   19443/    6192 : CA 8F 61                JZ		-
   19444/    6195 : CD AF 61            -	CALL    L_TEXT_CTRL_A_FUN_3
   19445/    6198 : C2 95 61                JNZ		-
   19446/    619B : CD A4 61                CALL    L_TEXT_CTRL_A_FUN_2
   19447/    619E :                     L_TEXT_CTRL_A_FUN_1:
   19448/    619E : CD F6 62                CALL    L_VALIDATE_TEXT_PTR
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 338 - 9/5/2025 20:20:35


   19449/    61A1 : C3 A0 62                JMP     L_UPDATE_SEL
   19450/    61A4 :                     
   19451/    61A4 :                     L_TEXT_CTRL_A_FUN_2:
   19452/    61A4 : 7E                      MOV     A,M
   19453/    61A5 : FE 1A                   CPI     1AH							;^Z
   19454/    61A7 : C1                      POP     B
   19455/    61A8 : CA 9E 61                JZ      L_TEXT_CTRL_A_FUN_1
   19456/    61AB : 23                      INX     H
   19457/    61AC : C3 BA 61                JMP     +
   19458/    61AF :                     
   19459/    61AF :                     L_TEXT_CTRL_A_FUN_3:
   19460/    61AF : EB                      XCHG
   19461/    61B0 : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   19462/    61B3 : EB                      XCHG
   19463/    61B4 : (MACRO)                 COMPAR								;HL - DE
   19464/    61B5 : C1                      POP     B
   19465/    61B6 : CA 9E 61                JZ      L_TEXT_CTRL_A_FUN_1
   19466/    61B9 : 2B                      DCX     H
   19467/    61BA : C5                  +	PUSH    B
   19468/    61BB : E5                      PUSH    H
   19469/    61BC : 7E                      MOV     A,M
   19470/    61BD : CD 65 69                CALL    L_TEST_WWRAP_CHARS_2
   19471/    61C0 : E1                      POP     H
   19472/    61C1 : C9                      RET
   19473/    61C2 :                     
   19474/    61C2 :                     ;
   19475/    61C2 :                     ; TEXT control T routine
   19476/    61C2 :                     ;
   19477/    61C2 :                     R_TEXT_CTRL_T_FUN:						;61C2H
   19478/    61C2 : 2D                      DCR     L
   19479/    61C3 : 2E 01                   MVI     L,01H
   19480/    61C5 : C2 D1 61                JNZ     L_TEXT_CTRL_T_FUN_1
   19481/    61C8 : E5                      PUSH    H
   19482/    61C9 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE
   19483/    61CC : EB                      XCHG
   19484/    61CD : CD 30 62                CALL    L_TEXT_CTRL_Z_FUN_2
   19485/    61D0 : E1                      POP     H
   19486/    61D1 :                     L_TEXT_CTRL_T_FUN_1:
   19487/    61D1 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   19488/    61D4 : C3 A0 62                JMP     L_UPDATE_SEL
   19489/    61D7 :                     
   19490/    61D7 :                     ;
   19491/    61D7 :                     ; TEXT control B routine
   19492/    61D7 :                     ;
   19493/    61D7 :                     R_TEXT_CTRL_B_FUN:						;61D7H
   19494/    61D7 : E5                      PUSH    H
   19495/    61D8 : 2C                      INR     L
   19496/    61D9 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19497/    61DC : 3C                      INR     A
   19498/    61DD : BD                      CMP     L
   19499/    61DE : C2 EC 61                JNZ     L_TEXT_CTRL_B_FUN_1
   19500/    61E1 : F5                      PUSH    PSW
   19501/    61E2 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE
   19502/    61E5 : EB                      XCHG
   19503/    61E6 : 3E 01                   MVI     A,01H
   19504/    61E8 : CD 33 62                CALL    L_TEXT_CTRL_Z_FUN_3
   19505/    61EB : F1                      POP     PSW
   19506/    61EC :                     L_TEXT_CTRL_B_FUN_1:
   19507/    61EC : 3D                      DCR     A
   19508/    61ED : CD 48 6A                CALL    L_GET_LINEPTR				;Get address in .DO file of start of row in 'A'  
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 339 - 9/5/2025 20:20:35


   19509/    61F0 : 47                      MOV     B,A
   19510/    61F1 : 13                      INX     D
   19511/    61F2 : 7A                      MOV     A,D
   19512/    61F3 : B3                      ORA     E
   19513/    61F4 : 78                      MOV     A,B
   19514/    61F5 : CA EC 61                JZ      L_TEXT_CTRL_B_FUN_1
   19515/    61F8 : E1                      POP     H
   19516/    61F9 : 6F                      MOV     L,A
   19517/    61FA : C3 D1 61                JMP     L_TEXT_CTRL_T_FUN_1
   19518/    61FD :                     
   19519/    61FD :                     ;
   19520/    61FD :                     ; TEXT control R routine
   19521/    61FD :                     ;
   19522/    61FD :                     R_TEXT_CTRL_R_FUN:						;61FDH
   19523/    61FD : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   19524/    6200 : 67                      MOV     H,A
   19525/    6201 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   19526/    6204 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19527/    6207 : CD A3 6A                CALL    L_FND_CHAR_HL_LINEPTR		;Find address of 1st char on LCD line for ROW containing file pos in HL
   19528/    620A : (MACRO)             	SKIP_2BYTES_INST_BC
   19529/    620B :                     ;
   19530/    620B :                     ; TEXT control Q routine
   19531/    620B :                     ;
   19532/    620B :                     R_TEXT_CTRL_Q_FUN:						;620BH
   19533/    620B : 26 01                   MVI     H,01H
   19534/    620D : C3 D1 61                JMP     L_TEXT_CTRL_T_FUN_1
   19535/    6210 :                     
   19536/    6210 :                     ;
   19537/    6210 :                     ; TEXT control W routine
   19538/    6210 :                     ;
   19539/    6210 :                     R_TEXT_CTRL_W_FUN:						;6210H
   19540/    6210 : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   19541/    6213 : CD 36 62                CALL    L_TEXT_CTRL_Z_FUN_4
   19542/    6216 : CD 2D 42                CALL    R_HOME_CURSOR			  	;Home cursor
   19543/    6219 : C3 A0 62                JMP     L_UPDATE_SEL
   19544/    621C :                     
   19545/    621C :                     ;
   19546/    621C :                     ; TEXT control Z routine:
   19547/    621C :                     ;
   19548/    621C :                     R_TEXT_CTRL_Z_FUN:						;621CH
   19549/    621C : 2A 62 FB                LHLD    TXTEND_R
   19550/    621F : E5                      PUSH    H							;save HL
   19551/    6220 : CD 3E 6A                CALL    L_GETLSTLINE
   19552/    6223 : E1                      POP     H							;restore HL
   19553/    6224 : (MACRO)                 COMPAR								;HL - DE
   19554/    6225 : E5                      PUSH    H
   19555/    6226 : D4 30 62                CNC     L_TEXT_CTRL_Z_FUN_2			;calif HL > Last TxtLine Ptr
   19556/    6229 :                     L_TEXT_CTRL_Z_FUN_1:
   19557/    6229 : E1                      POP     H
   19558/    622A : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   19559/    622D : C3 A0 62                JMP     L_UPDATE_SEL
   19560/    6230 :                     
   19561/    6230 :                     L_TEXT_CTRL_Z_FUN_2:
   19562/    6230 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19563/    6233 :                     L_TEXT_CTRL_Z_FUN_3:
   19564/    6233 : CD 39 6B                CALL    L_CALC_LINE_STRTS			;calculate the Line Starts array for the LCD
   19565/    6236 :                     L_TEXT_CTRL_Z_FUN_4:
   19566/    6236 : CD 13 00                CALL    L_ISFRSTLIN					;TXTLINTBL_R to DE, COMPAR
   19567/    6239 : C8                      RZ									;retif HL == First Line
   19568/    623A : 22 EB F6            	SHLD    TXTLINTBL_R					;Storage of TEXT Line Starts
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 340 - 9/5/2025 20:20:35


   19569/    623D : 3E 01                   MVI     A,01H
   19570/    623F : C3 CB 69                JMP     L_DISP_LINENUM_IN_A			;Display line 1 of the .DO file at HL
   19571/    6242 :                     ;
   19572/    6242 :                     ; TEXT control L routine: SELECT
   19573/    6242 :                     ;
   19574/    6242 :                     R_TEXT_CTRL_L_FUN:						;6242H
   19575/    6242 : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19576/    6245 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19577/    6248 : 22 E2 F6                SHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   19578/    624B : 22 E4 F6                SHLD    DOEND_R						;End address in .DO file of SELection for copy/cut
   19579/    624E : 5D                      MOV     E,L							;DE=HL
   19580/    624F : 54                      MOV     D,H
   19581/    6250 : C3 B3 62                JMP     L_UPDATE_SEL_1
   19582/    6253 :                     
   19583/    6253 :                     L_UPDATE_LINE_PTRS:
   19584/    6253 : 0E 00                   MVI     C,00H						;00H entry point
   19585/    6255 : (MACRO)             	SKIP_2BYTES_INST_HL
   19586/    6256 :                     L_UPDATE_LINE_PTRS_1:					;80H entry point
   19587/    6256 : 0E 80                   MVI     C,80H
   19588/    6258 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19589/    625B : 21 39 F6                LXI     H,CSRY_R				    ;Cursor row (1-8)
   19590/    625E : 96                      SUB     M							;number of LCD rows - Cursor row
   19591/    625F : 47                      MOV     B,A							;save loop counter
   19592/    6260 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE 
   19593/    6263 : 23                      INX     H
   19594/    6264 : 23                  -	INX     H							;get DE from M with preincrement
   19595/    6265 : 5E                      MOV     E,M
   19596/    6266 : 23                      INX     H
   19597/    6267 : 56                      MOV     D,M
   19598/    6268 : 13                      INX     D							;test for 0FFFFH
   19599/    6269 : 7A                      MOV     A,D
   19600/    626A : B3                      ORA     E
   19601/    626B : C8                      RZ									;retif DE was 0FFFFH
   19602/    626C : 0D                      DCR     C
   19603/    626D : FA 72 62                JM      +							;brif C negative
   19604/    6270 : 1B                      DCX     D							;decrement DE
   19605/    6271 : 1B                      DCX     D
   19606/    6272 : 2B                  +	DCX     H							;copy line ptr to M with predecrement
   19607/    6273 : 73                      MOV     M,E
   19608/    6274 : 23                      INX     H
   19609/    6275 : 72                      MOV     M,D
   19610/    6276 : 05                      DCR     B
   19611/    6277 : F2 64 62                JP      -							;brif B >= 0
   19612/    627A : C9                      RET
   19613/    627B :                     ;
   19614/    627B :                     ; Scroll
   19615/    627B :                     ;
   19616/    627B :                     L_SCROLL_SCREEN:
   19617/    627B : CD 2D 42                CALL    R_HOME_CURSOR				;Home cursor
   19618/    627E : CD 53 42                CALL    R_DEL_CUR_LINE				;Delete current line on screen
   19619/    6281 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19620/    6284 :                     L_MOVE_LINE_PTRS:
   19621/    6284 : 87                      ADD     A							;double because we move a ptr for each line
   19622/    6285 : 47                      MOV     B,A							;scroll line ptrs
   19623/    6286 : 11 EB F6                LXI     D,TXTLINTBL_R				;Storage of TEXT Line Starts
   19624/    6289 : 21 ED F6                LXI     H,TXTLINTBL_R+2
   19625/    628C : C3 42 25                JMP     R_MOVE_B_BYTES				;Move B bytes from M to (DE)
   19626/    628F :                     ;
   19627/    628F :                     ; TEXT control C routine: copy selection
   19628/    628F :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 341 - 9/5/2025 20:20:35


   19629/    628F :                     R_TEXT_CTRL_C_FUN:						;628FH
   19630/    628F : CD EE 62                CALL    L_TEST_SEL					;Test for a valid SEL region. return to caller if not valid
   19631/    6292 : E5                      PUSH    H
   19632/    6293 : 21 00 00                LXI     H,0
   19633/    6296 : 22 E2 F6                SHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   19634/    6299 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   19635/    629C : D1                      POP     D
   19636/    629D : C3 B0 62                JMP     +
   19637/    62A0 :                     ;
   19638/    62A0 :                     L_UPDATE_SEL:
   19639/    62A0 : CD EE 62                CALL    L_TEST_SEL					;Test for a valid SEL region. return to caller if not valid
   19640/    62A3 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR
   19641/    62A6 : EB                      XCHG
   19642/    62A7 : 2A E4 F6                LHLD    DOEND_R						;End address in .DO file of SELection for copy/cut
   19643/    62AA : (MACRO)                 COMPAR								;Compare DE and DOEND_R: HL - DE
   19644/    62AB : C8                      RZ									;retif equal  
   19645/    62AC : EB                      XCHG
   19646/    62AD : 22 E4 F6            	SHLD    DOEND_R						;End address in .DO file of SELection for copy/cut
   19647/    62B0 : CD B2 64            +	CALL    L_MAKE_DE_MAX
   19648/    62B3 :                     L_UPDATE_SEL_1:
   19649/    62B3 : E5                      PUSH    H							;save HL
   19650/    62B4 : D5                      PUSH    D							;save DE
   19651/    62B5 : CD 3E 6A                CALL    L_GETLSTLINE
   19652/    62B8 : E1                      POP     H							;restore saved DE to HL
   19653/    62B9 : (MACRO)                 COMPAR								;HL - DE
   19654/    62BA : DA C0 62                JC      +							;brif HL < last TxtLine
   19655/    62BD : CD DB 63                CALL    L_NUM_LCD_ROWS				;Get # of LCD rows based on label protect # of cols in HL
   19656/    62C0 : DC A3 6A            +	CC      L_FND_CHAR_HL_LINEPTR		;Find address of 1st char on LCD line for ROW containing file pos in HL
   19657/    62C3 : 65                      MOV     H,L
   19658/    62C4 : E3                      XTHL
   19659/    62C5 : CD 13 00                CALL    L_ISFRSTLIN					;TXTLINTBL_R to DE, COMPAR
   19660/    62C8 : D2 CD 62                JNC     +							;brif HL >= TXTLINTBL_R
   19661/    62CB : 2E 01                   MVI     L,01H
   19662/    62CD : D4 A3 6A            +	CNC     L_FND_CHAR_HL_LINEPTR		;Find address of 1st char on LCD line for ROW containing file pos in HL
   19663/    62D0 : F1                      POP     PSW
   19664/    62D1 : 95                      SUB     L
   19665/    62D2 : 4F                      MOV     C,A
   19666/    62D3 : EB                      XCHG
   19667/    62D4 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40) to DE
   19668/    62D7 : EB                      XCHG
   19669/    62D8 : D5                      PUSH    D							;save cursor position
   19670/    62D9 : 26 01                   MVI     H,01H
   19671/    62DB : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   19672/    62DE : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE
   19673/    62E1 : 79                      MOV     A,C							;loop counter
   19674/    62E2 : F5                  -	PUSH    PSW							;save A
   19675/    62E3 : CD 0D 6A                CALL    L_DISP_LINE
   19676/    62E6 : F1                      POP     PSW							;restore A
   19677/    62E7 : 3D                      DCR     A							;counter
   19678/    62E8 : F2 E2 62                JP      -							;brif counter >= 0
   19679/    62EB : C3 AD 60                JMP     L_SET_CURSOR_POS_FROM_STACK	;Set the cursor position from pushed position
   19680/    62EE :                     ;
   19681/    62EE :                     ; Test for a valid SEL region. return to caller if not valid
   19682/    62EE :                     ;
   19683/    62EE :                     ; OUT:
   19684/    62EE :                     ;	HL		[DOADDR_R]
   19685/    62EE :                     ;
   19686/    62EE :                     L_TEST_SEL:
   19687/    62EE : 2A E2 F6                LHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   19688/    62F1 : 7C                      MOV     A,H							;test HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 342 - 9/5/2025 20:20:35


   19689/    62F2 : B5                      ORA     L
   19690/    62F3 : C0                      RNZ									;retif Start address != 0
   19691/    62F4 : E1                      POP     H							;remove return address		
   19692/    62F5 : C9                      RET
   19693/    62F6 :                     ;
   19694/    62F6 :                     ; IN:
   19695/    62F6 :                     ;	HL		TEXT line ptr
   19696/    62F6 :                     ;
   19697/    62F6 :                     L_VALIDATE_TEXT_PTR:
   19698/    62F6 : CD 13 00                CALL    L_ISFRSTLIN					;TXTLINTBL_R to DE, COMPAR
   19699/    62F9 : DC 1E 63                CC      L_UPD_LCD_UP_1				;calif HL < First TEXT line
   19700/    62FC : DA F6 62                JC      L_VALIDATE_TEXT_PTR						;brif carry set on return
   19701/    62FF : E5                  -	PUSH    H							;save TEXT line ptr
   19702/    6300 : CD 3E 6A                CALL    L_GETLSTLINE				;last TEXT line ptr to DE
   19703/    6303 : E1                      POP     H							;restore TEXT line ptr
   19704/    6304 : (MACRO)                 COMPAR								;HL - DE
   19705/    6305 : D4 12 63                CNC     L_UPD_LCD_DWN_1
   19706/    6308 : D2 FF 62                JNC     -
   19707/    630B :                     ; 
   19708/    630B :                     ; Reposition TEXT LCD cursor to file pos in HL
   19709/    630B :                     ; 
   19710/    630B :                     L_SETCRS_FROM_HL:						;Reposition TEXT LCD cursor to file pos in HL
   19711/    630B : CD A3 6A                CALL    L_FND_CHAR_HL_LINEPTR		;Find address of 1st char on LCD line for ROW containing file pos in HL
   19712/    630E : C3 7C 42                JMP     R_SET_CURSOR_POS			;Set the current cursor position
   19713/    6311 :                     ;
   19714/    6311 :                     ; IN:
   19715/    6311 :                     ;	L == 0
   19716/    6311 :                     ;
   19717/    6311 :                     L_UPD_LCD_DWN:
   19718/    6311 : 2D                      DCR     L
   19719/    6312 :                     L_UPD_LCD_DWN_1:
   19720/    6312 : F5                      PUSH    PSW
   19721/    6313 : E5                      PUSH    H
   19722/    6314 : CD 7B 62                CALL    L_SCROLL_SCREEN				;scroll
   19723/    6317 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19724/    631A : C3 44 63                JMP     L_SHOW_LINE					;tail merge
   19725/    631D :                     ;
   19726/    631D :                     ; IN:
   19727/    631D :                     ;	L == 0
   19728/    631D :                     ;
   19729/    631D :                     L_UPD_LCD_UP:
   19730/    631D : 2C                      INR     L
   19731/    631E :                     L_UPD_LCD_UP_1:
   19732/    631E : F5                      PUSH    PSW							;save PSW and HL
   19733/    631F : E5                      PUSH    H
   19734/    6320 : CD DF 65                CALL    L_SET_CUR_LSTLIN			;Set cursor and clear last line
   19735/    6323 : CD 2D 42                CALL    R_HOME_CURSOR				;Home cursor
   19736/    6326 : CD 58 42                CALL    R_INSERT_LINE				;Insert line at current line
   19737/    6329 : CD 55 6A                CALL    L_GET_PREV_LINEPTR			;result in DE
   19738/    632C : D5                      PUSH    D							;save previous line ptr
   19739/    632D : CD 3E 6A                CALL    L_GETLSTLINE
   19740/    6330 : 23                      INX     H
   19741/    6331 : 5D                      MOV     E,L
   19742/    6332 : 54                      MOV     D,H
   19743/    6333 : 2B                      DCX     H							;HL -= 2
   19744/    6334 : 2B                      DCX     H
   19745/    6335 : 3D                      DCR     A							;--A
   19746/    6336 : 87                      ADD     A							;double lines to ptr bytes
   19747/    6337 : 4F                      MOV     C,A							;zero extend A to BC
   19748/    6338 : 06 00                   MVI     B,00H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 343 - 9/5/2025 20:20:35


   19749/    633A : CD E6 6B                CALL    R_MOVE_BC_BYTES_DEC      	;Move BC bytes from M to (DE) with decrement
   19750/    633D : EB                      XCHG
   19751/    633E : D1                      POP     D							;restore previous line ptr
   19752/    633F : 72                      MOV     M,D							;store at M decrementing
   19753/    6340 : 2B                      DCX     H
   19754/    6341 : 73                      MOV     M,E
   19755/    6342 : 3E 01                   MVI     A,01H
   19756/    6344 :                     L_SHOW_LINE:							;tail merged
   19757/    6344 : CD CB 69                CALL    L_DISP_LINENUM_IN_A			;Display line 'A' of the .DO file at HL
   19758/    6347 : E1                      POP     H							;restore HL and PSW
   19759/    6348 : F1                      POP     PSW
   19760/    6349 : C9                      RET   
   19761/    634A :                     	
   19762/    634A :                     ; 
   19763/    634A :                     ; Expand .DO file so it fills all memory for editing
   19764/    634A :                     ; HL points to end of file. Fill with zeros
   19765/    634A :                     ; 
   19766/    634A :                     L_EXPND_DO:
   19767/    634A : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer
   19768/    634D : 01 C8 00                LXI     B,00C8H
   19769/    6350 : 09                      DAD     B
   19770/    6351 : AF                      XRA     A
   19771/    6352 : 95                      SUB     L
   19772/    6353 : 6F                      MOV     L,A
   19773/    6354 : 9F                      SBB     A							;0 or 0FFH dependent on carry
   19774/    6355 : 94                      SUB     H
   19775/    6356 : 67                      MOV     H,A
   19776/    6357 : 39                      DAD     SP
   19777/    6358 : D0                      RNC
   19778/    6359 : 7C                      MOV     A,H							;test HL
   19779/    635A : B5                      ORA     L
   19780/    635B : C8                      RZ									;retif counter == 0   
   19781/    635C : 44                      MOV     B,H							;counter
   19782/    635D : 4D                      MOV     C,L
   19783/    635E : 2A 62 FB                LHLD    TXTEND_R
   19784/    6361 : EB                      XCHG
   19785/    6362 : 13                      INX     D
   19786/    6363 : CD 7F 6B                CALL    L_MOV_DATA					;Move all files / variables after this file
   19787/    6366 : 36 00               -	MVI     M,00H						;fill byte in DO file with zero
   19788/    6368 : 23                      INX     H							;next
   19789/    6369 : 0B                      DCX     B							;test loop counter BC
   19790/    636A : 78                      MOV     A,B
   19791/    636B : B1                      ORA     C
   19792/    636C : C2 66 63                JNZ     -							;brif not done
   19793/    636F : C9                      RET
   19794/    6370 :                     
   19795/    6370 :                     L_FND_END_DO_FILES:
   19796/    6370 : 2A AE FB                LHLD    DOSTRT_R					;DO files pointer
   19797/    6373 : CD 2D 6B            -	CALL    L_FNDEOFTXT					;Find EOF at HL Text Line
   19798/    6376 : 23                      INX     H							;ptr to next DO file
   19799/    6377 : EB                      XCHG
   19800/    6378 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer to DE
   19801/    637B : EB                      XCHG
   19802/    637C : (MACRO)                 COMPAR								;HL - DE
   19803/    637D : D0                      RNC									;retif HL >= DE  
   19804/    637E : 7E                      MOV     A,M							;first char of next DO file
   19805/    637F : A7                      ANA     A							;test if
   19806/    6380 : C2 73 63                JNZ     -							;brif != 0
   19807/    6383 :                     ; 
   19808/    6383 :                     ; Delete zeros from end of edited DO file and update pointers
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 344 - 9/5/2025 20:20:35


   19809/    6383 :                     ; 
   19810/    6383 :                     L_DEL_ZEROS:
   19811/    6383 : 2A 62 FB                LHLD    TXTEND_R					;Pointer to end of .DO file
   19812/    6386 : E5                      PUSH    H							;save it
   19813/    6387 : 01 FF FF                LXI     B,0FFFFH					;Initialize zero count to -1
   19814/    638A : AF                      XRA     A							;Prepare to test for zero in file
   19815/    638B : 23                  -	INX     H							;Increment file pointer
   19816/    638C : 03                      INX     B							;Increment counter
   19817/    638D : BE                      CMP     M							;Test if next byte is zero
   19818/    638E : CA 8B 63                JZ      -							;brif byte == 0
   19819/    6391 : E1                      POP     H							;restore ptr to end of .DO file
   19820/    6392 : 23                      INX     H							;Increment to 1st zero in file
   19821/    6393 : C3 9F 6B                JMP     MASDEL						;Delete BC characters at M. BC negated on exit.
   19822/    6396 :                     
   19823/    6396 :                     ; 
   19824/    6396 :                     ; Insert byte in A to .DO file at M (address of current file pointer)
   19825/    6396 :                     ; 
   19826/    6396 :                     L_INSRT_DO:
   19827/    6396 : EB                      XCHG								;Save address of current file pointer to DE
   19828/    6397 : 2A 62 FB                LHLD    TXTEND_R					;Pointer to end of .DO file
   19829/    639A : 23                      INX     H							;Prepare to test if room in .DO file
   19830/    639B : 34                      INR     M							;Test byte at end of .DO file
   19831/    639C : 35                      DCR     M
   19832/    639D : 37                      STC									;Preset Carry to indicate full
   19833/    639E : C0                      RNZ									;Return if no room left in .DO file
   19834/    639F : F5                      PUSH    PSW							;Save byte to insert
   19835/    63A0 : 22 62 FB                SHLD    TXTEND_R					;Pointer to end of .DO file
   19836/    63A3 : EB                      XCHG
   19837/    63A4 : 7B                  	MOV     A,E							;Calculate number of bytes to move from
   19838/    63A5 : 95                  	SUB		L							;current file position to the end of the file
   19839/    63A6 : 4F                  	MOV		C,A							;LSB of count
   19840/    63A7 : 7A                  	MOV		A,D
   19841/    63A8 : 9C                  	SBB		H
   19842/    63A9 : 47                  	MOV		B,A							;MSB of count
   19843/    63AA : 6B                  	MOV		L,E							;ptr to end of .DO file
   19844/    63AB : 62                  	MOV		H,D
   19845/    63AC : 2B                  	DCX		H							;Decrement HL to insert one byte
   19846/    63AD : CD E6 6B            	CALL	R_MOVE_BC_BYTES_DEC			;Move BC bytes from M to (DE) with decrement
   19847/    63B0 : 23                  	INX		H							;Increment back to insertion point after move above
   19848/    63B1 : F1                  	POP		PSW							;Retrieve byte to be inserted from stack
   19849/    63B2 : 77                  	MOV		M,A							;Insert the byte into the .DO file
   19850/    63B3 : 23                  	INX		H							;Increment current file pointer
   19851/    63B4 : A7                  	ANA		A							;Clear carry to indicate not full
   19852/    63B5 : C9                      RET
   19853/    63B6 :                     
   19854/    63B6 :                     ; 
   19855/    63B6 :                     ; Delete byte in .DO file at address HL.
   19856/    63B6 :                     ; 
   19857/    63B6 :                     L_DELETE_DO:
   19858/    63B6 : EB                      XCHG								;File ptr to DE
   19859/    63B7 : 2A 62 FB                LHLD    TXTEND_R					;Ptr to end of .DO file
   19860/    63BA : 7D                      MOV     A,L							;Calculate number of bytes to move from
   19861/    63BB : 93                      SUB     E							;end of the file to current file position
   19862/    63BC : 4F                      MOV     C,A							;LSB of count
   19863/    63BD : 7C                      MOV     A,H
   19864/    63BE : 9A                      SBB     D
   19865/    63BF : 47                      MOV     B,A							;MSB of count
   19866/    63C0 : 2B                      DCX     H
   19867/    63C1 : 22 62 FB                SHLD    TXTEND_R					;Update ptr to end of .DO file
   19868/    63C4 : 6B                      MOV     L,E							;File ptr to HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 345 - 9/5/2025 20:20:35


   19869/    63C5 : 62                      MOV     H,D
   19870/    63C6 : 23                      INX     H							;+1
   19871/    63C7 : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
   19872/    63CA : AF                      XRA     A
   19873/    63CB : 12                      STAX    D							;Insert 0 byte at the end of the .DO file
   19874/    63CC : C9                      RET
   19875/    63CD :                     ;
   19876/    63CD :                     ; Get # of LCD rows based on label protect, preserve flags
   19877/    63CD :                     ;
   19878/    63CD :                     ; OUT:
   19879/    63CD :                     ;	A
   19880/    63CD :                     ;
   19881/    63CD :                     L_GET_LCD_ROWS:
   19882/    63CD : E5                      PUSH    H							;save HL
   19883/    63CE : F5                      PUSH    PSW							;save flags
   19884/    63CF : 21 3D F6                LXI     H,LINPROT_R				    ;Label line protect status
   19885/    63D2 : 3A 3B F6                LDA     LINCNT_R					;Console height
   19886/    63D5 : 86                      ADD     M							;add status: 0 or -1?
   19887/    63D6 : 6F                      MOV     L,A							;save result
   19888/    63D7 : F1                      POP     PSW							;restore flags
   19889/    63D8 : 7D                      MOV     A,L							;restore result
   19890/    63D9 : E1                      POP     H							;restore HL
   19891/    63DA : C9                      RET
   19892/    63DB :                     ;
   19893/    63DB :                     ; Get # of LCD rows based on label protect + cols in HL
   19894/    63DB :                     ;
   19895/    63DB :                     ; OUT:
   19896/    63DB :                     ;	L		#of LCD rows
   19897/    63DB :                     ;
   19898/    63DB :                     L_NUM_LCD_ROWS:
   19899/    63DB : F5                      PUSH    PSW
   19900/    63DC : 2A 3B F6                LHLD    LINCNT_R					;Console height + Console width
   19901/    63DF : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   19902/    63E2 : 6F                      MOV     L,A
   19903/    63E3 : F1                      POP     PSW
   19904/    63E4 : C9                      RET
   19905/    63E5 :                     ;
   19906/    63E5 :                     ; Get next byte for TEXT Program entry
   19907/    63E5 :                     ;
   19908/    63E5 :                     R_TEXT_GET_NEXT_BYTE:				    ;63E5H
   19909/    63E5 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) & Column (1-40)
   19910/    63E8 : E5                      PUSH    H							;save row & column
   19911/    63E9 : 7D                      MOV     A,L							;Row
   19912/    63EA : 32 AD FA                STA     LINENA_R					;Label line enable flag
   19913/    63ED : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   19914/    63F0 : F5                      PUSH    PSW							;save LINPROT_R
   19915/    63F1 : CD CB 12                CALL    R_WAIT_KEY					;Wait for key from keyboard
   19916/    63F4 :                     L_TEXT_BYTE:							;used by VT100 code
   19917/    63F4 : C1                      POP     B							;restore LINPROT_R (from PSW)
   19918/    63F5 : E1                      POP     H							;restore row & column
   19919/    63F6 : F5                      PUSH    PSW							;save A
   19920/    63F7 : AF                      XRA     A
   19921/    63F8 : 32 AD FA                STA     LINENA_R					;Label line enable flag
   19922/    63FB : 3A 3D F6                LDA     LINPROT_R					;Label line protect status
   19923/    63FE : B8                      CMP     B							;LINPROT_R changed?
   19924/    63FF : C2 04 64                JNZ     +							;brif changed
   19925/    6402 : F1                      POP     PSW							;restore A
   19926/    6403 : C9                      RET
   19927/    6404 :                     ;
   19928/    6404 :                     ; LINPROT_R changed
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 346 - 9/5/2025 20:20:35


   19929/    6404 :                     ;
   19930/    6404 :                     ; IN:
   19931/    6404 :                     ;	A == LINPROT_R
   19932/    6404 :                     ;	L
   19933/    6404 :                     ;
   19934/    6404 : A7                  +	ANA     A							;test LINPROT_R
   19935/    6405 : CA 14 64                JZ      +							;brif LINPROT_R == 0
   19936/    6408 : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
   19937/    640B : BD                      CMP     L
   19938/    640C : 3A 3B F6                LDA     LINCNT_R					;Console height
   19939/    640F : C4 84 62                CNZ     L_MOVE_LINE_PTRS					;move line
   19940/    6412 : F1                      POP     PSW
   19941/    6413 : C9                      RET
   19942/    6414 :                     ;
   19943/    6414 :                     ; LINPROT_R == 0
   19944/    6414 :                     ;
   19945/    6414 : E5                  +	PUSH    H
   19946/    6415 : 3A 3B F6                LDA     LINCNT_R					;Console height
   19947/    6418 : 3D                      DCR     A
   19948/    6419 : CD 48 6A                CALL    L_GET_LINEPTR				;Get address in .DO file of start of row in 'A'  
   19949/    641C : 23                      INX     H
   19950/    641D : 36 FE                   MVI     M,0FEH						;254
   19951/    641F : 23                      INX     H
   19952/    6420 : 23                      INX     H
   19953/    6421 : 36 FE                   MVI     M,0FEH
   19954/    6423 : 3D                      DCR     A
   19955/    6424 : CD CB 69                CALL    L_DISP_LINENUM_IN_A			;Display line 'A' of the .DO file at HL
   19956/    6427 : AF                      XRA     A
   19957/    6428 : 32 E1 F6                STA     PNDERR_R
   19958/    642B : E1                      POP     H
   19959/    642C : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position (H=Row,L=Col)
   19960/    642F : F1                      POP     PSW
   19961/    6430 : C9                      RET
   19962/    6431 :                     ;
   19963/    6431 :                     ; TEXT control O routine: COPY
   19964/    6431 :                     ;
   19965/    6431 :                     R_TEXT_CTRL_O_FUN:						;6431H
   19966/    6431 : CD EE 62                CALL    L_TEST_SEL					;Test for a valid SEL region. return to caller if not valid
   19967/    6434 : CD 83 63                CALL    L_DEL_ZEROS					;Delete zeros from end of edited DO file and update pointers
   19968/    6437 : CD B6 64                CALL    L_COPY_SEL
   19969/    643A : F5                      PUSH    PSW							;save A/Flags
   19970/    643B : CD 4A 63                CALL    L_EXPND_DO					;Expand .DO file so it fills all memory for editing
   19971/    643E : F1                      POP     PSW							;restore A/Flags
   19972/    643F : D2 8F 62                JNC     R_TEXT_CTRL_C_FUN			;TEXT control C routine
   19973/    6442 : C3 A3 60                JMP     L_ERR_MEMFULL				;carry set
   19974/    6445 :                     ;
   19975/    6445 :                     ; TEXT control U routine: CUT function
   19976/    6445 :                     ;
   19977/    6445 :                     R_TEXT_CTRL_U_FUN:						;6445H
   19978/    6445 : CD EE 62                CALL    L_TEST_SEL					;Test for a valid SEL region. return to caller if not valid
   19979/    6448 : CD 83 63                CALL    L_DEL_ZEROS					;Delete zeros from end of edited DO file and update pointers
   19980/    644B : CD B6 64                CALL    L_COPY_SEL
   19981/    644E : F5                      PUSH    PSW
   19982/    644F : D4 9F 6B                CNC     MASDEL						;Delete BC characters at M. BC negated on exit.
   19983/    6452 : F1                      POP     PSW
   19984/    6453 : D2 6F 64                JNC     L_TEXT_CTRL_U_1
   19985/    6456 : 78                      MOV     A,B
   19986/    6457 : A7                      ANA     A
   19987/    6458 : CA 6A 64                JZ      +
   19988/    645B : CD B1 1B            -	CALL    R_KICK_PWR_OFF_WDT			;Renew automatic power-off counter
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 347 - 9/5/2025 20:20:35


   19989/    645E : C5                      PUSH    B
   19990/    645F : 01 00 01                LXI     B,0100H
   19991/    6462 : CD 88 64                CALL    L_TEXT_CTRL_U_2
   19992/    6465 : C1                      POP     B
   19993/    6466 : 05                      DCR     B
   19994/    6467 : C2 5B 64                JNZ     -
   19995/    646A : 79                  +	MOV     A,C
   19996/    646B : A7                      ANA     A
   19997/    646C : C4 88 64                CNZ     L_TEXT_CTRL_U_2
   19998/    646F :                     L_TEXT_CTRL_U_1:
   19999/    646F : 11 00 00                LXI     D,0
   20000/    6472 : EB                      XCHG
   20001/    6473 : 22 E2 F6                SHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   20002/    6476 : EB                      XCHG
   20003/    6477 : E5                      PUSH    H
   20004/    6478 : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
   20005/    647B : CD 86 69                CALL    L_DISP_A_LINES				;Display 'A' lines of the .DO file at HL for editing
   20006/    647E : E1                      POP     H
   20007/    647F : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   20008/    6482 : CD 2A 6B                CALL    L_FNDEOFDO					;Find end of DO file
   20009/    6485 : C3 4A 63                JMP     L_EXPND_DO					;Expand .DO file so it fills all memory for editing
   20010/    6488 :                     
   20011/    6488 :                     L_TEXT_CTRL_U_2:
   20012/    6488 : E5                      PUSH    H
   20013/    6489 : C5                      PUSH    B
   20014/    648A : EB                      XCHG
   20015/    648B : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
   20016/    648E : EB                      XCHG
   20017/    648F : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
   20018/    6492 : C1                      POP     B
   20019/    6493 : E1                      POP     H
   20020/    6494 : E5                      PUSH    H
   20021/    6495 : C5                      PUSH    B
   20022/    6496 : CD 9F 6B                CALL    MASDEL						;Delete BC characters at M. BC negated on exit.
   20023/    6499 : 2A A5 F9                LHLD    HAYASHI_R+1					;Start of Paste Buffer
   20024/    649C : 09                      DAD     B
   20025/    649D : EB                      XCHG
   20026/    649E : C1                      POP     B
   20027/    649F : CD 7F 6B                CALL    L_MOV_DATA					;Move all files / variables after this file
   20028/    64A2 : EB                      XCHG
   20029/    64A3 : 2A 87 FC                LHLD    FCB1_BUF_R					;ptr to buffer first file
   20030/    64A6 : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
   20031/    64A9 : E1                      POP     H
   20032/    64AA : C9                      RET
   20033/    64AB :                     
   20034/    64AB :                     ; 
   20035/    64AB :                     ; Get address of start/end of copy/cut SEL in HL,DE ensuring HL less than DE
   20036/    64AB :                     ; 
   20037/    64AB :                     L_GET_SEL_PTRS:
   20038/    64AB : 2A E2 F6                LHLD    DOADDR_R					;Start address in .DO file of SELection for copy/cut
   20039/    64AE : EB                      XCHG								;to DE
   20040/    64AF : 2A E4 F6                LHLD    DOEND_R						;End address in .DO file of SELection for copy/cut
   20041/    64B2 :                     L_MAKE_DE_MAX:
   20042/    64B2 : (MACRO)                 COMPAR								;HL - DE
   20043/    64B3 : D8                      RC									;brif DOEND_R < DOADDR_R
   20044/    64B4 : EB                      XCHG
   20045/    64B5 : C9                      RET
   20046/    64B6 :                     
   20047/    64B6 :                     L_COPY_SEL:
   20048/    64B6 : CD 62 22                CALL    L_CLR_PASTE_BUF
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 348 - 9/5/2025 20:20:35


   20049/    64B9 : 2A A5 F9                LHLD    HAYASHI_R+1					;Start of Paste Buffer
   20050/    64BC : 22 8C F8                SHLD    EOMFILE_R					;End of RAM for file storage
   20051/    64BF : AF                      XRA     A
   20052/    64C0 : 32 E6 F6                STA     PASTEFLG_R
   20053/    64C3 : CD AB 64                CALL    L_GET_SEL_PTRS
   20054/    64C6 : 1B                      DCX     D
   20055/    64C7 :                     ;
   20056/    64C7 :                     ; Copy PASTE buffer to .DO file
   20057/    64C7 :                     ;
   20058/    64C7 :                     ; IN:
   20059/    64C7 :                     ;	DE		paste buffer 1
   20060/    64C7 :                     ;	HL		paste buffer 2
   20061/    64C7 :                     ; OUT:
   20062/    64C7 :                     ;	BC
   20063/    64C7 :                     ;	HL
   20064/    64C7 :                     ;
   20065/    64C7 :                     L_COPY_PASTE:
   20066/    64C7 : 7B                      MOV     A,E							;Calculate length of SELection: BC = DE - HL
   20067/    64C8 : 95                      SUB     L
   20068/    64C9 : 4F                      MOV     C,A
   20069/    64CA : 7A                      MOV     A,D
   20070/    64CB : 9C                      SBB     H
   20071/    64CC : 47                      MOV     B,A
   20072/    64CD : DA E3 64                JC      L_COPY_PASTE_1
   20073/    64D0 : 1A                      LDAX    D
   20074/    64D1 : FE 1A                   CPI     1AH							;^Z
   20075/    64D3 : CA E4 64                JZ      L_COPY_PASTE_2
   20076/    64D6 : FE 0D                   CPI     0DH							;CR
   20077/    64D8 : C2 E3 64                JNZ     L_COPY_PASTE_1
   20078/    64DB : 13                      INX     D
   20079/    64DC : 1A                      LDAX    D
   20080/    64DD : FE 0A                   CPI     0AH							;LF
   20081/    64DF : C2 E3 64                JNZ     L_COPY_PASTE_1
   20082/    64E2 : 03                      INX     B
   20083/    64E3 :                     L_COPY_PASTE_1:
   20084/    64E3 : 03                      INX     B
   20085/    64E4 :                     L_COPY_PASTE_2:
   20086/    64E4 : 78                      MOV     A,B							;test BC
   20087/    64E5 : B1                      ORA     C
   20088/    64E6 : C8                      RZ									;return if length of SELection == 0
   20089/    64E7 : E5                      PUSH    H
   20090/    64E8 : 2A 8C F8                LHLD    EOMFILE_R					;End of RAM for file storage
   20091/    64EB : CD 6D 6B                CALL    MAKHOL						;Insert BC spaces at M
   20092/    64EE : EB                      XCHG
   20093/    64EF : E1                      POP     H
   20094/    64F0 : D8                      RC									;return if insertion failed
   20095/    64F1 : 3A E6 F6                LDA     PASTEFLG_R
   20096/    64F4 : A7                      ANA     A
   20097/    64F5 : CA F9 64                JZ      +
   20098/    64F8 : 09                      DAD     B
   20099/    64F9 : E5                  +	PUSH    H
   20100/    64FA : C5                      PUSH    B
   20101/    64FB : CD DB 6B                CALL    R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
   20102/    64FE : C1                      POP     B
   20103/    64FF : E1                      POP     H
   20104/    6500 : C9                      RET
   20105/    6501 :                     ;
   20106/    6501 :                     ; Paste routine. Insert PASTE buffer into .DO file
   20107/    6501 :                     ;
   20108/    6501 :                     L_INSRT_PASTE:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 349 - 9/5/2025 20:20:35


   20109/    6501 : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;TEXT control C routine
   20110/    6504 : CD 83 63                CALL    L_DEL_ZEROS					;Delete zeros from end of edited DO file and update pointers
   20111/    6507 : CD 46 21                CALL    LNKFIL						;Fix up the directory start pointers
   20112/    650A : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   20113/    650D : 22 8C F8                SHLD    EOMFILE_R					;End of RAM for file storage
   20114/    6510 : 7C                      MOV     A,H
   20115/    6511 : 32 E6 F6                STA     PASTEFLG_R
   20116/    6514 : 2A A5 F9                LHLD    HAYASHI_R+1					;Start of Paste Buffer
   20117/    6517 : 7E                      MOV     A,M							;get char
   20118/    6518 : FE 1A                   CPI     1AH							;^Z
   20119/    651A : CA 4A 63                JZ      L_EXPND_DO					;brif Paste Buffer starts with ^Z:
   20120/    651D :                     										;	Expand .DO file so it fills all memory for editing
   20121/    651D : 5D                      MOV     E,L							;DE = HL
   20122/    651E : 54                      MOV     D,H
   20123/    651F : 1B                      DCX     D							;pre-decrement
   20124/    6520 : 13                  -	INX     D
   20125/    6521 : 1A                      LDAX    D
   20126/    6522 : FE 1A                   CPI     1AH							;^Z
   20127/    6524 : C2 20 65                JNZ     -							;loop
   20128/    6527 : CD C7 64                CALL    L_COPY_PASTE				;Copy PASTE buffer to .DO file
   20129/    652A : F5                      PUSH    PSW
   20130/    652B : D5                      PUSH    D
   20131/    652C : CD 2A 6B                CALL    L_FNDEOFDO					;Find end of DO file (find the 1Ah)
   20132/    652F : CD 4A 63                CALL    L_EXPND_DO					;Expand .DO file so it fills all memory for editing
   20133/    6532 : D1                      POP     D
   20134/    6533 : F1                      POP     PSW
   20135/    6534 : DA A3 60                JC      L_ERR_MEMFULL
   20136/    6537 :                     ;
   20137/    6537 :                     ; Redraw and position cursor after PASTE operation.
   20138/    6537 :                     ;
   20139/    6537 : D5                      PUSH    D
   20140/    6538 : 2A 8C F8                LHLD    EOMFILE_R					;End of RAM for file storage
   20141/    653B : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
   20142/    653E : CD 86 69                CALL    L_DISP_A_LINES				;Display 'A' lines of the .DO file at HL for editing
   20143/    6541 : CD 3E 6A                CALL    L_GETLSTLINE				;Get address in .DO file of start of row
   20144/    6544 :                     										;	just below visible LCD
   20145/    6544 : E1                      POP     H
   20146/    6545 : (MACRO)                 COMPAR								;HL - DE
   20147/    6546 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20148/    6549 : E5                      PUSH    H
   20149/    654A : D4 86 69                CNC     L_DISP_A_LINES				;Display 'A' lines of the .DO file for editing
   20150/    654D : E1                      POP     H
   20151/    654E : C3 0B 63                JMP     L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   20152/    6551 :                     ;
   20153/    6551 :                     ; TEXT control N routine: FIND
   20154/    6551 :                     ;
   20155/    6551 :                     R_TEXT_CTRL_N_FUN:						;6551H
   20156/    6551 : CD 9B 65                CALL    L_CHECK_LCD_SCROLL_1
   20157/    6554 : CD F9 6A                CALL    L_GET_CRSPOS_ADDR			;Get address in .DO file of current cursor position
   20158/    6557 : E5                      PUSH    H
   20159/    6558 : 21 D7 65                LXI     H,L_String_MSG				;Code Based.
   20160/    655B : 11 1F F7                LXI     D,SEARCHSTR_R
   20161/    655E : D5                      PUSH    D
   20162/    655F : CD 03 66                CALL    L_QUERY_USER				;Print a message to display and request keyboard input
   20163/    6562 : D1                      POP     D
   20164/    6563 : 23                      INX     H
   20165/    6564 : 7E                      MOV     A,M
   20166/    6565 : A7                      ANA     A
   20167/    6566 : 37                      STC
   20168/    6567 : CA 8B 65                JZ      +
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 350 - 9/5/2025 20:20:35


   20169/    656A : CD C3 65                CALL    R_COPY_STRING       		;Copy NULL terminated string at M to (DE)
   20170/    656D : D1                      POP     D
   20171/    656E : D5                      PUSH    D
   20172/    656F : 1A                      LDAX    D
   20173/    6570 : FE 1A                   CPI     1AH
   20174/    6572 : CA 8F 65                JZ      L_TEXT_CTRL_N_1
   20175/    6575 : 13                      INX     D
   20176/    6576 : CD 3F 5C                CALL    R_FIND_TEXT_IN_FILE      	;Find text at M in the file at (DE)
   20177/    6579 : D2 8F 65                JNC     L_TEXT_CTRL_N_1
   20178/    657C : D1                      POP     D
   20179/    657D : C5                      PUSH    B
   20180/    657E : C5                      PUSH    B
   20181/    657F : CD 3E 6A                CALL    L_GETLSTLINE
   20182/    6582 : E1                      POP     H
   20183/    6583 : (MACRO)                 COMPAR								;HL - DE
   20184/    6584 : DA 8B 65                JC      +
   20185/    6587 : CD 81 69                CALL    L_DISP_SCREEN
   20186/    658A : A7                      ANA     A
   20187/    658B : DC F3 65            +	CC      L_CLR_PNDERR_1
   20188/    658E : 37                      STC
   20189/    658F :                     L_TEXT_CTRL_N_1:
   20190/    658F : 21 CE 65                LXI     H,L_Nomatch_MSG				;Code Based. 
   20191/    6592 : D4 AE 65                CNC     L_PRNT_ERRMSG
   20192/    6595 : C3 29 62                JMP     L_TEXT_CTRL_Z_FUN_1
   20193/    6598 :                     
   20194/    6598 :                     L_CHECK_LCD_SCROLL:
   20195/    6598 : CD 8F 62                CALL    R_TEXT_CTRL_C_FUN			;Check for TEXT Copy selection
   20196/    659B :                     L_CHECK_LCD_SCROLL_1:
   20197/    659B : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   20198/    659E : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20199/    65A1 : BD                      CMP     L							;compare # of rows
   20200/    65A2 : C0                      RNZ									;retif not equal
   20201/    65A3 : 2D                      DCR     L							;at max, decrement
   20202/    65A4 : E5                      PUSH    H							;arg for L_SET_CURSOR_POS_FROM_STACK
   20203/    65A5 : CD 7B 62                CALL    L_SCROLL_SCREEN				;scroll
   20204/    65A8 : C3 AD 60                JMP     L_SET_CURSOR_POS_FROM_STACK
   20205/    65AB :                     
   20206/    65AB :                     L_PRNT_ABORT:
   20207/    65AB : 21 71 57                LXI     H,L_Aborted_MSG				;Code based
   20208/    65AE :                     L_PRNT_ERRMSG:							;HL loaded
   20209/    65AE : 3E 01                   MVI     A,01H
   20210/    65B0 : 32 E1 F6                STA     PNDERR_R
   20211/    65B3 :                     L_PRNT_MSG:
   20212/    65B3 : CD DF 65                CALL    L_SET_CUR_LSTLIN			;clear last line. HL preserved
   20213/    65B6 : CD B1 27                CALL    R_PRINT_STRING			 	;Print 
   20214/    65B9 :                     L_GET_KEY:
   20215/    65B9 : CD DB 13                CALL    R_CHK_KEY_QUEUE				;Check keyboard queue for pending characters
   20216/    65BC : C8                      RZ
   20217/    65BD : CD CB 12                CALL    R_WAIT_KEY				   	;Wait for key from keyboard
   20218/    65C0 : C3 B9 65                JMP     L_GET_KEY
   20219/    65C3 :                     
   20220/    65C3 :                     ;
   20221/    65C3 :                     ; Copy NULL terminated string at M to (DE)
   20222/    65C3 :                     ;
   20223/    65C3 :                     R_COPY_STRING:							;65C3H
   20224/    65C3 : E5                      PUSH    H
   20225/    65C4 : 7E                  -	MOV     A,M
   20226/    65C5 : 12                      STAX    D
   20227/    65C6 : 23                      INX     H
   20228/    65C7 : 13                      INX     D
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 351 - 9/5/2025 20:20:35


   20229/    65C8 : A7                      ANA     A
   20230/    65C9 : C2 C4 65                JNZ     -
   20231/    65CC : E1                      POP     H
   20232/    65CD : C9                      RET
   20233/    65CE :                     
   20234/    65CE :                     L_Nomatch_MSG:
   20235/    65CE : 4E 6F 20 6D 61 74       DB      "No match",00H
                    63 68 00 
   20236/    65D7 :                     
   20237/    65D7 :                     L_String_MSG:
   20238/    65D7 : 53 74 72 69 6E 67       DB      "String:",00H
                    3A 00 
   20239/    65DF :                     ;
   20240/    65DF :                     ; Set Cursor to last LCD line and clear Line
   20241/    65DF :                     ;
   20242/    65DF :                     L_SET_CUR_LSTLIN:
   20243/    65DF : E5                      PUSH    H							;save HL
   20244/    65E0 : CD DB 63                CALL    L_NUM_LCD_ROWS				;Get # of LCD rows based on label protect + cols in HL
   20245/    65E3 :                     										;	result in L
   20246/    65E3 : 26 01                   MVI     H,01H
   20247/    65E5 : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   20248/    65E8 : E1                      POP     H							;restore HL
   20249/    65E9 : C3 5D 42                JMP     R_ERASE_TO_EOL				;Erase from cursor to end of line
   20250/    65EC :                     
   20251/    65EC :                     L_CLR_PNDERR:
   20252/    65EC : 21 E1 F6                LXI     H,PNDERR_R
   20253/    65EF : AF                      XRA     A
   20254/    65F0 : BE                      CMP     M
   20255/    65F1 : C8                      RZ									;return if PNDERR_R == 0
   20256/    65F2 : 77                      MOV     M,A							;clear PNDERR_R
   20257/    65F3 :                     L_CLR_PNDERR_1:
   20258/    65F3 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   20259/    65F6 : E5                      PUSH    H							;arg for L_SET_CURSOR_POS_FROM_STACK
   20260/    65F7 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20261/    65FA : CD CB 69                CALL    L_DISP_LINENUM_IN_A			;Display line 'A' of the .DO file at HL
   20262/    65FD : C3 AD 60                JMP     L_SET_CURSOR_POS_FROM_STACK
   20263/    6600 :                     
   20264/    6600 :                     L_QUERY_USER_NULL:
   20265/    6600 : 11 48 5F                LXI     D,L_NULL_STR				;Code Based.
   20266/    6603 :                     ;
   20267/    6603 :                     ; Print a message on the display and request keyboard input
   20268/    6603 :                     ;
   20269/    6603 :                     ; IN:
   20270/    6603 :                     ;	DE		text buffer ptr
   20271/    6603 :                     ;	HL		Code Based message
   20272/    6603 :                     ;
   20273/    6603 :                     L_QUERY_USER:
   20274/    6603 : D5                      PUSH    D							;save text buffer ptr
   20275/    6604 : CD B3 65                CALL    L_PRNT_MSG					;HL input
   20276/    6607 : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   20277/    660A : 32 CA FA                STA     CSRXSVD_R					;save it
   20278/    660D : E1                      POP     H							;restore text buffer ptr to HL
   20279/    660E : E5                      PUSH    H							;and save it
   20280/    660F : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   20281/    6612 : CD CB 12            -	CALL    R_WAIT_KEY				  	;Wait for key from keyboard
   20282/    6615 : DA 12 66                JC      -
   20283/    6618 : A7                      ANA     A							;test key
   20284/    6619 : CA 12 66                JZ      -
   20285/    661C : E1                      POP     H							;restore text buffer ptr to HL
   20286/    661D : FE 0D                   CPI     0DH							;CR
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 352 - 9/5/2025 20:20:35


   20287/    661F : CA 54 66                JZ      L_QUERY_USER_END			;brif key == CR
   20288/    6622 : F5                      PUSH    PSW							;save key
   20289/    6623 : CD DB 63                CALL    L_NUM_LCD_ROWS				;Get # of LCD rows based on label protect + cols in HL
   20290/    6626 : 3A CA FA                LDA     CSRXSVD_R					;saved Cursor column
   20291/    6629 : 67                      MOV     H,A
   20292/    662A : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   20293/    662D : CD 5D 42                CALL    R_ERASE_TO_EOL				;Erase from cursor to end of line
   20294/    6630 : F1                      POP     PSW							;restore key
   20295/    6631 : 11 85 F6                LXI     D,INPBUF_R					;Keyboard buffer
   20296/    6634 : 06 01                   MVI     B,01H						;counter
   20297/    6636 : A7                      ANA     A
   20298/    6637 : C3 3D 66                JMP     L_QUERY_USER_1
   20299/    663A :                     
   20300/    663A :                     L_QUERY_USER_CNT:
   20301/    663A : CD CB 12                CALL    R_WAIT_KEY					;Wait for key from keyboard
   20302/    663D :                     L_QUERY_USER_1:
   20303/    663D : 21 3A 66                LXI     H,L_QUERY_USER_CNT			;continuation function
   20304/    6640 : E5                      PUSH    H
   20305/    6641 : D8                      RC									;brif carry to continuation function
   20306/    6642 :                     ; L_QUERY_USER_CNT continuation function on stack
   20307/    6642 : FE 7F                   CPI     7FH							;DEL
   20308/    6644 : CA A0 46                JZ      R_INP_BKSP_HANDLER       	;Input routine backspace), left arrow), CTRL-H handler
   20309/    6647 : FE 20                   CPI     ' '
   20310/    6649 : D2 7E 66                JNC     L_INP_CHAR_HANDLER			;brif A >= ' '
   20311/    664C : 21 5B 66                LXI     H,L_CTRL_CHARS-2			;Code Based. 
   20312/    664F : 0E 07                   MVI     C,(L_CTRL_CHARS_END-L_CTRL_CHARS)/3		;07H Table length
   20313/    6651 : C3 78 43                JMP     R_VECTORTBL_LOOKUP
   20314/    6654 :                     
   20315/    6654 :                     L_QUERY_USER_END:
   20316/    6654 : 11 85 F6                LXI     D,INPBUF_R				    ;Keyboard buffer
   20317/    6657 : CD C3 65                CALL    R_COPY_STRING       		;Copy NULL terminated string at M to (DE)
   20318/    665A : C3 78 66                JMP		L_RET_INPBUF_PREDEC
   20319/    665D :                     ;
   20320/    665D :                     ; Control Chars Table
   20321/    665D :                     ;
   20322/    665D :                     L_CTRL_CHARS:
   20323/    665D : 03                      DB      03H							;^C
   20324/    665E : 72 66                   DW 		L_INP_CTRL_C_HANDLER
   20325/    6660 : 08                      DB      08H							;BKSP
   20326/    6661 : A0 46                   DW		R_INP_BKSP_HANDLER
   20327/    6663 : 09                      DB      09H							;TAB
   20328/    6664 : 7C 66                   DW		L_INP_TAB_HANDLER
   20329/    6666 : 0D                      DB      0DH							;CR
   20330/    6667 : 75 66                   DW		L_INP_CR_HANDLER
   20331/    6669 : 15                      DB      15H
   20332/    666A : C3 46                   DW		R_INP_CTRL_U_HANDLER
   20333/    666C : 18                      DB      18H
   20334/    666D : C3 46                   DW		R_INP_CTRL_U_HANDLER
   20335/    666F : 1D                      DB      1DH
   20336/    6670 : A0 46                   DW		R_INP_BKSP_HANDLER
   20337/    6672 :                     L_CTRL_CHARS_END:
   20338/    6672 :                     	
   20339/    6672 :                     L_INP_CTRL_C_HANDLER:					;^C handler
   20340/    6672 : 11 85 F6                LXI     D,INPBUF_R					;Keyboard buffer start
   20341/    6675 :                     L_INP_CR_HANDLER:						;CR handler
   20342/    6675 : E1                      POP     H
   20343/    6676 : AF                      XRA     A
   20344/    6677 : 12                      STAX    D
   20345/    6678 :                     L_RET_INPBUF_PREDEC:
   20346/    6678 : 21 84 F6                LXI     H,INPBUF_R-1				;Keyboard buffer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 353 - 9/5/2025 20:20:35


   20347/    667B : C9                      RET
   20348/    667C :                     
   20349/    667C :                     L_INP_TAB_HANDLER:						;TAB handler
   20350/    667C : 3E 09                   MVI     A,09H
   20351/    667E :                     L_INP_CHAR_HANDLER:
   20352/    667E : 4F                      MOV     C,A							;save char
   20353/    667F : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   20354/    6682 : D6 09                   SUI     09H
   20355/    6684 : 21 3A F6                LXI     H,CSRX_R				    ;Cursor column (1-40)
   20356/    6687 : BE                      CMP     M
   20357/    6688 : DA 29 42                JC      R_BEEP_STMT				    ;BEEP statement
   20358/    668B : 79                      MOV     A,C							;restore char
   20359/    668C : 04                      INR     B
   20360/    668D : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   20361/    668E : 12                      STAX    D
   20362/    668F : 13                      INX     D
   20363/    6690 : C9                      RET
   20364/    6691 :                     ;
   20365/    6691 :                     ; TEXT control Y routine: Prints the entire file
   20366/    6691 :                     ; Code asks for printer width
   20367/    6691 :                     ;
   20368/    6691 :                     R_TEXT_CTRL_Y_FUN:						;6691H
   20369/    6691 : CD 98 65                CALL    L_CHECK_LCD_SCROLL
   20370/    6694 : 21 F2 66                LXI     H,L_ABORT_HANDLER
   20371/    6697 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   20372/    669A : E5                      PUSH    H
   20373/    669B : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8) + column (1-40)
   20374/    669E : 22 E7 F6                SHLD    TMPLIN_R					;temp storage for line ptr
   20375/    66A1 : 21 0C 67                LXI     H,L_Width_MSG				;Code Based. 
   20376/    66A4 : 11 4A F6                LXI     D,PRTBUF_R
   20377/    66A7 : CD 03 66                CALL    L_QUERY_USER				;Print a message to display and request keyboard input
   20378/    66AA : (MACRO)                 CHRGET								;Get next non-white char from M
   20379/    66AB : AF                      XRA     A
   20380/    66AC : BE                      CMP     M
   20381/    66AD : CA E6 66                JZ      L_TEXT_CTRL_Y_END_0			;brif char == 0
   20382/    66B0 : 32 88 F6                STA     0F688H						;clear 
   20383/    66B3 : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   20384/    66B6 : FE 0A                   CPI     0AH							;LF
   20385/    66B8 : D8                      RC									;retif char < LF
   20386/    66B9 : FE 85                   CPI     85H
   20387/    66BB : D0                      RNC									;retif char >= 85H
   20388/    66BC : D1                      POP     D
   20389/    66BD : 32 49 F6                STA     PRTWDTH_R					;Printer output width from CTRL-Y
   20390/    66C0 : 32 22 F9                STA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   20391/    66C3 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   20392/    66C6 : 11 4A F6                LXI     D,PRTBUF_R
   20393/    66C9 : 21 85 F6                LXI     H,INPBUF_R				  	;Keyboard buffer
   20394/    66CC : CD C3 65                CALL    R_COPY_STRING         		;Copy NULL terminated string at M to (DE)
   20395/    66CF : 3C                      INR     A
   20396/    66D0 : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20397/    66D3 : CD 22 42                CALL    R_SEND_CRLF				  	;Send CRLF to screen or printer
   20398/    66D6 : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   20399/    66D9 : EB                      XCHG
   20400/    66DA : CD 0D 6A            -	CALL    L_DISP_LINE
   20401/    66DD : 7A                      MOV     A,D							;test DE
   20402/    66DE : A3                      ANA     E
   20403/    66DF : 3C                      INR     A
   20404/    66E0 : C2 DA 66                JNZ     -							;brif DE != 0FFFFH
   20405/    66E3 : CD FE 66                CALL    L_RESET_CONF				;reset configuration
   20406/    66E6 :                     L_TEXT_CTRL_Y_END_0:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 354 - 9/5/2025 20:20:35


   20407/    66E6 : CD F3 65                CALL    L_CLR_PNDERR_1
   20408/    66E9 :                     L_TEXT_CTRL_Y_END:
   20409/    66E9 : 2A E7 F6                LHLD    TMPLIN_R					;get temp storage for line ptr
   20410/    66EC : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   20411/    66EF : C3 DD 5F                JMP     R_TEXT_EDIT_LOOP			;Main TEXT edit loop
   20412/    66F2 :                     ;
   20413/    66F2 :                     ; Error handler
   20414/    66F2 :                     ;
   20415/    66F2 :                     L_ABORT_HANDLER:
   20416/    66F2 : CD FE 66                CALL    L_RESET_CONF				;reset configuration
   20417/    66F5 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   20418/    66F8 : CD AB 65                CALL    L_PRNT_ABORT
   20419/    66FB : C3 E9 66                JMP     L_TEXT_CTRL_Y_END
   20420/    66FE :                     ;
   20421/    66FE :                     ;
   20422/    66FE :                     L_RESET_CONF:
   20423/    66FE : 3A 3C F6                LDA     LINWDT_R					;Active columns count (1-40)
   20424/    6701 : 32 22 F9                STA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   20425/    6704 : AF                      XRA     A
   20426/    6705 : 32 75 F6                STA     PRTFLG_R					;Output device for RST 20H (0=screen)
   20427/    6708 : 32 20 F9                STA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20428/    670B : C9                      RET
   20429/    670C :                     
   20430/    670C :                     L_Width_MSG:
   20431/    670C : 57 69 64 74 68 3A       DB      "Width:",00H
                    00 
   20432/    6713 :                     ;
   20433/    6713 :                     ; TEXT control G routine
   20434/    6713 :                     ;
   20435/    6713 :                     R_TEXT_CTRL_G_FUN:						;6713H
   20436/    6713 : 11 35 67                LXI     D,L_SaveTo_MSG				;Code Based. 
   20437/    6716 : CD 3E 67                CALL    L_GET_TXT_FNAME
   20438/    6719 : DA F2 66                JC      L_ABORT_HANDLER				;brif DEVICE specified
   20439/    671C : CA E6 66                JZ      L_TEXT_CTRL_Y_END_0
   20440/    671F : 1E 02                   MVI     E,02H						;Marker Open for Output
   20441/    6721 : CD 12 4D                CALL    R_OPEN_FILE
   20442/    6724 : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   20443/    6727 : 7E                  -	MOV     A,M
   20444/    6728 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
   20445/    6729 : 23                      INX     H
   20446/    672A : FE 1A                   CPI     1AH							;^Z
   20447/    672C : C2 27 67                JNZ     -
   20448/    672F : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   20449/    6732 : C3 E6 66                JMP     L_TEXT_CTRL_Y_END_0
   20450/    6735 :                     
   20451/    6735 :                     L_SaveTo_MSG:
   20452/    6735 : 53 61 76 65 20 74       DB      "Save to:",00H
                    6F 3A 00 
   20453/    673E :                     ;
   20454/    673E :                     ; IN:
   20455/    673E :                     ;	DE
   20456/    673E :                     ; OUT:
   20457/    673E :                     ;	carry, HL
   20458/    673E :                     ;
   20459/    673E :                     L_GET_TXT_FNAME:
   20460/    673E : D5                      PUSH    D							;save DE
   20461/    673F : CD 98 65                CALL    L_CHECK_LCD_SCROLL
   20462/    6742 : 21 F2 66                LXI     H,L_ABORT_HANDLER			;error handler
   20463/    6745 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   20464/    6748 : 2A 39 F6                LHLD    CSRY_R						;Cursor row (1-8), column (1-40)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 355 - 9/5/2025 20:20:35


   20465/    674B : 22 E7 F6                SHLD    TMPLIN_R					;temp storage for line ptr
   20466/    674E : E1                      POP     H							;restore DE to HL
   20467/    674F : CD 00 66                CALL    L_QUERY_USER_NULL			;Query user, no message
   20468/    6752 : (MACRO)                 CHRGET								;Get next non-white char from M
   20469/    6753 : A7                      ANA     A
   20470/    6754 : C8                      RZ									;retif end of line
   20471/    6755 : CD FA 21                CALL    R_STRLEN				    ;Count length of string at M
   20472/    6758 : CD 0B 4C                CALL    L_PSH_HL_EVAL_FILNAM		;push HL and eval Filename. Device in D
   20473/    675B : C2 60 67                JNZ     +
   20474/    675E : 16 FD                   MVI     D,CAS_DEV					;0FDH default device
   20475/    6760 : 7A                  +	MOV     A,D
   20476/    6761 : FE F8                   CPI     RAM_DEV						;0F8H
   20477/    6763 : 37                      STC
   20478/    6764 : C8                      RZ
   20479/    6765 : FE FE                   CPI     CRT_DEV						;0FEH
   20480/    6767 : 37                      STC
   20481/    6768 : C8                      RZ
   20482/    6769 : FE FF                   CPI     LCD_DEV						;0FFH
   20483/    676B : 37                      STC
   20484/    676C : C8                      RZ
   20485/    676D : 21 48 5F                LXI     H,L_NULL_STR				;Code Based.
   20486/    6770 : 3F                      CMC
   20487/    6771 : 3E 00                   MVI     A,00H
   20488/    6773 : C9                      RET
   20489/    6774 :                     ;
   20490/    6774 :                     ; TEXT control V routine: paste selection
   20491/    6774 :                     ;
   20492/    6774 :                     R_TEXT_CTRL_V_FUN:						;6774H
   20493/    6774 : 11 D4 67                LXI     D,L_LoadFrom_MSG			;Code Based. 
   20494/    6777 : CD 3E 67                CALL    L_GET_TXT_FNAME
   20495/    677A : DA F2 66                JC      L_ABORT_HANDLER				;brif DEVICE specified
   20496/    677D : CA E6 66                JZ      L_TEXT_CTRL_Y_END_0
   20497/    6780 : E5                      PUSH    H
   20498/    6781 : 21 CB 67                LXI     H,L_TEXT_CTRL_V_4
   20499/    6784 : 22 52 F6                SHLD    ACTONERR_R					;active ON ERROR handler vector
   20500/    6787 : 2A 62 FB                LHLD    TXTEND_R
   20501/    678A : 22 E7 F6                SHLD    TMPLIN_R					;temp storage for line ptr
   20502/    678D : 32 C6 FA                STA     TLCMKEY_R
   20503/    6790 : E3                      XTHL								;swap HL and [SP]
   20504/    6791 : 1E 01                   MVI     E,01H						;marker Open for Input
   20505/    6793 : CD 12 4D                CALL    R_OPEN_FILE
   20506/    6796 : E1                      POP     H
   20507/    6797 :                     L_TEXT_CTRL_V_1:
   20508/    6797 : CD 7A 4E                CALL    L_DEV_INPUT
   20509/    679A : DA B7 67                JC      L_TEXT_CTRL_V_2				;brif error
   20510/    679D : CD FE 56                CALL    L_IS_CTRL_CHAR
   20511/    67A0 : CA 97 67                JZ      L_TEXT_CTRL_V_1
   20512/    67A3 : D2 AB 67                JNC     +
   20513/    67A6 : CD 96 63                CALL    L_INSRT_DO					;Insert byte in A to .DO file at address HL.
   20514/    67A9 : 3E 0A                   MVI     A,0AH
   20515/    67AB : D4 96 63            +	CNC     L_INSRT_DO					;Insert byte in A to .DO file at address HL.
   20516/    67AE : D2 97 67                JNC     L_TEXT_CTRL_V_1
   20517/    67B1 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   20518/    67B4 : CD A3 60                CALL    L_ERR_MEMFULL
   20519/    67B7 :                     L_TEXT_CTRL_V_2:
   20520/    67B7 : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   20521/    67BA :                     L_TEXT_CTRL_V_3:
   20522/    67BA : CD 2A 6B                CALL    L_FNDEOFDO					;Find end of DO file
   20523/    67BD : 2A E7 F6                LHLD    TMPLIN_R					;temp storage for line ptr
   20524/    67C0 : E5                      PUSH    H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 356 - 9/5/2025 20:20:35


   20525/    67C1 : CD 81 69                CALL    L_DISP_SCREEN
   20526/    67C4 : E1                      POP     H
   20527/    67C5 : CD 0B 63                CALL    L_SETCRS_FROM_HL			;Reposition TEXT LCD cursor to file pos in HL
   20528/    67C8 : C3 DD 5F                JMP     R_TEXT_EDIT_LOOP			;Main TEXT edit loop
   20529/    67CB :                     
   20530/    67CB :                     L_TEXT_CTRL_V_4:
   20531/    67CB : CD 45 4F                CALL    L_CLS_FILE0					;close file 0 & Load LSTVAR_R
   20532/    67CE : CD AB 65                CALL    L_PRNT_ABORT
   20533/    67D1 : C3 BA 67                JMP     L_TEXT_CTRL_V_3
   20534/    67D4 :                     
   20535/    67D4 :                     L_LoadFrom_MSG:
   20536/    67D4 : 4C 6F 61 64 20 66   	DB		"Load from:",00H
                    72 6F 6D 3A 00 
   20537/    67DF :                     ;
   20538/    67DF :                     ; Build next line from .DO file at (DE) into line buffer
   20539/    67DF :                     ;
   20540/    67DF :                     ; IN:
   20541/    67DF :                     ;	DE
   20542/    67DF :                     ;
   20543/    67DF :                     ; OUT:
   20544/    67DF :                     ;	DE		0FFFFH if EOF
   20545/    67DF :                     ;
   20546/    67DF :                     L_BDL_LINE_DE:
   20547/    67DF : AF                      XRA     A
   20548/    67E0 : 32 90 F8                STA     DSPCOFF_R					;clear current column offset within display line buffer
   20549/    67E3 : 32 E6 F6                STA     PASTEFLG_R					;clear PASTEFLG_R
   20550/    67E6 : 21 94 F8                LXI     H,LINBUF_R					;line buffer
   20551/    67E9 : 22 92 F8                SHLD    CURPOS_R					;reset to start
   20552/    67EC :                     ; 
   20553/    67EC :                     ; Add next character from .DO file at (DE) into line buffer
   20554/    67EC :                     ; 
   20555/    67EC :                     L_ADD_CHR:
   20556/    67EC : D5                      PUSH    D							;Save pointer into .DO file
   20557/    67ED : CD 12 69                CALL    L_PROCESS_SEL				;Manage copy/cut SEL highlighting added to line buffer
   20558/    67F0 : D1                      POP     D							;restore pointer into .DO file
   20559/    67F1 : 1A                      LDAX    D							;get char
   20560/    67F2 : 13                      INX     D							;next
   20561/    67F3 : FE 1A                   CPI     1AH							;EOF
   20562/    67F5 : CA 87 68                JZ      L_ADD_EOF_CHAR				;brif EOF: Add Left arrow character to line buffer 
   20563/    67F8 : FE 0D                   CPI     0DH							;CR
   20564/    67FA : CA 97 68                JZ      L_ADD_CR
   20565/    67FD : FE 09                   CPI     09H							;TAB
   20566/    67FF : CA 07 68                JZ      +
   20567/    6802 : FE 20                   CPI     ' '
   20568/    6804 : DA 5D 68                JC      L_ADD_CTRL_CHAR				;brif control char
   20569/    6807 : CD B2 68            +	CALL    L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   20570/    680A : D2 EC 67                JNC     L_ADD_CHR					;brif not at end of line buffer: add next character
   20571/    680D : 1A                      LDAX    D							;get char
   20572/    680E : CD 5E 69                CALL    L_TEST_WWRAP_CHARS			;Test byte in A for word-wrap characters like '-', '(', ')', etc.
   20573/    6811 : C2 27 68                JNZ     +							;brif no wrap char
   20574/    6814 : CD 55 68                CALL    L_ADD_CHR_1					;LPT check
   20575/    6817 : 1A                      LDAX    D							;get char
   20576/    6818 : FE 20                   CPI     ' '
   20577/    681A : C0                      RNZ									;retif not ' '
   20578/    681B : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20579/    681E : A7                      ANA     A
   20580/    681F : C8                      RZ									;retif LCDPRT_R==0
   20581/    6820 : 13                      INX     D							;next
   20582/    6821 : 1A                      LDAX    D							;get char
   20583/    6822 : FE 20                   CPI     ' '
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 357 - 9/5/2025 20:20:35


   20584/    6824 : C0                      RNZ									;retif not ' '
   20585/    6825 : 1B                      DCX     D							;backup ptr
   20586/    6826 : C9                      RET
   20587/    6827 : EB                  +	XCHG
   20588/    6828 : 22 8C F8                SHLD    EOMFILE_R					;End of RAM for file storage to DE
   20589/    682B : EB                      XCHG
   20590/    682C : 2A 92 F8                LHLD    CURPOS_R					;temporarily save CURPOS_R
   20591/    682F : 22 8E F8                SHLD    SAVCURPOS_R
   20592/    6832 : 1B                      DCX     D							;Decrement to previous byte to test it for word-wrap
   20593/    6833 : 1A                      LDAX    D							;get the previous byte
   20594/    6834 : 13                      INX     D							;back to this byte
   20595/    6835 : CD 5E 69                CALL    L_TEST_WWRAP_CHARS			;Test byte in A for word-wrap characters like '-', '(', ')', etc.
   20596/    6838 : CA 55 68                JZ      L_ADD_CHR_1					;brif word-wrap
   20597/    683B : 1B                  -	DCX     D							;Decrement to previous byte to test it for word-wrap
   20598/    683C : 1A                      LDAX    D							;get the previous byte
   20599/    683D : 13                      INX     D							;back to this byte
   20600/    683E : CD 5E 69                CALL    L_TEST_WWRAP_CHARS			;Test byte in A for word-wrap characters like '-', '(', ')', etc.
   20601/    6841 : CA EF 68                JZ      L_DO_EOFLINE				;brif word-wrap: Test for end of format line
   20602/    6844 : 1B                      DCX     D
   20603/    6845 : CD D9 68                CALL    L_CURSOR_BACKUP				;Backup cursor position
   20604/    6848 : C2 3B 68                JNZ     -							;brif [DSPCOFF_R] != 0
   20605/    684B : 2A 8E F8                LHLD    SAVCURPOS_R					;restore temporarily saved CURPOS_R
   20606/    684E : 22 92 F8                SHLD    CURPOS_R
   20607/    6851 : 2A 8C F8                LHLD    EOMFILE_R					;End of RAM for file storage to DE
   20608/    6854 : EB                      XCHG
   20609/    6855 :                     L_ADD_CHR_1:
   20610/    6855 : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20611/    6858 : 3D                      DCR     A
   20612/    6859 : CA 08 69                JZ      L_ADD_CRLF					;brif LCDPRT_R == 0
   20613/    685C : C9                      RET
   20614/    685D :                     
   20615/    685D :                     ; 
   20616/    685D :                     ; Insert control character into line buffer, preceeded by CARET
   20617/    685D :                     ; 
   20618/    685D :                     L_ADD_CTRL_CHAR:
   20619/    685D : F5                      PUSH    PSW							;save control char
   20620/    685E : 3E 5E                   MVI     A,'^'						;5EH
   20621/    6860 : CD B2 68                CALL    L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   20622/    6863 : DA 77 68                JC      L_DEL_LAST_CHR				;Jump if no room in line buffer for actual code
   20623/    6866 : F1                      POP     PSW							;restore control char
   20624/    6867 : F6 40                   ORI     40H							;01000000 map control char to letters
   20625/    6869 : CD B2 68                CALL    L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   20626/    686C : D2 EC 67                JNC     L_ADD_CHR					;If not at end of line, add next character to line buffer
   20627/    686F : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20628/    6872 : A7                      ANA     A
   20629/    6873 : C2 08 69                JNZ     L_ADD_CRLF					;Jump if not output to LCD to add CRLF to line buffer
   20630/    6876 : C9                      RET
   20631/    6877 :                     
   20632/    6877 :                     ; 
   20633/    6877 :                     ; Remove last inserted character in line buffer
   20634/    6877 :                     ; 
   20635/    6877 :                     L_DEL_LAST_CHR:
   20636/    6877 : F1                      POP     PSW
   20637/    6878 : 1B                      DCX     D
   20638/    6879 : 2A 92 F8                LHLD    CURPOS_R
   20639/    687C : 2B                      DCX     H
   20640/    687D : 22 92 F8                SHLD    CURPOS_R
   20641/    6880 : 21 90 F8                LXI     H,DSPCOFF_R					;Current column offset within display line buffer
   20642/    6883 : 35                      DCR     M
   20643/    6884 : C3 EF 68                JMP     L_DO_EOFLINE				;Test for end of format line
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 358 - 9/5/2025 20:20:35


   20644/    6887 :                     ; 
   20645/    6887 :                     ; Add Left arrow character to line buffer if LCD output to indicate EOF
   20646/    6887 :                     ; 
   20647/    6887 :                     L_ADD_EOF_CHAR:
   20648/    6887 : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20649/    688A : A7                      ANA     A
   20650/    688B : 3E 9B                   MVI     A,9BH						;left arrow
   20651/    688D : CC B2 68                CZ      L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   20652/    6890 : CD EF 68                CALL    L_DO_EOFLINE				;Test for end of format line
   20653/    6893 : 11 FF FF                LXI     D,0FFFFH
   20654/    6896 : C9                      RET
   20655/    6897 :                     ; 
   20656/    6897 :                     ; Add CR character to line buffer
   20657/    6897 :                     ;
   20658/    6897 :                     ; IN:
   20659/    6897 :                     ;	DE		
   20660/    6897 :                     ; 
   20661/    6897 :                     L_ADD_CR:
   20662/    6897 : 1A                      LDAX    D
   20663/    6898 : FE 0A                   CPI     0AH							;LF
   20664/    689A : 3E 0D                   MVI     A,0DH						;preload CR
   20665/    689C : C2 5D 68                JNZ     L_ADD_CTRL_CHAR				;brif !LF
   20666/    689F : D5                      PUSH    D							;save pointer into .DO file
   20667/    68A0 : CD 12 69                CALL    L_PROCESS_SEL				;Manage copy/cut SEL highlighting added to line buffer
   20668/    68A3 : D1                      POP     D							;restore pointer into .DO file
   20669/    68A4 : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20670/    68A7 : A7                      ANA     A
   20671/    68A8 : 3E 8F                   MVI     A,8FH						;Load ASCII code for CR mark on LCD
   20672/    68AA : CC B2 68                CZ      L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   20673/    68AD : CD EF 68                CALL    L_DO_EOFLINE				;Test for end of format line
   20674/    68B0 : 13                      INX     D
   20675/    68B1 : C9                      RET
   20676/    68B2 :                     ;
   20677/    68B2 :                     ; Add character in A to line buffer with TAB expansion
   20678/    68B2 :                     ;
   20679/    68B2 :                     ; IN:
   20680/    68B2 :                     ;	A
   20681/    68B2 :                     ; OUT:
   20682/    68B2 :                     ;	Carry		set if at end of line buffer
   20683/    68B2 :                     ;
   20684/    68B2 :                     L_ADD_BUFF_TABS:
   20685/    68B2 : E5                      PUSH    H							;save HL
   20686/    68B3 : CD D0 68                CALL    L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20687/    68B6 : 21 90 F8                LXI     H,DSPCOFF_R					;Current column offset within display line buffer
   20688/    68B9 : FE 09                   CPI     09H							;TAB
   20689/    68BB : CA C2 68                JZ      L_ADD_BUFF_TABS_1			;brif TAB
   20690/    68BE : 34                      INR     M							;increment DSPCOFF_R
   20691/    68BF : C3 C9 68                JMP     +							;Test if at end of line buffer
   20692/    68C2 :                     L_ADD_BUFF_TABS_1:						;Found TAB
   20693/    68C2 : 34                      INR     M							;increment DSPCOFF_R
   20694/    68C3 : 7E                      MOV     A,M							;get DSPCOFF_R
   20695/    68C4 : E6 07                   ANI     07H							;mod 8
   20696/    68C6 : C2 C2 68                JNZ     L_ADD_BUFF_TABS_1			;brif mod 8 != 0
   20697/    68C9 :                     ; 
   20698/    68C9 :                     ; Test if at end of line buffer
   20699/    68C9 :                     ; 
   20700/    68C9 : 3A 22 F9            +	LDA     OUTFMTWIDTH_R				;Output format width (40 or something else for CTRL-Y)
   20701/    68CC : 3D                      DCR     A
   20702/    68CD : BE                      CMP     M							;compare OUTFMTWIDTH_R and DSPCOFF_R
   20703/    68CE : E1                      POP     H							;restore HL
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 359 - 9/5/2025 20:20:35


   20704/    68CF : C9                      RET
   20705/    68D0 :                     
   20706/    68D0 :                     ; 
   20707/    68D0 :                     ; Add character in A to TEXT display line buffer
   20708/    68D0 :                     ; 
   20709/    68D0 :                     L_ADD_TXT_CHR:
   20710/    68D0 : 2A 92 F8                LHLD    CURPOS_R					;current char position
   20711/    68D3 : 77                      MOV     M,A
   20712/    68D4 : 23                      INX     H
   20713/    68D5 : 22 92 F8                SHLD    CURPOS_R					;update current char position
   20714/    68D8 : C9                      RET
   20715/    68D9 :                     ;
   20716/    68D9 :                     ; Backup cursor position
   20717/    68D9 :                     ;
   20718/    68D9 :                     ; OUT:
   20719/    68D9 :                     ;	Z		set if [DSPCOFF_R] == 0
   20720/    68D9 :                     ;
   20721/    68D9 :                     L_CURSOR_BACKUP:
   20722/    68D9 : 2A 92 F8                LHLD    CURPOS_R					;get current char position
   20723/    68DC : 2B                      DCX     H							;backup 3 positions
   20724/    68DD : 2B                      DCX     H
   20725/    68DE : 2B                      DCX     H
   20726/    68DF : 7E                      MOV     A,M
   20727/    68E0 : FE 1B                   CPI     1BH							;ESC
   20728/    68E2 : CA E7 68                JZ      +							;brif char == ESC
   20729/    68E5 : 23                      INX     H							;advance 2 positions
   20730/    68E6 : 23                      INX     H
   20731/    68E7 : 22 92 F8            +	SHLD    CURPOS_R
   20732/    68EA : 21 90 F8                LXI     H,DSPCOFF_R					;Current column offset within display line buffer
   20733/    68ED : 35                      DCR     M
   20734/    68EE : C9                      RET
   20735/    68EF :                     
   20736/    68EF :                     ; 
   20737/    68EF :                     ; Test for end of format line, add ESC-K + CRLF to line buffer if at end
   20738/    68EF :                     ; 
   20739/    68EF :                     L_DO_EOFLINE:
   20740/    68EF : 3A 90 F8                LDA     DSPCOFF_R					;Current column offset within display line buffer
   20741/    68F2 : 21 22 F9                LXI     H,OUTFMTWIDTH_R			;Output format width (40 or something else for CTRL-Y)
   20742/    68F5 : BE                      CMP     M							;Test if we have reached the output format width
   20743/    68F6 : D0                      RNC									;retif not at end of format line
   20744/    68F7 : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20745/    68FA : A7                      ANA     A
   20746/    68FB : C2 08 69                JNZ     L_ADD_CRLF					;Skip adding of ESCape sequence if not LCD
   20747/    68FE : 3E 1B                   MVI     A,1BH						;ESC
   20748/    6900 : CD D0 68                CALL    L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20749/    6903 : 3E 4B                   MVI     A,'K'
   20750/    6905 : CD D0 68                CALL    L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20751/    6908 :                     L_ADD_CRLF:
   20752/    6908 : 3E 0D                   MVI     A,0DH						;CR
   20753/    690A : CD D0 68                CALL    L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20754/    690D : 3E 0A                   MVI     A,0AH						;LF
   20755/    690F : C3 D0 68                JMP     L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20756/    6912 :                     
   20757/    6912 :                     ; 
   20758/    6912 :                     ; Manage copy/cut SEL highlighting added to line buffer
   20759/    6912 :                     ;
   20760/    6912 :                     ; IN:
   20761/    6912 :                     ;	DE		ptr into .DO file
   20762/    6912 :                     ; 
   20763/    6912 :                     L_PROCESS_SEL:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 360 - 9/5/2025 20:20:35


   20764/    6912 : CD EE 62                CALL    L_TEST_SEL					;Test for a valid SEL region. return to caller if not valid
   20765/    6915 :                     										;HL returns [DOADDR_R]
   20766/    6915 : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20767/    6918 : A7                      ANA     A
   20768/    6919 : C0                      RNZ									;Return if not output to LCD - no SEL highlighting to printer
   20769/    691A : 01 E6 F6                LXI     B,PASTEFLG_R				;used much later
   20770/    691D : D5                      PUSH    D							;save ptr into .DO file
   20771/    691E : EB                      XCHG
   20772/    691F : 2A E4 F6                LHLD    DOEND_R						;End address in .DO file of SELection for copy/cut to DE
   20773/    6922 : EB                      XCHG
   20774/    6923 :                     ; HL: [DOADDR_R]  DE: [DOEND_R]
   20775/    6923 : (MACRO)                 COMPAR								;Compare End address and HL: HL - DE
   20776/    6924 : D1                      POP     D							;restore ptr into .DO file
   20777/    6925 : D2 3F 69                JNC     +							;brif [DOADDR_R] >= [DOEND_R]
   20778/    6928 : EB                      XCHG								;[DOADDR_R] to DE
   20779/    6929 : (MACRO)                 COMPAR								;Compare [DOADDR_R] and ptr into .DO file: HL - DE
   20780/    692A : DA 4D 69                JC      L_PROCESS_SEL_1				;brif ptr into .DO file < [DOADDR_R]
   20781/    692D : EB                      XCHG
   20782/    692E : 2A E4 F6                LHLD    DOEND_R						;End address in .DO file of SELection for copy/cut to DE
   20783/    6931 : EB                      XCHG
   20784/    6932 : (MACRO)                 COMPAR								;Compare [DOEND_R] and ptr into .DO file: HL - DE
   20785/    6933 : D2 4D 69                JNC     L_PROCESS_SEL_1				;brif ptr into .DO file >= [DOEND_R]
   20786/    6936 : 0A                  -	LDAX    B							;[PASTEFLG_R]
   20787/    6937 : A7                      ANA     A
   20788/    6938 : C0                      RNZ									;retif [PASTEFLG_R] != 0
   20789/    6939 : 3C                      INR     A							;A now 1: new [PASTEFLG_R] value
   20790/    693A : 26 70                   MVI     H,'p'						;70H
   20791/    693C : C3 53 69                JMP     L_PROCESS_SEL_2				;output it
   20792/    693F :                     ; HL: [DOADDR_R] DE: ptr into .DO file
   20793/    693F : EB                  +	XCHG
   20794/    6940 : (MACRO)                 COMPAR								;Compare [DOADDR_R] and ptr into .DO file: HL - DE
   20795/    6941 : D2 4D 69                JNC     L_PROCESS_SEL_1				;brif ptr into .DO file >= [DOADDR_R]
   20796/    6944 : EB                      XCHG
   20797/    6945 : 2A E4 F6                LHLD    DOEND_R						;End address in .DO file of SELection for copy/cut to DE
   20798/    6948 : EB                      XCHG
   20799/    6949 : (MACRO)                 COMPAR								;Compare [DOEND_R] and ptr into .DO file: HL - DE
   20800/    694A : D2 36 69                JNC     -							;brif ptr into .DO file >= [DOEND_R]
   20801/    694D :                     L_PROCESS_SEL_1:
   20802/    694D : 0A                      LDAX    B							;[PASTEFLG_R]
   20803/    694E : A7                      ANA     A
   20804/    694F : C8                      RZ									;retif [PASTEFLG_R] == 0  
   20805/    6950 : AF                      XRA     A							;new [PASTEFLG_R] value
   20806/    6951 : 26 71                   MVI     H,'q'						;71H
   20807/    6953 :                     L_PROCESS_SEL_2:
   20808/    6953 : E5                      PUSH    H							;save H ('p' or 'q')
   20809/    6954 : 02                      STAX    B							;update [PASTEFLG_R]
   20810/    6955 : 3E 1B                   MVI     A,1BH						;ESC
   20811/    6957 : CD D0 68                CALL    L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20812/    695A : F1                      POP     PSW							;restore H to A
   20813/    695B : C3 D0 68                JMP     L_ADD_TXT_CHR				;Add character in A to TEXT display line buffer
   20814/    695E :                     ;
   20815/    695E :                     ; Test byte in A for word-wrap characters like '-', '(', ')', etc.
   20816/    695E :                     ; IN:
   20817/    695E :                     ;	A		operator to match
   20818/    695E :                     ;
   20819/    695E :                     ; OUT:
   20820/    695E :                     ;	Z		set if match
   20821/    695E :                     ;
   20822/    695E :                     L_TEST_WWRAP_CHARS:
   20823/    695E : 47                      MOV     B,A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 361 - 9/5/2025 20:20:35


   20824/    695F : 3A 21 F9                LDA     WWRAP_R						;Get word-wrap enable flag
   20825/    6962 : A7                      ANA     A
   20826/    6963 : 78                      MOV     A,B
   20827/    6964 : C8                      RZ									;retif WWRAP_R==0
   20828/    6965 :                     L_TEST_WWRAP_CHARS_2:
   20829/    6965 : 21 77 69                LXI     H,L_WWRAP_CHARS				;Code Based. word-wrap chars list
   20830/    6968 : 06 0A                   MVI     B,0AH						;count
   20831/    696A : BE                  -	CMP     M							;Code based
   20832/    696B : C8                      RZ									;retif operator match
   20833/    696C : 23                      INX     H							;next operator
   20834/    696D : 05                      DCR     B							;update count
   20835/    696E : C2 6A 69                JNZ     -
   20836/    6971 : FE 21                   CPI     '!'
   20837/    6973 : 04                      INR     B							;Clear zero flag to indicate no-wrap
   20838/    6974 : D0                      RNC									;retif character is not control code
   20839/    6975 : 05                      DCR     B							;Set zero flag to indicate wrap
   20840/    6976 : C9                      RET
   20841/    6977 :                     
   20842/    6977 :                     L_WWRAP_CHARS:
   20843/    6977 : 28 29 3C 3E 5B 5D       DB      "()<>[]+-*/"
                    2B 2D 2A 2F 
   20844/    6981 :                     ; 
   20845/    6981 :                     ; Display entire screen of lines of the .DO file at HL for editing
   20846/    6981 :                     ; 
   20847/    6981 :                     L_DISP_SCREEN:
   20848/    6981 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20849/    6984 : A7                      ANA     A							;clear carry-> bit 7
   20850/    6985 : 1F                      RAR									;divide by 2
   20851/    6986 :                     ;
   20852/    6986 :                     ; Display 'A' lines of the .DO file at HL for editing
   20853/    6986 :                     ;
   20854/    6986 :                     L_DISP_A_LINES:
   20855/    6986 : CD 39 6B                CALL    L_CALC_LINE_STRTS			;calculate the Line Starts array for the LCD
   20856/    6989 : 22 EB F6                SHLD    TXTLINTBL_R					;Storage of TEXT Line Starts
   20857/    698C : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20858/    698F : 87                      ADD     A							;double since updating ptrs
   20859/    6990 : 21 ED F6                LXI     H,TXTLINTBL_R+2				;start at line 2
   20860/    6993 : 36 FE               -	MVI     M,0FEH						;invalidate rest of TXTLINTBL_R
   20861/    6995 : 23                      INX     H
   20862/    6996 : 3D                      DCR     A							;loop counter
   20863/    6997 : C2 93 69                JNZ     -
   20864/    699A : 3C                      INR     A							;A == 1
   20865/    699B : C3 CB 69                JMP     L_DISP_LINENUM_IN_A			;Display line 1 of the .DO file at HL
   20866/    699E :                     ;
   20867/    699E :                     L_DISP_LINENUM:
   20868/    699E : F5                      PUSH    PSW							;save A
   20869/    699F : 2A E9 F6                LHLD    PREVLINE_R
   20870/    69A2 : 7C                      MOV     A,H							;test
   20871/    69A3 : B5                      ORA     L
   20872/    69A4 : CA CA 69                JZ      +							;brif PREVLINE_R == 0
   20873/    69A7 : EB                      XCHG								;PREVLINE_R to DE
   20874/    69A8 : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into line buffer
   20875/    69AB : F1                      POP     PSW							;restore A
   20876/    69AC : 47                      MOV     B,A							;save
   20877/    69AD : CD 27 6A                CALL    L_CMP_LINEPTR_DE			;Compare DE with Line ptr for row in A
   20878/    69B0 : 78                      MOV     A,B
   20879/    69B1 : F5                      PUSH    PSW
   20880/    69B2 : CA CA 69                JZ      +
   20881/    69B5 : 3D                      DCR     A
   20882/    69B6 : CA CA 69                JZ      +
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 362 - 9/5/2025 20:20:35


   20883/    69B9 : 6F                      MOV     L,A
   20884/    69BA : 26 01                   MVI     H,01H
   20885/    69BC : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   20886/    69BF : CD 10 6A                CALL    L_DISP_LINE_1
   20887/    69C2 : 7A                      MOV     A,D							;test DE for 0FFFFH
   20888/    69C3 : A3                      ANA     E
   20889/    69C4 : 3C                      INR     A
   20890/    69C5 : C1                      POP     B
   20891/    69C6 : CA 5D 42                JZ      R_ERASE_TO_EOL				;Erase from cursor to end of line
   20892/    69C9 : C5                      PUSH    B
   20893/    69CA : F1                  +	POP     PSW
   20894/    69CB :                     ; 
   20895/    69CB :                     ; Display line 'A' of the .DO file at HL for editing based on line starts array
   20896/    69CB :                     ; 
   20897/    69CB :                     L_DISP_LINENUM_IN_A:
   20898/    69CB : 6F                      MOV     L,A							;Column
   20899/    69CC : 26 01                   MVI     H,01H						;Row 1
   20900/    69CE : CD 7C 42                CALL    R_SET_CURSOR_POS			;Set the current cursor position
   20901/    69D1 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row 
   20902/    69D4 : 7B                      MOV     A,E							;test DE
   20903/    69D5 : A2                      ANA     D
   20904/    69D6 : 3C                      INR     A
   20905/    69D7 : CA 04 6A                JZ      L_DISP_LINENUM_IN_A_2		;brif DE == 0FFFFH
   20906/    69DA : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row  
   20907/    69DD : CD DB 63            -	CALL    L_NUM_LCD_ROWS				;Get # of LCD rows based on label protect + cols in L
   20908/    69E0 : BD                      CMP     L
   20909/    69E1 : CA F4 69                JZ      +
   20910/    69E4 : CD 0D 6A                CALL    L_DISP_LINE					;result in DE
   20911/    69E7 : 7A                      MOV     A,D							;test DE
   20912/    69E8 : A3                      ANA     E
   20913/    69E9 : 3C                      INR     A
   20914/    69EA : CA FE 69                JZ      L_DISP_LINENUM_IN_A_1		;brif DE == 0FFFFH
   20915/    69ED : CD 2E 6A                CALL    L_CMP_CRS_LINEPTR_DE		;Compare DE with Line ptr for current row
   20916/    69F0 : C2 DD 69                JNZ     -							;brif not equal
   20917/    69F3 : C9                      RET
   20918/    69F4 : CD 0D 6A            +	CALL    L_DISP_LINE					;result in DE
   20919/    69F7 : CD CD 63            -	CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20920/    69FA : 3C                      INR     A
   20921/    69FB : C3 27 6A                JMP     L_CMP_LINEPTR_DE			;Compare DE with Line ptr for row in A
   20922/    69FE :                     L_DISP_LINENUM_IN_A_1:
   20923/    69FE : CD 2E 6A                CALL    L_CMP_CRS_LINEPTR_DE		;Compare DE with Line ptr for current row
   20924/    6A01 : CA F7 69                JZ      -							;brif equal
   20925/    6A04 :                     L_DISP_LINENUM_IN_A_2:
   20926/    6A04 : CD 5D 42            	CALL    R_ERASE_TO_EOL				;Erase from cursor to end of line
   20927/    6A07 : CD 22 42                CALL    R_SEND_CRLF				    ;Send CRLF to screen or printer
   20928/    6A0A : C3 FE 69                JMP     L_DISP_LINENUM_IN_A_1
   20929/    6A0D :                     ;
   20930/    6A0D :                     ; IN:
   20931/    6A0D :                     ;	DE
   20932/    6A0D :                     ; OUT:
   20933/    6A0D :                     ;	DE
   20934/    6A0D :                     ;
   20935/    6A0D :                     L_DISP_LINE:
   20936/    6A0D : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into line buffer
   20937/    6A10 :                     L_DISP_LINE_1:
   20938/    6A10 : D5                      PUSH    D							;save return value
   20939/    6A11 : 2A 92 F8                LHLD    CURPOS_R					;current char position in line buffer
   20940/    6A14 : 11 94 F8                LXI     D,LINBUF_R					;line buffer
   20941/    6A17 : 1A                  -	LDAX    D							;get char
   20942/    6A18 : (MACRO)                 OUTCHR								;Send character in A to screen/printer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 363 - 9/5/2025 20:20:35


   20943/    6A19 : 13                      INX     D							;next line buffer
   20944/    6A1A : (MACRO)                 COMPAR								;Compare line buffer ptr and CURPOS_R: HL - DE
   20945/    6A1B : C2 17 6A                JNZ     -							;brif not equal
   20946/    6A1E : 3A 20 F9                LDA     LCDPRT_R					;LCD vs Printer output indication - output to LCD
   20947/    6A21 : A7                      ANA     A
   20948/    6A22 : CC 6E 42                CZ      R_INV_CHAR_DISABLE       	;Cancel inverse character mode
   20949/    6A25 : D1                      POP     D							;restore return value
   20950/    6A26 : C9                      RET
   20951/    6A27 :                     ;
   20952/    6A27 :                     ; Compare DE with Line ptr for row in A.
   20953/    6A27 :                     ; Updates TXTLINTBL_R if not equal
   20954/    6A27 :                     ;
   20955/    6A27 :                     ; OUT:
   20956/    6A27 :                     ;	Z		set if equal
   20957/    6A27 :                     ;
   20958/    6A27 :                     L_CMP_LINEPTR_DE:
   20959/    6A27 : D5                      PUSH    D
   20960/    6A28 :                     ; Get address in .DO file of start of row in A. HL points to index into TXTLINTBL_R on return
   20961/    6A28 : CD 48 6A                CALL    L_GET_LINEPTR
   20962/    6A2B : C3 32 6A                JMP     +
   20963/    6A2E :                     ;
   20964/    6A2E :                     ; Compare DE with Line ptr for current row
   20965/    6A2E :                     ; Update TXTLINTBL_R if not equal
   20966/    6A2E :                     ;
   20967/    6A2E :                     ; OUT:
   20968/    6A2E :                     ;	Z		set if equal
   20969/    6A2E :                     ;
   20970/    6A2E :                     L_CMP_CRS_LINEPTR_DE:
   20971/    6A2E : D5                      PUSH    D							;save DE
   20972/    6A2F :                     ; Get address in .DO file of start of current row to DE. HL points to index into TXTLINTBL_R on return
   20973/    6A2F : CD 45 6A                CALL    L_GET_CRS_LINEPTR
   20974/    6A32 : 4F                  +	MOV     C,A							;save A
   20975/    6A33 : E3                      XTHL								;save HL. Pushed DE to HL
   20976/    6A34 : (MACRO)                 COMPAR								;Compare start of row and HL: HL - DE
   20977/    6A35 : 79                      MOV     A,C							;retrieve A
   20978/    6A36 : EB                      XCHG								;HL to DE
   20979/    6A37 : E1                      POP     H							;restore saved HL
   20980/    6A38 : C8                      RZ									;retif start of row == HL  
   20981/    6A39 : 73                      MOV     M,E							;store DE at index into TXTLINTBL_R
   20982/    6A3A : 23                      INX     H
   20983/    6A3B : 72                      MOV     M,D
   20984/    6A3C : 79                      MOV     A,C							;retrieve A
   20985/    6A3D : C9                      RET
   20986/    6A3E :                     
   20987/    6A3E :                     L_GETLSTLINE:
   20988/    6A3E : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   20989/    6A41 : 3C                      INR     A							;Increment to the line below bottom of LCD
   20990/    6A42 : C3 48 6A                JMP     L_GET_LINEPTR				;Get address in .DO file of start of row in 'A'  
   20991/    6A45 :                     ;
   20992/    6A45 :                     ; Get address in .DO file of start of current row using Line Starts array
   20993/    6A45 :                     ;
   20994/    6A45 :                     ; OUT:
   20995/    6A45 :                     ;	A	target row number. range 1..8
   20996/    6A45 :                     ;	DE	address in .DO file
   20997/    6A45 :                     ;
   20998/    6A45 :                     L_GET_CRS_LINEPTR:
   20999/    6A45 : 3A 39 F6                LDA     CSRY_R						;Cursor row (1-8)
   21000/    6A48 :                     ;
   21001/    6A48 :                     ; Get address in .DO file of start of row in 'A' using Line Starts array
   21002/    6A48 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 364 - 9/5/2025 20:20:35


   21003/    6A48 :                     ; IN:
   21004/    6A48 :                     ;	A	target row number. range 1..8
   21005/    6A48 :                     ; OUT:
   21006/    6A48 :                     ;	A	target row number. range 1..8
   21007/    6A48 :                     ;	DE	line ptr in .DO file
   21008/    6A48 :                     ;
   21009/    6A48 :                     L_GET_LINEPTR:
   21010/    6A48 : 5F                      MOV     E,A							;zero extend A to DE, base 1
   21011/    6A49 : 16 00                   MVI     D,00H
   21012/    6A4B : 21 E9 F6                LXI     H,TXTLINTBL_R-2				;Line Starts Table - 2 since row number is base 1
   21013/    6A4E : 19                      DAD     D							;add target row number twice (word offset) to HL
   21014/    6A4F : 19                      DAD     D
   21015/    6A50 : (MACRO)             	GETDEFROMMNOINC						;get line ptr in .DO file to DE
   21016/    6A53 : 2B                      DCX     H							;backup to line ptr
   21017/    6A54 : C9                      RET
   21018/    6A55 :                     ;
   21019/    6A55 :                     ; result in DE
   21020/    6A55 :                     ;
   21021/    6A55 :                     L_GET_PREV_LINEPTR:
   21022/    6A55 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row . Returns CSRY_R in A, line ptr in .DO file in DE
   21023/    6A58 : 3D                      DCR     A
   21024/    6A59 : CA 61 6A                JZ      L_CMP_DOLOAD_DE				;brif CSRY_R was 1
   21025/    6A5C :                     ; CSRY_R != 1
   21026/    6A5C :                     ; returned DE value not used.
   21027/    6A5C : 2B                      DCX     H							;backup to line ptr of previous row
   21028/    6A5D : 56                      MOV     D,M							;get DE from M
   21029/    6A5E : 2B                      DCX     H
   21030/    6A5F : 5E                      MOV     E,M
   21031/    6A60 : C9                      RET
   21032/    6A61 :                     ;
   21033/    6A61 :                     ; compare DE with [DOLOAD_R]
   21034/    6A61 :                     ;
   21035/    6A61 :                     L_CMP_DOLOAD_DE:
   21036/    6A61 : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   21037/    6A64 : (MACRO)                 COMPAR								;Compare line ptr and [DOLOAD_R]: HL - DE
   21038/    6A65 : DA 6C 6A                JC      +							;brif [DOLOAD_R] < line ptr
   21039/    6A68 : 11 00 00                LXI     D,0
   21040/    6A6B : C9                      RET									;carry clear
   21041/    6A6C : D5                  +	PUSH    D							;save line ptr
   21042/    6A6D : 1B                      DCX     D							;end of previous line?
   21043/    6A6E : (MACRO)                 COMPAR								;Compare (line ptr - 1) and [DOLOAD_R]: HL - DE
   21044/    6A6F : D2 8A 6A                JNC     L_CMP_DOLOAD_DE_1			;brif [DOLOAD_R] >= (line ptr - 1)
   21045/    6A72 : 1B                  -	DCX     D
   21046/    6A73 : (MACRO)                 COMPAR								;Compare (line ptr - 2) and [DOLOAD_R]: HL - DE
   21047/    6A74 : D2 8A 6A                JNC     L_CMP_DOLOAD_DE_1			;brif [DOLOAD_R] >= (line ptr - 1)
   21048/    6A77 : 1A                      LDAX    D							;get char
   21049/    6A78 :                     ; Find end of line
   21050/    6A78 : FE 0A                   CPI     0AH							;LF
   21051/    6A7A : C2 72 6A                JNZ     -							;brif char != 0AH: loop
   21052/    6A7D : 1B                      DCX     D							;backup line ptr
   21053/    6A7E : (MACRO)                 COMPAR								;Compare DE and [DOLOAD_R]: HL - DE
   21054/    6A7F : D2 8A 6A                JNC     L_CMP_DOLOAD_DE_1			;brif [DOLOAD_R] >= DE
   21055/    6A82 : 1A                      LDAX    D							;previous char
   21056/    6A83 : 13                      INX     D
   21057/    6A84 : FE 0D                   CPI     0DH							;CR
   21058/    6A86 : C2 72 6A                JNZ     -							;brif char != CR: loop
   21059/    6A89 : 13                      INX     D
   21060/    6A8A :                     L_CMP_DOLOAD_DE_1:
   21061/    6A8A : D5                      PUSH    D							;save line ptr
   21062/    6A8B : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into line buffer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 365 - 9/5/2025 20:20:35


   21063/    6A8E : C1                      POP     B
   21064/    6A8F : EB                      XCHG
   21065/    6A90 : D1                      POP     D
   21066/    6A91 : D5                      PUSH    D
   21067/    6A92 : (MACRO)                 COMPAR								;HL - DE
   21068/    6A93 : EB                      XCHG
   21069/    6A94 : DA 8A 6A                JC      L_CMP_DOLOAD_DE_1
   21070/    6A97 : D1                      POP     D
   21071/    6A98 : 59                      MOV     E,C							;DE = BC
   21072/    6A99 : 50                      MOV     D,B
   21073/    6A9A : C9                      RET
   21074/    6A9B :                     ;
   21075/    6A9B :                     L_SAV_PREV_LINEPTR:
   21076/    6A9B : CD 55 6A                CALL    L_GET_PREV_LINEPTR			;result in DE
   21077/    6A9E : EB                      XCHG								;to HL
   21078/    6A9F : 22 E9 F6                SHLD    PREVLINE_R					;store result
   21079/    6AA2 : C9                      RET
   21080/    6AA3 :                     ; 
   21081/    6AA3 :                     ; Find address of 1st char on LCD line for ROW containing line ptr in HL
   21082/    6AA3 :                     ;
   21083/    6AA3 :                     ; IN:
   21084/    6AA3 :                     ;	HL		Line ptr
   21085/    6AA3 :                     ; 
   21086/    6AA3 :                     L_FND_CHAR_HL_LINEPTR:
   21087/    6AA3 : 22 E7 F6                SHLD    TMPLIN_R					;save incoming line ptr
   21088/    6AA6 : E5                      PUSH    H							;store incoming line ptr (updated in loop)
   21089/    6AA7 : 21 EB F6                LXI     H,TXTLINTBL_R				;array of line ptrs
   21090/    6AAA : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   21091/    6AAD : 47                      MOV     B,A							;# of rows: counter
   21092/    6AAE : (MACRO)             -	GETDEFROMM							;get next Line Ptr to DE
   21093/    6AB2 : E5                      PUSH    H							;save current ptr in line ptrs array
   21094/    6AB3 : 2A E7 F6                LHLD    TMPLIN_R					;restore incoming line ptr				
   21095/    6AB6 : (MACRO)                 COMPAR								;Compare current line ptr and incoming line ptr: HL - DE
   21096/    6AB7 : DA C4 6A                JC      +							;brif incoming line ptr < DE: HL pushed
   21097/    6ABA : E1                      POP     H							;restore ptr in line ptrs array
   21098/    6ABB : EB                      XCHG								;current line ptr to HL
   21099/    6ABC : E3                      XTHL								;swap HL and [SP]: update incoming line ptr
   21100/    6ABD : EB                      XCHG								;ptr in line ptrs array back to HL
   21101/    6ABE : 05                      DCR     B							;# of rows
   21102/    6ABF : F2 AE 6A                JP      -							;brif B >= 0
   21103/    6AC2 : F3                      DI 
   21104/    6AC3 : 76                      HLT									;TODO Serious error: current line ptr not in TXTLINTBL_R
   21105/    6AC4 :                     ;
   21106/    6AC4 :                     ; Found a line ptr in TXTLINTBL_R >= incoming line Ptr
   21107/    6AC4 :                     ;
   21108/    6AC4 : EB                  +	XCHG								;next line ptr to DE
   21109/    6AC5 : E1                      POP     H							;remove current ptr in TXTLINTBL_R table
   21110/    6AC6 : E1                      POP     H							;updated incoming line ptr
   21111/    6AC7 :                     ;
   21112/    6AC7 :                     ; Get ROW/COL of char in .DO file at (DE) HL=Start of current row.
   21113/    6AC7 :                     ;
   21114/    6AC7 :                     L_GET_ROW_COL:
   21115/    6AC7 : E5                      PUSH    H							;Start of target line ptr
   21116/    6AC8 : 21 94 F8                LXI     H,LINBUF_R					;line buffer
   21117/    6ACB : 22 92 F8                SHLD    CURPOS_R					;set current char position in line buffer
   21118/    6ACE : AF                      XRA     A
   21119/    6ACF : 32 90 F8                STA     DSPCOFF_R					;clear Current column offset within display line buffer
   21120/    6AD2 : E1                      POP     H							;Start of target line ptr
   21121/    6AD3 : 2B                      DCX     H							;pre-decrement for loop
   21122/    6AD4 : 23                  -	INX     H							;next target line ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 366 - 9/5/2025 20:20:35


   21123/    6AD5 : (MACRO)                 COMPAR								;Compare target line ptr and next line ptr: HL - DE
   21124/    6AD6 : D2 EE 6A                JNC     +							;brif HL >= DE
   21125/    6AD9 : 7E                      MOV     A,M							;get char
   21126/    6ADA : CD B2 68                CALL    L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   21127/    6ADD : 7E                      MOV     A,M							;get char
   21128/    6ADE : FE 20                   CPI     ' '
   21129/    6AE0 : D2 D4 6A                JNC     -							;brif char >= ' ': loop
   21130/    6AE3 : FE 09                   CPI     09H							;TAB
   21131/    6AE5 : CA D4 6A                JZ      -							;brif char == TAB: loop
   21132/    6AE8 : CD B2 68                CALL    L_ADD_BUFF_TABS				;Add character in A to line buffer with TAB expansion
   21133/    6AEB : C3 D4 6A                JMP     -							;loop
   21134/    6AEE : 3A 90 F8            +	LDA     DSPCOFF_R					;Current column offset within display line buffer
   21135/    6AF1 : 3C                      INR     A							;increment it
   21136/    6AF2 : 67                      MOV     H,A							;to H
   21137/    6AF3 : CD CD 63                CALL    L_GET_LCD_ROWS				;Get # of LCD rows based on label protect, preserve flags
   21138/    6AF6 : 90                      SUB     B
   21139/    6AF7 : 6F                      MOV     L,A
   21140/    6AF8 : C9                      RET
   21141/    6AF9 :                     ;
   21142/    6AF9 :                     ; Get address in .DO file (DE has start of line) of current cursor position to DE
   21143/    6AF9 :                     ;
   21144/    6AF9 :                     L_GET_CRSPOS_ADDR:
   21145/    6AF9 : CD 45 6A                CALL    L_GET_CRS_LINEPTR			;Get address in .DO file of start of current row in DE
   21146/    6AFC : D5                      PUSH    D							;save start of line address
   21147/    6AFD : 3C                      INR     A							;Increment the row number
   21148/    6AFE : CD 48 6A                CALL    L_GET_LINEPTR				;Get address in .DO file of start of next row
   21149/    6B01 : 7A                      MOV     A,D							;test DE for 0FFFFH
   21150/    6B02 : A3                      ANA     E
   21151/    6B03 : 3C                      INR     A
   21152/    6B04 : C2 0C 6B                JNZ     L_GET_CRSPOS_1				;brif DE != 0FFFFH
   21153/    6B07 :                     ;DE == 0FFFFH
   21154/    6B07 : 2A 62 FB                LHLD    TXTEND_R					;Load pointer to end of .DO file to DE
   21155/    6B0A : EB                      XCHG
   21156/    6B0B : 13                      INX     D							;preincrement
   21157/    6B0C :                     L_GET_CRSPOS_1:
   21158/    6B0C : 1B                      DCX     D							;get previous char
   21159/    6B0D : 1A                      LDAX    D
   21160/    6B0E : FE 0A                   CPI     0AH							;LF
   21161/    6B10 : C2 1B 6B                JNZ     +							;brif A != LF
   21162/    6B13 :                     ; A == LF
   21163/    6B13 : 1B                      DCX     D							;get previous char
   21164/    6B14 : 1A                      LDAX    D
   21165/    6B15 : FE 0D                   CPI     0DH							;CR
   21166/    6B17 : CA 1B 6B                JZ      +							;brif A == CR
   21167/    6B1A :                     ; A != CR
   21168/    6B1A : 13                      INX     D							;point again to LF
   21169/    6B1B :                     ; Test the next value of DE to see if it is where the cursor is located
   21170/    6B1B : E1                  +	POP     H							;retrieve address of start of current line in .DO file
   21171/    6B1C : E5                      PUSH    H
   21172/    6B1D : CD C7 6A                CALL    L_GET_ROW_COL				;Get ROW/COL of char in .DO file at (DE)
   21173/    6B20 : 3A 3A F6                LDA     CSRX_R						;Cursor column (1-40)
   21174/    6B23 : BC                      CMP     H							;Test if DE points to current Cursor column
   21175/    6B24 : DA 0C 6B                JC      L_GET_CRSPOS_1				;Jump to decrement DE if location not found yet
   21176/    6B27 : E1                      POP     H							;Pop address of start of current line in .DO file
   21177/    6B28 : EB                      XCHG								;Put the address in DE, HL has COL/ROW
   21178/    6B29 : C9                      RET
   21179/    6B2A :                     ;
   21180/    6B2A :                     ; Find end of current DO file
   21181/    6B2A :                     ;
   21182/    6B2A :                     L_FNDEOFDO:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 367 - 9/5/2025 20:20:35


   21183/    6B2A : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited
   21184/    6B2D :                     ; Find EOF at HL Text Line
   21185/    6B2D :                     L_FNDEOFTXT:
   21186/    6B2D : 3E 1A                   MVI     A,1AH						;^Z
   21187/    6B2F :                     ; loop assumes there always will be a ^Z
   21188/    6B2F : BE                  -	CMP     M
   21189/    6B30 : 23                      INX     H							;next
   21190/    6B31 : C2 2F 6B                JNZ     -							;brif M != ^Z
   21191/    6B34 : 2B                      DCX     H							;backup
   21192/    6B35 : 22 62 FB                SHLD    TXTEND_R					;save ptr
   21193/    6B38 : C9                      RET
   21194/    6B39 :                     ;
   21195/    6B39 :                     ; This starts at the beginning of the .DO file and calculates
   21196/    6B39 :                     ; the Line Starts array for the LCD so that the address specified in
   21197/    6B39 :                     ; HL will be visible on the screen.
   21198/    6B39 :                     ;
   21199/    6B39 :                     ; IN:
   21200/    6B39 :                     ;	A		Line Count
   21201/    6B39 :                     ;	DE		ptr to edit lines start
   21202/    6B39 :                     ;
   21203/    6B39 :                     L_CALC_LINE_STRTS:
   21204/    6B39 : F5                      PUSH    PSW							;save Line Count
   21205/    6B3A : EB                      XCHG
   21206/    6B3B : 2A 67 F7                LHLD    DOLOAD_R					;Load start address of .DO file being edited to DE
   21207/    6B3E : EB                      XCHG
   21208/    6B3F : E5                  -	PUSH    H							;Push address in .DO file for display
   21209/    6B40 : D5                      PUSH    D							;Push beginning of .DO file address
   21210/    6B41 : CD DF 67                CALL    L_BDL_LINE_DE				;Build next line from .DO file at (DE) into LINBUF_R. Returns DE
   21211/    6B44 : C1                      POP     B							;Restore beginning of .DO file address to BC
   21212/    6B45 : E1                      POP     H							;Restore address in .DO file to display
   21213/    6B46 : (MACRO)                 COMPAR								;HL - DE
   21214/    6B47 : D2 3F 6B                JNC     -							;brif HL >= DE
   21215/    6B4A : 60                      MOV     H,B							;HL = BC
   21216/    6B4B : 69                      MOV     L,C
   21217/    6B4C : C1                      POP     B							;Pop line count to display
   21218/    6B4D : 05                      DCR     B							;Decrement line count to display (1 based)
   21219/    6B4E : C8                      RZ									;retif done
   21220/    6B4F : EB                      XCHG
   21221/    6B50 : C5                  -	PUSH    B							;save loop counter
   21222/    6B51 : CD 61 6A                CALL    L_CMP_DOLOAD_DE
   21223/    6B54 : C1                      POP     B							;restore loop counter
   21224/    6B55 : 7A                      MOV     A,D							;test DE
   21225/    6B56 : B3                      ORA     E
   21226/    6B57 : 2A 67 F7                LHLD    DOLOAD_R					;preload start address of .DO file being edited
   21227/    6B5A : C8                      RZ									;retif DE == 0
   21228/    6B5B : 05                      DCR     B
   21229/    6B5C : C2 50 6B                JNZ     -
   21230/    6B5F : EB                      XCHG
   21231/    6B60 : C9                      RET
   21232/    6B61 :                     ;
   21233/    6B61 :                     ; Insert A into text file at M
   21234/    6B61 :                     ;
   21235/    6B61 :                     R_INSERT_A_INTO_FILE:				  	;6B61H
   21236/    6B61 : 01 01 00                LXI     B,0001H
   21237/    6B64 : F5                      PUSH    PSW							;save A
   21238/    6B65 : CD 6D 6B                CALL    MAKHOL						;Insert BC spaces at M
   21239/    6B68 : C1                      POP     B							;restore A to B
   21240/    6B69 : D8                      RC									;return if no space
   21241/    6B6A : 70                      MOV     M,B							;update file
   21242/    6B6B : 23                      INX     H							;next
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 368 - 9/5/2025 20:20:35


   21243/    6B6C : C9                      RET
   21244/    6B6D :                     ;
   21245/    6B6D :                     ; Insert BC spaces at M
   21246/    6B6D :                     ;
   21247/    6B6D :                     ;  In order to know the free area's size, STRGEND_R
   21248/    6B6D :                     ;  is the best pointer. The value of STRGEND_R and your
   21249/    6B6D :                     ;  file's size should be less than [SP] - 120. The 120
   21250/    6B6D :                     ;  bytes are reserved for the stack. If there is enough
   21251/    6B6D :                     ;  room, MAKHOL shifts all data between the specified
   21252/    6B6D :                     ;  address and STRGEND_R. If not MAKHOL returns with carry
   21253/    6B6D :                     ;  set. The MAKHOL operation is detailed below:
   21254/    6B6D :                     ; 
   21255/    6B6D :                     ;  Return with carry set (out of memory)
   21256/    6B6D :                     ;  if STRGEND_R + hole size < SP - minimum stack size (120 bytes)
   21257/    6B6D :                     ;  Move the data between the specified address and STRGEND_R.
   21258/    6B6D :                     ;  Adjust the pointers ASCTAB, BINTAB, VARTAB, ARYTAB and STRGEND_R.
   21259/    6B6D :                     ;  Return
   21260/    6B6D :                     ;  It is unnecessary to care about the pointers unless you
   21261/    6B6D :                     ;  make your own MAKHOL routine. The MAKHOL in Main ROM
   21262/    6B6D :                     ;  manages the pointers automatically. But it does not
   21263/    6B6D :                     ;  revise the starting addresses in the directory fields.
   21264/    6B6D :                     ;  For this, use LNKFIL.
   21265/    6B6D :                     ; 
   21266/    6B6D :                     ; NOTE: When you make a hole at ASCTAB to create
   21267/    6B6D :                     ;  a new DO file, you have to adjust the pointers
   21268/    6B6D :                     ;  BINTAB, VARTAB, and ARYTAB. ASCTAB must be
   21269/    6B6D :                     ;  modified only when you make a hole at ASCTAB
   21270/    6B6D :                     ;  to register a new BA file.
   21271/    6B6D :                     ; 
   21272/    6B6D :                     ;  Obviously, calling MAKHOL too often results in
   21273/    6B6D :                     ;  excessive overhead. It is preferable to call
   21274/    6B6D :                     ;  MAKHOL with a large number in the BC register,
   21275/    6B6D :                     ;  and shrink the file to minimum size later using MASDEL.
   21276/    6B6D :                     ;
   21277/    6B6D :                     ; returns with carry set if no space
   21278/    6B6D :                     ;
   21279/    6B6D :                     MAKHOL:									;6B6DH
   21280/    6B6D : EB                      XCHG
   21281/    6B6E : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer
   21282/    6B71 : 09                      DAD     B
   21283/    6B72 : D8                      RC									;return with carry set if overflow
   21284/    6B73 : 3E 88                   MVI     A,88H						;subtract 0FF88H (-120) from HL
   21285/    6B75 : 95                      SUB     L
   21286/    6B76 : 6F                      MOV     L,A
   21287/    6B77 : 3E FF                   MVI     A,0FFH
   21288/    6B79 : 9C                      SBB     H
   21289/    6B7A : 67                      MOV     H,A
   21290/    6B7B : D8                      RC									;return with carry set if overflow     
   21291/    6B7C : 39                      DAD     SP							;may set carry
   21292/    6B7D : 3F                      CMC									;complement carry
   21293/    6B7E : D8                      RC									;return with carry set if no space
   21294/    6B7F :                     ;
   21295/    6B7F :                     ; Move all files / variables after this file
   21296/    6B7F :                     ;
   21297/    6B7F :                     L_MOV_DATA:
   21298/    6B7F : C5                      PUSH    B							;save length
   21299/    6B80 : CD C3 6B                CALL    L_UPD_PTRS					;Update CO and variable pointers using BC (add)
   21300/    6B83 : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer to HL
   21301/    6B86 : 7D                      MOV     A,L							;DE = HL - DE
   21302/    6B87 : 93                      SUB     E
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 369 - 9/5/2025 20:20:35


   21303/    6B88 : 5F                      MOV     E,A
   21304/    6B89 : 7C                      MOV     A,H
   21305/    6B8A : 9A                      SBB     D
   21306/    6B8B : 57                      MOV     D,A
   21307/    6B8C : D5                      PUSH    D							;save HL - DE
   21308/    6B8D : 5D                      MOV     E,L							;set DE = current Unused memory pointer STRGEND_R
   21309/    6B8E : 54                      MOV     D,H
   21310/    6B8F : 09                      DAD     B							;add spaces length
   21311/    6B90 : 22 B6 FB                SHLD    STRGEND_R					;update Unused memory pointer STRGEND_R
   21312/    6B93 : EB                      XCHG
   21313/    6B94 : 1B                      DCX     D							;previous Unused memory pointer
   21314/    6B95 : 2B                      DCX     H							;new Unused memory pointer
   21315/    6B96 : C1                      POP     B							;restore HL - DE
   21316/    6B97 : 78                      MOV     A,B							;test BC
   21317/    6B98 : B1                      ORA     C
   21318/    6B99 : C4 E6 6B                CNZ     R_MOVE_BC_BYTES_DEC         ;Move BC bytes from M to (DE) with decrement
   21319/    6B9C : 23                      INX     H							;new Unused memory pointer
   21320/    6B9D : C1                      POP     B							;restore spaces length
   21321/    6B9E : C9                      RET
   21322/    6B9F :                     ;
   21323/    6B9F :                     ; Delete BC characters/spaces at M
   21324/    6B9F :                     ;
   21325/    6B9F :                     ;  This routine performs the reverse operation of MAKHOL.
   21326/    6B9F :                     ;  The data above the HL + BC is moved up. And the pointers
   21327/    6B9F :                     ;  BINTAB, VARTAB, ARYTAB are modified. If you use this
   21328/    6B9F :                     ;  routine for shrinking a hole of BA file, you must adjust
   21329/    6B9F :                     ;  ASCTAB with the negated [BC] after exiting this routine,
   21330/    6B9F :                     ;  since MASDEL does not correct ASCTAB.
   21331/    6B9F :                     ; 
   21332/    6B9F :                     ;  Also, you can adjust the TXTTAB by using this negated
   21333/    6B9F :                     ;  BC counter if necessary. You have to adjust TXTTAB when
   21334/    6B9F :                     ;  you remove a BA file which is located at a lower address
   21335/    6B9F :                     ;  than that pointed to by TXTTAB.
   21336/    6B9F :                     ; 
   21337/    6B9F :                     ;  If you want to utilize this routine for CO file,
   21338/    6B9F :                     ;  you must correct BINTAB after calling MASDEL. MASDEL was
   21339/    6B9F :                     ;  designed for deleting bytes from a DO file, so it
   21340/    6B9F :                     ;  adjusts BINTAB down by the deletion size. But when
   21341/    6B9F :                     ;  deleting a CO file, BINTAB shouldn't change. To deal
   21342/    6B9F :                     ;  with this, you need to save and restore BINTAB across
   21343/    6B9F :                     ;  calls to MASDEL, or add back in the number of bytes you
   21344/    6B9F :                     ;  are deleting to BINTAB.
   21345/    6B9F :                     ;
   21346/    6B9F :                     ; IN:
   21347/    6B9F :                     ;	BC		count (negated on exit)
   21348/    6B9F :                     ;	HL		M ptr
   21349/    6B9F :                     ;
   21350/    6B9F :                     MASDEL:									;6B9FH
   21351/    6B9F : 78                      MOV     A,B							;test BC
   21352/    6BA0 : B1                      ORA     C
   21353/    6BA1 : C8                      RZ							 		;retif BC == 0
   21354/    6BA2 : E5                      PUSH    H							;save args
   21355/    6BA3 : C5                      PUSH    B
   21356/    6BA4 : E5                      PUSH    H
   21357/    6BA5 : 09                      DAD     B							;HL += BC
   21358/    6BA6 : EB                      XCHG								;move to DE
   21359/    6BA7 : 2A B6 FB                LHLD    STRGEND_R					;Unused memory pointer to DE
   21360/    6BAA : EB                      XCHG
   21361/    6BAB : 7B                      MOV     A,E							;BC = STRGEND_R - HL
   21362/    6BAC : 95                      SUB     L
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 370 - 9/5/2025 20:20:35


   21363/    6BAD : 4F                      MOV     C,A
   21364/    6BAE : 7A                      MOV     A,D
   21365/    6BAF : 9C                      SBB     H
   21366/    6BB0 : 47                      MOV     B,A
   21367/    6BB1 : D1                      POP     D
   21368/    6BB2 : 78                      MOV     A,B							;test BC
   21369/    6BB3 : B1                      ORA     C
   21370/    6BB4 : C4 DB 6B                CNZ     R_MOVE_BC_BYTES_INC         ;Move BC bytes from M to (DE) with increment
   21371/    6BB7 : EB                      XCHG								;new Unused memory pointer to HL
   21372/    6BB8 : 22 B6 FB                SHLD    STRGEND_R					;update Unused memory pointer
   21373/    6BBB : C1                      POP     B
   21374/    6BBC :                     ;
   21375/    6BBC :                     ; compute two's complement of BC
   21376/    6BBC :                     ;
   21377/    6BBC : AF                      XRA     A							;0 - C
   21378/    6BBD : 91                      SUB     C
   21379/    6BBE : 4F                      MOV     C,A
   21380/    6BBF : 9F                      SBB     A							;carry
   21381/    6BC0 : 90                      SUB     B
   21382/    6BC1 : 47                      MOV     B,A
   21383/    6BC2 : E1                      POP     H
   21384/    6BC3 :                     ;
   21385/    6BC3 :                     ; Update CO and variable pointers using BC (add). BC negative.
   21386/    6BC3 :                     ;
   21387/    6BC3 :                     L_UPD_PTRS:
   21388/    6BC3 : E5                      PUSH    H							;save HL
   21389/    6BC4 : 2A B0 FB                LHLD    COSTRT_R					;CO files pointer
   21390/    6BC7 : 09                      DAD     B
   21391/    6BC8 : 22 B0 FB                SHLD    COSTRT_R					;Update CO files pointer
   21392/    6BCB : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
   21393/    6BCE : 09                      DAD     B
   21394/    6BCF : 22 B2 FB                SHLD    VARTAB_R					;Update Start of variable data pointer
   21395/    6BD2 : 2A B4 FB                LHLD    ARYTAB_R					;ptr to Start of array table
   21396/    6BD5 : 09                      DAD     B
   21397/    6BD6 : 22 B4 FB                SHLD    ARYTAB_R					;Update ptr to Start of array table
   21398/    6BD9 : E1                      POP     H							;restore HL
   21399/    6BDA : C9                      RET
   21400/    6BDB :                     ;
   21401/    6BDB :                     ;Move BC bytes from M to (DE) with increment
   21402/    6BDB :                     ;
   21403/    6BDB :                     R_MOVE_BC_BYTES_INC:				    ;6BDBH
   21404/    6BDB : 7E                      MOV     A,M
   21405/    6BDC : 12                      STAX    D
   21406/    6BDD : 23                      INX     H
   21407/    6BDE : 13                      INX     D
   21408/    6BDF : 0B                      DCX     B
   21409/    6BE0 : 78                      MOV     A,B
   21410/    6BE1 : B1                      ORA     C
   21411/    6BE2 : C2 DB 6B                JNZ     R_MOVE_BC_BYTES_INC      	;Move BC bytes from M to (DE) with increment
   21412/    6BE5 : C9                      RET
   21413/    6BE6 :                     ;
   21414/    6BE6 :                     ;Move BC bytes from M to (DE) with decrement
   21415/    6BE6 :                     ;
   21416/    6BE6 :                     ; OUT:
   21417/    6BE6 :                     ;	DE, HL	updated
   21418/    6BE6 :                     ;	BC		0
   21419/    6BE6 :                     ;
   21420/    6BE6 :                     R_MOVE_BC_BYTES_DEC:				    ;6BE6H
   21421/    6BE6 : 7E                      MOV     A,M
   21422/    6BE7 : 12                      STAX    D
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 371 - 9/5/2025 20:20:35


   21423/    6BE8 : 2B                      DCX     H
   21424/    6BE9 : 1B                      DCX     D
   21425/    6BEA : 0B                      DCX     B
   21426/    6BEB : 78                      MOV     A,B
   21427/    6BEC : B1                      ORA     C
   21428/    6BED : C2 E6 6B                JNZ     R_MOVE_BC_BYTES_DEC      	;Move BC bytes from M to (DE) with decrement
   21429/    6BF0 : C9                      RET
   21430/    6BF1 :                     ;
   21431/    6BF1 :                     ; ROM programs directory entries
   21432/    6BF1 :                     ;
   21433/    6BF1 :                     R_ROM_CAT_ENTRIES:						;6BF1H
   21434/    6BF1 : B0                      DB      _DIR_ACTIVE|_DIR_COFILE|_DIR_INROM	;type 0B0H
   21435/    6BF2 : 49 6C                   DW      R_BASIC_ENTRY				;6C49H
   21436/    6BF4 : 42 41 53 49 43 20       DB      "BASIC  ",00H
                    20 00 
   21437/    6BFC : B0                      DB      _DIR_ACTIVE|_DIR_COFILE|_DIR_INROM	;type 0B0H
   21438/    6BFD : EE 5D                   DW      R_TEXT_ENTRY				;5DEEH
   21439/    6BFF : 54 45 58 54 20 20       DB      "TEXT   ",00H
                    20 00 
   21440/    6C07 : B0                      DB      _DIR_ACTIVE|_DIR_COFILE|_DIR_INROM	;type 0B0H
   21441/    6C08 : 46 51                   DW      R_TELCOM_ENTRY				;5146H
   21442/    6C0A : 54 45 4C 43 4F 4D       DB      "TELCOM ",00H
                    20 00 
   21443/    6C12 : B0                      DB      _DIR_ACTIVE|_DIR_COFILE|_DIR_INROM	;type 0B0H
   21444/    6C13 : 68 5B                   DW      R_ADDRSS_ENTRY				;5B68H
   21445/    6C15 : 41 44 44 52 53 53       DB      "ADDRSS ",00H
                    20 00 
   21446/    6C1D : B0                      DB      _DIR_ACTIVE|_DIR_COFILE|_DIR_INROM	;type 0B0H
   21447/    6C1E : 6F 5B                   DW      R_SCHEDL_ENTRY				;5B6FH
   21448/    6C20 : 53 43 48 45 44 4C       DB      "SCHEDL ",00H
                    20 00 
   21449/    6C28 : 88                      DB      _DIR_ACTIVE|_DIR_INVIS		;type 88H
   21450/    6C29 : 00 00                   DW      0000H						;no associated function
   21451/    6C2B : 00 53 75 7A 75 6B       DB      00H,"Suzuki",' '			;20H
                    69 20 
   21452/    6C33 : C8                      DB      _DIR_ACTIVE|_DIR_DOFILE|_DIR_INVIS	;type 0C8H
   21453/    6C34 : 00 00                   DW      0000H						;no associated function
   21454/    6C36 : =>FALSE             	if		HWSCROLL
   21455/    6C36 :                     ;	•	1 byte for page number storage
   21456/    6C36 :                     ;	•	1 byte for scroll active flag
   21457/    6C36 :                     ;	•	These 2 bytes are copied to RAM.
   21458/    6C36 :                     	DB		00H,"Haya"
   21459/    6C36 :                     	DB		00H,00H,69H
   21460/    6C36 : =>TRUE              	else
   21461/    6C36 : 00 48 61 79 61 73       DB      00H,"Hayash",'i'			;69H
                    68 69 
   21462/    6C3E : [21454]             	endif
   21463/    6C3E : 48                      DB      _DIR_DOFILE|_DIR_INVIS		;type 48H
   21464/    6C3F : 00 00                   DW      0000H						;no associated function
   21465/    6C41 : 00 52 69 63 6B 59       DB      00H,"RickY ",20H
                    20 20 
   21466/    6C49 :                     ;
   21467/    6C49 :                     ;BASIC Entry point
   21468/    6C49 :                     ;
   21469/    6C49 :                     R_BASIC_ENTRY:							;6C49H
   21470/    6C49 : CD 7F 6C                CALL    L_SET_STRBUF
   21471/    6C4C : CD A6 7E                CALL    R_DISP_MODEL				;Display TRS-80 Model number & Free bytes on LCD
   21472/    6C4F : 21 99 F9                LXI     H,SUZUKI_R					;Suzuki Directory Entry
   21473/    6C52 : 22 8C FA                SHLD    RAMDIRPTR_R
   21474/    6C55 : 2A 9A F9                LHLD    SUZUKI_R+1					;BASIC program not saved pointer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 372 - 9/5/2025 20:20:35


   21475/    6C58 : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
   21476/    6C5B :                     L_ALT_BASIC_ENTRY:
   21477/    6C5B : CD 9C 6C                CALL    R_LOAD_BASIC_FKEYS			;Copy BASIC Function key table to key definition area
   21478/    6C5E : CD 9E 5A                CALL    R_DISP_FKEYS				;Display function keys on 8th line
   21479/    6C61 : AF                      XRA     A
   21480/    6C62 : 32 50 F6                STA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80); BIT 6=in TELCOM (0x40)
   21481/    6C65 : 3C                      INR     A
   21482/    6C66 : 32 AD FA                STA     LINENA_R					;Label line enable flag
   21483/    6C69 : 21 78 6C                LXI     H,L_LLIST_MSG				;Code Based. 
   21484/    6C6C : 22 8A F8                SHLD    SHFTPRNT_R
   21485/    6C6F : CD F0 05                CALL    R_UPDATE_LINE_ADDR         	;Update line addresses for current BASIC program
   21486/    6C72 : CD 28 3F                CALL    R_INIT_BASIC_VARS			;Initialize BASIC Variables for new execution
   21487/    6C75 : C3 02 05                JMP     R_GO_BASIC_RDY_OK			;Vector to BASIC ready - print Ok
   21488/    6C78 :                     
   21489/    6C78 :                     L_LLIST_MSG:
   21490/    6C78 : 6C 6C 69 73 74 0D   	DB		"llist", 0DH, 00H
                    00 
   21491/    6C7F :                     
   21492/    6C7F :                     L_SET_STRBUF:
   21493/    6C7F : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
   21494/    6C82 : 01 78 01                LXI     B,0178H
   21495/    6C85 : 09                      DAD     B							;HL = [VARTAB_R]+0178H (376.)
   21496/    6C86 : EB                      XCHG
   21497/    6C87 : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   21498/    6C8A : (MACRO)                 COMPAR								;Compare [VARTAB_R]+0178H (DE) and [MEMSIZ_R] (HL): HL - DE
   21499/    6C8B : DA 8F 6C                JC      +							;brif [MEMSIZ_R] < ([VARTAB_R]+0178H)
   21500/    6C8E : 25                      DCR     H							;HL -= 256
   21501/    6C8F : 22 78 F6            +	SHLD    STRBUF_R					;BASIC string buffer pointer
   21502/    6C92 : C9                      RET
   21503/    6C93 :                     ;
   21504/    6C93 :                     ; Copy key definition area to BASIC Function key table
   21505/    6C93 :                     ;
   21506/    6C93 :                     R_SET_BASIC_FKEYS:						;6C93H
   21507/    6C93 : 21 89 F7                LXI     H,FNKSTR_R				    ;Function key definition area
   21508/    6C96 : 11 0A F8                LXI     D,BASFNK_R				    ;Function key definition area (BASIC)
   21509/    6C99 : C3 A2 6C                JMP     +
   21510/    6C9C :                     ;
   21511/    6C9C :                     ; Copy BASIC Function key table to key definition area
   21512/    6C9C :                     ;
   21513/    6C9C :                     R_LOAD_BASIC_FKEYS:				      	;6C9CH
   21514/    6C9C : 21 0A F8                LXI     H,BASFNK_R				  	;Function key definition area (BASIC)
   21515/    6C9F : 11 89 F7                LXI     D,FNKSTR_R				  	;Function key definition area
   21516/    6CA2 : 06 80               +	MVI     B,128						;80H
   21517/    6CA4 : C3 42 25                JMP     R_MOVE_B_BYTES				;Move B bytes from M to (DE)
   21518/    6CA7 :                     ;
   21519/    6CA7 :                     ; Execute Instruction Vector
   21520/    6CA7 :                     ;
   21521/    6CA7 :                     ; IN:
   21522/    6CA7 :                     ;	DE		instruction vector table
   21523/    6CA7 :                     ;
   21524/    6CA7 :                     L_TELCOM_EXEC_CMD:
   21525/    6CA7 : 2B                      DCX     H							;backup input ptr
   21526/    6CA8 : (MACRO)                 CHRGET								;Get next non-white char from M
   21527/    6CA9 :                     L_TELCOM_EXEC_CMD_1:
   21528/    6CA9 : 1A                      LDAX    D
   21529/    6CAA : 3C                      INR     A
   21530/    6CAB : C8                      RZ
   21531/    6CAC : E5                      PUSH    H
   21532/    6CAD : 06 04                   MVI     B,04H
   21533/    6CAF : 1A                  -	LDAX    D
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 373 - 9/5/2025 20:20:35


   21534/    6CB0 : 4F                      MOV     C,A
   21535/    6CB1 : CD E8 0F                CALL    R_CONV_M_TOUPPER			;Get char at M and convert to uppercase
   21536/    6CB4 : B9                      CMP     C
   21537/    6CB5 : 13                      INX     D
   21538/    6CB6 : 23                      INX     H
   21539/    6CB7 : C2 CC 6C                JNZ     L_TELCOM_EXEC_CMD_2
   21540/    6CBA : 05                      DCR     B
   21541/    6CBB : C2 AF 6C                JNZ     -
   21542/    6CBE : F1                      POP     PSW
   21543/    6CBF : E5                      PUSH    H
   21544/    6CC0 : EB                      XCHG
   21545/    6CC1 : (MACRO)             	GETDEFROMMNOINC
   21546/    6CC4 : EB                      XCHG
   21547/    6CC5 : D1                      POP     D
   21548/    6CC6 : E3                      XTHL
   21549/    6CC7 : E5                      PUSH    H
   21550/    6CC8 : EB                      XCHG
   21551/    6CC9 : 24                      INR     H
   21552/    6CCA : 25                      DCR     H
   21553/    6CCB : C9                      RET
   21554/    6CCC :                     L_TELCOM_EXEC_CMD_2:
   21555/    6CCC : 13                      INX     D
   21556/    6CCD : 05                      DCR     B
   21557/    6CCE : C2 CC 6C                JNZ     L_TELCOM_EXEC_CMD_2			;brif B != 0
   21558/    6CD1 : 13                      INX     D
   21559/    6CD2 : E1                      POP     H
   21560/    6CD3 : C3 A9 6C                JMP     L_TELCOM_EXEC_CMD_1
   21561/    6CD6 :                     ;
   21562/    6CD6 :                     ; Re-initialize system without destroying files
   21563/    6CD6 :                     ;
   21564/    6CD6 :                     ; Zero 0FF40H..0FFFCH, basically all RAM >= XONXOFF_R
   21565/    6CD6 :                     ;
   21566/    6CD6 :                     R_RE_INIT_SYSTEM:						;6CD6H
   21567/    6CD6 : F3                      DI 
   21568/    6CD7 : 21 40 FF                LXI     H,XONXOFF_R				    ;address of XON/XOFF protocol control
   21569/    6CDA : 06 BF                   MVI     B,LAST_RAM-XONXOFF_R+1		;size
   21570/    6CDC : CD 0A 4F                CALL    R_CLEAR_MEM				    ;Zero B bytes at M
   21571/    6CDF : 3C                      INR     A							;A == 1
   21572/    6CE0 :                     ;
   21573/    6CE0 :                     ; Warm start reset entry
   21574/    6CE0 :                     ;
   21575/    6CE0 :                     ; IN:
   21576/    6CE0 :                     ;	A		0 or 1
   21577/    6CE0 :                     ;
   21578/    6CE0 :                     R_WARM_RESET:							;6CE0H
   21579/    6CE0 : F5                      PUSH    PSW							;save A
   21580/    6CE1 : F3                      DI
   21581/    6CE2 : 3E 19                   MVI     A,19H						;00011001 RST 7.5 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   21582/    6CE4 : 30                      SIM    
   21583/    6CE5 : (MACRO)                 INPORT	0C8H						;Bidirectional data bus for UART
   21584/    6CE7 : 3E 43                   MVI     A,43H
   21585/    6CE9 : (MACRO)                 OUTPORT	0B8H						;set PIO Command/Status Register
   21586/    6CEB : 3E 05                   MVI     A,05H						;00000101 Group 1: 256 Hz
   21587/    6CED : CD 83 73                CALL    R_SET_CLK_CHIP_MODE      	;Set clock chip mode
   21588/    6CF0 : 3E ED                   MVI     A,0EDH
   21589/    6CF2 : (MACRO)                 OUTPORT	0BAH						;8155 PIO Port B
   21590/    6CF4 : AF                      XRA     A
   21591/    6CF5 : 32 45 FF                STA     PORTE8_R					;Contents of port E8H
   21592/    6CF8 : (MACRO)                 OUTPORT	0E8H						;set Keyboard input and misc. device select
   21593/    6CFA : (MACRO)                 OUTPORT	0A8H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 374 - 9/5/2025 20:20:35


   21594/    6CFC : CD 82 76                CALL    R_CHK_XTRNL_CNTRLER      	;Check for optional external controller
   21595/    6CFF : CD 53 75                CALL    L_SELECT_LCD_DRIVER_ALL 	;Enable all LCD drivers after short delay
   21596/    6D02 : AF                      XRA     A
   21597/    6D03 : (MACRO)                 OUTPORT	0FEH
   21598/    6D05 : CD 53 75                CALL    L_SELECT_LCD_DRIVER_ALL     ;Enable all LCD drivers after short delay
   21599/    6D08 : 3E 3B                   MVI     A,3BH						;00111011B
   21600/    6D0A : (MACRO)                 OUTPORT	0FEH
   21601/    6D0C : CD 4B 75                CALL    L_CLR_LCD_TOP				;Set the display top line to zero for all LCD controllers
   21602/    6D0F : CD 53 75                CALL    L_SELECT_LCD_DRIVER_ALL     ;Enable all LCD drivers after short delay
   21603/    6D12 : 3E 39                   MVI     A,39H						;00111001B
   21604/    6D14 : (MACRO)                 OUTPORT	0FEH
   21605/    6D16 : FB                      EI     
   21606/    6D17 : CD A0 76                CALL    L_XTRNL_CNTRLER_1			;returns carry set if not present
   21607/    6D1A : D2 1E 6D                JNC     +
   21608/    6D1D : AF                  -	XRA     A
   21609/    6D1E : 32 81 FC            +	STA     DVI_STAT_R					;update DVI status
   21610/    6D21 : B7                      ORA     A
   21611/    6D22 : CA 3D 6D                JZ      +							;brif zero: done
   21612/    6D25 : 3A FC FF                LDA     VIDFLG_R
   21613/    6D28 : B7                      ORA     A
   21614/    6D29 : C2 3D 6D                JNZ     +							;brif VIDFLG_R != 0: done
   21615/    6D2C : F1                      POP     PSW							;restore flags
   21616/    6D2D : C8                      RZ									;retif zero
   21617/    6D2E : 2A B2 FB                LHLD    VARTAB_R 					;Start of variable data pointer
   21618/    6D31 : 11 00 E0                LXI     D,0E000H					;Location of init code to be copied from DVI
   21619/    6D34 : (MACRO)                 COMPAR	 							;HL - DE
   21620/    6D35 : D0                      RNC									;Return if not enough space to copy DVI init code
   21621/    6D36 :                     ; DE = 0E000H
   21622/    6D36 : CD B6 76                CALL    L_XTRNL_CNTRLER_CPY			;Copy initialization code from DVI to E000h and execute
   21623/    6D39 : F5                      PUSH    PSW
   21624/    6D3A : DA 1D 6D                JC		-							;brif carry: exit
   21625/    6D3D : F1                  +	POP     PSW
   21626/    6D3E : C9                      RET
   21627/    6D3F :                     ;
   21628/    6D3F :                     ; Send character in A to the printer
   21629/    6D3F :                     ;
   21630/    6D3F :                     R_SEND_A_TO_LPT:						;6D3FH
   21631/    6D3F : C5                      PUSH    B
   21632/    6D40 : 4F                      MOV     C,A
   21633/    6D41 : CD 9F 72            -	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   21634/    6D44 : DA 6A 6D                JC      L_SEND_TO_LPT_EXIT			;brif pressed
   21635/    6D47 : (MACRO)                 INPORT	0BBH						;read 8155 PIO Port C
   21636/    6D49 : E6 06                   ANI     06H
   21637/    6D4B : EE 02                   XRI     02H
   21638/    6D4D : C2 41 6D                JNZ     -
   21639/    6D50 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   21640/    6D53 : 79                      MOV     A,C
   21641/    6D54 : (MACRO)                 OUTPORT	0B9H
   21642/    6D56 : 3A 45 FF                LDA     PORTE8_R					;Contents of port E8H
   21643/    6D59 : 47                      MOV     B,A
   21644/    6D5A : F6 02                   ORI     02H
   21645/    6D5C : (MACRO)                 OUTPORT	0E8H						;set Keyboard input and misc. device select
   21646/    6D5E : 78                      MOV     A,B
   21647/    6D5F : (MACRO)                 OUTPORT	0E8H						;set Keyboard input and misc. device select
   21648/    6D61 : 06 24                   MVI     B,24H						;delay
   21649/    6D63 : 05                  -	DCR     B
   21650/    6D64 : C2 63 6D                JNZ     -
   21651/    6D67 : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   21652/    6D69 : 30                      SIM    
   21653/    6D6A :                     L_SEND_TO_LPT_EXIT:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 375 - 9/5/2025 20:20:35


   21654/    6D6A : 79                      MOV     A,C
   21655/    6D6B : C1                      POP     B
   21656/    6D6C : C9                      RET
   21657/    6D6D :                     ;
   21658/    6D6D :                     ; Check RS232 queue for pending characters
   21659/    6D6D :                     ;
   21660/    6D6D :                     R_CHECK_RS232_QUEUE:					;6D6DH
   21661/    6D6D : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   21662/    6D70 : B7                      ORA     A
   21663/    6D71 : CA 79 6D                JZ		+							;brif not enabled
   21664/    6D74 : 3A 41 FF                LDA     XONXOFF1_R					;XON/XOFF protocol control
   21665/    6D77 : 3C                      INR     A							;test if A == 0FFH
   21666/    6D78 : C8                      RZ
   21667/    6D79 : 3A 86 FF            +	LDA     SERCNT_R					;RS232 buffer count
   21668/    6D7C : B7                      ORA     A
   21669/    6D7D : C9                      RET
   21670/    6D7E :                     ;
   21671/    6D7E :                     ; Get a character from RS232 receive queue
   21672/    6D7E :                     ;
   21673/    6D7E :                     R_READ_RS232_QUEUE:						;6D7EH
   21674/    6D7E : E5                      PUSH    H
   21675/    6D7F : D5                      PUSH    D
   21676/    6D80 : C5                      PUSH    B
   21677/    6D81 : 21 F8 71                LXI     H,L_POP_WREGS_RET			;exit routine (pop all regs except PSW & RET)
   21678/    6D84 : E5                      PUSH    H
   21679/    6D85 : 21 86 FF                LXI     H,SERCNT_R				    ;RS232 buffer count
   21680/    6D88 : CD 9F 72            -	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   21681/    6D8B : D8                      RC									;retif pressed
   21682/    6D8C : CD 6D 6D                CALL    R_CHECK_RS232_QUEUE      	;Check RS232 queue for pending characters
   21683/    6D8F : CA 88 6D                JZ      -							;brif no pending chars: wait
   21684/    6D92 : FE 03                   CPI     03H							;3 chars in queue?
   21685/    6D94 : DC 0B 6E                CC      R_SEND_XON				    ;Send XON (CTRL-Q) out RS232 if < 03H
   21686/    6D97 : F3                      DI 
   21687/    6D98 : 35                      DCR     M							;decrement RS232 buffer count
   21688/    6D99 : CD FC 6D                CALL    R_INC_RS232_QUEUE_IN     	;Calculate address to save next RS232 character
   21689/    6D9C : 7E                      MOV     A,M
   21690/    6D9D : EB                      XCHG								;RS232 Queue ptr to HL
   21691/    6D9E : 23                      INX     H							;ptr += 3
   21692/    6D9F : 23                      INX     H
   21693/    6DA0 : 34                      INR     M
   21694/    6DA1 : 35                      DCR     M							;decrement count
   21695/    6DA2 : C8                      RZ									;retif count == 0
   21696/    6DA3 : 35                      DCR     M							;decrement count
   21697/    6DA4 : CA A9 6D                JZ      +							;brif count == 0
   21698/    6DA7 : BF                      CMP     A							;set Z flag
   21699/    6DA8 : C9                      RET
   21700/    6DA9 : F6 FF               +	ORI     0FFH						;return 0FFH
   21701/    6DAB : C9                      RET
   21702/    6DAC :                     ;
   21703/    6DAC :                     ; RST 6.5 routine (RS232 receive interrupt)
   21704/    6DAC :                     ;
   21705/    6DAC :                     R_RST6_5_ISR:							;6DACH
   21706/    6DAC : CD FC F5                CALL    SERHK_R						;RST 6.5 routine (RS232 receive interrupt) hook
   21707/    6DAF : E5                      PUSH    H
   21708/    6DB0 : D5                      PUSH    D
   21709/    6DB1 : C5                      PUSH    B
   21710/    6DB2 : F5                      PUSH    PSW
   21711/    6DB3 : 21 F7 71                LXI     H,R_ISR_EXIT_FUN			; Interrupt exit routine (pop all regs & RET)
   21712/    6DB6 : E5                      PUSH    H
   21713/    6DB7 : (MACRO)                 INPORT	0C8H						;Bidirectional data bus for UART
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 376 - 9/5/2025 20:20:35


   21714/    6DB9 : 21 8D FF                LXI     H,PARMSK_R				    ;Serial Ignore Parity Mask byte
   21715/    6DBC : A6                      ANA     M							;remove Parity bit, if any
   21716/    6DBD : 4F                      MOV     C,A							;save Data byte
   21717/    6DBE : (MACRO)                 INPORT	0D8H						;read Status control register for UART, modem
   21718/    6DC0 : E6 0E                   ANI     0EH							;00001110 isolate bits 1..3: error conditions
   21719/    6DC2 : 47                      MOV     B,A							;save in B
   21720/    6DC3 : C2 DB 6D                JNZ     L_RS232_ISR_1
   21721/    6DC6 : 79                      MOV     A,C							;restore Data byte
   21722/    6DC7 : FE 11                   CPI     11H							;DC1(XON)
   21723/    6DC9 : CA D2 6D                JZ      +
   21724/    6DCC : FE 13                   CPI     13H							;DC3 (XOFF)
   21725/    6DCE : C2 DB 6D                JNZ     L_RS232_ISR_1
   21726/    6DD1 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   21727/    6DD2 : AF                  +	XRA     A
   21728/    6DD3 : 32 40 FF                STA     XONXOFF_R					;XON/XOFF protocol control
   21729/    6DD6 : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   21730/    6DD9 : B7                      ORA     A
   21731/    6DDA : C0                      RNZ
   21732/    6DDB :                     L_RS232_ISR_1:
   21733/    6DDB : 21 86 FF                LXI     H,SERCNT_R				    ;RS232 buffer count
   21734/    6DDE : 7E                      MOV     A,M
   21735/    6DDF : FE 40                   CPI     MAXSERCNT					;64 max buffer count
   21736/    6DE1 : C8                      RZ									;return if full
   21737/    6DE2 : FE 28                   CPI     MAXSERCNT-24				;40	getting full?
   21738/    6DE4 : D4 1E 6E                CNC     R_DISABLE_XON_XOFF       	;if >= 40 Turn off XON/XOFF protocol
   21739/    6DE7 : C5                      PUSH    B
   21740/    6DE8 : 34                      INR     M
   21741/    6DE9 : 23                      INX     H
   21742/    6DEA : CD FC 6D                CALL    R_INC_RS232_QUEUE_IN     	;Calculate address to save next RS232 character
   21743/    6DED : C1                      POP     B
   21744/    6DEE : 71                      MOV     M,C
   21745/    6DEF : 78                      MOV     A,B
   21746/    6DF0 : B7                      ORA     A
   21747/    6DF1 : C8                      RZ
   21748/    6DF2 : EB                      XCHG
   21749/    6DF3 : 23                      INX     H
   21750/    6DF4 : 35                      DCR     M
   21751/    6DF5 : 34                      INR     M
   21752/    6DF6 : C0                      RNZ
   21753/    6DF7 : 3A 86 FF                LDA     SERCNT_R					;RS232 buffer count
   21754/    6DFA : 77                      MOV     M,A
   21755/    6DFB : C9                      RET
   21756/    6DFC :                     ;
   21757/    6DFC :                     ; Calculate address to save next RS232 character
   21758/    6DFC :                     ;
   21759/    6DFC :                     ; IN:
   21760/    6DFC :                     ;	HL		RS232 Queue ptr
   21761/    6DFC :                     ; OUT:
   21762/    6DFC :                     ;	DE		RS232 Queue ptr
   21763/    6DFC :                     ;	HL		ptr into RS232 Character buffer
   21764/    6DFC :                     ;
   21765/    6DFC :                     R_INC_RS232_QUEUE_IN:					;6DFCH
   21766/    6DFC : 23                      INX     H
   21767/    6DFD : 4E                      MOV     C,M							;get current count
   21768/    6DFE : 79                      MOV     A,C
   21769/    6DFF : 3C                      INR     A							;increment mod 64
   21770/    6E00 : E6 3F                   ANI     (MAXSERCNT-1)				;3FH
   21771/    6E02 : 77                      MOV     M,A							;update count
   21772/    6E03 : EB                      XCHG							 	;RS232 Queue ptr to DE
   21773/    6E04 : 21 46 FF                LXI     H,SERBUF_R				    ;RS232 Character buffer
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 377 - 9/5/2025 20:20:35


   21774/    6E07 : 06 00                   MVI     B,00H						;zero-extend C to BC
   21775/    6E09 : 09                      DAD     B							;index 
   21776/    6E0A : C9                      RET
   21777/    6E0B :                     ;
   21778/    6E0B :                     ; Send XON (CTRL-Q) out RS232
   21779/    6E0B :                     ;
   21780/    6E0B :                     R_SEND_XON:								;6E0BH
   21781/    6E0B : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   21782/    6E0E : A7                      ANA     A
   21783/    6E0F : C8                      RZ
   21784/    6E10 : 3A 8A FF                LDA     CTRLS_R						;Control-S status
   21785/    6E13 : 3D                      DCR     A
   21786/    6E14 : C0                      RNZ
   21787/    6E15 : 32 8A FF                STA     CTRLS_R						;Control-S status
   21788/    6E18 : C5                      PUSH    B
   21789/    6E19 : 0E 11                   MVI     C,11H						;DC1 (XON)
   21790/    6E1B : C3 3A 6E                JMP     R_SEND_C_TO_RS232			;Send character in C to serial port
   21791/    6E1E :                     ;
   21792/    6E1E :                     ; Turn off XON/XOFF protocol
   21793/    6E1E :                     ;
   21794/    6E1E :                     R_DISABLE_XON_XOFF:						;6E1EH
   21795/    6E1E : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   21796/    6E21 : A7                      ANA     A
   21797/    6E22 : C8                      RZ
   21798/    6E23 : 3A 8A FF                LDA     CTRLS_R						;Control-S status
   21799/    6E26 : B7                      ORA     A
   21800/    6E27 : C0                      RNZ
   21801/    6E28 : 3C                      INR     A
   21802/    6E29 : 32 8A FF                STA     CTRLS_R						;Control-S status
   21803/    6E2C : C5                      PUSH    B
   21804/    6E2D : 0E 13                   MVI     C,13H						;DC3 (XOFF)
   21805/    6E2F : C3 3A 6E                JMP     R_SEND_C_TO_RS232			;Send character in C to serial port
   21806/    6E32 :                     ;
   21807/    6E32 :                     ; Send character in A to serial port using XON/XOFF
   21808/    6E32 :                     ;
   21809/    6E32 :                     R_SEND_A_USING_XON:						;6E32H
   21810/    6E32 : C5                      PUSH    B							;save BC
   21811/    6E33 : 4F                      MOV     C,A							;character to send to C
   21812/    6E34 : CD 4D 6E                CALL    R_XON_XOFF_HANDLER       	;Handle XON/XOFF protocol
   21813/    6E37 : DA 4A 6E                JC      L_RS232_SEND_EXIT			;BC on stack
   21814/    6E3A :                     ;
   21815/    6E3A :                     ; Send character in C to serial port
   21816/    6E3A :                     ;
   21817/    6E3A :                     R_SEND_C_TO_RS232:						;6E3AH
   21818/    6E3A : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   21819/    6E3D : DA 4A 6E                JC      L_RS232_SEND_EXIT			;brif pressed
   21820/    6E40 : (MACRO)                 INPORT	0D8H						;read Status control register for UART, modem
   21821/    6E42 : E6 10                   ANI     10H							;00010000 isolate bit 4: Transmit buffer empty
   21822/    6E44 : CA 3A 6E                JZ      R_SEND_C_TO_RS232			;Send character in C to serial port
   21823/    6E47 : 79                      MOV     A,C
   21824/    6E48 : (MACRO)                 OUTPORT	0C8H
   21825/    6E4A :                     L_RS232_SEND_EXIT:
   21826/    6E4A : 79                      MOV     A,C
   21827/    6E4B : C1                      POP     B							;restore BC
   21828/    6E4C : C9                      RET
   21829/    6E4D :                     ;
   21830/    6E4D :                     ; Handle XON/XOFF protocol
   21831/    6E4D :                     ;
   21832/    6E4D :                     ; IN:
   21833/    6E4D :                     ;	C		character to send
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 378 - 9/5/2025 20:20:35


   21834/    6E4D :                     ;
   21835/    6E4D :                     R_XON_XOFF_HANDLER:						;6E4DH
   21836/    6E4D : 3A 42 FF                LDA     XONFLG_R					;XON/XOFF enable flag
   21837/    6E50 : B7                      ORA     A
   21838/    6E51 : C8                      RZ									;retif not enabled
   21839/    6E52 : 79                      MOV     A,C
   21840/    6E53 : FE 11                   CPI     11H							;DC1(XON, ^Q)
   21841/    6E55 : C2 5F 6E                JNZ     +							;brif !XON
   21842/    6E58 : AF                      XRA     A
   21843/    6E59 : 32 8A FF                STA     CTRLS_R						;Control-S status
   21844/    6E5C : C3 65 6E                JMP     L_XON_XOFF_1
   21845/    6E5F : D6 13               +	SUI     13H							;DC3 (XOFF, ^S)
   21846/    6E61 : C2 69 6E                JNZ     L_XON_XOFF_2				;brif !XOFF
   21847/    6E64 : 3D                      DCR     A							;A = 0FFH
   21848/    6E65 :                     L_XON_XOFF_1:
   21849/    6E65 : 32 41 FF                STA     XONXOFF1_R					;XON/XOFF protocol control
   21850/    6E68 : C9                      RET
   21851/    6E69 :                     L_XON_XOFF_2:
   21852/    6E69 : CD 9F 72            	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   21853/    6E6C : D8                      RC									;retif pressed
   21854/    6E6D : 3A 40 FF                LDA     XONXOFF_R					;XON/XOFF protocol control
   21855/    6E70 : B7                      ORA     A
   21856/    6E71 : C2 69 6E                JNZ     L_XON_XOFF_2				;brif XONXOFF_R active
   21857/    6E74 : C9                      RET
   21858/    6E75 :                     ;
   21859/    6E75 :                     ; Set RS232 baud rate stored in H
   21860/    6E75 :                     ;
   21861/    6E75 :                     R_SET_RS232_BAUD_RATE:				    ;6E75H
   21862/    6E75 : E5                      PUSH    H							;save HL
   21863/    6E76 : 7C                      MOV     A,H
   21864/    6E77 : 07                      RLC    								;times 2
   21865/    6E78 : 21 92 6E                LXI     H,R_RS232_BAUD_TIMER_VALS-2	;Code Based. 
   21866/    6E7B : 16 00                   MVI     D,00H						;zero extend A to DE
   21867/    6E7D : 5F                      MOV     E,A
   21868/    6E7E : 19                      DAD     D							;index
   21869/    6E7F : 22 8B FF                SHLD    BAUDRT_R					;ptr to UART baud rate timer value
   21870/    6E82 : E1                      POP     H							;restore HL
   21871/    6E83 :                     L_RS232_SET_1:							;reset 8155
   21872/    6E83 : E5                      PUSH    H							;save HL
   21873/    6E84 : 2A 8B FF                LHLD    BAUDRT_R					;UART baud rate timer value (word)
   21874/    6E87 : 7E                      MOV     A,M							;to BC/BD
   21875/    6E88 : (MACRO)                 OUTPORT	0BCH						;8155 Timer register.  LSB of timer counter
   21876/    6E8A : 23                      INX     H							;move to MSB of timer counter
   21877/    6E8B : 7E                      MOV     A,M
   21878/    6E8C : (MACRO)                 OUTPORT	0BDH						;8155 Timer register.
   21879/    6E8E : 3E C3                   MVI     A,0C3H						;set Port A & B to OUTPUT, start 8155 timer
   21880/    6E90 : (MACRO)                 OUTPORT	0B8H						;set 8155 PIO Command/Status Register
   21881/    6E92 : E1                      POP     H							;restore HL
   21882/    6E93 : C9                      RET
   21883/    6E94 :                     ;
   21884/    6E94 :                     ; RS232 baud rate timer values
   21885/    6E94 :                     ;
   21886/    6E94 :                     R_RS232_BAUD_TIMER_VALS:				;6E94H
   21887/    6E94 : 00 48 6B 45 00 42       DW      4800H, 456BH, 4200H
   21888/    6E9A : 00 41 80 40 40 40       DW      4100H, 4080H, 4040H
   21889/    6EA0 : 20 40 10 40 08 40       DW      4020H, 4010H, 4008H
   21890/    6EA6 :                     ;
   21891/    6EA6 :                     ; Initialize RS232 or modem
   21892/    6EA6 :                     ; Input Carry, HL
   21893/    6EA6 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 379 - 9/5/2025 20:20:35


   21894/    6EA6 :                     R_INIT_RS232_MDM:						;6EA6H
   21895/    6EA6 : E5                      PUSH    H							;save all registers
   21896/    6EA7 : D5                      PUSH    D
   21897/    6EA8 : C5                      PUSH    B
   21898/    6EA9 : F5                      PUSH    PSW
   21899/    6EAA : 06 25                   MVI     B,25H
   21900/    6EAC : DA B3 6E                JC      +
   21901/    6EAF : 26 03                   MVI     H,03H
   21902/    6EB1 : 06 2D                   MVI     B,2DH
   21903/    6EB3 : F3                  +	DI 
   21904/    6EB4 : CD 75 6E                CALL    R_SET_RS232_BAUD_RATE    	;Set RS232 baud rate stored in H
   21905/    6EB7 : 78                      MOV     A,B
   21906/    6EB8 : (MACRO)                 OUTPORT	0BAH						;8155 PIO Port B
   21907/    6EBA : (MACRO)                 INPORT	0D8H						;read Status control register for UART, modem
   21908/    6EBC : 7D                      MOV     A,L
   21909/    6EBD : E6 1F                   ANI     1FH							;00011111 clear bits 5,6,7
   21910/    6EBF : (MACRO)                 OUTPORT	0D8H
   21911/    6EC1 : CD 39 6F                CALL    R_INIT_SER_BUF_PARAMS    	;Initialize serial buffer parameters
   21912/    6EC4 : 3D                      DCR     A							;A == 0FFH
   21913/    6EC5 : 32 43 FF                STA     SERINIT_R					;RS232 initialization status
   21914/    6EC8 : C3 F7 71                JMP     R_ISR_EXIT_FUN				;Interrupt exit routine (pop all regs & RET)
   21915/    6ECB :                     ;
   21916/    6ECB :                     ; Deactivate RS232 or modem
   21917/    6ECB :                     ;
   21918/    6ECB :                     R_UNINIT_RS232_MDM:						;6ECBH
   21919/    6ECB : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
   21920/    6ECD : F6 C0                   ORI     0C0H						;11000000
   21921/    6ECF : (MACRO)                 OUTPORT	0BAH						;set 8155 PIO Port B
   21922/    6ED1 : AF                      XRA     A
   21923/    6ED2 : 32 43 FF                STA     SERINIT_R					;clear RS232 initialization status
   21924/    6ED5 : C9                      RET
   21925/    6ED6 :                     
   21926/    6ED6 : =>FALSE             	if HWMODEM
   21927/    6ED6 :                     ;
   21928/    6ED6 :                     ; IN:
   21929/    6ED6 :                     ;	D
   21930/    6ED6 :                     ; OUT:
   21931/    6ED6 :                     ;	E
   21932/    6ED6 :                     ;	Flags
   21933/    6ED6 :                     ;
   21934/    6ED6 :                     L_CHECK_TEL_LINE:
   21935/    6ED6 :                         MVI     E,00H						;clear count
   21936/    6ED6 :                     -	INPORT	0D8H						;read Status control register for UART, modem
   21937/    6ED6 :                         ANI     01H							;isolate bit 0: Data on telephone line
   21938/    6ED6 :                         XRA     D							;xor with D
   21939/    6ED6 :                         JNZ     L_CLICK						;brif bit 0 of D == 0: Click sound port if sound enabled
   21940/    6ED6 :                         INR     E							;increment count
   21941/    6ED6 :                         JP      -							;brif E >= 0
   21942/    6ED6 :                         RET									;Minus result: time out
   21943/    6ED6 :                     ;
   21944/    6ED6 :                     ; Click sound port if sound enabled
   21945/    6ED6 :                     ;
   21946/    6ED6 :                     L_CLICK:								;6EE5H
   21947/    6ED6 :                         PUSH    PSW							;save Flags
   21948/    6ED6 :                         LDA     SNDFLG_R					;Sound flag
   21949/    6ED6 :                         ORA     A
   21950/    6ED6 :                         CZ      R_SOUND_PORT    		   	;Click sound port
   21951/    6ED6 :                         POP     PSW							;restore Flags
   21952/    6ED6 :                         RET
   21953/    6ED6 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 380 - 9/5/2025 20:20:35


   21954/    6ED6 :                     ; Check for carrier detect
   21955/    6ED6 :                     ;
   21956/    6ED6 :                     R_CHECK_CD:								;6EEFH
   21957/    6ED6 :                         PUSH    H
   21958/    6ED6 :                         PUSH    D
   21959/    6ED6 :                         PUSH    B
   21960/    6ED6 :                         LXI     H,L_CHECK_CD_2				;continuation function
   21961/    6ED6 :                         PUSH    H
   21962/    6ED6 :                         INPORT	0BBH						;read 8155 PIO Port C
   21963/    6ED6 :                         ANI     10H							;00010000 isolate bit 4
   21964/    6ED6 :                         LXI     H,0249H						;preload
   21965/    6ED6 :                         LXI     B,1A0EH
   21966/    6ED6 :                         JNZ     L_CHECK_CD_1
   21967/    6ED6 :                         LXI     H,0427H
   21968/    6ED6 :                         LXI     B,0C07H
   21969/    6ED6 :                     L_CHECK_CD_1:
   21970/    6ED6 :                         DI 
   21971/    6ED6 :                         INPORT	0D8H						;read Status control register for UART, modem
   21972/    6ED6 :                         ANI     01H							;isolate bit 0: Data on telephone line
   21973/    6ED6 :                         MOV     D,A							;argument
   21974/    6ED6 :                         CALL    L_CHECK_TEL_LINE
   21975/    6ED6 :                         JM      +							;brif timeout
   21976/    6ED6 :                         XRA     D
   21977/    6ED6 :                         MOV     D,A
   21978/    6ED6 :                         CALL    L_CHECK_TEL_LINE
   21979/    6ED6 :                     +	EI     
   21980/    6ED6 :                         RM
   21981/    6ED6 :                         MOV     A,E
   21982/    6ED6 :                         CMP     B
   21983/    6ED6 :                         RNC
   21984/    6ED6 :                         CMP     C
   21985/    6ED6 :                         RC
   21986/    6ED6 :                         DCX     H
   21987/    6ED6 :                         MOV     A,H
   21988/    6ED6 :                         ORA     L
   21989/    6ED6 :                         JNZ     L_CHECK_CD_1
   21990/    6ED6 :                         CALL    R_INIT_SER_BUF_PARAMS    	;Initialize serial buffer parameters
   21991/    6ED6 :                         POP     H
   21992/    6ED6 :                     	SKIP_2BYTES_INST_JNZ
   21993/    6ED6 :                     L_CHECK_CD_2:
   21994/    6ED6 :                         ORI     0FFH
   21995/    6ED6 :                         JMP     R_POP_ALL_WREGS
   21996/    6ED6 : =>TRUE              	else								;!HWMODEM
   21997/    6ED6 :                     	DS		6F31H-6ED6H					;91 bytes FREE if !HWMODEM
   21998/    6F31 : [21926]             	endif								;HWMODEM
   21999/    6F31 :                     ;
   22000/    6F31 :                     ; Enable XON/OFF when CTRL-S / CTRL-Q sent
   22001/    6F31 :                     ;
   22002/    6F31 :                     R_ENABLE_XON_XOFF:						;6F31H
   22003/    6F31 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   22004/    6F32 :                     R_CLR_XON_XOFF:							;6F32H
   22005/    6F32 : AF                      XRA     A
   22006/    6F33 : F3                      DI 
   22007/    6F34 : 32 42 FF                STA     XONFLG_R					;XON/XOFF enable flag
   22008/    6F37 : FB                      EI     
   22009/    6F38 : C9                      RET
   22010/    6F39 :                     ;
   22011/    6F39 :                     ; Initialize serial buffer parameters. Returns 0 in A
   22012/    6F39 :                     ;
   22013/    6F39 :                     R_INIT_SER_BUF_PARAMS:				  	;6F39H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 381 - 9/5/2025 20:20:35


   22014/    6F39 : AF                      XRA     A							;clear A, HL
   22015/    6F3A : 6F                      MOV     L,A
   22016/    6F3B : 67                      MOV     H,A
   22017/    6F3C : 22 40 FF                SHLD    XONXOFF_R					;XON/XOFF protocol controls
   22018/    6F3F : 22 86 FF                SHLD    SERCNT_R					;RS232 buffer count
   22019/    6F42 : 22 88 FF                SHLD    SERPTR_R					;RS232 buffer input pointer
   22020/    6F45 : C9                      RET
   22021/    6F46 :                     ;
   22022/    6F46 :                     ; Write cassette header and sync byte
   22023/    6F46 :                     ;
   22024/    6F46 :                     R_CAS_WRITE_HEADER:						;6F46H
   22025/    6F46 : 01 00 02                LXI     B,512						;0200H
   22026/    6F49 : 3E 55               -	MVI     A,55H						;header block pattern
   22027/    6F4B : C5                      PUSH    B							;save count
   22028/    6F4C : CD 5E 6F                CALL    L_CAS_WRITE_BYTE
   22029/    6F4F : C1                      POP     B							;restore count
   22030/    6F50 : 0B                      DCX     B							;decrement count
   22031/    6F51 : 78                      MOV     A,B							;test count
   22032/    6F52 : B1                      ORA     C
   22033/    6F53 : C2 49 6F                JNZ     -
   22034/    6F56 : 3E 7F                   MVI     A,7FH						;sync byte
   22035/    6F58 : C3 5E 6F                JMP     L_CAS_WRITE_BYTE
   22036/    6F5B :                     ;
   22037/    6F5B :                     ; Write char in A to cassette w/o checksum or sync bit
   22038/    6F5B :                     ;
   22039/    6F5B :                     R_CAS_WRITE_NO_SYNC:				    ;6F5BH
   22040/    6F5B : CD 71 6F                CALL    L_CAS_WRITE_0BIT			;Write a 0 bit
   22041/    6F5E :                     L_CAS_WRITE_BYTE:
   22042/    6F5E : 06 08                   MVI     B,08H
   22043/    6F60 : CD 6A 6F            -	CALL    R_CAS_WRITE_BIT				;Write bit 7 of A to cassette. Shift A
   22044/    6F63 : 05                      DCR     B
   22045/    6F64 : C2 60 6F                JNZ     -
   22046/    6F67 : C3 9F 72                JMP     R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed, then return
   22047/    6F6A :                     ;
   22048/    6F6A :                     ; Write bit 7 of A to cassette. Left most bit. Shift A right 1 position
   22049/    6F6A :                     ;
   22050/    6F6A :                     R_CAS_WRITE_BIT:						;6F6AH
   22051/    6F6A : 07                      RLC									;bit 7 to carry
   22052/    6F6B : 11 24 1F                LXI     D,1F24H						;preload Cassette frequency cycle count 1-bit
   22053/    6F6E : DA 74 6F                JC      L_CAS_WRITE_DLY				;brif bit 7 was 1
   22054/    6F71 :                     L_CAS_WRITE_0BIT:
   22055/    6F71 : 11 49 43                LXI     D,4349H						;Cassette frequency cycle count 0-bit
   22056/    6F74 :                     L_CAS_WRITE_DLY:
   22057/    6F74 : 15                  -	DCR     D							;Delay
   22058/    6F75 : C2 74 6F                JNZ		-							;L_CAS_WRITE_DLY
   22059/    6F78 : 57                      MOV     D,A							;save shifted A
   22060/    6F79 : 3E D0                   MVI     A,0D0H						;11010000 SOD:1 SOE:1 RST7.5:1
   22061/    6F7B : 30                      SIM
   22062/    6F7C : 1D                  -	DCR     E							;SOD 1 duration
   22063/    6F7D : C2 7C 6F                JNZ     -
   22064/    6F80 : 3E 50                   MVI     A,50H						;01010000 SOD:0 SOE:1 RST7.5:1
   22065/    6F82 : 30                      SIM    
   22066/    6F83 : 7A                      MOV     A,D							;restore shifted A
   22067/    6F84 : C9                      RET
   22068/    6F85 :                     ;
   22069/    6F85 :                     ; Read cassette header and sync byte
   22070/    6F85 :                     ;
   22071/    6F85 :                     R_CAS_READ_HEADER:						;6F85H
   22072/    6F85 : 06 80                   MVI     B,80H
   22073/    6F87 : CD DB 6F            -	CALL    R_CAS_READ_BIT				;Read Cassette port data bit
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 382 - 9/5/2025 20:20:35


   22074/    6F8A : D8                      RC									;retif SHIFT-BREAK pressed
   22075/    6F8B : 79                      MOV     A,C
   22076/    6F8C : FE 08                   CPI     08H
   22077/    6F8E : DA 85 6F                JC      R_CAS_READ_HEADER			;Read cassette header and sync byte
   22078/    6F91 : FE 40                   CPI     40H
   22079/    6F93 : D2 85 6F                JNC     R_CAS_READ_HEADER			;Read cassette header and sync byte
   22080/    6F96 : 05                      DCR     B
   22081/    6F97 : C2 87 6F                JNZ     -
   22082/    6F9A :                     L_CAS_READ_HDR_1:
   22083/    6F9A : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   22084/    6F9D : D8                      RC									;retif SHIFT-BREAK pressed
   22085/    6F9E : 21 00 00                LXI     H,0
   22086/    6FA1 : 06 40                   MVI     B,40H						;loop counter
   22087/    6FA3 :                     L_CAS_READ_HDR_2:
   22088/    6FA3 : CD 16 70                CALL    L_CAR_READ_BYTE
   22089/    6FA6 : D8                      RC									;retif SHIFT-BREAK pressed
   22090/    6FA7 : 51                      MOV     D,C
   22091/    6FA8 : CD 16 70                CALL    L_CAR_READ_BYTE
   22092/    6FAB : D8                      RC									;retif SHIFT-BREAK pressed
   22093/    6FAC : 7A                      MOV     A,D
   22094/    6FAD : 91                      SUB     C
   22095/    6FAE : D2 B3 6F                JNC     +
   22096/    6FB1 : 2F                      CMA
   22097/    6FB2 : 3C                      INR     A
   22098/    6FB3 : FE 0B               +	CPI     0BH
   22099/    6FB5 : DA BA 6F                JC      +
   22100/    6FB8 : 24                      INR     H
   22101/    6FB9 : (MACRO)             	SKIP_BYTE_INST						;Sets A to 0AFH
   22102/    6FBA : 2C                  +	INR     L
   22103/    6FBB : 05                      DCR     B							;decrement loop counter
   22104/    6FBC : C2 A3 6F                JNZ     L_CAS_READ_HDR_2			;brif not done
   22105/    6FBF : 3E 40                   MVI     A,40H
   22106/    6FC1 : BD                      CMP     L
   22107/    6FC2 : CA C9 6F                JZ      +
   22108/    6FC5 : 94                      SUB     H
   22109/    6FC6 : C2 9A 6F                JNZ     L_CAS_READ_HDR_1
   22110/    6FC9 : 32 8E FF            +	STA     CASPLS_R					;Cassette port pulse control
   22111/    6FCC : 16 00                   MVI     D,00H
   22112/    6FCE : CD DB 6F            -	CALL    R_CAS_READ_BIT				;Read Cassette port data bit
   22113/    6FD1 : D8                      RC									;retif SHIFT-BREAK pressed 
   22114/    6FD2 : CD 23 70                CALL    R_CAS_COUNT_PULSES			;Count and pack cassette input bits
   22115/    6FD5 : FE 7F                   CPI     7FH							;sync byte
   22116/    6FD7 : C2 CE 6F                JNZ     -
   22117/    6FDA : C9                      RET
   22118/    6FDB :                     ;
   22119/    6FDB :                     ; Read Cassette port data bit. Resulting pulse count in C
   22120/    6FDB :                     ; [Read cassette header and sync byte]
   22121/    6FDB :                     ; 
   22122/    6FDB :                     R_CAS_READ_BIT:							;6FDBH
   22123/    6FDB : 0E 00                   MVI     C,00H						;clear pulse count
   22124/    6FDD : 3A 8E FF                LDA     CASPLS_R					;Cassette port pulse control
   22125/    6FE0 : A7                      ANA     A
   22126/    6FE1 : CA FA 6F                JZ      L_CAS_READ_NEG_PULSE		;brif CASPLS_R  == 0
   22127/    6FE4 :                     ;
   22128/    6FE4 :                     ; CASPLS_R  == 1
   22129/    6FE4 :                     ;	
   22130/    6FE4 :                     L_CAS_READ_POS_PULSE:
   22131/    6FE4 : CD 9F 72            	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   22132/    6FE7 : D8                      RC									;retif SHIFT-BREAK pressed
   22133/    6FE8 : 20                      RIM									;read Serial Data In
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 383 - 9/5/2025 20:20:35


   22134/    6FE9 : 07                      RLC									;Data bit to Carry
   22135/    6FEA : D2 E4 6F                JNC     L_CAS_READ_POS_PULSE		;brif 0: wait for a 1
   22136/    6FED :                     L_CAS_READ_BIT_C_CNT:
   22137/    6FED : 0C                      INR     C							;pre-increment count
   22138/    6FEE : 0C                  -	INR     C							;increment count
   22139/    6FEF : CA E4 6F                JZ      L_CAS_READ_POS_PULSE		;brif count == 256
   22140/    6FF2 : 20                      RIM									;read Serial Data In
   22141/    6FF3 : 07                      RLC									;Data bit to Carry
   22142/    6FF4 : DA EE 6F                JC		-							;brif 1: wait for a 0
   22143/    6FF7 : C3 0D 70                JMP     L_CAS_READ_BIT_END			;exit
   22144/    6FFA :                     ;
   22145/    6FFA :                     ; CASPLS_R  == 0
   22146/    6FFA :                     ;
   22147/    6FFA :                     L_CAS_READ_NEG_PULSE:
   22148/    6FFA : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   22149/    6FFD : D8                      RC									;retif pressed 
   22150/    6FFE : 20                      RIM									;read Serial Data In 
   22151/    6FFF : 07                      RLC									;Data bit 7 to Carry
   22152/    7000 : DA FA 6F                JC      L_CAS_READ_NEG_PULSE		;brif 1: wait for a 0
   22153/    7003 :                     L_CAS_READ_BIT_4:
   22154/    7003 : 0C                      INR     C							;pre-increment count
   22155/    7004 : 0C                  -	INR     C							;increment count
   22156/    7005 : CA FA 6F                JZ      L_CAS_READ_NEG_PULSE		;brif count == 256
   22157/    7008 : 20                      RIM									;read Serial Data In  
   22158/    7009 : 07                      RLC									;Data bit 7 to Carry
   22159/    700A : D2 04 70                JNC     -							;brif if 0: wait for a 1
   22160/    700D :                     L_CAS_READ_BIT_END:
   22161/    700D : 3A 44 FF                LDA     SNDFLG_R					;Sound flag
   22162/    7010 : A7                      ANA     A
   22163/    7011 : CC 76 76                CZ      R_SOUND_PORT         		;Click sound port if SNDFLG_R == 0
   22164/    7014 : AF                      XRA     A
   22165/    7015 : C9                      RET
   22166/    7016 :                     
   22167/    7016 :                     L_CAR_READ_BYTE:								;C is input
   22168/    7016 : CD 03 70                CALL    L_CAS_READ_BIT_4
   22169/    7019 : D8                      RC									;retif SHIFT-BREAK pressed
   22170/    701A : 0E 00                   MVI     C,00H
   22171/    701C : CD ED 6F                CALL    L_CAS_READ_BIT_C_CNT
   22172/    701F : D8                      RC									;retif SHIFT-BREAK pressed
   22173/    7020 : C3 03 70                JMP     L_CAS_READ_BIT_4
   22174/    7023 :                     ;
   22175/    7023 :                     ; Count and pack cassette input bits
   22176/    7023 :                     ;
   22177/    7023 :                     ; IN:
   22178/    7023 :                     ;	C		incoming pulse count
   22179/    7023 :                     ;
   22180/    7023 :                     ; D collects bits
   22181/    7023 :                     ;
   22182/    7023 :                     R_CAS_COUNT_PULSES:						;7023H
   22183/    7023 : 79                      MOV     A,C							;get pulse count
   22184/    7024 : FE 15                   CPI     15H							;sets Carry if A < 15H
   22185/    7026 : 7A                      MOV     A,D							;update bits
   22186/    7027 : 17                      RAL									;Carry to bit 0
   22187/    7028 : 57                  	MOV     D,A
   22188/    7029 : C9                      RET
   22189/    702A :                     ;
   22190/    702A :                     ; Read character from cassette w/o checksum
   22191/    702A :                     ;
   22192/    702A :                     R_CAS_READ_NO_CHKSUM:				  	;702AH
   22193/    702A : CD DB 6F                CALL    R_CAS_READ_BIT				;Read Cassette port data bit into C
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 384 - 9/5/2025 20:20:35


   22194/    702D : D8                      RC									;retif SHIFT-BREAK pressed
   22195/    702E : 79                      MOV     A,C							;pulse count
   22196/    702F : FE 15                   CPI     15H
   22197/    7031 : DA 2A 70                JC      R_CAS_READ_NO_CHKSUM       	;brif A < 15H
   22198/    7034 : 06 08                   MVI     B,08H						;loop counter: 8 bits
   22199/    7036 : CD DB 6F            -	CALL    R_CAS_READ_BIT				;Read Cassette port data bit
   22200/    7039 : D8                      RC									;retif SHIFT-BREAK pressed
   22201/    703A : CD 23 70                CALL    R_CAS_COUNT_PULSES			;Count and pack cassette input bits in D
   22202/    703D : 05                      DCR     B							;loop counter
   22203/    703E : C2 36 70                JNZ     -							;loop
   22204/    7041 : AF                      XRA     A
   22205/    7042 : C9                      RET
   22206/    7043 :                     ;
   22207/    7043 :                     ; Cassette REMOTE routine - turn motor on or off
   22208/    7043 :                     ;
   22209/    7043 :                     ; IN:
   22210/    7043 :                     ;	E
   22211/    7043 :                     ;
   22212/    7043 :                     R_CAS_REMOTE_FUN:						;7043H
   22213/    7043 : 3A 45 FF                LDA     PORTE8_R					;Contents of port E8H
   22214/    7046 : E6 F1                   ANI     0F1H						;11110001
   22215/    7048 : 1C                      INR     E							;test E
   22216/    7049 : 1D                      DCR     E
   22217/    704A : CA 4F 70                JZ      +							;brif E == 0
   22218/    704D : F6 08                   ORI     08H							;00001000
   22219/    704F : (MACRO)             +	OUTPORT	0E8H						;set Keyboard input and misc. device select
   22220/    7051 : 32 45 FF                STA     PORTE8_R					;Contents of port E8H
   22221/    7054 : C9                      RET
   22222/    7055 :                     ;
   22223/    7055 :                     ; Keyboard scanning management routine
   22224/    7055 :                     ;
   22225/    7055 :                     R_KEYSCAN_MGT_FUN:						;7055H
   22226/    7055 : 21 F4 71                LXI     H,L_ENA_INT_75_65_POP		;Set new interrupt mask and pop all regs continuation function
   22227/    7058 : E5                      PUSH    H
   22228/    7059 : 21 8F FF                LXI     H,KBDSKIP_R
   22229/    705C : 35                      DCR     M
   22230/    705D : C0                      RNZ
   22231/    705E : 36 03                   MVI     M,03H
   22232/    7060 :                     ;
   22233/    7060 :                     ; Key detection -- Determine which keys are pressed
   22234/    7060 :                     ;
   22235/    7060 :                     R_KEY_DETECTION:						;7060H
   22236/    7060 : 21 99 FF                LXI     H,KBDCOL1_R+8				;end of keyboard scan column storage #1
   22237/    7063 : 11 A2 FF                LXI     D,KBDCOL2_R+8				;end of keyboard scan column storage #2
   22238/    7066 : CD B1 72                CALL    R_SCAN_SPECIAL_KEYS      	;Scan BREAK),CAPS),NUM),CODE),GRAPH),CTRL),SHIFT & set bits in A
   22239/    7069 : 2F                      CMA   								;complement result
   22240/    706A : BE                      CMP     M
   22241/    706B : 77                      MOV     M,A							;update KBDCOL1_R, column 9
   22242/    706C : CC 01 71                CZ      L_DECODE_KEY				;calif A == [KBDCOL1_R]
   22243/    706F : AF                      XRA     A
   22244/    7070 : (MACRO)                 OUTPORT	0B9H
   22245/    7072 : (MACRO)                 INPORT	0E8H						;read
   22246/    7074 : 3C                      INR     A							;set Z flag if A == 0FFH
   22247/    7075 : 3E FF                   MVI     A,0FFH
   22248/    7077 : (MACRO)                 OUTPORT	0B9H
   22249/    7079 : CA FD 71                JZ      L_KEY_DETECT_1				;brif IN 0E8H was 0FFH
   22250/    707C : 3E 7F                   MVI     A,7FH						;starting bit pattern. 0 indicates the column being activated.
   22251/    707E : 0E 07                   MVI     C,07H						;loop counter == keyboard column 7..0
   22252/    7080 :                     L_LOOPKBD:
   22253/    7080 : 2B                      DCX     H							;going down!
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 385 - 9/5/2025 20:20:35


   22254/    7081 : 1B                      DCX     D
   22255/    7082 : 47                      MOV     B,A							;save bit pattern
   22256/    7083 : (MACRO)                 OUTPORT	0B9H
   22257/    7085 : (MACRO)                 INPORT	0E8H						;read
   22258/    7087 : 2F                      CMA									;complement
   22259/    7088 : BE                      CMP     M
   22260/    7089 : 77                      MOV     M,A							;update
   22261/    708A : C2 92 70                JNZ     +							;brif different
   22262/    708D : 1A                      LDAX    D							;get code from KBDCOL2_R vector
   22263/    708E : BE                      CMP     M							;compare with KBDCOL1_R vector
   22264/    708F : C4 C5 70                CNZ     L_KEY_SCAN					;call if A != M
   22265/    7092 : 3E FF               +	MVI     A,0FFH
   22266/    7094 : (MACRO)                 OUTPORT	0B9H
   22267/    7096 : 78                      MOV     A,B							;restore bit pattern
   22268/    7097 : 0F                      RRC									;rotate right
   22269/    7098 : 0D                      DCR     C
   22270/    7099 : F2 80 70                JP      L_LOOPKBD
   22271/    709C : 2B                      DCX     H							;HL now points to KBDCNTR_R			
   22272/    709D : 36 02                   MVI     M,02H
   22273/    709F : 21 A5 FF                LXI     H,KEYCNT2_R					;point to some key counter
   22274/    70A2 : 35                      DCR     M							;decrement [KEYCNT2_R]
   22275/    70A3 : CA 1A 71                JZ      L_PRE_KEY_DECODE			;brif [KEYCNT2_R] == 0
   22276/    70A6 : 34                      INR     M							;increment [KEYCNT2_R]. Sets all flags except Carry
   22277/    70A7 : F8                      RM									;return if bit 7 M set
   22278/    70A8 : 3A A7 FF                LDA     KEYXXXX_R
   22279/    70AB : 2A A8 FF                LHLD    KEYPTR_R					;Pointer to entry in 2nd Storage Buffer for key
   22280/    70AE : A6                      ANA     M							;A & M
   22281/    70AF : C8                      RZ
   22282/    70B0 :                     ;
   22283/    70B0 :                     ; Key repeat detection
   22284/    70B0 :                     ;
   22285/    70B0 :                     R_KEY_REPEAT_DET:						;70B0H
   22286/    70B0 : 3A AA FF                LDA     KBCNT_R						;Keyboard buffer count
   22287/    70B3 : FE 02                   CPI     02H
   22288/    70B5 : D0                      RNC									;return if A >= 2
   22289/    70B6 : 21 A4 FF                LXI     H,KEYCNT_R 					;Key repeat start delay counter. Default 54H
   22290/    70B9 : 35                      DCR     M
   22291/    70BA : C0                      RNZ									;return if M != 0  
   22292/    70BB : 36 06                   MVI     M,06H						;reset M to 6
   22293/    70BD : 3E 01                   MVI     A,01H
   22294/    70BF : 32 F3 FF                STA     CSRCNT_R
   22295/    70C2 : C3 22 71                JMP     R_KEY_DECODE				;Key decoding
   22296/    70C5 :                     ;
   22297/    70C5 :                     ; keyscan function
   22298/    70C5 :                     ;
   22299/    70C5 :                     ; IN:
   22300/    70C5 :                     ;	A
   22301/    70C5 :                     ;
   22302/    70C5 :                     L_KEY_SCAN:
   22303/    70C5 : C5                      PUSH    B
   22304/    70C6 : E5                      PUSH    H
   22305/    70C7 : D5                      PUSH    D
   22306/    70C8 : 47                      MOV     B,A
   22307/    70C9 : 3E 80                   MVI     A,80H
   22308/    70CB : 1E 07                   MVI     E,07H						;loop counter 7..0
   22309/    70CD : 57                  -	MOV     D,A							;save A
   22310/    70CE : A6                      ANA     M
   22311/    70CF : CA D6 70                JZ      +							;brif (A & M) ==0
   22312/    70D2 : A0                      ANA     B
   22313/    70D3 : CA E2 70                JZ      L_KEY_SCAN_3				;D, H, B on stack brif (A & M & B) == 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 386 - 9/5/2025 20:20:35


   22314/    70D6 : 7A                  +	MOV     A,D							;restore A
   22315/    70D7 : 0F                      RRC									;bit 0 to carry
   22316/    70D8 : 1D                      DCR     E							;loop counter
   22317/    70D9 : F2 CD 70                JP      -							;brif E >= 0
   22318/    70DC : D1                      POP     D							;restore a ptr
   22319/    70DD :                     L_KEY_SCAN_2:							;H, B on stack
   22320/    70DD : E1                      POP     H
   22321/    70DE : 7E                      MOV     A,M
   22322/    70DF : 12                      STAX    D							;DE must be a ptr
   22323/    70E0 : C1                      POP     B
   22324/    70E1 : C9                      RET
   22325/    70E2 :                     ;DE, A, C, D, E
   22326/    70E2 :                     ;DE, HL, BC on stack
   22327/    70E2 :                     L_KEY_SCAN_3:
   22328/    70E2 : 21 A5 FF                LXI     H,KEYCNT2_R
   22329/    70E5 : 3C                      INR     A
   22330/    70E6 : BE                      CMP     M
   22331/    70E7 : C2 EE 70                JNZ     L_STORE_KEY						;store key
   22332/    70EA : D1                      POP     D
   22333/    70EB : E1                      POP     H
   22334/    70EC : C1                      POP     B
   22335/    70ED : C9                      RET
   22336/    70EE :                     ;
   22337/    70EE :                     ; Store key
   22338/    70EE :                     ; 
   22339/    70EE :                     ;	D, H, B on stack
   22340/    70EE :                     ; IN:
   22341/    70EE :                     ;	A
   22342/    70EE :                     ;	C
   22343/    70EE :                     ;	E
   22344/    70EE :                     ;	HL		KEYCNT2_R
   22345/    70EE :                     ;
   22346/    70EE :                     L_STORE_KEY:
   22347/    70EE : 77                      MOV     M,A							;update [KEYCNT2_R]
   22348/    70EF : 79                      MOV     A,C
   22349/    70F0 : 07                      RLC									;times 8
   22350/    70F1 : 07                      RLC    
   22351/    70F2 : 07                      RLC    
   22352/    70F3 : B3                      ORA     E
   22353/    70F4 : 23                      INX     H							;HL == KEYSTRG_R
   22354/    70F5 : 77                      MOV     M,A
   22355/    70F6 : 23                      INX     H							;HL == KEYXXXX_R
   22356/    70F7 : 72                      MOV     M,D
   22357/    70F8 : D1                      POP     D							;0FF9CH
   22358/    70F9 : EB                      XCHG
   22359/    70FA : 22 A8 FF                SHLD    KEYPTR_R					;Pointer to entry in 2nd Storage Buffer for key to DE
   22360/    70FD : EB                      XCHG
   22361/    70FE : C3 DD 70                JMP     L_KEY_SCAN_2				;H, B on stack
   22362/    7101 :                     ;
   22363/    7101 :                     ; IN:
   22364/    7101 :                     ;	DE		KBDCOL2_R+8
   22365/    7101 :                     ;	HL		KBDCOL1_R+8
   22366/    7101 :                     ;
   22367/    7101 :                     L_DECODE_KEY:
   22368/    7101 : 1A                      LDAX    D							;get byte from [DE] to B
   22369/    7102 : 47                      MOV     B,A
   22370/    7103 : 7E                      MOV     A,M							;get byte from M
   22371/    7104 : 12                      STAX    D							;store in [DE]
   22372/    7105 : 07                      RLC									;bit 7 to carry
   22373/    7106 : D0                      RNC									;retif bit 7 was clear
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 387 - 9/5/2025 20:20:35


   22374/    7107 : 78                      MOV     A,B							;get original byte from [DE]
   22375/    7108 : 07                      RLC									;bit 7 to carry
   22376/    7109 : D8                      RC									;retif bit 7 was set
   22377/    710A : E3                      XTHL								;save HL to stack. Remove return address.
   22378/    710B : 21 C4 71                LXI     H,L_KEY_DECODE_6			;continuation function
   22379/    710E : E3                      XTHL								;set new return address, restore HL
   22380/    710F : 06 00                   MVI     B,00H
   22381/    7111 : 50                      MOV     D,B							;clear B, D
   22382/    7112 : 7E                      MOV     A,M							;get byte from M
   22383/    7113 : 0F                      RRC									;bit 0 to carry
   22384/    7114 : 3E 03                   MVI     A,03H						;preload
   22385/    7116 : D8                      RC									;retif bit 0 was set 
   22386/    7117 : 3E 13                   MVI     A,13H						;return 03H or 13H
   22387/    7119 : C9                      RET
   22388/    711A :                     ;
   22389/    711A :                     ; IN:
   22390/    711A :                     ;	HL		&KEYCNT2_R
   22391/    711A :                     ;
   22392/    711A :                     L_PRE_KEY_DECODE:
   22393/    711A : 2B                      DCX     H							;point to KEYCNT_R
   22394/    711B : 36 54                   MVI     M,54H						;reset KEYCNT_R
   22395/    711D : 2B                      DCX     H							;point to KEYSHFT_R
   22396/    711E : 3A A2 FF                LDA     KBDCOL2_R+8					;Keyboard scan column storage @2
   22397/    7121 : 77                      MOV     M,A							;copy to KEYSHFT_R
   22398/    7122 :                     ;
   22399/    7122 :                     ; Key decoding
   22400/    7122 :                     ; DE will contain delta to R_KEYBOARD_CONV_SHIFTED table (code based)
   22401/    7122 :                     ;
   22402/    7122 :                     R_KEY_DECODE:							;7122H
   22403/    7122 : 3A A6 FF                LDA     KEYSTRG_R					;Key position storage
   22404/    7125 : 4F                      MOV     C,A							;key code
   22405/    7126 : 11 2C 00                LXI     D,002CH						;E=R_KEYBOARD_CONV_SHIFTED - R_KEYBOARD_CONV_MATRIX
   22406/    7129 : 42                      MOV     B,D							;D=0. Location dependent. Use MVI B,0
   22407/    712A : FE 33                   CPI     33H
   22408/    712C : DA 33 71                JC      +							;brif A < 33H
   22409/    712F : 21 A7 FF                LXI     H,KEYXXXX_R
   22410/    7132 : 70                      MOV     M,B							;Set to 0
   22411/    7133 : 3A A3 FF            +	LDA     KEYSHFT_R					;Shift key status storage
   22412/    7136 : 0F                      RRC									;bit 0 to carry
   22413/    7137 : F5                      PUSH    PSW							;save A/carry
   22414/    7138 : 79                      MOV     A,C							;reload key code
   22415/    7139 : BB                      CMP     E							;contains 2CH offset
   22416/    713A : DA 84 71                JC      L_KEY_DECODE_1				;brif key code < 2CH
   22417/    713D : FE 30                   CPI     30H
   22418/    713F : D2 48 71                JNC     +							;brif key code >= 30H
   22419/    7142 :                     ; keycode between 2DH & 2FH
   22420/    7142 : F1                      POP     PSW							;reload A/carry
   22421/    7143 : F5                      PUSH    PSW
   22422/    7144 : 0F                      RRC									;bit 0 to carry
   22423/    7145 : DA 84 71                JC      L_KEY_DECODE_1				;brif bit 0 was set
   22424/    7148 : 21 EF 7C            +	LXI     H,L_KEYBOARD_4				;Code Based. preload keyboard mapping table
   22425/    714B : F1                      POP     PSW							;restore A/carry
   22426/    714C : D2 52 71                JNC     +							;brif carry clear
   22427/    714F : 21 DB 7C                LXI     H,L_KEYBOARD_3				;Code Based. load keyboard mapping table
   22428/    7152 : 09                  +	DAD     B							;index into table
   22429/    7153 : 7E                      MOV     A,M
   22430/    7154 : 07                      RLC    
   22431/    7155 : B7                      ORA     A							;clear carry
   22432/    7156 : 1F                      RAR
   22433/    7157 : 4F                      MOV     C,A							;move key to C. Assume B == 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 388 - 9/5/2025 20:20:35


   22434/    7158 : D2 E4 71                JNC     R_KEY_ADD_TO_BUF			;Keyboard buffer management -
   22435/    715B :                     										;	place subsequent key in buffer
   22436/    715B : FE 08                   CPI     08H
   22437/    715D : D2 80 71                JNC     +							;brif A >= 08H
   22438/    7160 : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80);
   22439/    7163 :                     										;	BIT 6=in TELCOM (0x40)
   22440/    7163 : E6 E0                   ANI     0E0H						;11100000B	isolate bits 5-7
   22441/    7165 : C2 80 71                JNZ     +
   22442/    7168 : 2A 7A F6                LHLD    CURLIN_R					;Currently executing line number
   22443/    716B : 7C                      MOV     A,H							;test for 0FFFFH
   22444/    716C : A5                      ANA     L
   22445/    716D : 3C                      INR     A
   22446/    716E : CA 80 71                JZ      +							;brif direct mode
   22447/    7171 : 21 30 F6                LXI     H,FKEYSTAT_R				;Function key status table (1 = on)
   22448/    7174 : 09                      DAD     B							;index
   22449/    7175 : 7E                      MOV     A,M
   22450/    7176 : B7                      ORA     A
   22451/    7177 : CA 80 71                JZ      +							;brif FKEYSTAT_R[BC] == 0
   22452/    717A : 79                      MOV     A,C							;get key back
   22453/    717B : F6 80                   ORI     80H							;mark key as Function key
   22454/    717D : C3 D5 71                JMP     R_KEY_CTRLC_TST				;Keyboard buffer management - place key in new buffer
   22455/    7180 :                     
   22456/    7180 : 05                  +	DCR     B
   22457/    7181 : C3 E4 71                JMP     R_KEY_ADD_TO_BUF			;Keyboard buffer management -
   22458/    7184 :                     										;	place subsequent key in buffer
   22459/    7184 :                     
   22460/    7184 :                     L_KEY_DECODE_1:
   22461/    7184 : F1                      POP     PSW
   22462/    7185 : DA 89 71                JC      +
   22463/    7188 : 58                      MOV     E,B
   22464/    7189 : 0F                  +	RRC									;test SHIFT 
   22465/    718A : F5                      PUSH    PSW							;save SHIFT Carry status
   22466/    718B : DA 0A 72                JC      R_UNSHIFTED_KEY				;Handle unshifted & non-CTRL key during key decoding
   22467/    718E :                     L_KEY_DECODE_2:
   22468/    718E : 21 49 7C                LXI     H,L_KEYBOARD_1				;Code Based. preload keyboard mapping table
   22469/    7191 : 0F                      RRC									;test CTRL
   22470/    7192 : DA B5 71                JC      L_KEY_DECODE_3
   22471/    7195 : 21 A1 7C                LXI     H,L_KEYBOARD_2				;Code Based. preload keyboard mapping table
   22472/    7198 : 0F                      RRC									;test GRPH
   22473/    7199 : DA B5 71                JC      L_KEY_DECODE_3
   22474/    719C : 0F                      RRC									;test CODE
   22475/    719D : D2 AE 71                JNC     +							;brif !CODE
   22476/    71A0 : 21 F1 7B                LXI     H,R_KEYBOARD_CONV_MATRIX	;Code Based. 
   22477/    71A3 : 09                      DAD     B							;index
   22478/    71A4 : D5                      PUSH    D							;save DE
   22479/    71A5 : 57                      MOV     D,A							;save key
   22480/    71A6 : CD 33 72                CALL    R_NUM_KEY				    ;Handle NUM key during key decoding. Returns HL.
   22481/    71A9 : 7A                      MOV     A,D							;restore key
   22482/    71AA : D1                      POP     D							;restore DE
   22483/    71AB : CA B7 71                JZ      L_KEY_DECODE_5				;brif R_NUM_KEY returned no match
   22484/    71AE :                     ;
   22485/    71AE :                     ; key could be a NUM value
   22486/    71AE :                     ;
   22487/    71AE : 0F                  +	RRC									;test CAPSLOCK
   22488/    71AF : DC 2C 72                CC      R_CAPS_LOCK_KEY				;Handle CAPS LOCK key during key decoding
   22489/    71B2 : 21 F1 7B                LXI     H,R_KEYBOARD_CONV_MATRIX	;Code Based. 
   22490/    71B5 :                     L_KEY_DECODE_3:
   22491/    71B5 : 19                      DAD     D							;update table address
   22492/    71B6 :                     L_KEY_DECODE_4:
   22493/    71B6 : 09                      DAD     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 389 - 9/5/2025 20:20:35


   22494/    71B7 :                     L_KEY_DECODE_5:
   22495/    71B7 : F1                      POP     PSW							;restore SHIFT Carry status
   22496/    71B8 : 7E                      MOV     A,M							;keyboard character 
   22497/    71B9 : D2 C2 71                JNC     +							;brif no shift
   22498/    71BC : FE 60                   CPI     'a'- 1						;60H
   22499/    71BE : D0                      RNC									;return if >= 'a'- 1
   22500/    71BF : E6 3F                   ANI     3FH							;00111111H. No Carry
   22501/    71C1 : (MACRO)             	SKIP_2BYTES_INST_JC					;skip ORA A & RZ
   22502/    71C2 : B7                  +	ORA     A							;test A
   22503/    71C3 : C8                      RZ									;return if A == 0
   22504/    71C4 :                     L_KEY_DECODE_6:							;continuation function
   22505/    71C4 : 4F                      MOV     C,A							;save key value
   22506/    71C5 : E6 EF                   ANI     0EFH						;11101111B clear bit 4
   22507/    71C7 : FE 03                   CPI     03H							;^C
   22508/    71C9 : C2 E4 71                JNZ     R_KEY_ADD_TO_BUF			;if not ^C => Keyboard buffer management - place subsequent key in buffer
   22509/    71CC : 3A 50 F6                LDA     FNKMOD_R					;Function key mode/ BIT 7=in TEXT (0x80) BIT 6=in TELCOM (0x40)
   22510/    71CF : E6 C0                   ANI     0C0H						;11000000
   22511/    71D1 : C2 E4 71                JNZ     R_KEY_ADD_TO_BUF			;if TEXT or TELCOM => Keyboard buffer management - place subsequent key in buffer
   22512/    71D4 : 79                      MOV     A,C							;unmodified key value: 03H or 13H (XOFF) fall through
   22513/    71D5 :                     ;
   22514/    71D5 :                     ; Keyboard buffer management - clear buffer if ^C
   22515/    71D5 :                     ;
   22516/    71D5 :                     ; IN:
   22517/    71D5 :                     ;	A		key
   22518/    71D5 :                     ;	BC		Extended key
   22519/    71D5 :                     ;
   22520/    71D5 :                     R_KEY_CTRLC_TST:						;71D5H
   22521/    71D5 : 32 EB FF                STA     PNDCTRL_R					;Holds CTRL-C or CTRL-S until it is processed
   22522/    71D8 : FE 03                   CPI     03H							;^C
   22523/    71DA : C0                      RNZ									;brif FALSE
   22524/    71DB : 21 AA FF                LXI     H,KBCNT_R				    ;Keyboard buffer count
   22525/    71DE : 36 01                   MVI     M,01H						;remove pending keys
   22526/    71E0 : 23                      INX     H							;to keyboard typeahead buffer KBBUF_R
   22527/    71E1 : C3 F0 71                JMP     L_STORE_EXT_KEY				;store extended key
   22528/    71E4 :                     ;
   22529/    71E4 :                     ; Keyboard buffer management - place subsequent key in buffer
   22530/    71E4 :                     ; extended key in BC
   22531/    71E4 :                     ; D must be 0
   22532/    71E4 :                     ;
   22533/    71E4 :                     R_KEY_ADD_TO_BUF:						;71E4H
   22534/    71E4 : 21 AA FF                LXI     H,KBCNT_R				    ;Keyboard buffer count
   22535/    71E7 : 7E                      MOV     A,M
   22536/    71E8 : FE 20                   CPI     32							;max
   22537/    71EA : C8                      RZ									;return if buffer full
   22538/    71EB : 34                      INR     M							;update			
   22539/    71EC : 07                      RLC									;count * 2
   22540/    71ED : 23                      INX     H							;to keyboard typeahead buffer KBBUF_R
   22541/    71EE : 5F                      MOV     E,A
   22542/    71EF : 19                      DAD     D							;ptr to store location
   22543/    71F0 :                     L_STORE_EXT_KEY:						;BC input
   22544/    71F0 : 71                      MOV     M,C							;store key
   22545/    71F1 : 23                      INX     H							;next
   22546/    71F2 : 70                      MOV     M,B							;store extended part
   22547/    71F3 : F1                      POP     PSW							;clean up stack
   22548/    71F4 :                     ;
   22549/    71F4 :                     ; Set new interrupt mask and pop all regs & RET
   22550/    71F4 :                     ;
   22551/    71F4 :                     ; See also L_ENA_INT_75_65
   22552/    71F4 :                     ;
   22553/    71F4 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 390 - 9/5/2025 20:20:35


   22554/    71F4 :                     L_ENA_INT_75_65_POP:
   22555/    71F4 : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   22556/    71F6 : 30                      SIM    
   22557/    71F7 :                     ;
   22558/    71F7 :                     ; Interrupt exit routine (pop all regs & RET)
   22559/    71F7 :                     ;
   22560/    71F7 :                     R_ISR_EXIT_FUN:							;71F7H
   22561/    71F7 : F1                      POP     PSW
   22562/    71F8 :                     L_POP_WREGS_RET:
   22563/    71F8 : C1                      POP     B
   22564/    71F9 : D1                      POP     D
   22565/    71FA : E1                      POP     H
   22566/    71FB : FB                      EI     
   22567/    71FC : C9                      RET
   22568/    71FD :                     ;
   22569/    71FD :                     ; continuation of R_KEY_DETECTION()
   22570/    71FD :                     ;
   22571/    71FD :                     L_KEY_DETECT_1:
   22572/    71FD : 21 90 FF                LXI     H,KBDCNTR_R
   22573/    7200 : 35                      DCR     M
   22574/    7201 : C0                      RNZ									;retif KBDCNTR_R != 0
   22575/    7202 : 21 91 FF                LXI     H,KBDCOL1_R
   22576/    7205 : 06 11                   MVI     B,11H						;17
   22577/    7207 : C3 0A 4F                JMP     R_CLEAR_MEM				    ;Zero B bytes at M. Then return from R_KEY_DETECTION()
   22578/    720A :                     ;
   22579/    720A :                     ; Handle unshifted & non-CTRL key during key decoding
   22580/    720A :                     ; BC contains offset
   22581/    720A :                     ; comment may be wrong
   22582/    720A :                     ; PSW (SHIFT Carry status) on stack
   22583/    720A :                     ;
   22584/    720A :                     R_UNSHIFTED_KEY:						;720AH
   22585/    720A : 79                      MOV     A,C
   22586/    720B : FE 1A                   CPI     1AH							;26
   22587/    720D : 21 1D 7C                LXI     H,R_KEYBOARD_CONV_SHIFTED	;Code Based. preload
   22588/    7210 : DA B6 71                JC      L_KEY_DECODE_4				;brif A < 1AH
   22589/    7213 : FE 2C                   CPI     2CH							;','
   22590/    7215 : DA 1D 72                JC      +							;brif A < 2CH
   22591/    7218 : FE 30                   CPI     30H							;48
   22592/    721A : DA 22 72                JC      R_ARROW_KEY				    ;if A < 30H Handle Arrow keys during key decoding
   22593/    721D : F1                  +	POP     PSW
   22594/    721E : F5                      PUSH    PSW
   22595/    721F : C3 8E 71                JMP     L_KEY_DECODE_2
   22596/    7222 :                     ;
   22597/    7222 :                     ; Handle Arrow keys during key decoding
   22598/    7222 :                     ; B must be 0
   22599/    7222 :                     ;
   22600/    7222 :                     R_ARROW_KEY:							;7222H
   22601/    7222 : D6 2C                   SUI     2CH							;rebase to 0..3
   22602/    7224 : 21 2F 7D                LXI     H,L_KEYBOARD_5					;Code Based. keyboard table
   22603/    7227 : 4F                      MOV     C,A							;store rebased key value
   22604/    7228 : 09                      DAD     B							;index
   22605/    7229 : C3 B7 71                JMP     L_KEY_DECODE_5
   22606/    722C :                     ;
   22607/    722C :                     ; Handle CAPS LOCK key during key decoding
   22608/    722C :                     ;
   22609/    722C :                     R_CAPS_LOCK_KEY:						;722CH
   22610/    722C : 79                      MOV     A,C
   22611/    722D : FE 1A                   CPI     1AH							;26
   22612/    722F : D0                      RNC									;retif A >= 1AH
   22613/    7230 : 1E 2C                   MVI     E,2CH						;44
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 391 - 9/5/2025 20:20:35


   22614/    7232 : C9                      RET
   22615/    7233 :                     ;
   22616/    7233 :                     ; Handle NUM key during key decoding
   22617/    7233 :                     ;
   22618/    7233 :                     ; IN:
   22619/    7233 :                     ;	HL		indexed R_KEYBOARD_CONV_MATRIX ptr (Code Based)
   22620/    7233 :                     ; OUT:
   22621/    7233 :                     ;	HL		NUM key value for this key
   22622/    7233 :                     ;	Z		set if no match
   22623/    7233 :                     ;
   22624/    7233 :                     R_NUM_KEY:								;7233H
   22625/    7233 : 7E                      MOV     A,M							;Code Based.
   22626/    7234 : 1E 06                   MVI     E,06H						;6..0 Loop counter: test 7 keys
   22627/    7236 : 21 F9 7C                LXI     H,R_KEYBOARD_NUM			;Code Based. keyboard num decoding table
   22628/    7239 : BE                  -	CMP     M							;compare with relevant NUM key entry
   22629/    723A : 23                      INX     H							;ptr to NUM value
   22630/    723B : C8                      RZ									;return HL here  
   22631/    723C : 23                      INX     H							;inc ptr to next num key entry
   22632/    723D : 1D                      DCR     E							;loop counter
   22633/    723E : F2 39 72                JP      -							;brif E >= 0
   22634/    7241 : C9                      RET									;! Z flag
   22635/    7242 :                     ;
   22636/    7242 :                     ; Scan keyboard for character (CTRL-BREAK ==> CTRL-C)
   22637/    7242 :                     ;
   22638/    7242 :                     R_SCAN_KEYBOARD:						;7242H
   22639/    7242 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   22640/    7245 : 3A AA FF                LDA     KBCNT_R						;Keyboard buffer count
   22641/    7248 : B7                      ORA     A
   22642/    7249 : CA 6A 72                JZ      R_ENABLE_INTS     		 	;brif no chars: Enable interrupts as normal
   22643/    724C : 21 AC FF                LXI     H,KBBUF_R+1
   22644/    724F : 7E                      MOV     A,M
   22645/    7250 : C6 02                   ADI		02H
   22646/    7252 : 2B                      DCX     H
   22647/    7253 : 7E                      MOV     A,M
   22648/    7254 : F5                      PUSH    PSW
   22649/    7255 : 2B                      DCX     H							;to KBBUF_R
   22650/    7256 : 35                      DCR     M
   22651/    7257 : 7E                      MOV     A,M
   22652/    7258 : 07                      RLC    
   22653/    7259 : 4F                      MOV     C,A
   22654/    725A : 23                      INX     H
   22655/    725B : 11 AD FF                LXI     D,KBBUF_R+2					;0FFADH
   22656/    725E : 0D                  -	DCR     C
   22657/    725F : FA 69 72                JM      +							;pop PSW and enable interrupt
   22658/    7262 : 1A                      LDAX    D
   22659/    7263 : 77                      MOV     M,A
   22660/    7264 : 23                      INX     H
   22661/    7265 : 13                      INX     D
   22662/    7266 : C3 5E 72                JMP     -
   22663/    7269 :                     
   22664/    7269 : F1                  +	POP     PSW
   22665/    726A :                     ;
   22666/    726A :                     ; Enable interrupts as normal
   22667/    726A :                     ;
   22668/    726A :                     R_ENABLE_INTS:				    		;726AH
   22669/    726A : F5                      PUSH    PSW
   22670/    726B : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   22671/    726D : 30                      SIM    
   22672/    726E : F1                      POP     PSW
   22673/    726F : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 392 - 9/5/2025 20:20:35


   22674/    7270 :                     ;
   22675/    7270 :                     ; Check keyboard queue for pending characters
   22676/    7270 :                     ;
   22677/    7270 :                     R_CHK_PENDING_KEYS:						;7270H
   22678/    7270 : CD 83 72                CALL    R_CHK_BREAK				    ;Check for break or wait (CTRL-S)
   22679/    7273 : CA 7E 72                JZ      +
   22680/    7276 : FE 03                   CPI     03H
   22681/    7278 : C2 7E 72                JNZ     +
   22682/    727B : B7                      ORA     A
   22683/    727C : 37                      STC
   22684/    727D : C9                      RET
   22685/    727E : 3A AA FF            +	LDA     KBCNT_R						;Keyboard buffer count
   22686/    7281 : B7                      ORA     A
   22687/    7282 : C9                      RET
   22688/    7283 :                     ;
   22689/    7283 :                     ; Check for break or wait (CTRL-S)
   22690/    7283 :                     ;
   22691/    7283 :                     R_CHK_BREAK:							;7283H
   22692/    7283 : E5                      PUSH    H
   22693/    7284 : 21 EB FF                LXI     H,PNDCTRL_R					;Holds CTRL-C or CTRL-S until it is processed
   22694/    7287 : 7E                      MOV     A,M
   22695/    7288 : 36 00                   MVI     M,00H						;clear ^C or ^S
   22696/    728A : E1                      POP     H
   22697/    728B : B7                      ORA     A
   22698/    728C : F0                      RP     								;return if ^C or ^S
   22699/    728D : E5                      PUSH    H
   22700/    728E : C5                      PUSH    B
   22701/    728F : 21 CA F7                LXI     H,FNKSTR_R+41H				;Function key definition area 0F7CAH
   22702/    7292 : 4F                      MOV     C,A							;zero extend A to BC
   22703/    7293 : 06 00                   MVI     B,00H
   22704/    7295 : 09                      DAD     B							;times 8
   22705/    7296 : 09                      DAD     B
   22706/    7297 : 09                      DAD     B
   22707/    7298 : CD D2 3F                CALL    R_TRIG_INTR				    ;Trigger interrupt.  HL points to interrupt table
   22708/    729B : C1                      POP     B
   22709/    729C : E1                      POP     H
   22710/    729D : AF                      XRA     A
   22711/    729E : C9                      RET
   22712/    729F :                     ;
   22713/    729F :                     ; Check if SHIFT-BREAK is being pressed
   22714/    729F :                     ; Returns carry if pressed.
   22715/    729F :                     ;
   22716/    729F :                     R_CHK_SHIFT_BREAK:						;729FH
   22717/    729F : C5                      PUSH    B
   22718/    72A0 : (MACRO)                 INPORT	0B9H						;8155 PIO Port A
   22719/    72A2 : 4F                      MOV     C,A
   22720/    72A3 : CD B1 72                CALL    R_SCAN_SPECIAL_KEYS      	;Scan BREAK),CAPS),NUM),CODE),GRAPH),CTRL),SHIFT & set bits in A
   22721/    72A6 : F5                      PUSH    PSW
   22722/    72A7 : 79                      MOV     A,C
   22723/    72A8 : (MACRO)                 OUTPORT	0B9H						;8155 PIO Port A
   22724/    72AA : F1                      POP     PSW
   22725/    72AB : C1                      POP     B
   22726/    72AC : E6 81                   ANI     81H							;Test for SHIFT-BREAK key combination
   22727/    72AE : C0                      RNZ									;SHIFT-BREAK not pressed.
   22728/    72AF : 37                      STC									;set carry
   22729/    72B0 : C9                      RET
   22730/    72B1 :                     ;
   22731/    72B1 :                     ; Scan BREAK),CAPS),NUM),CODE),GRAPH),CTRL),SHIFT & set bits in A
   22732/    72B1 :                     ;
   22733/    72B1 :                     ; DE & HL unchanged
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 393 - 9/5/2025 20:20:35


   22734/    72B1 :                     ;
   22735/    72B1 :                     R_SCAN_SPECIAL_KEYS:				    ;72B1H
   22736/    72B1 : 3E FF                   MVI     A,0FFH						;bit pattern
   22737/    72B3 : (MACRO)                 OUTPORT	0B9H						;8155 PIO Port A. Select columns 1-8
   22738/    72B5 : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B.
   22739/    72B7 : E6 FE                   ANI     0FEH						;11111110
   22740/    72B9 : 47                      MOV     B,A							;save bit pattern
   22741/    72BA : (MACRO)                 OUTPORT	0BAH						;set 8155 PIO Port B. Deselect column 9
   22742/    72BC : (MACRO)                 INPORT	0E8H						;Keyboard input and misc. device select
   22743/    72BE : F5                      PUSH    PSW							;save result in A. 
   22744/    72BF : 78                      MOV     A,B							;restore bit pattern
   22745/    72C0 : 3C                      INR     A							;turn on bit 0
   22746/    72C1 : (MACRO)                 OUTPORT	0BAH						;8155 PIO Port B. Select column 9
   22747/    72C3 : F1                      POP     PSW							;restore result in A
   22748/    72C4 : C9                      RET
   22749/    72C5 :                     ;
   22750/    72C5 :                     ; Produce a tone of DE freq and B duration
   22751/    72C5 :                     ;
   22752/    72C5 :                     R_GEN_TONE:								;72C5H
   22753/    72C5 : F3                      DI 
   22754/    72C6 : 7B                      MOV     A,E
   22755/    72C7 : (MACRO)                 OUTPORT	0BCH						;8155 Timer register. LSB of timer counter
   22756/    72C9 : 7A                      MOV     A,D
   22757/    72CA : F6 40                   ORI     40H							;01000000
   22758/    72CC : (MACRO)                 OUTPORT	0BDH						;8155 Timer register. MSB of timer counter
   22759/    72CE : 3E C3                   MVI     A,0C3H						;set Port A & B to OUTPUT, start 8155 timer
   22760/    72D0 : (MACRO)                 OUTPORT	0B8H						;set 8155 PIO Command/Status Register
   22761/    72D2 : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
   22762/    72D4 : E6 F8                   ANI     0F8H						;11111000 clear bits 0..2
   22763/    72D6 : F6 20                   ORI     20H							;00100000 set bit 5: Data to beeper if bit 2 set. Set if bit 2 low
   22764/    72D8 : (MACRO)                 OUTPORT	0BAH						;set 8155 PIO Port B. Start tone
   22765/    72DA :                     L_GEN_TONE_1:
   22766/    72DA : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   22767/    72DD : D2 E8 72                JNC     +							;brif NOT pressed
   22768/    72E0 : 3E 03                   MVI     A,03H						;SHIFT-BREAK to be` pressed
   22769/    72E2 : 32 EB FF                STA     PNDCTRL_R					;Holds CTRL-C or CTRL-S until it is processed
   22770/    72E5 : C3 F9 72                JMP     L_STOP_TONE
   22771/    72E8 :                     ;
   22772/    72E8 :                     ; Duration routine
   22773/    72E8 :                     ;   100 times R_DELAY_FUNC(30)
   22774/    72E8 :                     ;
   22775/    72E8 : 0E 64               +	MVI     C,64H						;100 to C
   22776/    72EA : C5                  -	PUSH    B							;save BC
   22777/    72EB : 0E 1E                   MVI     C,1EH						;30 to C
   22778/    72ED : CD 57 76                CALL    R_DELAY_FUNC				;Delay routine - decrement C until zero
   22779/    72F0 : C1                      POP     B							;restore BC
   22780/    72F1 : 0D                      DCR     C
   22781/    72F2 : C2 EA 72                JNZ     -
   22782/    72F5 : 05                      DCR     B							;Tone duration
   22783/    72F6 : C2 DA 72                JNZ     L_GEN_TONE_1				;continue while checking SHIFT-BREAK
   22784/    72F9 :                     L_STOP_TONE:
   22785/    72F9 : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
   22786/    72FB :                     L_BEEP_RESET:							;called by vt100.asm with A==01H
   22787/    72FB : F6 04                   ORI     04H							;00000100. Beep toggle
   22788/    72FD :                     										;	(1-Data from bit 5, 0-Data from 8155 timer)
   22789/    72FD : (MACRO)                 OUTPORT	0BAH						;set 8155 PIO Port B. Turn off tone
   22790/    72FF : CD 83 6E                CALL    L_RS232_SET_1				;reset 8155
   22791/    7302 : FB                      EI     
   22792/    7303 : C9                      RET
   22793/    7304 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 394 - 9/5/2025 20:20:35


   22794/    7304 : =>TRUE              	if DEADCODE
   22795/    7304 :                     ;
   22796/    7304 :                     ; IO ports 70H..7FH are reserved for user expansion.
   22797/    7304 :                     ; IO ports 070H, 071H are used by the REMEM hardware extension.
   22798/    7304 :                     ; Unclear what original ROM code is doing.
   22799/    7304 :                     ; Could be used by an option rom.
   22800/    7304 :                     ;
   22801/    7304 :                     L_PORT70H:
   22802/    7304 : E5                      PUSH    H
   22803/    7305 : D5                      PUSH    D
   22804/    7306 : C5                      PUSH    B
   22805/    7307 : F5                      PUSH    PSW
   22806/    7308 : (MACRO)             	GETDEFROMM
   22807/    730C : 4E                      MOV     C,M
   22808/    730D : 23                      INX     H
   22809/    730E : 46                      MOV     B,M							;get BC from M
   22810/    730F : 23                      INX     H
   22811/    7310 : 7E                      MOV     A,M							;get A from M
   22812/    7311 : D3 70                   OUT     70H
   22813/    7313 : F3                      DI 
   22814/    7314 : 23                      INX     H
   22815/    7315 : 7E                      MOV     A,M
   22816/    7316 : D3 71                   OUT     71H
   22817/    7318 : 23                      INX     H
   22818/    7319 : 7E                      MOV     A,M
   22819/    731A : D3 72                   OUT     72H
   22820/    731C : 78                  -	MOV     A,B							;BC is count
   22821/    731D : B1                      ORA     C
   22822/    731E : CA F7 71                JZ      R_ISR_EXIT_FUN				;Interrupt exit routine (pop all regs, EI & RET)
   22823/    7321 : DB 73                   IN      73H							;Read from port 73H and store at *DE
   22824/    7323 : 12                      STAX    D
   22825/    7324 : 13                      INX     D
   22826/    7325 : 0B                      DCX     B
   22827/    7326 : C3 1C 73                JMP     -
   22828/    7329 :                     
   22829/    7329 : =>FALSE             	else								;DEADCODE
   22830/    7329 :                     	rept 37								;37 bytes FREE CODE SPACE if !DEADCODE
   22831/    7329 :                     	nop
   22832/    7329 :                     	endm
   22833/    7329 : [22794]             	endif								;DEADCODE
   22834/    7329 :                     ;
   22835/    7329 :                     ; Copy clock chip regs to M (10 bytes)
   22836/    7329 :                     ;
   22837/    7329 :                     R_GET_CLK_CHIP_REGS:				    ;7329H
   22838/    7329 : (MACRO)             	SKIP_XRA_A							;ORI 0AFH
   22839/    732A :                     ;
   22840/    732A :                     ; Update clock chip regs from M: 40 bits clock data
   22841/    732A :                     ;
   22842/    732A :                     ; A == 0 => update. A == 0AFH => copy
   22843/    732A :                     ;
   22844/    732A :                     R_PUT_CLK_CHIP_REGS:				    ;732AH
   22845/    732A : AF                      XRA     A
   22846/    732B : F5                      PUSH    PSW							;save action
   22847/    732C : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task. Flags unaffected.
   22848/    732F : 3E 03                   MVI     A,03H						;Group 0: Read Clock Chip mode
   22849/    7331 : C4 83 73                CNZ     R_SET_CLK_CHIP_MODE      	;Set clock chip mode to READ if copy operation
   22850/    7334 : 3E 01                   MVI     A,01H						;Group 0: Clock Serial Shift Mode
   22851/    7336 : CD 83 73                CALL    R_SET_CLK_CHIP_MODE      	;Set clock chip mode
   22852/    7339 : 0E 07                   MVI     C,07H
   22853/    733B : CD 57 76                CALL    R_DELAY_FUNC				;Delay routine - decrement C until zero
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 395 - 9/5/2025 20:20:35


   22854/    733E : 06 0A                   MVI     B,0AH						;loop 10 times 1 nibble
   22855/    7340 :                     ClkLoop1:
   22856/    7340 : 0E 04                   MVI     C,04H						;nibble loop
   22857/    7342 : 56                      MOV     D,M							;get existing data from buffer (if updating)
   22858/    7343 :                     ClkLoop2:
   22859/    7343 : F1                      POP     PSW							;copy if A != 0
   22860/    7344 : F5                      PUSH    PSW
   22861/    7345 :                     ;
   22862/    7345 :                     ; Labels & comments seems to reverse read and write
   22863/    7345 :                     ;
   22864/    7345 : CA 52 73                JZ      R_READ_CLK_CHIP_BIT      	;Read next bit from Clock Chip
   22865/    7348 :                     ;
   22866/    7348 :                     ; Write (??) next bit to Clock Chip
   22867/    7348 :                     ; copy bit from clock chip to upper nibble in D
   22868/    7348 :                     ;
   22869/    7348 : (MACRO)                 INPORT	0BBH						;read 8155 PIO Port C
   22870/    734A : 1F                      RAR									;move bit 0 to carry: Serial data input from clock chip
   22871/    734B : 7A                      MOV     A,D							;get D into A
   22872/    734C : 1F                      RAR									;move carry into bit 7
   22873/    734D : 57                      MOV     D,A
   22874/    734E : AF                      XRA     A
   22875/    734F : C3 5D 73                JMP     L_CLK_CHIP
   22876/    7352 :                     ;
   22877/    7352 :                     ; Read (??) next bit from Clock Chip
   22878/    7352 :                     ;
   22879/    7352 :                     R_READ_CLK_CHIP_BIT:					;7352H
   22880/    7352 : 7A                      MOV     A,D							;get D into A
   22881/    7353 : 0F                      RRC									;move bit 0 into carry and bit 7
   22882/    7354 : 57                      MOV     D,A							;save rotated value
   22883/    7355 :                     	; carry was old bit 0 of D. Move carry to bit 4
   22884/    7355 :                     	; bit 4 is "Serial data into clock chip"
   22885/    7355 : 3E 10                   MVI     A,10H						;00010000
   22886/    7357 : 1F                      RAR									;C0001000
   22887/    7358 : 1F                      RAR									;0C000100
   22888/    7359 : 1F                      RAR									;00C00010
   22889/    735A : 1F                      RAR									;000C0001
   22890/    735B : (MACRO)                 OUTPORT	0B9H
   22891/    735D :                     ;
   22892/    735D :                     ; continue. Toggle clock bit (3) to shift bit in our out of Clock Chip
   22893/    735D :                     ;
   22894/    735D :                     L_CLK_CHIP:
   22895/    735D : F6 09                   ORI     09H							;00001001 Set bit 3 (Clock) + C0
   22896/    735F : (MACRO)                 OUTPORT	0B9H
   22897/    7361 : E6 F7                   ANI     0F7H						;11110111 clear bit 3 (Clock)
   22898/    7363 : (MACRO)                 OUTPORT	0B9H
   22899/    7365 : 0D                      DCR     C							;bits in nibble count
   22900/    7366 : C2 43 73                JNZ     ClkLoop2
   22901/    7369 : 7A                      MOV     A,D							;nibble from Clock Chip if reading
   22902/    736A : 0F                      RRC									;High nibble to low nibble
   22903/    736B : 0F                      RRC
   22904/    736C : 0F                      RRC
   22905/    736D : 0F                      RRC
   22906/    736E : E6 0F                   ANI     0FH							;00001111 isolate lower nibble
   22907/    7370 : 77                      MOV     M,A							;update Clock Chip Buffer
   22908/    7371 : 23                      INX     H
   22909/    7372 : 05                      DCR     B							;nibble
   22910/    7373 : C2 40 73                JNZ     ClkLoop1
   22911/    7376 : F1                      POP     PSW							;get mode in Z and remove from stack
   22912/    7377 : 3E 02                   MVI     A,02H						;Write Clock Chip Mode
   22913/    7379 : CC 83 73                CZ      R_SET_CLK_CHIP_MODE      	;Set clock chip mode if mode was 0
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 396 - 9/5/2025 20:20:35


   22914/    737C : AF                      XRA     A							;nop/hold Clock Chip Mode
   22915/    737D : CD 83 73                CALL    R_SET_CLK_CHIP_MODE      	;Set clock chip mode
   22916/    7380 : C3 3C 74                JMP     L_ENA_INT_75_65				;Enable background tasks
   22917/    7383 :                     ;
   22918/    7383 :                     ; Set clock chip mode
   22919/    7383 :                     ;
   22920/    7383 :                     ; Port 0B9H bits:
   22921/    7383 :                     ;   0 -  C0
   22922/    7383 :                     ;   1 -  C1
   22923/    7383 :                     ;   2 -  C2
   22924/    7383 :                     ;   3 -  Clock
   22925/    7383 :                     ;	4 -  Serial data into clock chip
   22926/    7383 :                     ;
   22927/    7383 :                     ; A contains mode
   22928/    7383 :                     ;	Group 0
   22929/    7383 :                     ;	0: nop/hold
   22930/    7383 :                     ;	1: Serial Shift
   22931/    7383 :                     ;	2: Write Clock chip
   22932/    7383 :                     ;	3: Read Clock chip
   22933/    7383 :                     ;	Group 1
   22934/    7383 :                     ;	5: 256 Hz
   22935/    7383 :                     ;
   22936/    7383 :                     ;
   22937/    7383 :                     R_SET_CLK_CHIP_MODE:				    ;7383H
   22938/    7383 : (MACRO)                 OUTPORT	0B9H
   22939/    7385 :                     ; Strobe bit 2 for Clock chip
   22940/    7385 : 3A 45 FF                LDA     PORTE8_R					;Contents of port E8H
   22941/    7388 : F6 04                   ORI     04H							;00000100 set bit 2
   22942/    738A : (MACRO)                 OUTPORT	0E8H						;set Keyboard input and misc. device select
   22943/    738C : E6 FB                   ANI     0FBH						;11111011 clear bit 2
   22944/    738E : (MACRO)                 OUTPORT	0E8H						;set Keyboard input and misc. device select
   22945/    7390 : C9                      RET
   22946/    7391 :                     ;
   22947/    7391 :                     ;Cursor BLINK - Continuation of RST 7.5 Background hook
   22948/    7391 :                     ;
   22949/    7391 :                     L_BLINK_CURSOR_0:
   22950/    7391 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   22951/    7394 : 21 55 70                LXI     H,R_KEYSCAN_MGT_FUN			;set return address
   22952/    7397 : E5                      PUSH    H
   22953/    7398 : 21 F3 FF                LXI     H,CSRCNT_R
   22954/    739B : 35                      DCR     M							;Decrement the cursor blink count-down
   22955/    739C : C0                      RNZ									;retif not 0
   22956/    739D : 36 7D                   MVI     M,7DH						;reset the cursor blink count-down
   22957/    739F : 2B                      DCX     H							;Decrement to address of cursor blink on-off status: CSRSTAT_R
   22958/    73A0 : 7E                      MOV     A,M							;get CSRSTAT_R
   22959/    73A1 : B7                      ORA     A							;test
   22960/    73A2 : F2 A6 73                JP      +							;brif bit 7 clear
   22961/    73A5 : E0                      RPO									;Return if Parity Odd: return if P == 0. If A == 080H, return
   22962/    73A6 : EE 01               +	XRI     01H							;flip status and update
   22963/    73A8 : 77                      MOV     M,A
   22964/    73A9 :                     ;
   22965/    73A9 :                     ; Blink the cursor
   22966/    73A9 :                     ;
   22967/    73A9 :                     R_BLINK_CURSOR:							;73A9H
   22968/    73A9 : E5                      PUSH    H
   22969/    73AA : 21 EC FF                LXI     H,LCDBUF_R				    ;LCD buffer
   22970/    73AD : 16 00                   MVI     D,00H						;function argument: read
   22971/    73AF : CD A2 74                CALL    L_LCD_CHAR_RW				;read bit pattern from LCD. Updates HL
   22972/    73B2 : 06 06                   MVI     B,06H
   22973/    73B4 : 2B                      DCX     H							;reverse LCDBUF_R
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 397 - 9/5/2025 20:20:35


   22974/    73B5 : 7E                  -	MOV     A,M
   22975/    73B6 : 2F                      CMA									;complement pixels to get inverse video
   22976/    73B7 : 77                      MOV     M,A
   22977/    73B8 : 2B                      DCX     H
   22978/    73B9 : 05                      DCR     B
   22979/    73BA : C2 B5 73                JNZ     -
   22980/    73BD : 23                      INX     H
   22981/    73BE : 16 01                   MVI     D,01H						;function argument: write
   22982/    73C0 : CD A2 74                CALL    L_LCD_CHAR_RW				;Bytes to/from LCD. Updates HL
   22983/    73C3 : E1                      POP     H
   22984/    73C4 : C9                      RET
   22985/    73C5 :                     ;
   22986/    73C5 :                     ; Turn off background task, blink & reinitialize cursor blink time
   22987/    73C5 :                     ;
   22988/    73C5 :                     L_BLINK_LCD:
   22989/    73C5 : E5                      PUSH    H							;save all registers
   22990/    73C6 : D5                      PUSH    D
   22991/    73C7 : C5                      PUSH    B
   22992/    73C8 : F5                      PUSH    PSW
   22993/    73C9 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   22994/    73CC : 21 F2 FF                LXI     H,CSRSTAT_R
   22995/    73CF : 7E                      MOV     A,M
   22996/    73D0 : 0F                      RRC									;bit 0 to Carry
   22997/    73D1 : DC A9 73                CC      R_BLINK_CURSOR				;calif bit 0 was 0: Blink the cursor. Saves HL
   22998/    73D4 : 36 80                   MVI     M,80H						;Reset Cursor Blink in CSRSTAT_R
   22999/    73D6 : C3 F4 71                JMP     L_ENA_INT_75_65_POP			;Set new interrupt mask and pop all regs & RET
   23000/    73D9 :                     ;
   23001/    73D9 :                     ; Initialize Cursor Blink to start blinking
   23002/    73D9 :                     ;
   23003/    73D9 :                     L_INIT_CRS_BLINK:
   23004/    73D9 : F5                      PUSH    PSW
   23005/    73DA : E5                      PUSH    H
   23006/    73DB : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   23007/    73DE : 21 F2 FF                LXI     H,CSRSTAT_R					;Cursor Blink Status
   23008/    73E1 : 7E                      MOV     A,M
   23009/    73E2 : E6 7F                   ANI     7FH							;clear bit 7 -> enable Cursor Blink
   23010/    73E4 : 77                      MOV     M,A
   23011/    73E5 : 23                      INX     H							;to CSRCNT_R
   23012/    73E6 : 36 01                   MVI     M,01H
   23013/    73E8 : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   23014/    73EA : 30                      SIM    
   23015/    73EB : E1                      POP     H
   23016/    73EC : F1                      POP     PSW
   23017/    73ED : C9                      RET
   23018/    73EE :                     ;
   23019/    73EE :                     ; Character plotting level 7.
   23020/    73EE :                     ;	Plot character in C on LCD at (HL). TODO should be at DE row & column
   23021/    73EE :                     ; IN:
   23022/    73EE :                     ;	C		char to plot
   23023/    73EE :                     ;	DE		Row & Column (1 based) char positions (not pixels)
   23024/    73EE :                     ;
   23025/    73EE :                     R_CHAR_PLOT_7:							;73EEH
   23026/    73EE : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   23027/    73F1 : 21 00 00                LXI     H,0
   23028/    73F4 : 39                      DAD     SP							;SP to HL
   23029/    73F5 : 22 F8 FF                SHLD    SAVEDSP_R					;store SP
   23030/    73F8 : 15                      DCR     D							;make Row & Column 0 based
   23031/    73F9 : 1D                      DCR     E
   23032/    73FA : EB                      XCHG								;to HL
   23033/    73FB : 22 F4 FF                SHLD    LCTEY_R						;store 0-based Row & Column
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 398 - 9/5/2025 20:20:35


   23034/    73FE : 79                      MOV     A,C
   23035/    73FF : 11 10 77                LXI     D,R_LCD_CHAR_SHAPE_TBL1-1	;Code Based. Char generation table
   23036/    7402 : D6 20                   SUI     20H							;rebase
   23037/    7404 :                     ;
   23038/    7404 :                     ; If A == ' ', we jump, causing DE to point to R_LCD_CHAR_SHAPE_TBL1-1
   23039/    7404 :                     ; Happens to work since byte before R_LCD_CHAR_SHAPE_TBL1 == 0
   23040/    7404 :                     ;
   23041/    7404 : CA 10 74                JZ      +							;brif A == ' '.
   23042/    7407 : 13                      INX     D							;to R_LCD_CHAR_SHAPE_TBL1
   23043/    7408 : FE 60                   CPI     60H							;80H since 20H subtracted
   23044/    740A : DA 10 74                JC      +							;brif char was < 080H
   23045/    740D :                     ;
   23046/    740D :                     ; char >= 60H, meaning originally >= 128/80H
   23047/    740D :                     ; keep the 60H (96) offset when doing table calculations
   23048/    740D :                     ; but correct the table address by 96 * 6 = 576 bytes (240H)
   23049/    740D :                     ;
   23050/    740D : 11 B1 76                LXI     D,R_LCD_CHAR_SHAPE_TBL2-0240H ;Code Based. special characters table address
   23051/    7410 : F5                  +	PUSH    PSW							;save Carry. Carry set means char < 80H
   23052/    7411 : 6F                      MOV     L,A							;zero extend rebased char to HL
   23053/    7412 : 26 00                   MVI     H,00H
   23054/    7414 : 44                      MOV     B,H							;copy HL to BC
   23055/    7415 : 4D                      MOV     C,L
   23056/    7416 : 29                      DAD     H							;times 2
   23057/    7417 : 29                      DAD     H							;times 4
   23058/    7418 : 09                      DAD     B							;times 5
   23059/    7419 : F1                      POP     PSW							;retrieve Carry
   23060/    741A : F5                      PUSH    PSW
   23061/    741B : DA 1F 74                JC      +							;brif char < 80H
   23062/    741E :                     ; char >= 80H, width is 6 bytes
   23063/    741E : 09                      DAD     B							;times 6
   23064/    741F : 19                  +	DAD     D							;index by adding offset to table address
   23065/    7420 : F1                      POP     PSW							;restore Carry
   23066/    7421 : D2 30 74                JNC     +							;brif char >= 080H
   23067/    7424 :                     ;
   23068/    7424 :                     ; char < 80H. Copy bytes to LCDBUF_R so we can add a 0
   23069/    7424 :                     ;
   23070/    7424 : 11 EC FF                LXI     D,LCDBUF_R				    ;LCD buffer ptr
   23071/    7427 : D5                      PUSH    D							;save LCD buffer ptr
   23072/    7428 : 06 05                   MVI     B,05H
   23073/    742A : CD 42 25                CALL    R_MOVE_B_BYTES				;Move 5 bytes from M to (DE)
   23074/    742D : AF                      XRA     A
   23075/    742E : 12                      STAX    D							;terminate
   23076/    742F : E1                      POP     H							;LCD buffer ptr to HL
   23077/    7430 : 16 01               +	MVI     D,01H						;function argument: write
   23078/    7432 : CD A2 74                CALL    L_LCD_CHAR_RW				;Bytes to/from LCD
   23079/    7435 :                     L_CHAR_PLOT_EXIT:
   23080/    7435 : AF                      XRA     A
   23081/    7436 : 32 F9 FF                STA     SAVEDSP_R+1					;0FFF9H clear MSB
   23082/    7439 : CD 4B 75                CALL    L_CLR_LCD_TOP				;Set the display top line to zero for all LCD controllers
   23083/    743C :                     ;
   23084/    743C :                     ; See also L_ENA_INT_75_65_POP
   23085/    743C :                     ;
   23086/    743C :                     L_ENA_INT_75_65:						;Enable background tasks
   23087/    743C : 3E 09                   MVI     A,09H						;00001001 MSE==1 Unmask 7.5 & 6.5. Mask INT 5.5
   23088/    743E : 30                      SIM    
   23089/    743F : C9                      RET
   23090/    7440 :                     ;
   23091/    7440 :                     ; Rebase LCD column # & row #. Store in LCTEY_R and LCTEX_R
   23092/    7440 :                     ;
   23093/    7440 :                     ; IN:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 399 - 9/5/2025 20:20:35


   23094/    7440 :                     ;	DE		column & row, 1 based
   23095/    7440 :                     ;
   23096/    7440 :                     L_SET_LCTEYX:
   23097/    7440 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   23098/    7443 : 15                      DCR     D							;rebase column & row to 0
   23099/    7444 : 1D                      DCR     E
   23100/    7445 : EB                      XCHG								;DE to HL 
   23101/    7446 : 22 F4 FF                SHLD    LCTEY_R						;LCD row 0..7, column 0..39
   23102/    7449 : C3 3C 74                JMP     L_ENA_INT_75_65				;Enable background tasks
   23103/    744C :                     ;
   23104/    744C :                     ; Plot (set) point DE on the LCD
   23105/    744C :                     ;
   23106/    744C :                     ; IN:
   23107/    744C :                     ;	D		column (X) (0..239)
   23108/    744C :                     ;	E		row (Y) in bits (0..63)
   23109/    744C :                     ;
   23110/    744C :                     R_PLOT_POINT:							;744CH
   23111/    744C : (MACRO)             	SKIP_XRA_A							;ORI 0AFH  plot: A != 0
   23112/    744D :                     ;
   23113/    744D :                     ; Clear (reset) point DE on the LCD
   23114/    744D :                     ;
   23115/    744D :                     R_CLEAR_POINT:							;744DH
   23116/    744D : AF                      XRA     A							;clear: A == 0
   23117/    744E :                     ;
   23118/    744E :                     ; Need to compute a bit address for Y, then read the byte value at the
   23119/    744E :                     ; byte address the bit is in, clear or set the appropriate bit
   23120/    744E :                     ; then write back the byte value to the same byte address
   23121/    744E :                     ;
   23122/    744E :                     ; D: column	E: row
   23123/    744E :                     ;
   23124/    744E : F5                      PUSH    PSW							;save mode
   23125/    744F : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   23126/    7452 : D5                      PUSH    D							;save original coordinates
   23127/    7453 :                     ;
   23128/    7453 :                     ; compute vertical position within driver chip (column)
   23129/    7453 :                     ; driverX = column % 50
   23130/    7453 :                     ; C will be 2 times driver # (0..9)
   23131/    7453 :                     ;
   23132/    7453 : 0E FE                   MVI     C,0FEH						;predecrement
   23133/    7455 : 7A                      MOV     A,D							;get column
   23134/    7456 : 0C                  -	INR     C
   23135/    7457 : 0C                      INR     C
   23136/    7458 : 57                      MOV     D,A							;driverX
   23137/    7459 : D6 32                   SUI     32H							;50
   23138/    745B : D2 56 74                JNC     -
   23139/    745E : 06 00                   MVI     B,00H						;zero extend C to BC
   23140/    7460 :                     ;
   23141/    7460 :                     ; D is now column address within the driver #, which is in C (times 2).
   23142/    7460 :                     ; column address range 0..31H (requires 6 bits)
   23143/    7460 :                     ; E is Y (row) range 0..3FH
   23144/    7460 :                     ; Y consists of: Y-bank (bit 5) Y-page (bits 3..4) Y-bit (bits 0..2)
   23145/    7460 :                     ; row 0..1FH is TOP Drivers bank. row 20H..3FH is bottom Drivers bank.
   23146/    7460 :                     ; move bit 5 to carry to determine top or bottom bank
   23147/    7460 :                     ; update L_LCD_DRVS_TOP if carry set
   23148/    7460 :                     ; take _BV(Y-bit) to clear or set a pixel in existing byte value
   23149/    7460 :                     ;
   23150/    7460 : 21 43 76                LXI     H,L_LCD_DRVS_TOP   			;Code Based. preload 8155 PIO chip bit patterns	for top bank
   23151/    7463 : 7B                      MOV     A,E							;00XHHHHH Y
   23152/    7464 : 17                      RAL									;0XHHHHH0
   23153/    7465 : 17                      RAL									;XHHHHH00
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 400 - 9/5/2025 20:20:35


   23154/    7466 : 17                      RAL									;HHHHH000 Y-bank (bit 5) to carry
   23155/    7467 :                     ;
   23156/    7467 :                     ; A now contains (Y << 3). Bits 6..7 are the page number of Y
   23157/    7467 :                     ; no advantage to using BASEPATCH here.
   23158/    7467 : =>FALSE             	if	0&BASEPATCH
   23159/    7467 :                     	LXI		H,L_LCD_DRVS_TOP			;@STEVEADOLPH Why load L_LCD_DRVS_TOP again?
   23160/    7467 :                     	CALL	L_UPD_DRV_SELECT_PTR		;C, carry is argument. Add zero extended C (2 times driver #)
   23161/    7467 :                     	NOP
   23162/    7467 :                     	NOP
   23163/    7467 : =>TRUE              	else								;!BASEPATCH
   23164/    7467 : D2 6D 74                JNC     +
   23165/    746A : 21 4D 76                LXI     H,L_LCD_DRVS_BOTTOM			;Code Based.
   23166/    746D : 09                  +	DAD     B
   23167/    746E : 47                      MOV     B,A							;save (Y << 3)
   23168/    746F : [23158]             	endif								;BASEPATCH
   23169/    746F :                     	
   23170/    746F : CD 5B 75                CALL    L_SELECT_LCD_DRIVER			;HL input
   23171/    7472 : 78                      MOV     A,B							;restore (Y << 3)
   23172/    7473 : E6 C0                   ANI     0C0H						;Isolate page number
   23173/    7475 : B2                      ORA     D							;merge with driver X: PPAAAAAA
   23174/    7476 : 47                      MOV     B,A							;save complete driver address in B
   23175/    7477 : 1E 01                   MVI     E,01H						;byte count 1
   23176/    7479 : 21 EC FF                LXI     H,LCDBUF_R					;LCD buffer
   23177/    747C : CD 15 75                CALL    L_LCD_PLOT_RD				;read it
   23178/    747F : D1                      POP     D							;restore original coordinates
   23179/    7480 : 50                      MOV     D,B							;complete driver address
   23180/    7481 : 7B                      MOV     A,E							;Y to A
   23181/    7482 : E6 07                   ANI     07H							;Y-bit
   23182/    7484 : 87                      ADD     A							;double since 2 bytes per entry 0..14
   23183/    7485 : 4F                      MOV     C,A							;zero extend A to BC
   23184/    7486 : 06 00                   MVI     B,00H
   23185/    7488 : 21 43 76                LXI     H,L_BIT_VCTRS	 		  	;Code Based. bit vectors 01H..80H
   23186/    748B : 09                      DAD     B							;index into L_BIT_VCTRS
   23187/    748C : F1                      POP     PSW							;restore mode (A==0 clear A !=0 plot)
   23188/    748D : 7E                      MOV     A,M							;get bit vector for desired bit
   23189/    748E : 21 EC FF                LXI     H,LCDBUF_R				    ;LCD buffer
   23190/    7491 : C2 97 74                JNZ     +							;brif Z flag not set: PLOT function
   23191/    7494 :                     ;
   23192/    7494 :                     ; Clear a pixel: [LCDBUF_R] &= ~_BV(Y-bit)
   23193/    7494 :                     ;
   23194/    7494 : 2F                      CMA									;~_BV(Y-bit)
   23195/    7495 : A6                      ANA     M							;& ~_BV(Y-bit)
   23196/    7496 : (MACRO)             	SKIP_BYTE_INST_B					;skip ORA instruction
   23197/    7497 :                     ;
   23198/    7497 :                     ; Plot a pixel: [LCDBUF_R] |= _BV(Y-bit)
   23199/    7497 :                     ;
   23200/    7497 : B6                  +	ORA     M							;| _BV(Y-bit)
   23201/    7498 : 77                      MOV     M,A							;update LCDBUF_R
   23202/    7499 : 42                      MOV     B,D							;complete driver address
   23203/    749A : 1E 01                   MVI     E,01H						;byte count 1
   23204/    749C : CD 16 75                CALL    L_LCD_PLOT_WR				;write byte containing the bit to set or clear
   23205/    749F : C3 3C 74                JMP     L_ENA_INT_75_65				;Enable background tasks
   23206/    74A2 :                     ;
   23207/    74A2 :                     ; Bytes to/from LCD. Updates HL
   23208/    74A2 :                     ;
   23209/    74A2 :                     ; uses LCTEX_R and LCTEY_R as coordinates. These are
   23210/    74A2 :                     ; 0 based char coordinates range 0..39 and 0..7
   23211/    74A2 :                     ;
   23212/    74A2 :                     ; M100 LCD hardware is addressed as 240 columns (X) by
   23213/    74A2 :                     ; 8 rows (Y) byte values (not bits)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 401 - 9/5/2025 20:20:35


   23214/    74A2 :                     ; There are 2 banks of driver chips, 5 drivers per bank
   23215/    74A2 :                     ; top bank for rows 0..3 and bottom bank for rows 4..7
   23216/    74A2 :                     ; Each driver has a maximum of 50 columns where each
   23217/    74A2 :                     ; column contains 4 (vertical) bytes of pixels.
   23218/    74A2 :                     ; These 4 bytes are called pages (1 byte per page)
   23219/    74A2 :                     ; labelled page 0..3.
   23220/    74A2 :                     ; Each bank of 5 drivers thus supports 250 columns
   23221/    74A2 :                     ; but only 240 columns are used. The last 10 columns
   23222/    74A2 :                     ; in drivers 4 and 8 are not displayed.
   23223/    74A2 :                     ; The hardware supports a mechanism where it can be told
   23224/    74A2 :                     ; which page to show as the top line. The default M100
   23225/    74A2 :                     ; firmware does not use this facility but the
   23226/    74A2 :                     ; HWSCROLL conditional does.
   23227/    74A2 :                     ;
   23228/    74A2 :                     ; For a given coordinate X,Y (range 0..239, 0..7)
   23229/    74A2 :                     ; we need to determine the driver (0..9), the
   23230/    74A2 :                     ; column offset within that driver (X % 50) and
   23231/    74A2 :                     ; the page number within that driver (Y % 5)
   23232/    74A2 :                     ; The driver is selected using ports 0xB9 and 0xBA (L_SELECT_LCD_DRIVER)
   23233/    74A2 :                     ; The address within each driver to be read or written
   23234/    74A2 :                     ; is contained in a byte of the form PPAAAAA
   23235/    74A2 :                     ; where PP means the page number (0..3) in bits 6-7
   23236/    74A2 :                     ; and AAAAAA is the column number (0..49) in bits 0..5
   23237/    74A2 :                     ; this address is written to the selected driver using
   23238/    74A2 :                     ; port 0xFE. A subsequent read of port 0xFF will return
   23239/    74A2 :                     ; the byte value at that location and a write to port 0xFF
   23240/    74A2 :                     ; will write a byte to that location.
   23241/    74A2 :                     ;
   23242/    74A2 :                     ; Keep in mind that this byte value represents 8 vertical
   23243/    74A2 :                     ; pixels on the LCD where bit 0 is the top pixel of the
   23244/    74A2 :                     ; column
   23245/    74A2 :                     ;
   23246/    74A2 :                     ; We're writing up to 6 (vertical) bytes in this function
   23247/    74A2 :                     ; so these byte may span across multiple driver chips (step 1, step 2)
   23248/    74A2 :                     ;
   23249/    74A2 :                     ; Original ROM:
   23250/    74A2 :                     ; R_LCD_BIT_PATTERNS and L_LCD_BIT_PATTERNS_2 contain bit patterns
   23251/    74A2 :                     ; to write to port 0xB9 and 0xB1 to select a driver chip.
   23252/    74A2 :                     ; These ports require 10 bits so the table uses 2 bytes per driver.
   23253/    74A2 :                     ;
   23254/    74A2 :                     ; BASEPATCH:
   23255/    74A2 :                     ; R_LCD_BIT_PATTERNS has 80 bytes, 2 bytes per entry, so 40 entries
   23256/    74A2 :                     ; where byte 1 is an offset in L_LCD_DRVS_TOP/L_LCD_DRVS_BOTTOM
   23257/    74A2 :                     ; and byte 2 is driver column address to be used for each entry
   23258/    74A2 :                     ;
   23259/    74A2 :                     ; LCDPATCH:
   23260/    74A2 :                     ; To save space, the R_LCD_BIT_PATTERNS tables are removed
   23261/    74A2 :                     ; completely to save space. The code does the full driver decoding
   23262/    74A2 :                     ; for each column for char column positions: 8, 16, 33.
   23263/    74A2 :                     ; This slows down the display rendering a little but
   23264/    74A2 :                     ; saves a lot of code space
   23265/    74A2 :                     ;
   23266/    74A2 :                     ;	if ((LCTEX_R == 8) || (LCTEX_R == 16) || (LCTEX_R == 33)) {
   23267/    74A2 :                     ;		bitcol = LCTEX_R * 6;			// 6 bit columns per char
   23268/    74A2 :                     ;		for (i = 0; i < 6; ++i) {
   23269/    74A2 :                     ;			L_LCD_BYTE_PLOT(bitcol, LCTEY_R, pBuf + i, 1):
   23270/    74A2 :                     ;				select driver based on bitcol and bank (from LCTEY_R)
   23271/    74A2 :                     ;				compute driver address (based on bitcol and LCTEY_R)
   23272/    74A2 :                     ;				call L_LCD_PLOT for 1 column
   23273/    74A2 :                     ;				++bitcol;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 402 - 9/5/2025 20:20:35


   23274/    74A2 :                     ;		} else {
   23275/    74A2 :                     ;			L_LCD_BYTE_PLOT(bitcol, LCTEY_R, pBuf + i, 6)
   23276/    74A2 :                     ;				call L_LCD_PLOT for 6 columns
   23277/    74A2 :                     ;		}
   23278/    74A2 :                     ;	}
   23279/    74A2 :                     
   23280/    74A2 :                     ;
   23281/    74A2 :                     ; Function argument in D indicates read or write
   23282/    74A2 :                     ;
   23283/    74A2 :                     ; The M100 LCD drivers do support auto-increment of the column
   23284/    74A2 :                     ; address within a driver so only the first write in a series
   23285/    74A2 :                     ; of writes (character pixels) needs to specify the column address.
   23286/    74A2 :                     ;
   23287/    74A2 :                     ; The ROM addresses of L_LCD_CHAR_RW() and R_DELAY_FUNC(), which is
   23288/    74A2 :                     ; the function after all this LCD access code need to stay the same.
   23289/    74A2 :                     ;
   23290/    74A2 :                     ; Note that the M100 always uses bit columns as the X coordinates and
   23291/    74A2 :                     ; page numbers (columns of 8 pixels) to talk to the hardware.
   23292/    74A2 :                     ; The ROM code uses byte positions coordinates (LCTEX_R and LCTEY_R)
   23293/    74A2 :                     ; for the X axis when dealing with characters.
   23294/    74A2 :                     ; The ROM code uses bit positions for both the X and Y axis when dealing
   23295/    74A2 :                     ; with pixels.
   23296/    74A2 :                     ;
   23297/    74A2 :                     ; There are also special commands to send to the M100 LCD drivers,
   23298/    74A2 :                     ; including scroll support by selecting the page number showing
   23299/    74A2 :                     ; as the top line (HWSCROLL)
   23300/    74A2 :                     ;
   23301/    74A2 :                     ; L_LCD_CHAR_RW()
   23302/    74A2 :                     ;
   23303/    74A2 :                     ; Read/Write 6 bytes from/to the LCD at LCD
   23304/    74A2 :                     ; location [LCTEX_R, LCTEY_R]
   23305/    74A2 :                     ;
   23306/    74A2 :                     ; IN:
   23307/    74A2 :                     ;	D		0 (read) or 1 (write)
   23308/    74A2 :                     ;	HL		buffer to read or write
   23309/    74A2 :                     ;
   23310/    74A2 :                     ; Normally uses 2 steps in case the 6 bytes span two driver chips.
   23311/    74A2 :                     ;
   23312/    74A2 :                     
   23313/    74A2 :                     L_LCD_CHAR_RW:							;74A2H
   23314/    74A2 :                     
   23315/    74A2 : =>TRUE              	if LCDPATCH							;simplified BASEPATCH
   23316/    74A2 : E5                  	push	h							;save buffer ptr
   23317/    74A3 :                     ;
   23318/    74A3 :                     ; compute LCD Driver Selection table ptr
   23319/    74A3 :                     ;
   23320/    74A3 : AF                  	xra		a							;clear carry for coming RARs
   23321/    74A4 : 3A F4 FF            	lda		LCTEY_R						;LCD char row 0..7 00000421
   23322/    74A7 :                     ;
   23323/    74A7 :                     ; determine LCD bank driver 0..4 (top) or 5..9 (bottom)
   23324/    74A7 :                     ; also moves bits 1,2 to 6,7: page number
   23325/    74A7 :                     ; LCTEY_R should be in the range 0..7: 00000421
   23326/    74A7 :                     ;
   23327/    74A7 : 1F                  	RAR									;00000042 1 to carry 
   23328/    74A8 : 1F                    	RAR									;10000004 2 to carry
   23329/    74A9 : 1F                     	RAR									;21000000 4 to carry. A has page number (range 0..3) in bits 6,7
   23330/    74AA : 5F                  	mov		e,a							;save page number
   23331/    74AB : 21 43 76            	LXI		H,L_LCD_DRVS_TOP			;Code Based. preload top table ptr
   23332/    74AE : D2 B4 74            	JNC		+
   23333/    74B1 : 21 4D 76            	LXI		H,L_LCD_DRVS_BOTTOM			;bottom bank
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 403 - 9/5/2025 20:20:35


   23334/    74B4 : 22 F6 FF            +	SHLD	PBTABLE_R					;store LCD Driver Selection table ptr
   23335/    74B7 : 0E 00                   MVI     c,0							;preset split flag
   23336/    74B9 : 3A F5 FF                LDA     LCTEX_R						;LCD char column (0..39)
   23337/    74BC : FE 08                   CPI     08H
   23338/    74BE : CA CB 74                JZ      +							;brif 8
   23339/    74C1 : FE 10                   CPI     16
   23340/    74C3 : CA CB 74                JZ      +							;brif 16
   23341/    74C6 : FE 21                   CPI     33
   23342/    74C8 : C2 CC 74                JNZ     L_LCD_PLOT_2				;brif !33
   23343/    74CB :                     ; LCTEX_R == 8, 16 or 33: need to address each column individually
   23344/    74CB : 0C                  +	inr		c							;set split flag to 1
   23345/    74CC :                     L_LCD_PLOT_2:
   23346/    74CC :                     ;
   23347/    74CC :                     ; multiply A by 6 to get LCD bit column
   23348/    74CC :                     ; A should be in the range 0..39 so no bits in position 6 & 7
   23349/    74CC :                     ;
   23350/    74CC : 6F                  	mov		l,a
   23351/    74CD : 07                  	rlc									;times 2
   23352/    74CE : 07                  	rlc									;times 4
   23353/    74CF : 85                  	add		l							;times 5
   23354/    74D0 : 85                  	add		l							;times 6
   23355/    74D1 : E1                  	pop		h							;restore buffer ptr
   23356/    74D2 :                     ;
   23357/    74D2 :                     ; A is column number
   23358/    74D2 :                     ; C is split flag
   23359/    74D2 :                     ; D is read/write argument
   23360/    74D2 :                     ; E is page number in bits 6..7
   23361/    74D2 :                     ; HL is buffer ptr
   23362/    74D2 :                     ;
   23363/    74D2 : 47                  	mov		b,a							;save column number - 1
   23364/    74D3 : 79                  	mov		a,c							;split flag
   23365/    74D4 : B7                  	ora		a							;test
   23366/    74D5 : 78                  	mov		a,b							;restore column number - 1
   23367/    74D6 : C2 DF 74            	jnz		L_LCD_PLOT_3				;must split character render
   23368/    74D9 :                     ;
   23369/    74D9 :                     ; A is column number
   23370/    74D9 :                     ; D is read/write argument
   23371/    74D9 :                     ; E is page number in bits 6..7
   23372/    74D9 :                     ; HL is buffer ptr
   23373/    74D9 :                     ;
   23374/    74D9 : 06 06               	mvi		b,6							;send all char columns at once
   23375/    74DB : CD F1 74            	call	L_CHAR_COL_OUT
   23376/    74DE : C9                  	ret
   23377/    74DF :                     	
   23378/    74DF :                     L_LCD_PLOT_3:
   23379/    74DF : 3D                  	dcr		a							;pre-decrement.
   23380/    74E0 : 06 06               	mvi		b,6							;loop counter 6..1
   23381/    74E2 :                     L_LCD_CHAR_LOOP:
   23382/    74E2 : C5                  	push	b							;save loop counter
   23383/    74E3 : 3C                  	inr		a							;next column
   23384/    74E4 : F5                  	push	psw							;save new column
   23385/    74E5 : 06 01               	mvi		b,1							;send just 1 column
   23386/    74E7 : CD F1 74            	call	L_CHAR_COL_OUT
   23387/    74EA : F1                  	pop		psw							;restore current column
   23388/    74EB : C1                  	pop		b							;update loop counter
   23389/    74EC : 05                  	dcr		b							
   23390/    74ED : C2 E2 74            	jnz		L_LCD_CHAR_LOOP				;brif not done
   23391/    74F0 : C9                  	ret
   23392/    74F1 :                     ;
   23393/    74F1 :                     ; A is column number  (0..239)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 404 - 9/5/2025 20:20:35


   23394/    74F1 :                     ; B is column cnt	(1 or 6)
   23395/    74F1 :                     ; D is read/write argument
   23396/    74F1 :                     ; E is page number in bits 6..7
   23397/    74F1 :                     ; HL is buffer ptr
   23398/    74F1 :                     ;
   23399/    74F1 :                     L_CHAR_COL_OUT:
   23400/    74F1 : E5                      PUSH    H							;save buffer ptr
   23401/    74F2 : D5                  	push	d							;save D,E: read/write & page number
   23402/    74F3 : 50                  	mov		d,b							;save column cnt
   23403/    74F4 :                     ;
   23404/    74F4 :                     ; compute vertical position within driver chip (column)
   23405/    74F4 :                     ; A has column number. E has page number in bits 6..7
   23406/    74F4 :                     ;
   23407/    74F4 : 0E FE                   MVI     C,0FEH						;predecrement
   23408/    74F6 : 0C                  -	INR     C
   23409/    74F7 : 0C                      INR     C
   23410/    74F8 : 5F                      MOV     E,A							;column within driver
   23411/    74F9 : D6 32                   SUI     32H							;50
   23412/    74FB : D2 F6 74                JNC     -
   23413/    74FE :                     ;
   23414/    74FE :                     ; D = column cnt
   23415/    74FE :                     ; E = column % 50
   23416/    74FE :                     ; C now 2 times driver # (0..9)
   23417/    74FE :                     ;
   23418/    74FE : 06 00               	MVI		B,00H						;zero extend C to BC
   23419/    7500 : 2A F6 FF            	LHLD	PBTABLE_R					;retrieve LCD Driver Selection table ptr
   23420/    7503 : 09                  	DAD		B							;index into table
   23421/    7504 : CD 5B 75            	CALL	L_SELECT_LCD_DRIVER			;HL input
   23422/    7507 : 7B                  	mov		a,e							;restore driver column address to A
   23423/    7508 : 4A                  	mov		c,d							;restore column cnt to C
   23424/    7509 : D1                  	pop		d							;restore D,E: read/write & page number
   23425/    750A : B3                  	ORA		E							;merge in page number
   23426/    750B : 47                  	MOV		B,A							;B is complete driver address: PPAAAAAA
   23427/    750C : E1                  	POP		H							;restore updated buffer ptr
   23428/    750D : D5                  	push	d							;save read/write & page number
   23429/    750E : 59                  	mov		e,c							;column cnt: argument for L_LCD_PLOT()
   23430/    750F : 15                  	DCR		D							;decrement function argument. Sets Z flag if write argument
   23431/    7510 : CD 17 75            	CALL	L_LCD_PLOT					;Z is set: write. Z not set: read. Increments buffer ptr
   23432/    7513 : D1                  	pop		d							;restore read/write & page number
   23433/    7514 : C9                  	ret
   23434/    7515 :                     	
   23435/    7515 : =>FALSE             	elseif BASEPATCH
   23436/    7515 :                     	
   23437/    7515 :                         PUSH    H							;save buffer ptr
   23438/    7515 :                         MVI     E,06H						;preload byte count for step 1
   23439/    7515 :                         LDA     LCTEX_R						;LCD char column (0..39)
   23440/    7515 :                         CPI     08H							;8
   23441/    7515 :                         JZ      +							;brif 8: E -= 4: write 2 bytes in step 1
   23442/    7515 :                         CPI     10H							;16
   23443/    7515 :                         JZ      L_LCD_PLOT_1				;brif 16: E -= 2: write 4 bytes in step 1
   23444/    7515 :                         CPI     21H							;33
   23445/    7515 :                         JNZ     L_LCD_PLOT_2				;brif !33
   23446/    7515 :                     ; LCTEX_R == 33: write 2 bytes in step 1
   23447/    7515 :                     +	DCR     E							;adjust byte count step 1
   23448/    7515 :                         DCR     E							;adjust byte count step 1
   23449/    7515 :                     L_LCD_PLOT_1:
   23450/    7515 :                         DCR     E							;adjust byte count step 1
   23451/    7515 :                         DCR     E							;adjust byte count step 1
   23452/    7515 :                     L_LCD_PLOT_2:
   23453/    7515 :                     	RLC									;LCD column times 2
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 405 - 9/5/2025 20:20:35


   23454/    7515 :                     	MOV C,A								;sign extend A to BC
   23455/    7515 :                     	MVI B,00H
   23456/    7515 :                     	LXI H,R_LCD_BIT_PATTERNS			;Code Based. 
   23457/    7515 :                     	DAD B								;index
   23458/    7515 :                     	MOV C,M								;get offset to C
   23459/    7515 :                     	INX H								;next
   23460/    7515 :                     	MOV A,M								;get driver column address to A
   23461/    7515 :                     	PUSH PSW							;save driver column address
   23462/    7515 :                     	LDA LCTEY_R							;LCD char row 0..7 00000421
   23463/    7515 :                     ;
   23464/    7515 :                     ;determine LCD bank driver 0..4 (top) or 5..9 (bottom)
   23465/    7515 :                     ;also moves bits 1,2 to 6,7: page number
   23466/    7515 :                     ;
   23467/    7515 :                     	RAR									;00000042 1 to carry 
   23468/    7515 :                       	RAR									;10000004 2 to carry
   23469/    7515 :                        	RAR									;21000000 4 to carry. A has page number (0..3) in bits 6,7
   23470/    7515 :                     	LXI H,L_LCD_DRVS_TOP				;Code Based. preload
   23471/    7515 :                     ; add zero extended C (offset) to potentially updated HL
   23472/    7515 :                     	CALL L_UPD_DRV_SELECT_PTR			;add C, carry is input. May update HL. Returns page number in B (bits 6..7)
   23473/    7515 :                     	CALL L_SELECT_LCD_DRIVER			;HL input
   23474/    7515 :                     	SHLD PBTABLE_R						;store updated LCD Driver Selection table ptr
   23475/    7515 :                     	POP PSW								;restore driver column address to A
   23476/    7515 :                     	ORA B								;merge in page number
   23477/    7515 :                     	MOV B,A								;B is complete driver address.
   23478/    7515 :                     	POP H								;restore buffer ptr
   23479/    7515 :                     	DCR D								;decrement function argument. Sets Z flag if 1
   23480/    7515 :                     	CALL L_LCD_PLOT						;Z is set: Z not set: read
   23481/    7515 :                     	INR D								;increment function argument
   23482/    7515 :                     	MVI A,06H							;compute byte count for step 2
   23483/    7515 :                     	SUB E								;number of bytes just written
   23484/    7515 :                     	RZ									;retif 0: done
   23485/    7515 :                     	MOV E,A								;byte count for step 2
   23486/    7515 :                     	PUSH H								;save HL
   23487/    7515 :                     	LHLD PBTABLE_R						;restore updated LCD Driver Selection table ptr
   23488/    7515 :                     ;
   23489/    7515 :                     ; step 2 happens when the 6 bytes data for char generation span
   23490/    7515 :                     ; a driver boundary (just 3 cases, X==8, 16 or 33)
   23491/    7515 :                     ; if we need step 2, the column address within the new driver
   23492/    7515 :                     ; always starts at 0
   23493/    7515 :                     ;
   23494/    7515 :                         CALL    L_SELECT_LCD_DRIVER			;HL input
   23495/    7515 :                         POP     H							;restore ptr LCD Buffer
   23496/    7515 :                         MOV     A,B							;complete driver address
   23497/    7515 :                         ANI     0C0H						;isolate bits 6..7
   23498/    7515 :                         MOV     B,A							;page number only (column address 0)
   23499/    7515 :                         DCR     D							;clear carry for read/write
   23500/    7515 :                     ;
   23501/    7515 :                     ;	FALL THROUGH to step 2: L_LCD_PLOT_WR
   23502/    7515 :                     ;
   23503/    7515 :                     ; IN:
   23504/    7515 :                     ;	B		complete driver address PPAAAAAA
   23505/    7515 :                     ;	E		byte count
   23506/    7515 :                     ;	HL		ptr to bytes to read/write
   23507/    7515 :                     ;	carry	must be clear
   23508/    7515 :                     ;
   23509/    7515 :                     	SKIP_2BYTES_INST_JC					;skip SKIP_XRA_A. Continue at L_LCD_PLOT_WR
   23510/    7515 :                     
   23511/    7515 : =>FALSE             	else								;~ (LCDPATCH | BASEPATCH)
   23512/    7515 :                     
   23513/    7515 :                         PUSH    H							;save buffer ptr
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 406 - 9/5/2025 20:20:35


   23514/    7515 :                         MVI     E,06H						;preload byte count for step 1
   23515/    7515 :                         LDA     LCTEX_R						;LCD char column (0..39)
   23516/    7515 :                         CPI     08H							;8
   23517/    7515 :                         JZ      +							;brif 8: E -= 4: write 2 bytes in step 1
   23518/    7515 :                         CPI     10H							;16
   23519/    7515 :                         JZ      L_LCD_PLOT_1				;brif 16: E -= 2: write 4 bytes in step 1
   23520/    7515 :                         CPI     21H							;33
   23521/    7515 :                         JNZ     L_LCD_PLOT_2				;brif !33
   23522/    7515 :                     ; LCTEX_R == 33: write 2 bytes in step 1
   23523/    7515 :                     +	DCR     E							;adjust byte count step 1
   23524/    7515 :                         DCR     E							;adjust byte count step 1
   23525/    7515 :                     L_LCD_PLOT_1:
   23526/    7515 :                         DCR     E							;adjust byte count step 1
   23527/    7515 :                         DCR     E							;adjust byte count step 1
   23528/    7515 :                     L_LCD_PLOT_2:
   23529/    7515 :                         MOV     C,A							;LCD char column (0..39)
   23530/    7515 :                         ADD     C							;times 2
   23531/    7515 :                         ADD     C							;3 bytes per column
   23532/    7515 :                         MOV     C,A							;zero extend A to BC
   23533/    7515 :                         MVI     B,00H
   23534/    7515 :                     	LDA LCTEY_R							;LCD char row 0..7 00000421
   23535/    7515 :                     ;
   23536/    7515 :                     ; determine LCD bank 0..4 (top) or 5..9 (bottom). Move bits 1,0 to 7,6
   23537/    7515 :                     ;
   23538/    7515 :                     	RAR									;00000042 1 to carry 
   23539/    7515 :                       	RAR									;10000004 2 to carry
   23540/    7515 :                        	RAR									;21000000 4 to carry
   23541/    7515 :                     ;
   23542/    7515 :                     ; A has page number (0..3) in bits 6,7
   23543/    7515 :                     ;
   23544/    7515 :                         LXI     H,L_LCD_BIT_PATTERNS_2		;Code Based. preload enable bit patterns for bottom LCD drivers
   23545/    7515 :                         JC      +							;brif bottom drivers
   23546/    7515 :                         LXI     H,R_LCD_BIT_PATTERNS     	;Code Based. enable bit patterns for top LCD drivers
   23547/    7515 :                     +	DAD     B							;index
   23548/    7515 :                         MOV     B,A							;save page number in bits 6,7
   23549/    7515 :                         CALL    L_SELECT_LCD_DRIVER			;HL input and updated
   23550/    7515 :                         SHLD    PBTABLE_R					;store updated LCD Driver Selection table ptr
   23551/    7515 :                         MOV     A,B							;restore page number in bits 6,7
   23552/    7515 :                         ORA     M							;merge in column address
   23553/    7515 :                         MOV     B,A							;complete driver address in B
   23554/    7515 :                         POP     H							;restore HL
   23555/    7515 :                         DCR     D							;set Z based on function argument
   23556/    7515 :                         CALL    L_LCD_PLOT					;Z is set: Z not set: read
   23557/    7515 :                         INR     D							;restore function argument
   23558/    7515 :                         MVI     A,06H						;compute number of bytes for step 2
   23559/    7515 :                         SUB     E							;number of bytes just written
   23560/    7515 :                         RZ									;retif 0: done
   23561/    7515 :                         MOV     E,A							;remaining number of bytes to write
   23562/    7515 :                         PUSH    H							;save HL
   23563/    7515 :                         LHLD    PBTABLE_R					;restore updated LCD Driver Selection table ptr
   23564/    7515 :                     	INX     H							;skip column address already used
   23565/    7515 :                     ;
   23566/    7515 :                     ; step 2 happens when the 6 bytes data for char generation span
   23567/    7515 :                     ; a driver boundary (just 3 cases, X==8, 16 or 33)
   23568/    7515 :                     ; if we need step 2, the column address within the new driver
   23569/    7515 :                     ; always starts at 0
   23570/    7515 :                     ;
   23571/    7515 :                         CALL    L_SELECT_LCD_DRIVER			;HL input
   23572/    7515 :                         POP     H							;restore ptr LCD Buffer
   23573/    7515 :                         MOV     A,B							;complete driver address
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 407 - 9/5/2025 20:20:35


   23574/    7515 :                         ANI     0C0H						;isolate bits 6..7
   23575/    7515 :                         MOV     B,A							;page number only (column address 0)
   23576/    7515 :                         DCR     D							;clear carry for read/write
   23577/    7515 :                     ;
   23578/    7515 :                     ;	FALL THROUGH to step 2: L_LCD_PLOT_WR
   23579/    7515 :                     ;
   23580/    7515 :                     ; IN:
   23581/    7515 :                     ;	B		complete driver address PPAAAAAA
   23582/    7515 :                     ;	E		byte count
   23583/    7515 :                     ;	HL		ptr to bytes to read/write
   23584/    7515 :                     ;	carry	must be clear
   23585/    7515 :                     ;
   23586/    7515 :                     	SKIP_2BYTES_INST_JC					;skip SKIP_XRA_A. Continue at L_LCD_PLOT_WR
   23587/    7515 : [23315]              	endif								;LCDPATCH or BASEPATCH or NO PATCH
   23588/    7515 :                     
   23589/    7515 :                     L_LCD_PLOT_RD:
   23590/    7515 : (MACRO)             	SKIP_XRA_A							;ORI 0AFH. A != 0 means read request
   23591/    7516 :                     L_LCD_PLOT_WR:
   23592/    7516 : AF                      XRA     A							;A==0 means write request
   23593/    7517 :                     ;
   23594/    7517 :                     ; IN:
   23595/    7517 :                     ;	B		complete driver address
   23596/    7517 :                     ;	E		column count
   23597/    7517 :                     ;	HL		buffer ptr
   23598/    7517 :                     ;	Z		is set: write. not set: read
   23599/    7517 :                     ;
   23600/    7517 :                     L_LCD_PLOT:
   23601/    7517 :                     
   23602/    7517 : =>FALSE             	if		HWSCROLL
   23603/    7517 :                     ;	The value of the B register must be corrected to use the page number
   23604/    7517 :                     	JMP		correct_b					;preserves flags (Z set means write)
   23605/    7517 :                     L_LCD_PLOT_7:
   23606/    7517 :                     
   23607/    7517 : =>TRUE              	else								;HWSCROLL
   23608/    7517 : D5                      PUSH    D							;save DE
   23609/    7518 : F5                      PUSH    PSW							;save read/write mode
   23610/    7519 : 78                      MOV     A,B							;complete driver address
   23611/    751A : [23602]             	endif								;HWSCROLL
   23612/    751A :                     ; Z flag contains mode
   23613/    751A : CD 68 75                CALL    R_WAIT_LCD_DRIVER			;Wait for LCD driver to be available. Preserves flags
   23614/    751D : (MACRO)                 OUTPORT	0FEH						;set complete driver address
   23615/    751F : CA 27 75                JZ      +							;brif Z set (write mode)
   23616/    7522 : CD 68 75                CALL    R_WAIT_LCD_DRIVER			;Wait for LCD driver to be available
   23617/    7525 : (MACRO)                 INPORT	0FFH						;read from LCD (Dummy Read)
   23618/    7527 : F1                  +	POP     PSW							;restore mode: A==0: write A!=0: read
   23619/    7528 : C2 3B 75                JNZ     L_LCD_RD					;brif read
   23620/    752B :                     ;
   23621/    752B :                     ; Write E bytes to LCD
   23622/    752B :                     ;
   23623/    752B :                     L_LCD_WR:
   23624/    752B : (MACRO)             	INPORT	0FEH						;Wait for LCD driver to be available: REALM100
   23625/    752D : 17                      RAL									;status bit 7 to carry
   23626/    752E : DA 2B 75                JC      L_LCD_WR					;brif not available
   23627/    7531 : 7E                      MOV     A,M							;send byte at M to LCD
   23628/    7532 : (MACRO)                 OUTPORT	0FFH						;auto-updates address
   23629/    7534 : 23                      INX     H							;next
   23630/    7535 : 1D                      DCR     E							;byte count
   23631/    7536 : C2 2B 75                JNZ     L_LCD_WR					;brif more
   23632/    7539 : D1                      POP     D							;restore DE
   23633/    753A : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 408 - 9/5/2025 20:20:35


   23634/    753B :                     ;
   23635/    753B :                     ; read E bytes from LCD. Model 100 has a map of current LCD characters
   23636/    753B :                     ; but not of current LCD bits.
   23637/    753B :                     ;
   23638/    753B :                     L_LCD_RD:
   23639/    753B : (MACRO)                 INPORT	0FEH						;Wait for LCD driver to be available: REALM100
   23640/    753D : 17                      RAL									;status bit 7 to carry
   23641/    753E : DA 3B 75                JC      L_LCD_RD					;brif not available
   23642/    7541 : (MACRO)                 INPORT	0FFH						;read from LCD. auto-updates address
   23643/    7543 : 77                      MOV     M,A							;store byte from LCD to M
   23644/    7544 : 23                      INX     H							;next
   23645/    7545 : 1D                      DCR     E							;byte count
   23646/    7546 : C2 3B 75                JNZ     L_LCD_RD					;brif more
   23647/    7549 : D1                      POP     D							;restore DE
   23648/    754A : C9                      RET
   23649/    754B :                     ;
   23650/    754B :                     ; Set the display top line to zero for all LCD controllers
   23651/    754B :                     ;
   23652/    754B :                     L_CLR_LCD_TOP:
   23653/    754B :                     
   23654/    754B : =>FALSE             	if		HWSCROLL
   23655/    754B :                     ;	•	The page setting routine is modified to use the page number
   23656/    754B :                     ;	•	In addition, this routine is used to set page for the ESC-M and ESC-L routines.
   23657/    754B :                     	CALL	set_page					;returns page_loc in A
   23658/    754B :                     ;L_CLR_LCD_TOP_1:
   23659/    754B :                     	ORI		3EH							;set page command
   23660/    754B : =>TRUE              	else
   23661/    754B : CD 53 75                CALL    L_SELECT_LCD_DRIVER_ALL     ;Enable all LCD drivers after short delay
   23662/    754E : 3E 3E                   MVI     A,3EH						;set page 0 command (page 0 is top page)
   23663/    7550 : [23654]             	endif
   23664/    7550 :                     
   23665/    7550 : (MACRO)                 OUTPORT	0FEH
   23666/    7552 : C9                      RET
   23667/    7553 :                     ;
   23668/    7553 :                     ; Enable all LCD drivers after short delay
   23669/    7553 :                     ;
   23670/    7553 :                     ; OUT:
   23671/    7553 :                     ;	HL		LCD Driver Selection table ptr. Code Based.
   23672/    7553 :                     ;
   23673/    7553 :                     L_SELECT_LCD_DRIVER_ALL:				;7533H
   23674/    7553 : 0E 03                   MVI     C,03H
   23675/    7555 : CD 57 76                CALL    R_DELAY_FUNC				;Delay routine - decrement C until zero
   23676/    7558 : 21 41 76                LXI     H,L_LCD_SELECT_ALL			;Code Based. Table contains 0FFH, 03H
   23677/    755B :                     ;
   23678/    755B :                     ; Select LCD drivers
   23679/    755B :                     ;
   23680/    755B :                     ; IN:
   23681/    755B :                     ;	HL		ptr to 2 byte driver select bit pattern
   23682/    755B :                     ;
   23683/    755B :                     L_SELECT_LCD_DRIVER:
   23684/    755B : 7E                      MOV     A,M
   23685/    755C : (MACRO)                 OUTPORT	0B9H						;select driver chip in 8155 PIO Port A
   23686/    755E : 23                      INX     H
   23687/    755F : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
   23688/    7561 : E6 FC                   ANI     0FCH						;11111100B	Clear bits 0..1
   23689/    7563 : B6                      ORA     M
   23690/    7564 : (MACRO)                 OUTPORT	0BAH						;select driver chip in 8155 PIO Port B
   23691/    7566 : 23                      INX     H
   23692/    7567 : C9                      RET
   23693/    7568 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 409 - 9/5/2025 20:20:35


   23694/    7568 :                     ; Wait for LCD driver to be available
   23695/    7568 :                     ; REALM100: just return
   23696/    7568 :                     ;
   23697/    7568 :                     R_WAIT_LCD_DRIVER:						;7548H
   23698/    7568 : F5                      PUSH    PSW
   23699/    7569 : (MACRO)             -	INPORT	0FEH
   23700/    756B : 17                      RAL
   23701/    756C : DA 69 75                JC      -
   23702/    756F : F1                      POP     PSW
   23703/    7570 : C9                      RET
   23704/    7571 :                     ;
   23705/    7571 :                     ; 8155 PIO chip bit patterns for LCD drivers
   23706/    7571 :                     ;
   23707/    7571 : =>TRUE              	if	LCDPATCH
   23708/    7571 :                     
   23709/    7571 : =>TRUE              	if		VT100INROM
   23710/    7571 :                     	include	"VT100inROM2.asm"
(1)    1/    7571 :                     ;
(1)    2/    7571 :                     ; second part of vt100inROM.asm
(1)    3/    7571 :                     ;
(1)    4/    7571 :                     ;====================================================================================
(1)    5/    7571 :                     ;Strings used by the program
(1)    6/    7571 :                     ;====================================================================================
(1)    7/    7571 :                     RS232:
(1)    8/    7571 : 39 38 4E 31 44 00   		DB	"98N1D",00H	
(1)    9/    7577 :                     
(1)   10/    7577 :                     ;====================================================================================
(1)   11/    7577 :                     ; M100 Escape code mapping table
(1)   12/    7577 :                     ;====================================================================================
(1)   13/    7577 :                     ESCcodes:			
(1)   14/    7577 : 0B                  		DB	0Bh
(1)   15/    7578 : BE 75               		DW	L_home
(1)   16/    757A : 0C                  		DB	0Ch
(1)   17/    757B : BA 75               		DW	L_cls
(1)   18/    757D : 54                  		DB	"T"
(1)   19/    757E : DF 75               		DW	lock8
(1)   20/    7580 : 55                  		DB	"U"
(1)   21/    7581 : E1 75               		DW 	unlock8
(1)   22/    7583 : 56                  		DB	"V"
(1)   23/    7584 : E3 75               		DW	lockscroll
(1)   24/    7586 : 57                  		DB	"W"
(1)   25/    7587 : E5 75               		DW	unlockscroll		
(1)   26/    7589 : 50                  		DB	"P"
(1)   27/    758A : C0 75               		DW	L_curson
(1)   28/    758C : 51                  		DB	"Q"
(1)   29/    758D : C5 75               		DW 	cursoff
(1)   30/    758F : 4D                  		DB	"M"
(1)   31/    7590 : E7 75               		DW	delline
(1)   32/    7592 : 4C                  		DB	"L"
(1)   33/    7593 : E9 75               		DW	insline		
(1)   34/    7595 : 4B                  		DB	"K"
(1)   35/    7596 : CA 75               		DW	eraseEOL
(1)   36/    7598 : 70                  		DB	"p"
(1)   37/    7599 : CC 75               		DW	invchr
(1)   38/    759B : 71                  		DB	"q"
(1)   39/    759C : CF 75               		DW	normchr
(1)   40/    759E : 41                  		DB	"A"
(1)   41/    759F : D2 75               		DW 	cursup
(1)   42/    75A1 : 42                  		DB	"B"
(1)   43/    75A2 : D4 75               		DW	cursdwn
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(VT100inROM2.asm) - page 410 - 9/5/2025 20:20:35


(1)   44/    75A4 : 43                  		DB	"C"
(1)   45/    75A5 : D6 75               		DW	cursrt
(1)   46/    75A7 : 44                  		DB	"D"
(1)   47/    75A8 : D8 75               		DW	curslft
(1)   48/    75AA : 4A                  		DB	"J"
(1)   49/    75AB : DA 75               		DW 	eraseEOP
(1)   50/    75AD : 45                  		DB	"E"
(1)   51/    75AE : BA 75               		DW	L_cls
(1)   52/    75B0 : 6A                  		DB	"j"
(1)   53/    75B1 : BA 75               		DW	L_cls
(1)   54/    75B3 : 49                  		DB	"I"
(1)   55/    75B4 : DC 75               		DW	erasecl	
(1)   56/    75B6 : 48                  		DB	"H"
(1)   57/    75B7 : BE 75               		DW	L_home	
(1)   58/    75B9 : 00                  		DB	00
(1)   59/    75BA :                     					
(1)   60/    75BA : 32 4A 1B 5B         L_cls:		DB	"2J",01Bh,"["		; CLS, fall into HOME
(1)   61/    75BE : 48 00               L_home:		DB	"H",00				; Home
(1)   62/    75C0 : 3F 32 35 68 00      L_curson: 	DB	"?25h",00			; cursor on	
(1)   63/    75C5 : 3F 32 35 6C 00      cursoff:	DB	"?25l",00			; cursor off
(1)   64/    75CA : 4B 00               eraseEOL:	DB	"K",00				; erase to end of line
(1)   65/    75CC : 37 6D 00            invchr:		DB	"7m",00				; reverse character
(1)   66/    75CF : 30 6D 00            normchr:	DB	"0m",00				; normal character
(1)   67/    75D2 : 41 00               cursup:		DB	"A",00				; up
(1)   68/    75D4 : 42 00               cursdwn:	DB	"B",00				; down
(1)   69/    75D6 : 43 00               cursrt:		DB	"C",00				; right	
(1)   70/    75D8 : 44 00               curslft:	DB	"D",00				; left
(1)   71/    75DA : 4A 00               eraseEOP:	DB	"J",00				; erase to end of page
(1)   72/    75DC : 32 4B 00            erasecl: 	DB	"2K",00				; erase to end of page
(1)   73/    75DF :                     
(1)   74/    75DF : 54 00               lock8:		DB	"T",00				; lock line 8
(1)   75/    75E1 : 55 00               unlock8:	DB	"U",00				; unlock line 8
(1)   76/    75E3 : 56 00               lockscroll:	DB	"V",00				; lock scroll
(1)   77/    75E5 : 57 00               unlockscroll: 	DB	"W",00				; unlock scroll
(1)   78/    75E7 : 4D 00               delline:	DB	"M",00				; delete line @ cursor
(1)   79/    75E9 : 4C 00               insline: 	DB	"L",00				; insert line @ cursor
(1)   80/    75EB :                     		
(1)   81/    75EB :                     ;	double ESC trap		X		eliminated in VT100 driver.
(1)   82/    75EB :                     ;	L_home				0BH		mapped		[H
(1)   83/    75EB :                     ; 	L_cls				0CH		mapped		[2J + [H
(1)   84/    75EB :                     ; 	lock line 8			T		mapped		[T
(1)   85/    75EB :                     ;	unlock line 8		U		mapped		[U
(1)   86/    75EB :                     ;	lock scroll			V		mapped		[V
(1)   87/    75EB :                     ;	unlock scroll		W		mapped		[W
(1)   88/    75EB :                     ;	delete line@cursor	M		mapped		[M		
(1)   89/    75EB :                     ;	insert blank line	L		mapped		[L
(1)   90/    75EB :                     ; 	turn on cursor		P		mapped		[?25h
(1)   91/    75EB :                     ; 	turn off cursor		Q		mapped		[?25l
(1)   92/    75EB :                     ; 	erase to EOL		K		mapped		[K
(1)   93/    75EB :                     ; 	set reverse char	p		mapped		[7m
(1)   94/    75EB :                     ; 	reset reverse char	q		mapped		[0m
(1)   95/    75EB :                     
(1)   96/    75EB :                     ;	cursor up			A		mapped		[A
(1)   97/    75EB :                     ;	cursor down			B		mapped		[B
(1)   98/    75EB :                     ;	cursor right		C		mapped		[C
(1)   99/    75EB :                     ;	cursor left			D		mapped		[D
(1)  100/    75EB :                      
(1)  101/    75EB :                     ;	erase to end of page J		mapped		[J
(1)  102/    75EB :                     ;	set cursor location	Y,c,r	mapped		[<v>;<h>H
(1)  103/    75EB :                     ; 	L_cls				E		mapped		[2J			
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(VT100inROM2.asm) - page 411 - 9/5/2025 20:20:35


(1)  104/    75EB :                     ;	L_cls		 		j		mapped		[2J			
(1)  105/    75EB :                     ;	erase current line	I		mapped		[2K
(1)  106/    75EB :                     ;	vertical tab		H		mapped		[H
(1)  107/    75EB :                     
(1)  108/    75EB :                     ;====================================================================================
(1)  109/    75EB :                     ;Initialize DVI and Disk BASIC variables.
(1)  110/    75EB :                     ; called at cold boot
(1)  111/    75EB :                     ;====================================================================================
(1)  112/    75EB :                     
(1)  113/    75EB :                     init_vid:
(1)  114/    75EB : CD B3 52            	call	init_RS232
(1)  115/    75EE :                     ;
(1)  116/    75EE :                     ; clear flags
(1)  117/    75EE :                     ;
(1)  118/    75EE : CD AE 53            	call	xydone						;returns 0 in A
(1)  119/    75F1 :                     
(1)  120/    75F1 : =>TRUE              	if AUXCON
(1)  121/    75F1 : 32 FD FF            	sta		aux_console					;default is RS232
(1)  122/    75F4 : [120]               	endif
(1)  123/    75F4 :                     
(1)  124/    75F4 : 3C                  	inr		a
(1)  125/    75F5 : 32 FE FF            	sta		var1						;initialize to 1 on cold boot
(1)  126/    75F8 : 2F                  	cma									;set A to 0FEH
(1)  127/    75F9 :                     ;	
(1)  128/    75F9 :                     ;Set signature that Disk BASIC loaded. skip things like loading IPL. Actually skips L_XTRNL_CNTRLER_CPY()
(1)  129/    75F9 :                     ;
(1)  130/    75F9 : 32 FC FF            	STA	VIDFLG_R						;initialize to 0FFH on cold boot
(1)  131/    75FC :                     ;
(1)  132/    75FC :                     ; Reset terminal to initial state
(1)  133/    75FC :                     ; Only on cold boot though
(1)  134/    75FC :                     ;
(1)  135/    75FC : 3E 63               	mvi		A,'c'						;send RIS 
(1)  136/    75FE : CD 17 53            	call	sendESCa
(1)  137/    7601 :                     ;
(1)  138/    7601 :                     ; not needed if R_FUN_INIT_IMAGE is changed
(1)  139/    7601 :                     ;
(1)  140/    7601 :                     ;	lxi	h,5018h							;24x80 mode
(1)  141/    7601 :                     ;	shld DVIMAXROW_R					;Store max number of rows and columns for CRT
(1)  142/    7601 :                     ;
(1)  143/    7601 :                     ; DVIROWCOL_R is initialized to 1,1 at cold boot using the R_FUN_INIT_IMAGE block copy
(1)  144/    7601 :                     ;	LXI	H,0101H							;Prepare to go to Row 1, Col 1
(1)  145/    7601 :                     ;	shld DVIROWCOL_R					;DVI current ROW,COL	
(1)  146/    7601 : C9                  	RET
(1)  147/    7602 :                     
(1)  148/    7602 : =>FALSE             	if 0
(1)  149/    7602 :                     ;
(1)  150/    7602 :                     ; Uninitialize
(1)  151/    7602 :                     ;
(1)  152/    7602 :                     uninit_vid:
(1)  153/    7602 :                     	XRA		A
(1)  154/    7602 :                     	STA		VIDFLG_R
(1)  155/    7602 :                     	sta		ESC_pending
(1)  156/    7602 :                     	sta		Ypending
(1)  157/    7602 :                     	if	AUXCON
(1)  158/    7602 :                     	sta		aux_console
(1)  159/    7602 : [157]               	endif
(1)  160/    7602 :                     	ret
(1)  161/    7602 : [148]               	endif
(1)  162/    7602 :                     ;
(1)  163/    7602 :                     ;RST 7 Vector to Handler Mapping table.
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(VT100inROM2.asm) - page 412 - 9/5/2025 20:20:35


(1)  164/    7602 :                     ;   1st Byte = HOOK #
(1)  165/    7602 :                     ;   2nd Byte = LSB of Hook address
(1)  166/    7602 :                     ;   3rd Byte = MSB of Hook address			
(1)  167/    7602 :                     ;	
(1)  168/    7602 :                     hookdat:
(1)  169/    7602 : 44                  	DB	44H								;CRT PUT -  called at 14FA in M100
(1)  170/    7603 : E1 51               	DW	hk_crtput				
(1)  171/    7605 : 40                  	DB	40H								;CRT OPEN  -  called at 14F8 in M100			
(1)  172/    7606 : EA 51               	DW	hk_crtopen				
(1)  173/    7608 : 08                  	DB	08H								;Print A to SCREEN - called at 4317 in M100, starting at RST4 / 4B44			
(1)  174/    7609 : EE 51               	DW	hk_rst4					
(1)  175/    760B : 04                  	DB	04H								;CHGET - called at 12D4 (CHGET routine - wait for keyboard input)			
(1)  176/    760C : 11 52               	DW	hk_chget				
(1)  177/    760E : 3C                  	DB	3CH								;Initialize LCD/DVI - called from level 3 character print			
(1)  178/    760F : 29 52               	DW	hk_newconsole					;called from L_INIT_DVI, only when console flag = 1									
(1)  179/    7611 : 3E                  	DB	3EH								;SCREEN - called from 1E50
(1)  180/    7612 : 5A 52               	DW	hk_screen	
(1)  181/    7614 : FF                  	DB	0FFH							;Termination marker
(1)  182/    7615 :                     
(1)  183/    7615 : =>TRUE              	if	AUXCON
(1)  184/    7615 :                     ;
(1)  185/    7615 :                     ;fascas - send a byte to cassette for TTL serial @ 57600 bit/s
(1)  186/    7615 :                     ; routine to send a data byte out the cassette port
(1)  187/    7615 :                     ; direct connection, no filtering
(1)  188/    7615 :                     ; S. Adolph v2
(1)  189/    7615 :                     ; timing for 57600 baud
(1)  190/    7615 :                     ;
(1)  191/    7615 :                     ; send inverted TTL (so you get TTL externally)
(1)  192/    7615 :                     ; start = 1 (zero)
(1)  193/    7615 :                     ; data is inverted
(1)  194/    7615 :                     ; stop = 0 (one)
(1)  195/    7615 :                     ;     	
(1)  196/    7615 :                     ; start bit duration = 7+4+4+4+4+4+4+4+4+4 = 43
(1)  197/    7615 :                     ; data bit duration  = 4+10+4+4+4+4+4+4+4  = 42
(1)  198/    7615 :                     ; stop bit duration  = 4+7+4+4+4+4+4+7+4   = 42
(1)  199/    7615 :                     ;
(1)  200/    7615 :                     ; 42.65 clock cycles is ideal
(1)  201/    7615 :                     ; TTL Logic
(1)  202/    7615 :                     ;       
(1)  203/    7615 :                     fascas:
(1)  204/    7615 :                     
(1)  205/    7615 : F3                  	di
(1)  206/    7616 : 2F                  	cma
(1)  207/    7617 : 4F                  	mov	c,a								;store data	
(1)  208/    7618 : 16 40               	mvi	d,01000000b						;or data
(1)  209/    761A : 1E 80               	mvi	e,10000000b						;and data
(1)  210/    761C :                                	
(1)  211/    761C :                     sendstart:
(1)  212/    761C : 3E C0               	mvi	a,11000000b						;latch one
(1)  213/    761E : 30                  	sim									;send start bit
(1)  214/    761F :                     		
(1)  215/    761F : 06 08               	mvi	b,08
(1)  216/    7621 : 00                  	nop
(1)  217/    7622 : 00                  	nop									;start bit delay
(1)  218/    7623 :                                  
(1)  219/    7623 :                     sendloop:								;send 8 bits
(1)  220/    7623 : 79                  	mov	a,c								;get data
(1)  221/    7624 : 0F                  	rrc									;rotate bits, get carry status
(1)  222/    7625 : 4F                  	mov	c,a								;store data
(1)  223/    7626 :                     										;bit is in MSB
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm(VT100inROM2.asm) - page 413 - 9/5/2025 20:20:35


(1)  224/    7626 : A3                  	ana	e								;get data bit
(1)  225/    7627 : B2                  	ora	d								;set latch
(1)  226/    7628 :                     		
(1)  227/    7628 : 00                  	nop									;one delay
(1)  228/    7629 :                     				
(1)  229/    7629 : 30                  	sim									;send one bit
(1)  230/    762A : 05                  	dcr	b
(1)  231/    762B : C2 23 76            	jnz	sendloop
(1)  232/    762E :                                  	
(1)  233/    762E :                     sendstop:    
(1)  234/    762E : 00                  	nop
(1)  235/    762F : 00                  	nop
(1)  236/    7630 : 00                  	nop
(1)  237/    7631 : 00                  	nop
(1)  238/    7632 : 00                  	nop									;last bit delay for 57600
(1)  239/    7633 :                     		
(1)  240/    7633 : 3E 40               	mvi	a,01000000b						;latch one
(1)  241/    7635 : 30                  	sim									;send stop bit
(1)  242/    7636 :                     			
(1)  243/    7636 : FB                  	ei
(1)  244/    7637 : C9                  	ret									;Return to BIOS
(1)  245/    7638 : [183]               	endif								;AUXCON
(1)  246/    7638 :                     
   23711/    7638 : [23709]             	endif								;!VT100INROM
   23712/    7638 :                     ;
   23713/    7638 :                     ; Insert !REALM100 RST 7 handler here for now
   23714/    7638 :                     ; Reserved for future projects
   23715/    7638 :                     ;
   23716/    7638 : =>FALSE             	if REALM100==0
   23717/    7638 :                     ;
   23718/    7638 :                     ;code is 34. bytes longer than REALM100 code, total 68. bytes
   23719/    7638 :                     ;need to try using D to store RST38ARG_R but requires pushing D
   23720/    7638 :                     ; currently gap is only 9 bytes
   23721/    7638 :                     ;
   23722/    7638 :                     R_RAM_VCTR_TBL_DRIVER:
   23723/    7638 :                         XTHL							 	;(HL) points to offset byte
   23724/    7638 :                         PUSH    PSW
   23725/    7638 :                         MOV     A,M						 	;get offset byte
   23726/    7638 :                         STA     RST38ARG_R					;save offset of this RST 38H call
   23727/    7638 :                         POP     PSW
   23728/    7638 :                         INX     H						 	;(HL) now points to return address
   23729/    7638 :                         XTHL							 	;set return address and restore HL
   23730/    7638 :                     	PUSH    H
   23731/    7638 :                         PUSH    B
   23732/    7638 :                         PUSH    PSW							;value to output, if any
   23733/    7638 :                     	LDA		RST38ARG_R					;Restore Offset of this RST 38H call
   23734/    7638 :                     	CPI		61H							;5 extra bytes here
   23735/    7638 :                     	JNC		L_IOPORTS
   23736/    7638 :                         LXI     H,RST38_R				    ;Start of RST 38H vector table
   23737/    7638 :                         MOV     C,A						 	;offset is 2 * index 
   23738/    7638 :                         MVI     B,00H
   23739/    7638 :                         DAD     B
   23740/    7638 :                     	GETHLFROMM							;get ptr to HL
   23741/    7638 :                         POP     PSW
   23742/    7638 :                         POP     B
   23743/    7638 :                         XTHL							 	;swap saved HL on stack with jmp vector
   23744/    7638 :                     R_RET_INSTR:
   23745/    7638 :                         RET							 		;to jmp vector
   23746/    7638 :                     ; The code below requires 33 bytes.
   23747/    7638 :                     L_IOPORTS:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 414 - 9/5/2025 20:20:35


   23748/    7638 :                     	PUSH	PSW							;save opcode
   23749/    7638 :                     	ani		0FH							;isolate lower nibble
   23750/    7638 :                     	jz		L_INPORT					;brif nibble == 0
   23751/    7638 :                     	cpi		9
   23752/    7638 :                     	jnc		L_INPORT					;brif nibble >= 9
   23753/    7638 :                     	pop		PSW							;restore opcode
   23754/    7638 :                     	adi		47H							;actual port#	
   23755/    7638 :                     	out		STO_OPCODE
   23756/    7638 :                     	pop		PSW							;restore value to output
   23757/    7638 :                     	out		EXC_WR_OPCODE
   23758/    7638 :                     	jmp		L_IOEXIT
   23759/    7638 :                     L_INPORT:
   23760/    7638 :                     	pop		PSW							;restore opcode
   23761/    7638 :                     	if 0								;TODO
   23762/    7638 :                     	sbi		08H							;remove IN coding. MERGE
   23763/    7638 :                     	adi		47H							;restore opcode
   23764/    7638 :                     	else
   23765/    7638 :                     	adi		3FH							;-08H + 47H
   23766/    7638 : [23761]             	endif
   23767/    7638 :                     	out		STO_OPCODE
   23768/    7638 :                     	pop		PSW							;stack sync
   23769/    7638 :                     	in		EXC_WR_OPCODE
   23770/    7638 :                     L_IOEXIT:
   23771/    7638 :                     	pop		B							;restore stack
   23772/    7638 :                     	pop		H
   23773/    7638 :                     	ret
   23774/    7638 :                     
   23775/    7638 : =>TRUE              	else
   23776/    7638 :                     
   23777/    7638 :                     	DS		9							;9 bytes FREE CODE SPACE if REALM100
   23778/    7641 :                     
   23779/    7641 : [23716]             	endif								;REALM100
   23780/    7641 :                     
   23781/    7641 :                     ;
   23782/    7641 : =>FALSE             	elseif BASEPATCH
   23783/    7641 :                     
   23784/    7641 :                     ; 80 bytes table. Use this table in conjunction with L_LCD_DRVS_TOP and L_LCD_DRVS_BOTTOM
   23785/    7641 :                     R_LCD_BIT_PATTERNS:						;7551H
   23786/    7641 :                     	DB		00H,00H,00H,06H,00H,0CH,00H,12H
   23787/    7641 :                     	DB		00H,18H,00H,1EH,00H,24H,00H,2AH
   23788/    7641 :                     	DB		00H,30H,02H,04H,02H,0AH,02H,10H
   23789/    7641 :                     	DB		02H,16H,02H,1CH,02H,22H,02H,28H
   23790/    7641 :                     	DB		02H,2EH,04H,02H,04H,08H,04H,0EH
   23791/    7641 :                     	DB		04H,14H,04H,1AH,04H,20H,04H,26H
   23792/    7641 :                     	DB		04H,2CH,06H,00H,06H,06H,06H,0CH
   23793/    7641 :                     	DB		06H,12H,06H,18H,06H,1EH,06H,24H
   23794/    7641 :                     	DB		06H,2AH,06H,30H,08H,04H,08H,0AH
   23795/    7641 :                     	DB		08H,10H,08H,16H,08H,1CH,08H,22H
   23796/    7641 :                     ;
   23797/    7641 :                     ;
   23798/    7641 :                     ; IN:
   23799/    7641 :                     ;	A
   23800/    7641 :                     ;	C		offset
   23801/    7641 :                     ;	HL		LCD Driver Selection table ptr: L_LCD_DRVS_TOP
   23802/    7641 :                     ;	carry	if set, update Driver Selection table
   23803/    7641 :                     ;
   23804/    7641 :                     ; OUT:
   23805/    7641 :                     ;	B		A
   23806/    7641 :                     ;
   23807/    7641 :                     L_UPD_DRV_SELECT_PTR:
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 415 - 9/5/2025 20:20:35


   23808/    7641 :                     	JNC		+
   23809/    7641 :                     ; TODO location dependency. Can be fixed by using LXI H,L_LCD_DRVS_BOTTOM
   23810/    7641 :                     ; which is 1 byte longer, so effects other code
   23811/    7641 :                     ; incoming HL (always L_LCD_DRVS_TOP) and L_LCD_DRVS_BOTTOM must have same MSB
   23812/    7641 :                     	MVI		L,L_LCD_DRVS_BOTTOM & 255	;LSB of L_LCD_DRVS_BOTTOM
   23813/    7641 :                     +	MVI		B,00H						;zero extend C to BC
   23814/    7641 :                     	DAD		B							;index into table
   23815/    7641 :                     	MOV		B,A							;save A 
   23816/    7641 :                     	RET
   23817/    7641 :                     	
   23818/    7641 :                     	if		HWSCROLL
   23819/    7641 :                     	include "HWPatch.asm"
   23820/    7641 :                     	
   23821/    7641 :                     ; 7603H to 7640H free to use if HWSCROLL
   23822/    7641 :                     	DS		62							;62 bytes FREE CODE SPACE if REALM100
   23823/    7641 :                     	
   23824/    7641 :                     	else			;HWSCROLL
   23825/    7641 :                     ;
   23826/    7641 :                     ; 75ABH to 7640H free to use
   23827/    7641 :                     ;
   23828/    7641 :                     	DS	(7641H-75ABH)					;150 bytes FREE if !HWSCROLL
   23829/    7641 : [23818]             	endif								;if	HWSCROLL
   23830/    7641 :                     
   23831/    7641 : =>FALSE             	else								;~ (LCDPATCH | BASEPATCH)
   23832/    7641 :                     	
   23833/    7641 :                     R_LCD_BIT_PATTERNS:
   23834/    7641 :                     ;
   23835/    7641 :                     ; 120 bytes table: 40 entries of 3 bytes each
   23836/    7641 :                     ; each entry is the start location of a char
   23837/    7641 :                     ; in a line. First 2 bytes select the driver.
   23838/    7641 :                     ; third byte is the offset in driver for that char
   23839/    7641 :                     ;
   23840/    7641 :                         DB      01H,00H,00H,01H,00H,06H,01H,00H
   23841/    7641 :                         DB      0CH,01H,00H,12H,01H,00H,18H,01H
   23842/    7641 :                         DB      00H,1EH,01H,00H,24H,01H,00H,2AH
   23843/    7641 :                         DB      01H,00H,30H,02H,00H,04H,02H,00H
   23844/    7641 :                         DB      0AH,02H,00H,10H,02H,00H,16H,02H
   23845/    7641 :                         DB      00H,1CH,02H,00H,22H,02H,00H,28H
   23846/    7641 :                         DB      02H,00H,2EH,04H,00H,02H,04H,00H
   23847/    7641 :                         DB      08H,04H,00H,0EH,04H,00H,14H,04H
   23848/    7641 :                         DB      00H,1AH,04H,00H,20H,04H,00H,26H
   23849/    7641 :                         DB      04H,00H,2CH,08H,00H,00H,08H,00H
   23850/    7641 :                         DB      06H,08H,00H,0CH,08H,00H,12H,08H
   23851/    7641 :                         DB      00H,18H,08H,00H,1EH,08H,00H,24H
   23852/    7641 :                         DB      08H,00H,2AH,08H,00H,30H,10H,00H
   23853/    7641 :                         DB      04H,10H,00H,0AH,10H,00H,10H,10H
   23854/    7641 :                         DB      00H,16H,10H,00H,1CH,10H,00H,22H
   23855/    7641 :                     
   23856/    7641 :                     L_LCD_BIT_PATTERNS_2:
   23857/    7641 :                     ;
   23858/    7641 :                     ; 120 bytes table: 40 entries of 3 bytes each
   23859/    7641 :                     ; each entry is the start location of a char
   23860/    7641 :                     ; in a line.
   23861/    7641 :                     ; note that every third byte is identical to table
   23862/    7641 :                     ; R_LCD_BIT_PATTERNS
   23863/    7641 :                     ; note that the first 2 bytes are also available
   23864/    7641 :                     ; in table L_LCD_DRVS_TOP
   23865/    7641 :                     ; BASEPATCH takes advantage of these facts
   23866/    7641 :                     ;
   23867/    7641 :                         DB      20H,00H,00H,20H,00H,06H,20H,00H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 416 - 9/5/2025 20:20:35


   23868/    7641 :                         DB      0CH,20H,00H,12H,20H,00H,18H,20H
   23869/    7641 :                         DB      00H,1EH,20H,00H,24H,20H,00H,2AH
   23870/    7641 :                         DB      20H,00H,30H,40H,00H,04H,40H,00H
   23871/    7641 :                         DB      0AH,40H,00H,10H,40H,00H,16H,40H
   23872/    7641 :                         DB      00H,1CH,40H,00H,22H,40H,00H,28H
   23873/    7641 :                         DB      40H,00H,2EH,80H,00H,02H,80H,00H
   23874/    7641 :                         DB      08H,80H,00H,0EH,80H,00H,14H,80H
   23875/    7641 :                         DB      00H,1AH,80H,00H,20H,80H,00H,26H
   23876/    7641 :                         DB      80H,00H,2CH,00H,01H,00H,00H,01H
   23877/    7641 :                         DB      06H,00H,01H,0CH,00H,01H,12H,00H
   23878/    7641 :                         DB      01H,18H,00H,01H,1EH,00H,01H,24H
   23879/    7641 :                         DB      00H,01H,2AH,00H,01H,30H,00H,02H
   23880/    7641 :                         DB      04H,00H,02H,0AH,00H,02H,10H,00H
   23881/    7641 :                         DB      02H,16H,00H,02H,1CH,00H,02H,22H
   23882/    7641 : [23707]             	endif								;if LCDPATCH or BASEPATCH or none
   23883/    7641 :                     
   23884/    7641 :                     L_LCD_SELECT_ALL:						;7641H
   23885/    7641 : FF 03                   DB      0FFH,03H
   23886/    7643 :                     ;
   23887/    7643 :                     ; 8155 PIO chip bit patterns for LCD drivers
   23888/    7643 :                     ; These are the driver select bit patterns
   23889/    7643 :                     ; for the TOP and BOTTOM banks
   23890/    7643 :                     ; Also used for bit vectors mapping
   23891/    7643 :                     ; Two tables need to stay together
   23892/    7643 :                     ;
   23893/    7643 :                     L_BIT_VCTRS:
   23894/    7643 :                     L_LCD_DRVS_TOP:							;7643H
   23895/    7643 : 01 00 02 00 04 00       DB      01H,00H,02H,00H,04H,00H,08H,00H,10H,00H
                    08 00 10 00 
   23896/    764D :                     L_LCD_DRVS_BOTTOM:
   23897/    764D : 20 00 40 00 80 00       DB      20H,00H,40H,00H,80H,00H,00H,01H,00H,02H
                    00 01 00 02 
   23898/    7657 :                     ;
   23899/    7657 :                     ; Delay routine - decrement C until zero
   23900/    7657 :                     ;
   23901/    7657 :                     R_DELAY_FUNC:							;7657H
   23902/    7657 : 0D                      DCR     C
   23903/    7658 : C2 57 76                JNZ     R_DELAY_FUNC				;Delay routine - decrement C until zero
   23904/    765B : C9                      RET
   23905/    765C :                     ;
   23906/    765C :                     ; Set interrupt to 1DH
   23907/    765C :                     ; Disable Background task
   23908/    765C :                     ;
   23909/    765C :                     L_DIS_INT_75_65:						;765CH
   23910/    765C : F3                      DI 
   23911/    765D : 3E 1D                   MVI     A,1DH						;00011101 SIM mask to disable RST 5.5 & 7.5. Set RST7.5
   23912/    765F : 30                      SIM    
   23913/    7660 : FB                      EI     
   23914/    7661 : C9                      RET
   23915/    7662 :                     ;
   23916/    7662 :                     ; Beep routine
   23917/    7662 :                     ;
   23918/    7662 :                     R_BEEP_FUN:								;7662H
   23919/    7662 : CD 5C 76                CALL    L_DIS_INT_75_65				;Disable Background task
   23920/    7665 : 06 00                   MVI     B,00H						;00 equals 256 here
   23921/    7667 : CD 76 76            -	CALL    R_SOUND_PORT      		 	;Click sound port
   23922/    766A : 0E 50                   MVI     C,50H						;80 to C
   23923/    766C : CD 57 76                CALL    R_DELAY_FUNC				;Delay routine - decrement C until zero
   23924/    766F : 05                      DCR     B
   23925/    7670 : C2 67 76                JNZ     -
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 417 - 9/5/2025 20:20:35


   23926/    7673 : C3 3C 74                JMP     L_ENA_INT_75_65				;Enable background tasks
   23927/    7676 :                     ;
   23928/    7676 :                     ; Click sound port
   23929/    7676 :                     ;
   23930/    7676 :                     R_SOUND_PORT:							;7676H
   23931/    7676 : (MACRO)                 INPORT	0BAH						;read 8155 PIO Port B
   23932/    7678 : EE 20                   XRI     20H							;00100000: Data to beeper if bit 2 set.  Set if bit 2 low
   23933/    767A : (MACRO)                 OUTPORT	0BAH						;set 8155 PIO Port B
   23934/    767C : C9                      RET
   23935/    767D :                     
   23936/    767D : =>TRUE              	if	DVIENABLED
   23937/    767D :                     
   23938/    767D :                     R_TESTDVI_FUN:
   23939/    767D : 3A FB FF                LDA     DVIFLG_R					;optional external controller flag
   23940/    7680 : 3C                      INR     A							;set flag. If present (0FFH), Z flag set
   23941/    7681 : C9                      RET
   23942/    7682 :                     ;
   23943/    7682 :                     ; Check for optional external controller
   23944/    7682 :                     ;
   23945/    7682 :                     R_CHK_XTRNL_CNTRLER:				    ;7682H
   23946/    7682 : 21 FB FF                LXI     H,DVIFLG_R					;optional external controller flag
   23947/    7685 : DB 82                   IN      82H
   23948/    7687 : E6 07                   ANI     07H
   23949/    7689 : CA 8F 76                JZ      R_XTRNL_CNTRLER_DRIVER   	;Optional external controller driver
   23950/    768C : 36 00                   MVI     M,00H						;clear optional external controller flag
   23951/    768E : C9                      RET
   23952/    768F :                     ;
   23953/    768F :                     ; Optional external controller driver
   23954/    768F :                     ;
   23955/    768F :                     R_XTRNL_CNTRLER_DRIVER:					;768FH
   23956/    768F : B6                      ORA     M
   23957/    7690 : C0                      RNZ
   23958/    7691 : 36 FF                   MVI     M,0FFH						;set optional external controller flag
   23959/    7693 :                     L_XTRNL_CNTRLER_INIT:
   23960/    7693 : 3E C1                   MVI     A,0C1H
   23961/    7695 : D3 83                   OUT     83H
   23962/    7697 : DB 80                   IN      80H
   23963/    7699 : 3E 04                   MVI     A,04H
   23964/    769B : D3 81                   OUT     81H
   23965/    769D : D3 80                   OUT     80H
   23966/    769F : C9                      RET
   23967/    76A0 :                     ;
   23968/    76A0 :                     ; Send CMD 0 (??) to DVI
   23969/    76A0 :                     ;
   23970/    76A0 :                     ; OUT:
   23971/    76A0 :                     ;	carry		set means no DVI present
   23972/    76A0 :                     ;
   23973/    76A0 :                     L_XTRNL_CNTRLER_1:
   23974/    76A0 : CD 7D 76                CALL    R_TESTDVI_FUN				;test for optional external controller
   23975/    76A3 : 37                      STC									;preset Carry
   23976/    76A4 : C0                      RNZ									;return if not present
   23977/    76A5 : 3E 03                   MVI     A,03H
   23978/    76A7 : 32 FA FF                STA     DVIBOX_R					;DVI MAILBOX SELECT area
   23979/    76AA : AF                      XRA     A
   23980/    76AB : CD DE 76                CALL    R_DVICMD_FUN				;Send command byte to DVI
   23981/    76AE : CD FB 76                CALL    R_DVIRDY_FUN				;Wait for DVI RX_FULL and read next byte from DVI??
   23982/    76B1 : 07                      RLC    								;move bit 7, Carry to bits 1,0
   23983/    76B2 : 07                      RLC    
   23984/    76B3 : E6 03                   ANI     03H							;isolate bits 1,0
   23985/    76B5 : C9                      RET
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 418 - 9/5/2025 20:20:35


   23986/    76B6 :                     ;
   23987/    76B6 :                     ; Copy initialization code from DVI to E000h and execute
   23988/    76B6 :                     ;
   23989/    76B6 :                     ; IN:
   23990/    76B6 :                     ;	DE		target RAM address (currently ignored)
   23991/    76B6 :                     ;
   23992/    76B6 :                     L_XTRNL_CNTRLER_CPY:
   23993/    76B6 : 3E 03                   MVI     A,03H
   23994/    76B8 : 32 FA FF                STA     DVIBOX_R					;DVI MAILBOX SELECT area
   23995/    76BB : 21 0B 77                LXI     H,L_DVI_CMD_TBL				;Code Based. Load address of Byte sequence to sent to DVI (2, 1, 0, 0, 1)
   23996/    76BE : 06 05                   MVI     B,05H						;send 5 command bytes
   23997/    76C0 : 7E                  -	MOV     A,M							;Get next DVI command byte
   23998/    76C1 : CD DE 76                CALL    R_DVICMD_FUN				;Send command byte to DVI
   23999/    76C4 : 23                      INX     H
   24000/    76C5 : 05                      DCR     B
   24001/    76C6 : C2 C0 76                JNZ     -
   24002/    76C9 :                     ;
   24003/    76C9 :                     ; B is now 0/256
   24004/    76C9 :                     ;
   24005/    76C9 : CD FB 76                CALL    R_DVIRDY_FUN				;Wait for DVI RX_FULL and read next byte from DVI
   24006/    76CC : B7                      ORA     A
   24007/    76CD : 37                      STC									;preset carry return value
   24008/    76CE : C0                      RNZ									;Return if the response is not zero
   24009/    76CF : 21 00 E0                LXI     H,0E000H					;destination RAM location
   24010/    76D2 : CD FB 76            -	CALL    R_DVIRDY_FUN				;Wait for DVI RX_FULL and read next byte from DVI
   24011/    76D5 : 77                      MOV     M,A							;store result in 0E000H..0E0FFH
   24012/    76D6 : 23                      INX     H
   24013/    76D7 : 05                      DCR     B							;max 256 bytes
   24014/    76D8 : C2 D2 76                JNZ     -
   24015/    76DB : C3 00 E0                JMP     0E000H						;execute initialization code
   24016/    76DE :                     ;
   24017/    76DE :                     ; Send command byte to DVI
   24018/    76DE :                     ;
   24019/    76DE :                     R_DVICMD_FUN:
   24020/    76DE : F5                      PUSH    PSW
   24021/    76DF : CD 9F 72            -	CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
   24022/    76E2 : DA F4 76                JC      L_XTRNL_CNTRLER_BRK			;brif pressed
   24023/    76E5 : DB 82                   IN      82H
   24024/    76E7 : 07                      RLC									;Rotate DVI TX EMPTY bit (MSB) into Carry
   24025/    76E8 : D2 DF 76                JNC     -							;brif not empty
   24026/    76EB : 3A FA FF                LDA     DVIBOX_R					;DVI MAILBOX SELECT area
   24027/    76EE : D3 81                   OUT     81H
   24028/    76F0 : F1                      POP     PSW
   24029/    76F1 : D3 80                   OUT     80H
   24030/    76F3 : C9                      RET
   24031/    76F4 :                     ;
   24032/    76F4 :                     ; SHIFT-BREAK Exit handler for DVI Read/Write loops
   24033/    76F4 :                     ;
   24034/    76F4 :                     L_XTRNL_CNTRLER_BRK:
   24035/    76F4 : F1                      POP     PSW							;remove pushed PSW from R_DVICMD_FUN
   24036/    76F5 :                     L_XTRNL_CNTRLER_BRK_1:
   24037/    76F5 : F1                      POP     PSW							;remove previous function return address
   24038/    76F6 : CD 93 76                CALL    L_XTRNL_CNTRLER_INIT		;Re-initialize the DVI
   24039/    76F9 : 37                      STC									;Indicate SHIFT-BREAK pressed
   24040/    76FA : C9                      RET
   24041/    76FB :                     ;
   24042/    76FB :                     ; Wait for DVI RX_FULL and read next byte from DVI
   24043/    76FB :                     ;
   24044/    76FB :                     R_DVIRDY_FUN:
   24045/    76FB : CD 9F 72                CALL    R_CHK_SHIFT_BREAK			;Check if SHIFT-BREAK is being pressed
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 419 - 9/5/2025 20:20:35


   24046/    76FE : DA F5 76                JC      L_XTRNL_CNTRLER_BRK_1		;brif pressed
   24047/    7701 : DB 82                   IN      82H
   24048/    7703 : E6 20                   ANI     20H							;isolate bit 5
   24049/    7705 : CA FB 76                JZ      R_DVIRDY_FUN				;loop
   24050/    7708 : DB 80                   IN      80H
   24051/    770A : C9                      RET
   24052/    770B :                     ;
   24053/    770B :                     ; DVI command table - sent to external DVI
   24054/    770B :                     ;
   24055/    770B :                     L_DVI_CMD_TBL:
   24056/    770B : 02 01 00 00 01 00       DB      02H,01H,00H,00H,01H,00H
   24057/    7711 :                     
   24058/    7711 : =>FALSE             	else								;DVIENABLED
   24059/    7711 :                     	
   24060/    7711 :                     R_CHK_XTRNL_CNTRLER:
   24061/    7711 :                     	XRA		A							;clear
   24062/    7711 :                     ;	STA		DVIFLG_R					;optional external controller flag
   24063/    7711 :                     	RET
   24064/    7711 :                     
   24065/    7711 :                     L_XTRNL_CNTRLER_1:
   24066/    7711 :                         STC									;preset Carry
   24067/    7711 :                         RET									;return not present
   24068/    7711 :                     
   24069/    7711 :                     L_XTRNL_CNTRLER_CPY:
   24070/    7711 :                         STC
   24071/    7711 :                         RET									;return not present
   24072/    7711 :                     
   24073/    7711 :                     	rept 134							;134 FREE CODE SPACE if !DVIENABLED
   24074/    7711 :                     	NOP
   24075/    7711 :                     	endm
   24076/    7711 :                     	
   24077/    7711 : [23936]             	endif								;DVIENABLED
   24078/    7711 :                     ;
   24079/    7711 :                     ; LCD char generator shape table (20H-7FH)
   24080/    7711 :                     ; each character is represented by 5 bytes
   24081/    7711 :                     ; 96 * 5 = 480 bytes
   24082/    7711 :                     ;
   24083/    7711 :                     R_LCD_CHAR_SHAPE_TBL1:				     	;7711H
   24084/    7711 : 00 00 00 00 00 00       DB      00H,00H,00H,00H,00H,00H,00H,4FH
                    00 4F 
   24085/    7719 : 00 00 00 07 00 07       DB      00H,00H,00H,07H,00H,07H,00H,14H
                    00 14 
   24086/    7721 : 7F 14 7F 14 24 2A       DB      7FH,14H,7FH,14H,24H,2AH,7FH,2AH
                    7F 2A 
   24087/    7729 : 12 23 13 08 64 62       DB      12H,23H,13H,08H,64H,62H,3AH,45H
                    3A 45 
   24088/    7731 : 4A 30 28 00 04 02       DB      4AH,30H,28H,00H,04H,02H,01H,00H
                    01 00 
   24089/    7739 : 00 1C 22 41 00 00       DB      00H,1CH,22H,41H,00H,00H,41H,22H
                    41 22 
   24090/    7741 : 1C 00 22 14 7F 14       DB      1CH,00H,22H,14H,7FH,14H,22H,08H
                    22 08 
   24091/    7749 : 08 3E 08 08 00 80       DB      08H,3EH,08H,08H,00H,80H,60H,00H
                    60 00 
   24092/    7751 : 00 08 08 08 08 08       DB      00H,08H,08H,08H,08H,08H,00H,60H
                    00 60 
   24093/    7759 : 60 00 00 40 20 10       DB      60H,00H,00H,40H,20H,10H,08H,04H
                    08 04 
   24094/    7761 : 3E 51 49 45 3E 44       DB      3EH,51H,49H,45H,3EH,44H,42H,7FH
                    42 7F 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 420 - 9/5/2025 20:20:35


   24095/    7769 : 40 40 62 51 51 49       DB      40H,40H,62H,51H,51H,49H,46H,22H
                    46 22 
   24096/    7771 : 41 49 49 36 18 14       DB      41H,49H,49H,36H,18H,14H,12H,7FH
                    12 7F 
   24097/    7779 : 10 47 45 45 29 11       DB      10H,47H,45H,45H,29H,11H,3CH,4AH
                    3C 4A 
   24098/    7781 : 49 49 30 03 01 79       DB      49H,49H,30H,03H,01H,79H,05H,03H
                    05 03 
   24099/    7789 : 36 49 49 49 36 06       DB      36H,49H,49H,49H,36H,06H,49H,49H
                    49 49 
   24100/    7791 : 29 1E 00 00 24 00       DB      29H,1EH,00H,00H,24H,00H,00H,00H
                    00 00 
   24101/    7799 : 80 64 00 00 08 1C       DB      80H,64H,00H,00H,08H,1CH,36H,63H
                    36 63 
   24102/    77A1 : 41 14 14 14 14 14       DB      41H,14H,14H,14H,14H,14H,41H,63H
                    41 63 
   24103/    77A9 : 36 1C 08 02 01 51       DB      36H,1CH,08H,02H,01H,51H,09H,06H
                    09 06 
   24104/    77B1 : 32 49 79 41 3E 7C       DB      32H,49H,79H,41H,3EH,7CH,12H,11H
                    12 11 
   24105/    77B9 : 12 7C 41 7F 49 49       DB      12H,7CH,41H,7FH,49H,49H,36H,1CH
                    36 1C 
   24106/    77C1 : 22 41 41 22 41 7F       DB      22H,41H,41H,22H,41H,7FH,41H,22H
                    41 22 
   24107/    77C9 : 1C 7F 49 49 49 41       DB      1CH,7FH,49H,49H,49H,41H,7FH,09H
                    7F 09 
   24108/    77D1 : 09 09 01 3E 41 49       DB      09H,09H,01H,3EH,41H,49H,49H,3AH
                    49 3A 
   24109/    77D9 : 7F 08 08 08 7F 00       DB      7FH,08H,08H,08H,7FH,00H,41H,7FH
                    41 7F 
   24110/    77E1 : 41 00 30 40 41 3F       DB      41H,00H,30H,40H,41H,3FH,01H,7FH
                    01 7F 
   24111/    77E9 : 08 14 22 41 7F 40       DB      08H,14H,22H,41H,7FH,40H,40H,40H
                    40 40 
   24112/    77F1 : 40 7F 02 0C 02 7F       DB      40H,7FH,02H,0CH,02H,7FH,7FH,06H
                    7F 06 
   24113/    77F9 : 08 30 7F 3E 41 41       DB      08H,30H,7FH,3EH,41H,41H,41H,3EH
                    41 3E 
   24114/    7801 : 7F 09 09 09 06 3E       DB      7FH,09H,09H,09H,06H,3EH,41H,51H
                    41 51 
   24115/    7809 : 21 5E 7F 09 19 29       DB      21H,5EH,7FH,09H,19H,29H,46H,26H
                    46 26 
   24116/    7811 : 49 49 49 32 01 01       DB      49H,49H,49H,32H,01H,01H,7FH,01H
                    7F 01 
   24117/    7819 : 01 3F 40 40 40 3F       DB      01H,3FH,40H,40H,40H,3FH,0FH,30H
                    0F 30 
   24118/    7821 : 40 30 0F 7F 20 18       DB      40H,30H,0FH,7FH,20H,18H,20H,7FH
                    20 7F 
   24119/    7829 : 63 14 08 14 63 07       DB      63H,14H,08H,14H,63H,07H,08H,78H
                    08 78 
   24120/    7831 : 08 07 61 51 49 45       DB      08H,07H,61H,51H,49H,45H,43H,00H
                    43 00 
   24121/    7839 : 7F 41 41 00 04 08       DB      7FH,41H,41H,00H,04H,08H,10H,20H
                    10 20 
   24122/    7841 : 40 00 41 41 7F 00       DB      40H,00H,41H,41H,7FH,00H,04H,02H
                    04 02 
   24123/    7849 : 01 02 04 40 40 40       DB      01H,02H,04H,40H,40H,40H,40H,40H
                    40 40 
   24124/    7851 : 00 01 02 04 00 20       DB      00H,01H,02H,04H,00H,20H,54H,54H
                    54 54 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 421 - 9/5/2025 20:20:35


   24125/    7859 : 54 78 7F 28 44 44       DB      54H,78H,7FH,28H,44H,44H,38H,38H
                    38 38 
   24126/    7861 : 44 44 44 28 38 44       DB      44H,44H,44H,28H,38H,44H,44H,28H
                    44 28 
   24127/    7869 : 7F 38 54 54 54 18       DB      7FH,38H,54H,54H,54H,18H,08H,08H
                    08 08 
   24128/    7871 : 7E 09 0A 18 A4 A4       DB      7EH,09H,0AH,18H,0A4H,0A4H,98H,7CH
                    98 7C 
   24129/    7879 : 7F 04 04 04 78 00       DB      7FH,04H,04H,04H,78H,00H,44H,7DH
                    44 7D 
   24130/    7881 : 40 00 40 80 84 7D       DB      40H,00H,40H,80H,84H,7DH,00H,00H
                    00 00 
   24131/    7889 : 7F 10 28 44 00 41       DB      7FH,10H,28H,44H,00H,41H,7FH,40H
                    7F 40 
   24132/    7891 : 00 7C 04 78 04 78       DB      00H,7CH,04H,78H,04H,78H,7CH,08H
                    7C 08 
   24133/    7899 : 04 04 78 38 44 44       DB      04H,04H,78H,38H,44H,44H,44H,38H
                    44 38 
   24134/    78A1 : FC 18 24 24 18 18       DB      0FCH,18H,24H,24H,18H,18H,24H,24H
                    24 24 
   24135/    78A9 : 18 FC 7C 08 04 04       DB      18H,0FCH,7CH,08H,04H,04H,08H,58H
                    08 58 
   24136/    78B1 : 54 54 54 24 04 3F       DB      54H,54H,54H,24H,04H,3FH,44H,44H
                    44 44 
   24137/    78B9 : 20 3C 40 40 3C 40       DB      20H,3CH,40H,40H,3CH,40H,1CH,20H
                    1C 20 
   24138/    78C1 : 40 20 1C 3C 40 38       DB      40H,20H,1CH,3CH,40H,38H,40H,3CH
                    40 3C 
   24139/    78C9 : 44 28 10 28 44 1C       DB      44H,28H,10H,28H,44H,1CH,0A0H,0A0H
                    A0 A0 
   24140/    78D1 : 90 7C 44 64 54 4C       DB      90H,7CH,44H,64H,54H,4CH,44H,00H
                    44 00 
   24141/    78D9 : 08 36 41 41 00 00       DB      08H,36H,41H,41H,00H,00H,77H,00H
                    77 00 
   24142/    78E1 : 00 41 41 36 08 00       DB      00H,41H,41H,36H,08H,00H,02H,01H
                    02 01 
   24143/    78E9 : 02 04 02 00 00 00       DB      02H,04H,02H,00H,00H,00H,00H,00H
                    00 00 
   24144/    78F1 :                     
   24145/    78F1 :                     ;
   24146/    78F1 :                     ; LCD char generator shape table (80H-FFH)
   24147/    78F1 :                     ; each char >= 080H is 6 bytes => 128 * 6 = 768 bytes
   24148/    78F1 :                     ;
   24149/    78F1 :                     R_LCD_CHAR_SHAPE_TBL2:				     	;78F1H
   24150/    78F1 : 66 77 49 49 77 66       DB      66H,77H,49H,49H,77H,66H,0FCH,86H
                    FC 86 
   24151/    78F9 : D7 EE FC 00 7F 63       DB      0D7H,0EEH,0FCH,00H,7FH,63H,14H,08H
                    14 08 
   24152/    7901 : 14 00 78 76 62 4A       DB      14H,00H,78H,76H,62H,4AH,0EH,00H
                    0E 00 
   24153/    7909 : EE 44 FF FF 44 EE       DB      0EEH,44H,0FFH,0FFH,44H,0EEH,0CH,4CH
                    0C 4C 
   24154/    7911 : 7F 4C 0C 00 7C 56       DB      7FH,4CH,0CH,00H,7CH,56H,7FH,56H
                    7F 56 
   24155/    7919 : 7C 00 7D 77 47 77       DB      7CH,00H,7DH,77H,47H,77H,7FH,00H
                    7F 00 
   24156/    7921 : 00 00 7D 00 00 00       DB      00H,00H,7DH,00H,00H,00H,10H,20H
                    10 20 
   24157/    7929 : 1C 02 02 02 54 34       DB      1CH,02H,02H,02H,54H,34H,1CH,16H
                    1C 16 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 422 - 9/5/2025 20:20:35


   24158/    7931 : 15 00 41 63 55 49       DB      15H,00H,41H,63H,55H,49H,63H,00H
                    63 00 
   24159/    7939 : 24 12 12 24 12 00       DB      24H,12H,12H,24H,12H,00H,44H,44H
                    44 44 
   24160/    7941 : 5F 44 44 00 00 40       DB      5FH,44H,44H,00H,00H,40H,3EH,01H
                    3E 01 
   24161/    7949 : 00 00 00 08 1C 3E       DB      00H,00H,00H,08H,1CH,3EH,00H,00H
                    00 00 
   24162/    7951 : 98 F4 12 12 F4 98       DB      98H,0F4H,12H,12H,0F4H,98H,0F8H,94H
                    F8 94 
   24163/    7959 : 12 12 94 F8 14 22       DB      12H,12H,94H,0F8H,14H,22H,7FH,22H
                    7F 22 
   24164/    7961 : 14 00 A0 56 3D 56       DB      14H,00H,0A0H,56H,3DH,56H,0A0H,00H
                    A0 00 
   24165/    7969 : 4C 2A 1D 2A 48 00       DB      4CH,2AH,1DH,2AH,48H,00H,38H,28H
                    38 28 
   24166/    7971 : 39 05 03 0F 00 16       DB      39H,05H,03H,0FH,00H,16H,3DH,16H
                    3D 16 
   24167/    7979 : 00 00 42 25 15 28       DB      00H,00H,42H,25H,15H,28H,54H,22H
                    54 22 
   24168/    7981 : 04 02 3F 02 04 00       DB      04H,02H,3FH,02H,04H,00H,10H,20H
                    10 20 
   24169/    7989 : 7E 20 10 00 08 08       DB      7EH,20H,10H,00H,08H,08H,2AH,1CH
                    2A 1C 
   24170/    7991 : 08 00 08 1C 2A 08       DB      08H,00H,08H,1CH,2AH,08H,08H,00H
                    08 00 
   24171/    7999 : 1C 57 61 57 1C 00       DB      1CH,57H,61H,57H,1CH,00H,08H,14H
                    08 14 
   24172/    79A1 : 22 14 08 00 1E 22       DB      22H,14H,08H,00H,1EH,22H,44H,22H
                    44 22 
   24173/    79A9 : 1E 00 1C 12 71 12       DB      1EH,00H,1CH,12H,71H,12H,1CH,00H
                    1C 00 
   24174/    79B1 : 00 04 02 01 00 00       DB      00H,04H,02H,01H,00H,00H,20H,55H
                    20 55 
   24175/    79B9 : 56 54 78 00 0E 51       DB      56H,54H,78H,00H,0EH,51H,31H,11H
                    31 11 
   24176/    79C1 : 0A 00 64 7F 45 45       DB      0AH,00H,64H,7FH,45H,45H,20H,00H
                    20 00 
   24177/    79C9 : 00 01 02 04 00 00       DB      00H,01H,02H,04H,00H,00H,7FH,10H
                    7F 10 
   24178/    79D1 : 10 0F 10 00 00 02       DB      10H,0FH,10H,00H,00H,02H,05H,02H
                    05 02 
   24179/    79D9 : 00 00 04 0C 1C 0C       DB      00H,00H,04H,0CH,1CH,0CH,04H,00H
                    04 00 
   24180/    79E1 : 00 04 7F 04 00 00       DB      00H,04H,7FH,04H,00H,00H,18H,0A7H
                    18 A7 
   24181/    79E9 : A5 E5 18 00 7F 41       DB      0A5H,0E5H,18H,00H,7FH,41H,65H,51H
                    65 51 
   24182/    79F1 : 7F 00 7F 41 5D 49       DB      7FH,00H,7FH,41H,5DH,49H,7FH,00H
                    7F 00 
   24183/    79F9 : 17 08 34 22 71 00       DB      17H,08H,34H,22H,71H,00H,55H,3FH
                    55 3F 
   24184/    7A01 : 10 68 44 E2 17 08       DB      10H,68H,44H,0E2H,17H,08H,04H,6AH
                    04 6A 
   24185/    7A09 : 59 00 06 09 7F 01       DB      59H,00H,06H,09H,7FH,01H,7FH,01H
                    7F 01 
   24186/    7A11 : 29 2A 7C 2A 29 00       DB      29H,2AH,7CH,2AH,29H,00H,70H,29H
                    70 29 
   24187/    7A19 : 24 29 70 00 38 45       DB      24H,29H,70H,00H,38H,45H,44H,45H
                    44 45 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 423 - 9/5/2025 20:20:35


   24188/    7A21 : 38 00 3C 41 40 41       DB      38H,00H,3CH,41H,40H,41H,3CH,00H
                    3C 00 
   24189/    7A29 : 1C 22 7F 22 14 00       DB      1CH,22H,7FH,22H,14H,00H,08H,04H
                    08 04 
   24190/    7A31 : 04 08 04 00 20 55       DB      04H,08H,04H,00H,20H,55H,54H,55H
                    54 55 
   24191/    7A39 : 78 00 30 4A 48 4A       DB      78H,00H,30H,4AH,48H,4AH,30H,00H
                    30 00 
   24192/    7A41 : 3C 41 40 21 7C 00       DB      3CH,41H,40H,21H,7CH,00H,40H,7FH
                    40 7F 
   24193/    7A49 : 49 49 3E 00 71 11       DB      49H,49H,3EH,00H,71H,11H,67H,11H
                    67 11 
   24194/    7A51 : 71 00 38 54 56 55       DB      71H,00H,38H,54H,56H,55H,18H,00H
                    18 00 
   24195/    7A59 : 3C 41 42 20 7C 00       DB      3CH,41H,42H,20H,7CH,00H,38H,55H
                    38 55 
   24196/    7A61 : 56 54 18 00 00 04       DB      56H,54H,18H,00H,00H,04H,00H,04H
                    00 04 
   24197/    7A69 : 00 00 48 7E 49 01       DB      00H,00H,48H,7EH,49H,01H,02H,00H
                    02 00 
   24198/    7A71 : 40 AA A9 AA F0 00       DB      40H,0AAH,0A9H,0AAH,0F0H,00H,70H,0AAH
                    70 AA 
   24199/    7A79 : A9 AA 30 00 00 02       DB      0A9H,0AAH,30H,00H,00H,02H,0E9H,02H
                    E9 02 
   24200/    7A81 : 00 00 30 4A 49 4A       DB      00H,00H,30H,4AH,49H,4AH,30H,00H
                    30 00 
   24201/    7A89 : 38 42 41 22 78 00       DB      38H,42H,41H,22H,78H,00H,08H,04H
                    08 04 
   24202/    7A91 : 02 04 08 00 38 55       DB      02H,04H,08H,00H,38H,55H,54H,55H
                    54 55 
   24203/    7A99 : 18 00 00 02 68 02       DB      18H,00H,00H,02H,68H,02H,00H,00H
                    00 00 
   24204/    7AA1 : 20 54 56 55 7C 00       DB      20H,54H,56H,55H,7CH,00H,00H,00H
                    00 00 
   24205/    7AA9 : 6A 01 00 00 30 48       DB      6AH,01H,00H,00H,30H,48H,4AH,49H
                    4A 49 
   24206/    7AB1 : 30 00 3C 40 42 21       DB      30H,00H,3CH,40H,42H,21H,7CH,00H
                    7C 00 
   24207/    7AB9 : 0C 50 52 51 3C 00       DB      0CH,50H,52H,51H,3CH,00H,7AH,11H
                    7A 11 
   24208/    7AC1 : 09 0A 71 00 42 A9       DB      09H,0AH,71H,00H,42H,0A9H,0A9H,0AAH
                    A9 AA 
   24209/    7AC9 : F1 00 32 49 49 4A       DB      0F1H,00H,32H,49H,49H,4AH,31H,00H
                    31 00 
   24210/    7AD1 : E0 52 49 52 E0 00       DB      0E0H,52H,49H,52H,0E0H,00H,0F8H,0AAH
                    F8 AA 
   24211/    7AD9 : A9 AA 88 00 00 8A       DB      0A9H,0AAH,88H,00H,00H,8AH,0F9H,8AH
                    F9 8A 
   24212/    7AE1 : 00 00 70 8A 89 8A       DB      00H,00H,70H,8AH,89H,8AH,70H,00H
                    70 00 
   24213/    7AE9 : 78 82 81 82 78 00       DB      78H,82H,81H,82H,78H,00H,00H,45H
                    00 45 
   24214/    7AF1 : 7C 45 00 00 7C 55       DB      7CH,45H,00H,00H,7CH,55H,54H,55H
                    54 55 
   24215/    7AF9 : 44 00 7C 54 56 55       DB      44H,00H,7CH,54H,56H,55H,44H,00H
                    44 00 
   24216/    7B01 : E0 50 4A 51 E0 00       DB      0E0H,50H,4AH,51H,0E0H,00H,00H,88H
                    00 88 
   24217/    7B09 : FA 89 00 00 70 88       DB      0FAH,89H,00H,00H,70H,88H,8AH,89H
                    8A 89 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 424 - 9/5/2025 20:20:35


   24218/    7B11 : 70 00 3C 40 42 41       DB      70H,00H,3CH,40H,42H,41H,3CH,00H
                    3C 00 
   24219/    7B19 : 0C 10 62 11 0C 00       DB      0CH,10H,62H,11H,0CH,00H,3CH,41H
                    3C 41 
   24220/    7B21 : 42 40 3C 00 7C 55       DB      42H,40H,3CH,00H,7CH,55H,56H,54H
                    56 54 
   24221/    7B29 : 44 00 E0 51 4A 50       DB      44H,00H,0E0H,51H,4AH,50H,0E0H,00H
                    E0 00 
   24222/    7B31 : 00 00 00 00 00 00       DB      00H,00H,00H,00H,00H,00H,0FH,0FH
                    0F 0F 
   24223/    7B39 : 0F 00 00 00 00 00       DB      0FH,00H,00H,00H,00H,00H,00H,0FH
                    00 0F 
   24224/    7B41 : 0F 0F F0 F0 F0 00       DB      0FH,0FH,0F0H,0F0H,0F0H,00H,00H,00H
                    00 00 
   24225/    7B49 : 00 00 00 F0 F0 F0       DB      00H,00H,00H,0F0H,0F0H,0F0H,0FH,0FH
                    0F 0F 
   24226/    7B51 : 0F F0 F0 F0 F0 F0       DB      0FH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FH
                    F0 0F 
   24227/    7B59 : 0F 0F 0F 0F 0F 0F       DB      0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH
                    0F 0F 
   24228/    7B61 : F0 F0 F0 F0 F0 F0       DB      0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH,0FFH
                    FF FF 
   24229/    7B69 : FF 00 00 00 00 00       DB      0FFH,00H,00H,00H,00H,00H,00H,0FFH
                    00 FF 
   24230/    7B71 : FF FF FF FF FF 0F       DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FH,0FH,0FH
                    0F 0F 
   24231/    7B79 : 0F 0F 0F FF FF FF       DB      0FH,0FH,0FH,0FFH,0FFH,0FFH,0FFH,0FFH
                    FF FF 
   24232/    7B81 : FF F0 F0 F0 F0 F0       DB      0FFH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH
                    F0 FF 
   24233/    7B89 : FF FF FF FF FF FF       DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
                    FF FF 
   24234/    7B91 : 00 00 F8 08 08 08       DB      00H,00H,0F8H,08H,08H,08H,08H,08H
                    08 08 
   24235/    7B99 : 08 08 08 08 08 08       DB      08H,08H,08H,08H,08H,08H,0F8H,00H
                    F8 00 
   24236/    7BA1 : 00 00 08 08 F8 08       DB      00H,00H,08H,08H,0F8H,08H,08H,08H
                    08 08 
   24237/    7BA9 : 00 00 FF 08 08 08       DB      00H,00H,0FFH,08H,08H,08H,00H,00H
                    00 00 
   24238/    7BB1 : FF 00 00 00 00 00       DB      0FFH,00H,00H,00H,00H,00H,0FH,08H
                    0F 08 
   24239/    7BB9 : 08 08 08 08 0F 00       DB      08H,08H,08H,08H,0FH,00H,00H,00H
                    00 00 
   24240/    7BC1 : 08 08 0F 08 08 08       DB      08H,08H,0FH,08H,08H,08H,08H,08H
                    08 08 
   24241/    7BC9 : FF 00 00 00 08 08       DB      0FFH,00H,00H,00H,08H,08H,0FFH,08H
                    FF 08 
   24242/    7BD1 : 08 08 3F 1F 0F 07       DB      08H,08H,3FH,1FH,0FH,07H,03H,01H
                    03 01 
   24243/    7BD9 : 80 C0 E0 F0 F8 FC       DB      80H,0C0H,0E0H,0F0H,0F8H,0FCH,01H,03H
                    01 03 
   24244/    7BE1 : 07 0F 1F 3F FC F8       DB      07H,0FH,1FH,3FH,0FCH,0F8H,0F0H,0E0H
                    F0 E0 
   24245/    7BE9 : C0 80 55 AA 55 AA       DB      0C0H,80H,55H,0AAH,55H,0AAH,55H,0AAH
                    55 AA 
   24246/    7BF1 :                     
   24247/    7BF1 :                     ;
   24248/    7BF1 :                     ; Keyboard conversion matrix
   24249/    7BF1 :                     ;
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 425 - 9/5/2025 20:20:35


   24250/    7BF1 :                     ; Code currently assumes some of these tables are somewhat close together
   24251/    7BF1 :                     ; meaning their distance is <= 255 bytes.
   24252/    7BF1 :                     ;
   24253/    7BF1 :                     R_KEYBOARD_CONV_MATRIX:				    	;7BF1H
   24254/    7BF1 : 7A 78 63 76 62 6E       DB      7AH,78H,63H,76H,62H,6EH,6DH,6CH		;"zxcvbnml" column 1 from left
                    6D 6C 
   24255/    7BF9 : 61 73 64 66 67 68       DB      61H,73H,64H,66H,67H,68H,6AH,6BH		;"asdfghjk" column 2 from left
                    6A 6B 
   24256/    7C01 : 71 77 65 72 74 79       DB      71H,77H,65H,72H,74H,79H,75H,69H		;"qwertyui" column 3 from left 
                    75 69 
   24257/    7C09 : 6F 70 5B 3B 27 2C       DB      6FH,70H,5BH,3BH,27H,2CH,2EH,2FH		;"op[;',./" column 4 from left
                    2E 2F 
   24258/    7C11 : 31 32 33 34 35 36       DB      31H,32H,33H,34H,35H,36H,37H,38H		;"12345678" column 5 from left
                    37 38 
   24259/    7C19 : 39 30 2D 3D             DB      39H,30H,2DH,3DH						;"90-=" column 6 from left
   24260/    7C1D :                     
   24261/    7C1D :                     R_KEYBOARD_CONV_SHIFTED:
   24262/    7C1D : 5A 58 43 56 42 4E       DB      5AH,58H,43H,56H,42H,4EH,4DH,4CH		;"ZXCVBNML" column 1 from left
                    4D 4C 
   24263/    7C25 : 41 53 44 46 47 48       DB      41H,53H,44H,46H,47H,48H,4AH,4BH		;"ASDFGHJK" column 2 from left
                    4A 4B 
   24264/    7C2D : 51 57 45 52 54 59       DB      51H,57H,45H,52H,54H,59H,55H,49H		;"QWERTYUI" column 3 from left
                    55 49 
   24265/    7C35 : 4F 50 5D 3A 22 3C       DB      4FH,50H,5DH,3AH,22H,3CH,3EH,3FH		;"OP]:\"<>?" column 4 from left
                    3E 3F 
   24266/    7C3D : 21 40 23 24 25 5E       DB      21H,40H,23H,24H,25H,5EH,26H,2AH		;"!@#$%^&*" column 5 from left
                    26 2A 
   24267/    7C45 : 28 29 5F 2B             DB      28H,29H,5FH,2BH						;"()_+" column 6 from left
   24268/    7C49 :                     
   24269/    7C49 :                     L_KEYBOARD_1:
   24270/    7C49 : 00 83 84 00 95 96       DB      00H,83H,84H,00H,95H,96H,81H,9AH
                    81 9A 
   24271/    7C51 : 85 8B 00 82 00 86       DB      85H,8BH,00H,82H,00H,86H,00H,9BH
                    00 9B 
   24272/    7C59 : 93 94 8F 89 87 90       DB      93H,94H,8FH,89H,87H,90H,91H,8EH
                    91 8E 
   24273/    7C61 : 98 80 60 92 8C 99       DB      98H,80H,60H,92H,8CH,99H,97H,8AH
                    97 8A 
   24274/    7C69 : 88 9C 9D 9E 9F B4       DB      88H,9CH,9DH,9EH,9FH,0B4H,0B0H,0A3H
                    B0 A3 
   24275/    7C71 : 7B 7D 5C 8D E0 EF       DB      7BH,7DH,5CH,8DH,0E0H,0EFH,0FFH,00H
                    FF 00 
   24276/    7C79 : 00 00 F6 F9 EB EC       DB      00H,00H,0F6H,0F9H,0EBH,0ECH,0EDH,0EEH
                    ED EE 
   24277/    7C81 : FD FB F4 FA E7 E8       DB      0FDH,0FBH,0F4H,0FAH,0E7H,0E8H,0E9H,0EAH
                    E9 EA 
   24278/    7C89 : FC FE F0 F3 F2 F1       DB      0FCH,0FEH,0F0H,0F3H,0F2H,0F1H,7EH,0F5H
                    7E F5 
   24279/    7C91 : 00 F8 F7 00 E1 E2       DB      00H,0F8H,0F7H,00H,0E1H,0E2H,0E3H,0E4H
                    E3 E4 
   24280/    7C99 : E5 E6 00 00 00 00       DB      0E5H,0E6H,00H,00H,00H,00H,7CH,00H
                    7C 00 
   24281/    7CA1 :                     
   24282/    7CA1 :                     L_KEYBOARD_2:
   24283/    7CA1 : CE A1 A2 BD 00 CD       DB      0CEH,0A1H,0A2H,0BDH,00H,0CDH,00H,0CAH
                    00 CA 
   24284/    7CA9 : B6 A9 BB 00 00 00       DB      0B6H,0A9H,0BBH,00H,00H,00H,0CBH,0C9H
                    CB C9 
   24285/    7CB1 : C8 00 C6 00 00 CC       DB      0C8H,00H,0C6H,00H,00H,0CCH,0B8H,0C7H
                    B8 C7 
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 426 - 9/5/2025 20:20:35


   24286/    7CB9 : B7 AC B5 AD A0 BC       DB      0B7H,0ACH,0B5H,0ADH,0A0H,0BCH,0CFH,0AEH
                    CF AE 
   24287/    7CC1 : C0 00 C1 00 00 00       DB      0C0H,00H,0C1H,00H,00H,00H,0C4H,0C2H
                    C4 C2 
   24288/    7CC9 : C3 AF C5 BE 00 DF       DB      0C3H,0AFH,0C5H,0BEH,00H,0DFH,0ABH,0DEH
                    AB DE 
   24289/    7CD1 : 00 00 A5 DA B1 B9       DB      00H,00H,0A5H,0DAH,0B1H,0B9H,0D7H,0BFH
                    D7 BF 
   24290/    7CD9 : 00 00                   DB      00H,00H
   24291/    7CDB :                     
   24292/    7CDB :                     L_KEYBOARD_3:
   24293/    7CDB : DB D9 D8 00 D6 AA       DB      0DBH,0D9H,0D8H,00H,0D6H,0AAH,0BAH,0DCH
                    BA DC 
   24294/    7CE3 : B3 D5 B2 00 00 00       DB      0B3H,0D5H,0B2H,00H,00H,00H,0A4H,0DDH
                    A4 DD 
   24295/    7CEB : 00 00 D0 00             DB      00H,00H,0D0H,00H
   24296/    7CEF :                     
   24297/    7CEF :                     L_KEYBOARD_4:
   24298/    7CEF : D1 00 00 00 D4 D2       DB      0D1H,00H,00H,00H,0D4H,0D2H,0D3H,0A6H
                    D3 A6 
   24299/    7CF7 : A7 A8                   DB      0A7H,0A8H
   24300/    7CF9 :                     
   24301/    7CF9 :                     R_KEYBOARD_NUM:
   24302/    7CF9 : 6D 30 6A 31 6B 32       DB      6DH,30H,6AH,31H,6BH,32H,6CH,33H			;DB "m0j1k2l3"
                    6C 33 
   24303/    7D01 : 75 34 69 35 6F 36       DB      75H,34H,69H,35H,6FH,36H,01H,06H			;DB "u4i5o6",01H,06H
                    01 06 
   24304/    7D09 : 14 02 20 7F 09 1B       DB      14H,02H,20H,7FH,09H,1BH,8BH,88H
                    8B 88 
   24305/    7D11 : 8A 0D 80 81 82 83       DB      8AH,0DH,80H,81H,82H,83H,84H,85H
                    84 85 
   24306/    7D19 : 86 87 1D 1C 1E 1F       DB      86H,87H,1DH,1CH,1EH,1FH,20H,08H
                    20 08 
   24307/    7D21 : 09 1B 8B 88 89 0D       DB      09H,1BH,8BH,88H,89H,0DH,80H,81H
                    80 81 
   24308/    7D29 : 82 83 84 85 86 87       DB      82H,83H,84H,85H,86H,87H
   24309/    7D2F :                     
   24310/    7D2F :                     L_KEYBOARD_5:
   24311/    7D2F : 51 52 57 5A             DB      51H,52H,57H,5AH				;"QRWZ"
   24312/    7D33 :                     
   24313/    7D33 :                     ;
   24314/    7D33 :                     ; Boot routine
   24315/    7D33 :                     ;
   24316/    7D33 :                     R_BOOT_ROUTINE:							;7D33H
   24317/    7D33 : F3                      DI 
   24318/    7D34 : 31 C0 FC                LXI     SP,BOOTSTK_R+18H			;Stack area while booting
   24319/    7D37 : 21 10 27                LXI     H,10000						;delay count
   24320/    7D3A : 2B                  -	DCX     H
   24321/    7D3B : 7C                      MOV     A,H
   24322/    7D3C : B5                      ORA     L
   24323/    7D3D : C2 3A 7D                JNZ     -
   24324/    7D40 : 3E 43                   MVI     A,43H						;Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
   24325/    7D42 : (MACRO)                 OUTPORT	0B8H						;PIO Command/Status Register: set PIO chip configuration
   24326/    7D44 : 3E EC                   MVI     A,0ECH						;PIO B configuration (RTS low, DTR low, SPKR=1, Serial=Modem, Keyscan col 9 enable)
   24327/    7D46 : (MACRO)                 OUTPORT	0BAH						;Set PIO chip port B configuration
   24328/    7D48 : 3E FF                   MVI     A,0FFH						;PIO A configuration (Used for Key scan, LCD data, etc.)
   24329/    7D4A : (MACRO)                 OUTPORT	0B9H						;Initialize PIO chip port A
   24330/    7D4C : (MACRO)                 INPORT	0E8H						;Scan Keyboard to test for CTRL-BREAK (cold boot indicator)
   24331/    7D4E : E6 82                   ANI     82H							;Mask all but CTRL-BREAK keys
   24332/    7D50 : 3E ED                   MVI     A,0EDH						;Load code to disable key-scan col 9 (for CTRL-BREAK)
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 427 - 9/5/2025 20:20:35


   24333/    7D52 : (MACRO)                 OUTPORT	0BAH						;Disable key-scan col 9
   24334/    7D54 : CA E7 7D                JZ      R_COLD_BOOT					;Cold boot routine if CTRL-BREAK pressed
   24335/    7D57 : 2A F0 F5                LHLD    SYSRAM_R   					;Active system signature -- Warm vs Cold boot
   24336/    7D5A : 11 4D 8A                LXI     D,BOOTMARKER				;Compare value to test if cold boot needed
   24337/    7D5D : (MACRO)                 COMPAR	         					;HL - DE
   24338/    7D5E : C2 E7 7D                JNZ     R_COLD_BOOT					;Cold boot routine
   24339/    7D61 : 3A C1 FA                LDA     LOMEM_R+1					;Load MSB of lowest known RAM address to D
   24340/    7D64 : 57                      MOV     D,A
   24341/    7D65 : CD E1 7E                CALL    R_CALC_FREE_RAM				;Calculate physical RAM available
   24342/    7D68 : BA                      CMP     D							;RAM change?
   24343/    7D69 : C2 E7 7D                JNZ     R_COLD_BOOT					;Cold boot routine
   24344/    7D6C :                     
   24345/    7D6C : =>TRUE              	if OPTROM							;Option ROM
   24346/    7D6C : CD 05 F6                CALL    ROMTST_R					;Call RAM routine to Detect Option ROM (copied to RAM by cold-boot)
   24347/    7D6F : 3E 00                   MVI     A,00H						;preserve flags. Indicate no Option ROM detected
   24348/    7D71 : C2 75 7D                JNZ     +							;brif no Option ROM detected
   24349/    7D74 : 3D                      DCR     A							;now 0FFH. Indicate OptROM detected
   24350/    7D75 : 21 2A F6            +	LXI     H,ROMFLG_R  				;Option ROM flag
   24351/    7D78 : BE                      CMP     M							;Test if option ROM added or removed
   24352/    7D79 : C2 E7 7D                JNZ     R_COLD_BOOT					;Cold boot routine
   24353/    7D7C : =>FALSE             	else								;!OPTROM
   24354/    7D7C :                     	JMP		+
   24355/    7D7C :                     	DS		13							;13 bytes FREE if !OPTROM
   24356/    7D7C : [24345]             	endif								;OPTROM
   24357/    7D7C :                     	
   24358/    7D7C : 2A F2 F5            +	LHLD    AUTPWR_R					;Get Auto PowerDown signature
   24359/    7D7F : EB                      XCHG								;to DE
   24360/    7D80 : 21 00 00                LXI     H,0							;Prepare to clear signature for Auto Poweroff
   24361/    7D83 : 22 F2 F5                SHLD    AUTPWR_R					;Clear signature for Auto Poweroff
   24362/    7D86 : 21 0B 9C                LXI     H,AUTOPWRDWN				;Auto PowerDown signature
   24363/    7D89 : (MACRO)                 COMPAR	         					;Compare DE and HL. Test if last power off was Auto Poweroff: HL - DE
   24364/    7D8A : C2 A8 7D                JNZ     L_NOT_AUTOPWR				;brif !Auto PowerDown
   24365/    7D8D :                     ;
   24366/    7D8D :                     ; reboot after auto power down
   24367/    7D8D :                     ;
   24368/    7D8D : 2A BE FA                LHLD    POWRSP_R    				;SP save area for power up/down
   24369/    7D90 : F9                      SPHL
   24370/    7D91 : CD F6 F5                CALL    BOOTHK_R					;Call Boot-up Hook
   24371/    7D94 :                     L_PWR_DOWN_BOOT:						;used by vt100
   24372/    7D94 : CD D0 7D                CALL    L_BOOT_2					;tricked out target
   24373/    7D97 : 2A F8 FF                LHLD    SAVEDSP_R
   24374/    7D9A : E5                      PUSH    H
   24375/    7D9B : CD 01 46                CALL    L_LCDrefresh
   24376/    7D9E : E1                      POP     H
   24377/    7D9F :                     L_PWR_DOWN_BOOT2:						;used by vt100
   24378/    7D9F : 7C                      MOV     A,H
   24379/    7DA0 : A7                      ANA     A							;test
   24380/    7DA1 : CA ED 14                JZ      R_POP_ALL_REGS				;Pop AF), BC), DE), HL from stack
   24381/    7DA4 : F9                      SPHL
   24382/    7DA5 : C3 35 74                JMP     L_CHAR_PLOT_EXIT
   24383/    7DA8 :                     ;
   24384/    7DA8 :                     ; not Auto PowerDown restart
   24385/    7DA8 :                     ;
   24386/    7DA8 :                     L_NOT_AUTOPWR:
   24387/    7DA8 : 3A 51 F6            	LDA     EDITFLG_R
   24388/    7DAB : A7                      ANA     A
   24389/    7DAC : CA BB 7D                JZ      +
   24390/    7DAF : CD D0 7D                CALL    L_BOOT_2					;tricket out target
   24391/    7DB2 : CD 53 5D                CALL    L_RESET_SP_0				;Stop BASIC, Restore BASIC SP
   24392/    7DB5 : CD 01 46                CALL    L_LCDrefresh
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 428 - 9/5/2025 20:20:35


   24393/    7DB8 : C3 DD 5F                JMP     R_TEXT_EDIT_LOOP        	;Main TEXT edit loop
   24394/    7DBB :                     ;
   24395/    7DBB :                     ; not in Edit Mode
   24396/    7DBB :                     ;
   24397/    7DBB : 21 AF FA            +	LXI     H,IPLNAM_R  				;Start of IPL filename
   24398/    7DBE : 22 2C F6                SHLD    FNKMAC_R					;Get pointer to FKey text (from FKey table) for selected FKey
   24399/    7DC1 : 2A 78 F6                LHLD    STRBUF_R    				;BASIC string buffer pointer
   24400/    7DC4 : F9                      SPHL
   24401/    7DC5 : CD F6 F5                CALL    BOOTHK_R					;normally just returns unless VT100
   24402/    7DC8 : CD 6D 3F                CALL    L_INIT_BASIC				;Initialize BASIC for new execution
   24403/    7DCB : 21 97 57                LXI     H,R_MENU_ENTRY
   24404/    7DCE : E5                      PUSH    H
   24405/    7DCF : (MACRO)             	SKIP_XRA_A							;ORI 0AFH. Sets A
   24406/    7DD0 :                     L_BOOT_2:								;A == 0 entry
   24407/    7DD0 : AF                      XRA     A
   24408/    7DD1 : CD E0 6C                CALL    R_WARM_RESET				;Warm start reset entry
   24409/    7DD4 : AF                      XRA     A							;clear A
   24410/    7DD5 : 32 56 F6                STA     PWROFF_R   					;Power off exit condition switch
   24411/    7DD8 : 3A 43 FF                LDA     SERINIT_R    				;RS232 initialization status
   24412/    7DDB : A7                      ANA     A							;test
   24413/    7DDC : C8                      RZ									;retif SERINIT_R == 0
   24414/    7DDD : 21 5A F6                LXI     H,SERMOD_R-1				;Serial initialization string-1
   24415/    7DE0 : (MACRO)                 CHRGET	         					;Get next non-white char from M
   24416/    7DE1 : D4 57 34                CNC     L_INCHL						;Increment HL
   24417/    7DE4 : C3 E6 17                JMP     R_SET_RS232_PARAMS      	;Set RS232 parameters from string at M
   24418/    7DE7 :                     ;
   24419/    7DE7 :                     ; Cold boot routine
   24420/    7DE7 :                     ;
   24421/    7DE7 :                     R_COLD_BOOT:							;7DE7H
   24422/    7DE7 : 31 E6 F5                LXI     SP,SYSSTK_R
   24423/    7DEA : CD E1 7E                CALL    R_CALC_FREE_RAM				;Calculate physical RAM available
   24424/    7DED : 06 90                   MVI     B,R_FUN_INIT_IMAGE_END-R_FUN_INIT_IMAGE	;90H
   24425/    7DEF : 11 F0 F5                LXI     D,SYSRAM_R					;Active system signature -- Warm vs Cold boot
   24426/    7DF2 : 21 5A 03                LXI     H,R_FUN_INIT_IMAGE			;Code Based.
   24427/    7DF5 : CD 42 25                CALL    R_MOVE_B_BYTES 				;Move B bytes from M to (DE)
   24428/    7DF8 : CD C6 7E                CALL    R_INIT_RST_38H_TBL       	;Initialize RST 38H RAM vector table
   24429/    7DFB :                     
   24430/    7DFB : =>TRUE              	if	VT100INROM
   24431/    7DFB : 21 0C 64            	LXI		H,640CH						;H==100, L==12
   24432/    7DFE : 22 30 F9            	SHLD	TIMCN2_R					;initializes both TIMCN2_R and PWRCNT_R
   24433/    7E01 : CD 29 54            	CALL	L_VT100_HOOK_INIT
   24434/    7E04 : 00                  	NOP
   24435/    7E05 : =>FALSE             	else								;!VT100INROM
   24436/    7E05 :                         MVI     A,12						;0CH
   24437/    7E05 :                         STA     TIMCN2_R
   24438/    7E05 :                         MVI     A,100						;64H
   24439/    7E05 :                         STA     PWRCNT_R
   24440/    7E05 : [24430]             	endif								;VT100INROM
   24441/    7E05 :                     
   24442/    7E05 : 21 46 5B                LXI     H,R_BASIC_FKEYS_TBL			;Code Based.
   24443/    7E08 : CD 7C 5A                CALL    R_SET_FKEYS    				;Set new function key table
   24444/    7E0B : CD 93 6C                CALL    R_SET_BASIC_FKEYS       	;Copy BASIC Function key table to key definition area
   24445/    7E0E : 06 58                   MVI     B,8*RAMDIRLEN				;58H/88
   24446/    7E10 : 11 F1 6B                LXI     D,R_ROM_CAT_ENTRIES      	;Code Based. ROM programs directory entries
   24447/    7E13 : 21 62 F9                LXI     H,RAMDIR_R  				;Start of RAM directory
   24448/    7E16 : CD 69 34                CALL    R_MOVE_B_BYTES_INC       	;Move B bytes from (DE) to M with increment
   24449/    7E19 : 06 D1                   MVI     B,(RAMDIRCNT-8)*RAMDIRLEN	;0D1H/209
   24450/    7E1B : AF                      XRA     A
   24451/    7E1C : 77                  -	MOV     M,A							;clear remainder of RAMDIR_R
   24452/    7E1D : 23                      INX     H
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 429 - 9/5/2025 20:20:35


   24453/    7E1E : 05                      DCR     B
   24454/    7E1F : C2 1C 7E                JNZ		-
   24455/    7E22 : 36 FF                   MVI     M,0FFH						;end of directory marker
   24456/    7E24 :                     
   24457/    7E24 : =>TRUE              	if OPTROM							;Tandy supplied Option ROM
   24458/    7E24 : CD 05 F6                CALL    ROMTST_R					;Call RAM routine to Detect Option ROM (copied to RAM by cold-boot)
   24459/    7E27 : C2 43 7E                JNZ     +
   24460/    7E2A : 3D                      DCR     A							;set A to 0FFH
   24461/    7E2B : 32 2A F6                STA     ROMFLG_R         			;Option ROM flag
   24462/    7E2E : 21 BA F9                LXI     H,USRRAM_R					;RAMDIR_R+58H		0F9BAH
   24463/    7E31 : 36 F0                   MVI     M,0F0H						;type 11110000B
   24464/    7E33 : 23                      INX     H
   24465/    7E34 : 23                      INX     H
   24466/    7E35 : 23                      INX     H							;to F9BDH
   24467/    7E36 : 11 A6 FA                LXI     D,ROMSW_R+2
   24468/    7E39 : 06 06                   MVI     B,06H
   24469/    7E3B : CD 69 34                CALL    R_MOVE_B_BYTES_INC			;Move B bytes from (DE) to M with increment
   24470/    7E3E : 36 20                   MVI     M,' '
   24471/    7E40 : 23                      INX     H
   24472/    7E41 : 36 00                   MVI     M,00H
   24473/    7E43 : =>FALSE             	else
   24474/    7E43 :                     	JMP		+
   24475/    7E43 :                     	DS		28							;28 bytes FREE if !OPTROM
   24476/    7E43 : [24457]             	endif
   24477/    7E43 :                     
   24478/    7E43 : AF                  +	XRA     A
   24479/    7E44 : 32 87 F7                STA     UNUSED4_R					;TODO only use
   24480/    7E47 : 32 A7 FC                STA     OPNFIL_R
   24481/    7E4A : CD 96 1A                CALL    R_ERASE_IPL_PRGM			;Erase current IPL program. returns 0 in A
   24482/    7E4D : 32 32 F9                STA     PWRDWN_R					;clear Power Down Flag
   24483/    7E50 : 3E 3A                   MVI     A,3AH						;':'
   24484/    7E52 : 32 80 F6                STA     EOSMRK_R					;End of statement marker == ':'
   24485/    7E55 : 21 D4 FB                LXI     H,UNUSED7_R
   24486/    7E58 : 22 D9 FB                SHLD    PRMPRV_R
   24487/    7E5B : 22 78 F6                SHLD    STRBUF_R				    ;BASIC string buffer pointer
   24488/    7E5E : 22 67 FB                SHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   24489/    7E61 : 3E 01                   MVI     A,01H
   24490/    7E63 : 32 B3 FB                STA     VARTAB_R+1					;0FBB3H
   24491/    7E66 : CD 2B 7F                CALL    L_UPD_FILEBUFS
   24492/    7E69 : CD 6D 3F                CALL    L_INIT_BASIC				;Initialize BASIC for new execution
   24493/    7E6C : 2A C0 FA                LHLD    LOMEM_R						;Lowest RAM address used by system
   24494/    7E6F : AF                      XRA     A
   24495/    7E70 : 77                      MOV     M,A
   24496/    7E71 : 23                      INX     H
   24497/    7E72 : 22 7C F6                SHLD    TXTTAB_R					;Start of BASIC program pointer
   24498/    7E75 : 22 9A F9                SHLD    SUZUKI_R+1					;BASIC program not saved pointer
   24499/    7E78 : 77                      MOV     M,A							;enter double 0
   24500/    7E79 : 23                      INX     H
   24501/    7E7A : 77                      MOV     M,A
   24502/    7E7B : 23                      INX     H
   24503/    7E7C : 22 AE FB                SHLD    DOSTRT_R					;DO files pointer
   24504/    7E7F : 22 A5 F9                SHLD    HAYASHI_R+1					;Start of Paste Buffer
   24505/    7E82 : 36 1A                   MVI     M,1AH						;enter ^Z
   24506/    7E84 : 23                      INX     H
   24507/    7E85 : 22 B0 FB                SHLD    COSTRT_R					;CO files pointer
   24508/    7E88 : 22 B2 FB                SHLD    VARTAB_R					;Start of variable data pointer
   24509/    7E8B : 21 99 F9                LXI     H,SUZUKI_R					;Suzuki Directory Entry
   24510/    7E8E : 22 8C FA                SHLD    RAMDIRPTR_R
   24511/    7E91 : CD FF 20                CALL    SCRTCH						;NEW()
   24512/    7E94 : CD D6 6C                CALL    R_RE_INIT_SYSTEM			;Re-initialize system without destroying files
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 430 - 9/5/2025 20:20:35


   24513/    7E97 :                     L_RESET_TIME:
   24514/    7E97 : 21 00 00                LXI     H,0
   24515/    7E9A : 22 2D F9                SHLD    TIMYR1_R					;Year (ones)
   24516/    7E9D : 21 01 7F                LXI     H,R_INIT_CLK_CHIP_REGS		;Code Based. Initial clock chip register values
   24517/    7EA0 : CD 2A 73                CALL    R_PUT_CLK_CHIP_REGS			;Update clock chip regs from M
   24518/    7EA3 : C3 97 57                JMP     R_MENU_ENTRY				;MENU Program
   24519/    7EA6 :                     ;
   24520/    7EA6 :                     ; Display TRS-80 Model number & Free bytes on LCD
   24521/    7EA6 :                     ;
   24522/    7EA6 :                     R_DISP_MODEL:							;7EA6H
   24523/    7EA6 : 21 A4 7F                LXI     H,L_MENU_LOGO				;Code Based. TRS-80 model number string
   24524/    7EA9 : CD B1 27                CALL    R_PRINT_STRING				;Print buffer at M until NULL or '"'
   24525/    7EAC :                     ;
   24526/    7EAC :                     ; Display number of free bytes on LCD
   24527/    7EAC :                     ;
   24528/    7EAC :                     R_DISP_FREE_BYTES:						;7EACH
   24529/    7EAC : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data pointer
   24530/    7EAF : EB                      XCHG
   24531/    7EB0 : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer
   24532/    7EB3 : 7D                      MOV     A,L							;HL -= DE
   24533/    7EB4 : 93                      SUB     E
   24534/    7EB5 : 6F                      MOV     L,A
   24535/    7EB6 : 7C                      MOV     A,H
   24536/    7EB7 : 9A                      SBB     D
   24537/    7EB8 : 67                      MOV     H,A
   24538/    7EB9 : 01 F2 FF                LXI     B,-14						;0FFF2H
   24539/    7EBC : 09                      DAD     B
   24540/    7EBD : CD D4 39                CALL    R_PRINT_HL_ON_LCD			;Print binary number in HL at current position
   24541/    7EC0 : 21 98 7F                LXI     H,R_MENU_TEXT_STRINGS		;Code Based. MENU Text Strings
   24542/    7EC3 : C3 B1 27                JMP     R_PRINT_STRING				;Print buffer at M until NULL or '"'
   24543/    7EC6 :                     ;
   24544/    7EC6 :                     ; Initialize RST 38H RAM vector table
   24545/    7EC6 :                     ; First 29 entries will point to R_RET_INSTR,
   24546/    7EC6 :                     ; next 19 entries will points to R_GEN_FC_ERROR
   24547/    7EC6 :                     ; total 29+19=48 entries; max offset in table 2 * 48 = 96 (60H)
   24548/    7EC6 :                     ;
   24549/    7EC6 :                     R_INIT_RST_38H_TBL:						;7EC6H
   24550/    7EC6 : 21 DA FA                LXI     H,RST38_R				    ;Start of RST 38H vector table
   24551/    7EC9 : 01 02 1D                LXI     B,1D02H					 	;B = 1DH, C = 02H
   24552/    7ECC : 11 F3 7F                LXI     D,R_RET_INSTR				;Code Based
   24553/    7ECF : 73                  -	MOV     M,E
   24554/    7ED0 : 23                      INX     H
   24555/    7ED1 : 72                      MOV     M,D
   24556/    7ED2 : 23                      INX     H
   24557/    7ED3 : 05                      DCR     B
   24558/    7ED4 : C2 CF 7E                JNZ     -
   24559/    7ED7 : 06 13                   MVI     B,13H						;second part
   24560/    7ED9 : 11 DB 08                LXI     D,R_GEN_FC_ERROR			;Code Based
   24561/    7EDC : 0D                      DCR     C
   24562/    7EDD : C2 CF 7E                JNZ     -
   24563/    7EE0 : C9                      RET
   24564/    7EE1 :                     ;
   24565/    7EE1 :                     ; Calculate physical RAM available
   24566/    7EE1 :                     ; RAM always available at 0E000H (8K) so test 0C000H, 0A000H and 8000H
   24567/    7EE1 :                     ; Only test first 256 bytes of each bank
   24568/    7EE1 :                     ;
   24569/    7EE1 :                     R_CALC_FREE_RAM:						;7EE1H
   24570/    7EE1 : 21 00 C0                LXI     H,0C000H					;start at 0C000H, first optional RAM
   24571/    7EE4 : 7E                  -	MOV     A,M							;read memory
   24572/    7EE5 : 2F                      CMA
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 431 - 9/5/2025 20:20:35


   24573/    7EE6 : 77                      MOV     M,A							;update memory
   24574/    7EE7 : BE                      CMP     M							;did it change
   24575/    7EE8 : 2F                      CMA									;restore original value
   24576/    7EE9 : 77                      MOV     M,A							;restore memory
   24577/    7EEA : 7C                      MOV     A,H							;page #
   24578/    7EEB : C2 F8 7E                JNZ     +							;brif memory unchanged
   24579/    7EEE : 2C                      INR     L							;next byte
   24580/    7EEF : C2 E4 7E                JNZ     -							;brif !end of page
   24581/    7EF2 : D6 20                   SUI     20H							;update page # to next RAM chip
   24582/    7EF4 : 67                      MOV     H,A
   24583/    7EF5 : FA E4 7E                JM      -							;brif H >= 80H
   24584/    7EF8 : 2E 00               +	MVI     L,00H
   24585/    7EFA : C6 20                   ADI		20H							;undo last page update
   24586/    7EFC : 67                      MOV     H,A
   24587/    7EFD : 22 C0 FA                SHLD    LOMEM_R						;Lowest RAM address available to system
   24588/    7F00 : C9                      RET
   24589/    7F01 :                     ;
   24590/    7F01 :                     ; Initial clock chip register values
   24591/    7F01 :                     ;
   24592/    7F01 :                     R_INIT_CLK_CHIP_REGS:				    ;7F01H
   24593/    7F01 : 00 00 00 00 00 00       DB      00H,00H,00H,00H,00H,00H,01H,00H,00H,01H
                    01 00 00 01 
   24594/    7F0B :                     ;
   24595/    7F0B :                     ; MAXFILES function
   24596/    7F0B :                     ;
   24597/    7F0B :                     R_MAX_FUN2:								;7F0BH
   24598/    7F0B : (MACRO)             	SYNCHK	_FILES						;9DH	FILES token
   24599/    7F0D : (MACRO)             	SYNCHK	_EQUAL_						;'=' token
   24600/    7F0F : CD 2E 11                CALL    L_GETBYT					;Evaluate byte expression at M-1
   24601/    7F12 : C2 46 04                JNZ     R_GEN_SN_ERROR				;Generate Syntax error
   24602/    7F15 : FE 10                   CPI     16							;MAXFILES == 15
   24603/    7F17 : D2 DB 08                JNC     R_GEN_FC_ERROR				;if A >= 10H Generate FC error
   24604/    7F1A : 22 99 FB                SHLD    LSTVAR_R					;Address of last variable assigned
   24605/    7F1D : F5                      PUSH    PSW							;save new MAXFILES value
   24606/    7F1E : CD 22 4E                CALL    R_CLSALL					;Close Files
   24607/    7F21 : F1                      POP     PSW							;restore new MAXFILES value
   24608/    7F22 : CD 2B 7F                CALL    L_UPD_FILEBUFS
   24609/    7F25 : CD 2F 3F                CALL    R_INIT_BASIC_VARS_3
   24610/    7F28 : C3 04 08                JMP     L_NEWSTT					;Execute BASIC program
   24611/    7F2B :                     ;
   24612/    7F2B :                     ; A == new MAXFILES value
   24613/    7F2B :                     ; Compute new MEMSIZ_R. Every file needs 9 + 256 = 267 bytes (114H)
   24614/    7F2B :                     ;
   24615/    7F2B :                     L_UPD_FILEBUFS:
   24616/    7F2B : F5                      PUSH    PSW							;save new MAXFILES value
   24617/    7F2C : 2A F4 F5                LHLD    HIMEM_R						;HIMEM
   24618/    7F2F : 11 F5 FE                LXI     D,0FEF5H					;-267
   24619/    7F32 :                     ; loop new MAXFILES times
   24620/    7F32 : 19                  -	DAD     D							;subtract 267 from HIMEM
   24621/    7F33 : 3D                      DCR     A							;MAXFILES cnt
   24622/    7F34 : F2 32 7F                JP      -							;Loop while A >= 0
   24623/    7F37 : EB                      XCHG								;new File Buffer Area Start Address to DE
   24624/    7F38 : 2A 78 F6                LHLD    STRBUF_R					;BASIC string buffer pointer
   24625/    7F3B : 44                      MOV     B,H							;BC = HL
   24626/    7F3C : 4D                      MOV     C,L
   24627/    7F3D : 2A 67 FB                LHLD    MEMSIZ_R					;File buffer area pointer. Also end of Strings Buffer Area.
   24628/    7F40 :                     ; compute size of String Buffer Area.
   24629/    7F40 : 7D                      MOV     A,L							;HL = [MEMSIZ_R] - [STRBUF_R]
   24630/    7F41 : 91                      SUB     C
   24631/    7F42 : 6F                      MOV     L,A
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 432 - 9/5/2025 20:20:35


   24632/    7F43 : 7C                      MOV     A,H
   24633/    7F44 : 98                      SBB     B
   24634/    7F45 : 67                      MOV     H,A
   24635/    7F46 : F1                      POP     PSW							;restore new MAXFILES value
   24636/    7F47 : E5                      PUSH    H							;save size of String Buffer Area
   24637/    7F48 : F5                      PUSH    PSW							;save new MAXFILES value
   24638/    7F49 : 01 8C 00                LXI     B,008CH						;140
   24639/    7F4C : 09                      DAD     B							;BC = size of String Buffer Area + 140
   24640/    7F4D : 44                      MOV     B,H
   24641/    7F4E : 4D                      MOV     C,L
   24642/    7F4F : 2A B2 FB                LHLD    VARTAB_R					;Start of variable data
   24643/    7F52 : 09                      DAD     B							;HL = [VARTAB_R] + size of String Buffer Area + 140
   24644/    7F53 : (MACRO)                 COMPAR								;HL - new File Buffer Area Start Address
   24645/    7F54 : D2 17 3F                JNC     L_OUTOFMEMORY				;brif [VARTAB_R] + size of String Buffer Area + 140 >=  new File Buffer Area Start Address
   24646/    7F57 : F1                      POP     PSW							;restore new MAXFILES value
   24647/    7F58 : 32 82 FC                STA     MAXFILES_R					;update Maxfiles
   24648/    7F5B : 6B                      MOV     L,E							;HL = new File Buffer Area Start Address
   24649/    7F5C : 62                      MOV     H,D
   24650/    7F5D : 22 83 FC                SHLD    FCBTBL_R					;File number description table pointer
   24651/    7F60 : 2B                      DCX     H
   24652/    7F61 : 2B                      DCX     H
   24653/    7F62 : 22 67 FB                SHLD    MEMSIZ_R					;File buffer area pointer
   24654/    7F65 : C1                      POP     B							;restore size of String Buffer Area
   24655/    7F66 : 7D                      MOV     A,L							;compute start of String Buffer Area
   24656/    7F67 : 91                      SUB     C
   24657/    7F68 : 6F                      MOV     L,A
   24658/    7F69 : 7C                      MOV     A,H
   24659/    7F6A : 98                      SBB     B
   24660/    7F6B : 67                      MOV     H,A
   24661/    7F6C : 22 78 F6                SHLD    STRBUF_R					;BASIC string buffer area pointer
   24662/    7F6F : 2B                      DCX     H							;decreement by 2
   24663/    7F70 : 2B                      DCX     H
   24664/    7F71 : C1                      POP     B							;pop return address
   24665/    7F72 : F9                      SPHL								;set new stack area
   24666/    7F73 : C5                      PUSH    B							;push return address
   24667/    7F74 : 3A 82 FC                LDA     MAXFILES_R					;Maxfiles
   24668/    7F77 : 6F                      MOV     L,A
   24669/    7F78 : 2C                      INR     L							;Maxfiles+1
   24670/    7F79 : 26 00                   MVI     H,00H						;zero extend to HL
   24671/    7F7B : 29                      DAD     H							;double
   24672/    7F7C : 19                      DAD     D							;DE = [FCBTBL_R] + 2 * (Maxfiles + 1): ptr to first FCB
   24673/    7F7D : EB                      XCHG								;HL now [FCBTBL_R]
   24674/    7F7E : D5                      PUSH    D							;save ptr to first FCB
   24675/    7F7F : 01 09 01                LXI     B,0109H						;265
   24676/    7F82 :                     ;
   24677/    7F82 :                     ; populate FCB table. [MAXFILES_R] + 1 entries
   24678/    7F82 :                     ;
   24679/    7F82 : 73                  -	MOV     M,E							;[HL] = DE
   24680/    7F83 : 23                      INX     H
   24681/    7F84 : 72                      MOV     M,D
   24682/    7F85 : 23                      INX     H
   24683/    7F86 : EB                      XCHG								;FCB address to HL
   24684/    7F87 : 36 00               	MVI     M,00H						;init FCB
   24685/    7F89 : 09                      DAD     B							;add 265
   24686/    7F8A : EB                      XCHG								;DE is ptr to next FCB
   24687/    7F8B : 3D                      DCR     A							;Maxfiles counter
   24688/    7F8C : F2 82 7F                JP      -							;loop
   24689/    7F8F : E1                      POP     H							;restore ptr to first FCB
   24690/    7F90 : 01 09 00                LXI     B,0009H						;add 9
   24691/    7F93 : 09                      DAD     B
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 433 - 9/5/2025 20:20:35


   24692/    7F94 : 22 87 FC                SHLD    FCB1_BUF_R					;ptr to buffer first file
   24693/    7F97 : C9                      RET
   24694/    7F98 :                     ;
   24695/    7F98 :                     ; MENU Text Strings
   24696/    7F98 :                     ;
   24697/    7F98 :                     R_MENU_TEXT_STRINGS:				  	;7F98H
   24698/    7F98 : 20 42 79 74 65 73       DB      " Bytes free",00H
                    20 66 72 65 65 00 
   24699/    7FA4 :                     
   24700/    7FA4 :                     L_MENU_LOGO:
   24701/    7FA4 : 54 52 53 2D 38 30       DB      "TRS-80 Model 100 Software",0DH,0AH
                    20 4D 6F 64 65 6C 
                    20 31 30 30 20 53 
                    6F 66 74 77 61 72 
                    65 0D 0A 
   24702/    7FBF : 43 6F 70 72 2E 20       DB      "Copr. 1983 Microsoft",0DH,0AH,00H
                    31 39 38 33 20 4D 
                    69 63 72 6F 73 6F 
                    66 74 0D 0A 00 
   24703/    7FD6 :                     ;
   24704/    7FD6 :                     ; RST 38H RAM vector driver routine
   24705/    7FD6 :                     ;
   24706/    7FD6 : =>TRUE              	if REALM100
   24707/    7FD6 :                     R_RAM_VCTR_TBL_DRIVER:					;07FD6H
   24708/    7FD6 : E3                      XTHL							 	;(HL) points to offset byte
   24709/    7FD7 : F5                      PUSH    PSW
   24710/    7FD8 : 7E                      MOV     A,M						 	;get offset byte
   24711/    7FD9 : 32 C9 FA                STA     RST38ARG_R					;save offset of this RST 38H call
   24712/    7FDC : F1                      POP     PSW
   24713/    7FDD : 23                      INX     H						 	;(HL) now points to return address
   24714/    7FDE : E3                      XTHL							 	;set return address and restore HL
   24715/    7FDF : E5                      PUSH    H
   24716/    7FE0 : C5                      PUSH    B
   24717/    7FE1 : F5                      PUSH    PSW
   24718/    7FE2 : 21 DA FA                LXI     H,RST38_R				    ;Start of RST 38H vector table
   24719/    7FE5 : 3A C9 FA                LDA     RST38ARG_R					;Restore Offset of this RST 38H call
   24720/    7FE8 : 4F                      MOV     C,A						 	;offset is 2 * index 
   24721/    7FE9 : 06 00                   MVI     B,00H
   24722/    7FEB : 09                      DAD     B
   24723/    7FEC : (MACRO)             	GETHLFROMM							;get jump vector to HL
   24724/    7FF0 : F1                      POP     PSW
   24725/    7FF1 : C1                      POP     B
   24726/    7FF2 : E3                      XTHL							 	;swap saved HL on stack with jmp vector
   24727/    7FF3 :                     R_RET_INSTR:
   24728/    7FF3 : C9                      RET								 	;to jmp vector
   24729/    7FF4 : =>FALSE             	else
   24730/    7FF4 :                     	DS		(7FF4H-7FD6H)				;xx bytes FREE if !REALM100
   24731/    7FF4 : [24706]             	endif								;REALM100
   24732/    7FF4 :                     
   24733/    7FF4 :                     L_CONV_DBL_TO_FAC2:
   24734/    7FF4 : CD BA 35                CALL    L_FRCDBL				    ;CDBL function
   24735/    7FF7 : C3 B5 31                JMP     R_FAC2_EQ_FAC1				;Move FAC1 to FAC2
   24736/    7FFA :                     ;
   24737/    7FFA :                     ; 6 bytes free at end of rom
   24738/    7FFA :                     ;
   24739/    7FFA : 00 00 00 00 00 00       DB      0,0,0,0,0,0
   24740/    8000 :                     
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 434 - 9/5/2025 20:20:35


  symbol table (* = unused):
  ------------------------

 ACTONERR_R :                  F652 - |  ALTLCD_R :                    FCC0 - |
*ARCHITECTURE :  i386-unknown-win32 - |  ARYTA2_R :                    FBDF - |
 ARYTAB_R :                    FBB4 - |  AUTOPWRDWN :                  9C0B - |
 AUTPWR_R :                    F5F2 - |  AUXCON :                         1 - |
 AUX_CONSOLE :                 FFFD - |  BASEPATCH :                      0 - |
 BASFNK_R :                    F80A - |  BASSTK_R :                    FB9D - |
 BAUDRT_R :                    FF8B - |  BCDTMP1_R :                   FC2F - |
*BCDTMP2_R :                   FC37 - | *BCDTMP3_R :                   FC3F - |
*BCDTMP4_R :                   FC47 - | *BCDTMP5_R :                   FC4F - |
*BCDTMP6_R :                   FC57 - |  BCDTMP7_R :                   FC5F - |
 BCDTMP8_R :                   FC67 - | *BCDTMPS_R :                   FC27 - |
*BIGENDIAN :                      0 - |  BLNK :                        73C5 - |
 BOOTHK_R :                    F5F6 - |  BOOTMARKER :                  8A4D - |
 BOOTSTK_R :                   FCA8 - | *BRANCHEXT :                      0 - |
 BUFFER_IN_FCB_OFS :              9 - |  BUFOFS_IN_FCB_OFS :              6 - |
*CASESENSITIVE :                  0 - |  CASFILSTAT_R :                FA8E - |
 CASPLS_R :                    FF8E - |  CAS_DEV :                       FD - |
*CLEAR1 :                       8D7 - |  CLKCHP_R :                    F933 - |
 CLKLOOP1 :                    7340 C |  CLKLOOP2 :                    7343 C |
 COLDBOOT :                    7E97 - |  COLONTXT_R :                  F66D - |
 COLWRAP_R :                   F676 - |  COM_DEV :                       FC - |
 CONDEV_R :                    F638 - | *CONSTPI :        3.141592653589793 - |
 CONVERTNUM :                  53B6 C |  COSTRT_R :                    FBB0 - |
 CRELOC_R :                    FB64 - |  CRT_DEV :                       FE - |
 CSRCNT_R :                    FFF3 - |  CSRSTAT_R :                   FFF2 - |
 CSRXSVD_R :                   FACA - |  CSRX_R :                      F63A - |
 CSRY_R :                      F639 - |  CTRLS_R :                     FF8A - |
 CURHPOS_R :                   F788 - |  CURLIN_R :                    F67A - |
 CURPOS_R :                    F892 - |  CURSDWN :                     75D4 C |
 CURSLFT :                     75D8 C |  CURSOFF :                     75C5 C |
 CURSRT :                      75D6 C |  CURSTAT_R :                   F63F - |
 CURSUP :                      75D2 C |  DATALIN_R :                   FB94 - |
 DATAPTR_R :                   FBB8 - | *DATE :                    9/5/2025 - |
*DBSTART :                     51DB C | *DBSTART1 :                    51DE C |
 DCBCLS_FUN :                     2 - |  DCBIN_FUN :                      6 - |
 DCBIO_FUN :                      8 - |  DCBOPN_FUN :                     0 - |
 DCBOUT_FUN :                     4 - |  DCRCODE_R :                   F665 - |
 DEADCODE :                       1 - |  DEFTBL_R :                    FBBA - |
 DELLINE :                     75E7 C |  DEV_IN_FCB_OFS :                 4 - |
 DFACLO2_R :                   FC69 - |  DFACLO_R :                    FC18 - |
 DIR_IN_FCB_OFS :                 2 - |  DOADDR_R :                    F6E2 - |
 DOEND_R :                     F6E4 - |  DOFILPTR_R :                  FAC4 - |
 DOLOAD_R :                    F767 - |  DORES_R :                     FB66 - |
 DOSTRT_R :                    FBAE - |  DOT_R :                       FBA1 - |
 DSPCOFF_R :                   F890 - |  DUPLEX_R :                    F658 - |
 DVIBOX_R :                    FFFA - |  DVIENABLED :                     1 - |
 DVIFLG_R :                    FFFB - | *DVIMAXCOL_R :                 F645 - |
 DVIMAXROW_R :                 F644 - |  DVIROWCOL_R :                 F642 - |
 DVI_STAT_R :                  FC81 - |  ECHO_R :                      F659 - |
 EDITFLG_R :                   F651 - | *ENDHKT2_R :                   FB39 - |
*ENDKBDCL2_R :                 FFA2 - | *ENDUSRRAM_R :                 FA8A - |
 EOMFILE_R :                   F88C - |  EOSMRK_R :                    F680 - |
 ERASECL :                     75DC C |  ERASEEOL :                    75CA C |
 ERASEEOP :                    75DA C |  ERRFLG_R :                    F672 - |
 ERRLIN_R :                    FB9F - |  ERRTXT_R :                    FBA3 - |
 ESCCODES :                    7577 C |  ESCESC_R :                    F6DF - |
 ESCRST20_R :                  F646 - |  ESCY :                        FDF8 - |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 435 - 9/5/2025 20:20:35


 ESC_PENDING :                 F62B - | *EVALBUF :                     1297 - |
 EXCFLG_R :                    FC92 - | *EXC_WR_OPCODE :                  1 - |
*FALSE :                          0 - |  FASCAS :                      7615 C |
 FCB1_BUF_R :                  FC87 - |  FCBLAST_R :                   FC8C - |
 FCBTBL_R :                    FC83 - |  FCERR :                        8DB - |
*FILEBUFPTR :                  FB67 - |  FILNAM_R :                    FC93 - |
 FILNM2_R :                    FC9C - |  FILNUM_R :                    FAA2 - |
 FILPOS_IN_FCB_OFS :              7 - |  FILSTATTBL_R :                FA91 - |
 FILSTAT_R :                   FA8F - |  FILTYP_R :                    F809 - |
 FKEYSTAT_R :                  F630 - |  FNDFOR :                       401 C |
 FNDFOR_HL :                    405 C |  FNKMAC_R :                    F62C - |
 FNKMOD_R :                    F650 - |  FNKSTR_R :                    F789 - |
 FPRND_R :                     FC79 - |  FPTMP1_R :                    FBE7 - |
 FPTMP2_R :                    FC60 - |  FPTMP4_R :                    FC12 - |
 FPTMP5_R :                    FC14 - |  FPTMP6_R :                    FC16 - |
 FPTMP7_R :                    FC17 - |  FRETOP_R :                    FB8C - |
*FULLPMMU :                       1 - | *FUNKEY_R :                    FF98 - |
*GET_COL :                     537D C |  GET_ROW :                     5389 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HAYASHI_R :                   F9A4 - | *HCHGET :                      FADE - |
 HCHGET_R :                    FADE - | *HCHPUT :                      FAE2 - |
 HCHPUT_R :                    FAE2 - | *HCHSNS :                      FAE0 - |
 HCHSNS_R :                    FAE0 - | *HIMEM :                       F5F4 - |
 HIMEM_R :                     F5F4 - |  HK_CHGET :                    5211 C |
 HK_CRTOPEN :                  51EA C |  HK_CRTPUT :                   51E1 C |
 HK_NEWCONSOLE :               5229 C |  HK_RST4 :                     51EE C |
 HK_RST4_2 :                   5208 C |  HK_SCREEN :                   525A C |
 HK_SCREEN2 :                  527F C |  HOOKDAT :                     7602 C |
 HOOKLOOP :                    542F C | *HOOKT2_R :                    FB14 - |
 HWMODEM :                        0 - |  HWSCROLL :                       0 - |
 IFACLO2_R :                   FC6B - |  IFACLO_R :                    FC1A - |
 INCODE_R :                    F66A - | *INEXTMODE :                      0 - |
 INITSYS :                     72FB - |  INIT_RS232 :                  52B3 C |
 INIT_VID :                    75EB C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - |  INPBUF_R :                    F685 - |
 INRCODE_R :                   F663 - |  INSLINE :                     75E9 C |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INVCHR :                      75CC C |  IPLNAM_R :                    FAAF - |
 KBBUF_R :                     FFAB - |  KBCNT_R :                     FFAA - |
 KBDCNTR_R :                   FF90 - |  KBDCOL1_R :                   FF91 - |
 KBDCOL2_R :                   FF9A - |  KBDSKIP_R :                   FF8F - |
 KEYCNT2_R :                   FFA5 - |  KEYCNT_R :                    FFA4 - |
 KEYPTR_R :                    FFA8 - |  KEYSHFT_R :                   FFA3 - |
 KEYSTRG_R :                   FFA6 - |  KEYXXXX_R :                   FFA7 - |
 KILASC :                      1FBF C |  KILASC_TAIL :                 1FD1 C |
 L5CHAR :                      434C - |  LABELPROT :                   F63D - |
*LABEL_KEY :                      E - |  LASTLEN_R :                   FAD0 - |
 LASTLPT_R :                   FAAC - |  LASTLST_R :                   FABA - |
 LASTSTRT_R :                  FAD2 - |  LAST_RAM :                    FFFE - |
 LCDBITS_R :                   FB3A - |  LCDBUF_R :                    FFEC - |
 LCDCONF :                     53C9 C | *LCDCSX_R :                    F641 - |
 LCDCSY_R :                    F640 - |  LCDPATCH :                       1 - |
 LCDPRT_R :                    F920 - |  LCD_DEV :                       FF - |
 LCD_R :                       FE00 - |  LCTEX_R :                     FFF5 - |
 LCTEY_R :                     FFF4 - |  LFFLG_R :                     F65A - |
 LHSMID :                      2AC2 C |  LINBUF_R :                    F894 - |
 LINCNT_R :                    F63B - |  LINENA_R :                    FAAD - |
 LINGET :                       8E0 C |  LINPROT2_R :                  FACC - |
 LINPROT_R :                   F63D - |  LINWDT_R :                    F63C - |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 436 - 9/5/2025 20:20:35


*LISTON :                         1 - |  LNKFIL :                      2146 C |
 LNKFIL_2 :                    2175 C |  LNKFIL_3 :                    218D C |
 LNKFIL_LOOP :                 214E C |  LOADADR_R :                   FACE - |
 LOCK8 :                       75DF C |  LOCKSCROLL :                  75E3 C |
 LOMEM_R :                     FAC0 - |  LOOP_DEVNAME :                50B7 C |
 LPTPOS_R :                    F674 - |  LPT_DEV :                       FA - |
 LPT_MOVING_R :                FACD - |  LSTCAL_R :                    F661 - |
 LSTPST_R :                    FAA1 - |  LSTVAR_R :                    FB99 - |
 L_ABORTED_MSG :               5771 C |  L_ABORT_HANDLER :             66F2 C |
 L_ABS_DE_HL :                 37BA C |  L_ADDRSS_LFND_FUN_1 :         5BFC C |
 L_ADDRSS_LFND_FUN_2 :         5C07 C |  L_ADDRSS_SCHEDL :             5B74 C |
 L_ADD_BUFF_TABS :             68B2 C |  L_ADD_BUFF_TABS_1 :           68C2 C |
 L_ADD_CHR :                   67EC C |  L_ADD_CHR_1 :                 6855 C |
 L_ADD_CR :                    6897 C |  L_ADD_CRLF :                  6908 C |
 L_ADD_CTRL_CHAR :             685D C |  L_ADD_EOF_CHAR :              6887 C |
 L_ADD_TXT_CHR :               68D0 C |  L_ADD_ZEROS :                 3C44 C |
 L_ADD_ZEROS_FMT :             3C4D C |  L_ADD_ZEROS_FMT_1 :           3C54 C |
 L_ADRS_DO_MSG :               5CCE C |  L_ADRS_MSG :                  5CE1 C |
 L_ALTLCDREFRESH :             461F C |  L_ALTLCDREFRESH_1 :           4624 C |
 L_ALT_BASIC_ENTRY :           6C5B C |  L_ARYSTR :                    287B C |
 L_ARYVA2 :                    285B C |  L_ARYVA4 :                    285C C |
 L_ARYVAR :                    283A C |  L_ASCII_FND_1 :               38A4 C |
 L_ASCII_FND_2 :               38CA C |  L_ASCII_FND_D :               38A3 C |
 L_ASCII_TO_DBL_1 :            3857 C |  L_ASC_CONV_1 :                3982 C |
 L_ASC_CONV_2 :                398A C |  L_ASC_CONV_3 :                398D C |
 L_ASSIGN :                     9BD C |  L_ATN_1 :                     2F99 C |
 L_ATN_TBL :                   2FC9 C |  L_BAD_FILESPEC :              4C55 C |
 L_BA_EOF :                    21C2 C |  L_BCDX248 :                   2DAF C |
 L_BCDX248_1 :                 2DB5 C |  L_BDL_LINE_DE :               67DF C |
 L_BEEP_RESET :                72FB C |  L_BELOW_HIMEM :               256D C |
 L_BIT_VCTRS :                 7643 C |  L_BLINK_CURSOR_0 :            7391 C |
 L_BLINK_LCD :                 73C5 C | *L_BLTUC :                     3EF3 C |
 L_BOOT_2 :                    7DD0 C |  L_CALC_LINE_STRTS :           6B39 C |
 L_CALL_STMT_1 :               1E1B C |  L_CAR_READ_BYTE :             7016 C |
 L_CAS_FIN_BLK :               2635 C |  L_CAS_FOUND_TXT :             26FE C |
 L_CAS_IO_ERROR :              1491 C |  L_CAS_OPEN_1 :                26C8 C |
 L_CAS_OPEN_2 :                26CD C |  L_CAS_PRINT_FOUND :           26E3 C |
 L_CAS_PRINT_SKIP :            26DD C |  L_CAS_PRINT_TXT :             26E6 C |
 L_CAS_READ_BIT_4 :            7003 C |  L_CAS_READ_BIT_C_CNT :        6FED C |
 L_CAS_READ_BIT_END :          700D C |  L_CAS_READ_HDR_1 :            6F9A C |
 L_CAS_READ_HDR_2 :            6FA3 C |  L_CAS_READ_NEG_PULSE :        6FFA C |
 L_CAS_READ_POS_PULSE :        6FE4 C |  L_CAS_SKIP_TXT :              2705 C |
 L_CAS_WRITE_0BIT :            6F71 C |  L_CAS_WRITE_BYTE :            6F5E C |
 L_CAS_WRITE_DLY :             6F74 C |  L_CHAR_COL_OUT :              74F1 C |
 L_CHAR_PLOT_4_1 :             433B C |  L_CHAR_PLOT_EXIT :            7435 C |
 L_CHECK_LCD_SCROLL :          6598 C |  L_CHECK_LCD_SCROLL_1 :        659B C |
 L_CHKDC_1 :                   5AB1 C |  L_CHKDC_2 :                   5AB6 C |
 L_CHKDC_3 :                   5AD9 C |  L_CHKSTR :                    35D9 C |
 L_CHK_FCB_DATA :              172A C |  L_CHK_KEY_CTRL :              13F3 C |
 L_CHK_REDO :                   C87 C |  L_CHK_STR_ASSIGN :            1A2C C |
 L_CHK_STR_CLK :               1A2E C | *L_CHRCON :                     85D C |
 L_CHRGTR :                     858 C |  L_CHR_1 :                     2965 C |
 L_CHR_2 :                     2969 C |  L_CLEAR_2 :                   4140 C |
 L_CLEAR_FAC1 :                4879 C |  L_CLK_CHIP :                  735D C |
 L_CLOADM_2 :                  24B3 C |  L_CLOAD_ARGS :                25E7 C |
 L_CLOAD_ARGS_1 :              25E8 C |  L_CLOAD_ARGS_2 :              25FC C |
 L_CLOAD_ARGS_3 :              2602 C |  L_CLOAD_DO_FILE :             2432 C |
 L_CLOAD_STMT_1 :              2387 C |  L_CLOAD_STMT_3 :              23AA C |
 L_CLOAD_STMT_4 :              23B7 C |  L_CLOAD_VERIFY :              2456 C |
 L_CLR_ALTLCD :                45D3 C |  L_CLR_ESC_SEQ :               43B3 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 437 - 9/5/2025 20:20:35


 L_CLR_FCBLAST_BUF :           4EFF C |  L_CLR_LCD_TOP :               754B C |
 L_CLR_PASTE_BUF :             2262 C |  L_CLR_PNDERR :                65EC C |
 L_CLR_PNDERR_1 :              65F3 C |  L_CLR_SELECTION :             1FF8 C |
 L_CLS :                       75BA C |  L_CLS_FILE0 :                 4F45 C |
 L_CLS_FILENUM :               4D38 C |  L_CMD_CHAR :                  5D88 C |
 L_CMP_CAS_DATA :              2590 C |  L_CMP_CAS_PROG :              2573 C |
 L_CMP_CRS_LINEPTR_DE :        6A2E C |  L_CMP_DBL_FAC1_2 :            34D2 C |
 L_CMP_DOLOAD_DE :             6A61 C |  L_CMP_DOLOAD_DE_1 :           6A8A C |
 L_CMP_INT_FAC1 :              3EDC C |  L_CMP_LINEPTR_DE :            6A27 C |
 L_COMP_OP :                    E29 C |  L_COMP_OP_1 :                  E45 C |
 L_COMP_OP_10 :                 ED8 C |  L_COMP_OP_11 :                 EED C |
 L_COMP_OP_12 :                 EF0 C |  L_COMP_OP_14 :                 EF8 C |
 L_COMP_OP_2 :                  E51 C |  L_COMP_OP_3 :                  E6C C |
 L_COMP_OP_4 :                  EA1 C |  L_COMP_OP_5 :                  EB1 C |
 L_COMP_OP_6 :                  EB4 C |  L_COMP_OP_7 :                  EBF C |
 L_COMP_OP_8 :                  EC4 C |  L_COMP_OP_9 :                  ECA C |
 L_COM_IO_1 :                  17CD C |  L_CONDS :                     35C2 C |
 L_COND_INV_CHAR :             4267 C | *L_CONIA :                     340A C |
 L_CONINT :                    1131 C |  L_CONISD :                    3515 C |
 L_CONSI :                     3540 C |  L_CONSTP :                    40A9 C |
 L_CONV_DBL_TO_FAC2 :          7FF4 C |  L_CONV_HL_SNGL :              3544 C |
 L_CONV_HL_SNGL_1 :            3565 C |  L_CONV_HL_SNGL_2 :            35A0 C |
 L_CONV_HL_SNGL_3 :            35A1 C |  L_CONV_UNSGND_HL_SNGL :       37DB C |
 L_COPY_FILNAM :               2241 C |  L_COPY_PASTE :                64C7 C |
 L_COPY_PASTE_1 :              64E3 C |  L_COPY_PASTE_2 :              64E4 C |
 L_COPY_SEL :                  64B6 C |  L_COPY_TO_VARTAB :            126C C |
 L_CPY_BC_TO_HL :              3EF3 C |  L_CPY_BC_TO_HL_CHK :          3EF0 C |
 L_CPY_FAC1 :                  348A C |  L_CPY_FAC1_TO_2 :             3484 C |
 L_CPY_FAC1_TO_M :             3487 C |  L_CPY_FAC2_TO_1 :             347B C |
 L_CPY_M_TO_FAC1 :             347E C |  L_CRUNCH_0 :                   64E C |
 L_CRUNCH_1 :                   697 C |  L_CRUNCH_2 :                   6A9 C |
 L_CRUNCH_3 :                   6C9 C |  L_CRUNCH_4 :                   6EA C |
 L_CRUNCH_5 :                   6FB C |  L_CRUNCH_6 :                   70F C |
 L_CRUNCH_7 :                   716 C |  L_CRUNCH_CNT :                 6CD C |
 L_CSAVE_2 :                   22E1 C |  L_CSAVE_BAS :                 2288 C |
 L_CSAVE_CRUNCHED :            2298 C |  L_CSRLIN_FUN_1 :              1D95 C |
 L_CTRLY :                     5E4F C |  L_CTRL_CHARS :                665D C |
 L_CTRL_CHARS_END :            6672 C |  L_CURSON :                    75C0 C |
 L_CURSOR_BACKUP :             68D9 C |  L_CURSOR_DOWN :               60F5 C |
 L_CURSOR_OFF :                13D0 C |  L_CURSOR_ON :                 13C2 C |
 L_CURSOR_RIGHT :              60E8 C |  L_CVT_2DIGITS_DE_DEC :        1996 C |
 L_CVT_FP_TO_INT :             35DE C |  L_CVT_FP_TO_INT_0 :           35F6 C |
 L_CVT_FP_TO_INT_1 :           35FD C |  L_CVT_FP_TO_INT_2 :           360B C |
 L_CVT_ONE_DIGIT :             199A C |  L_CVT_ONE_DIGIT_DE :          1999 C |
 L_CVT_TO_SIGNED_INT :         12A1 C |  L_DATA_STMT_POPHL :            99D C |
 L_DAY_STMT_1 :                19FE C |  L_DAY_STMT_2 :                1A1F C |
 L_DBL_DIV_1 :                 2DF4 C |  L_DBL_DIV_10 :                2ECF C |
 L_DBL_DIV_3 :                 2E23 C |  L_DBL_DIV_4 :                 2E25 C |
 L_DBL_DIV_5 :                 2E33 C |  L_DBL_DIV_6 :                 2EA6 C |
 L_DBL_DIV_7 :                 2EAC C |  L_DBL_DIV_8 :                 2EBB C |
 L_DBL_DIV_9 :                 2ECB C |  L_DBL_ESC_SEQ :               4445 C |
 L_DBL_EXP_1 :                 3DE2 C |  L_DCR_A :                     383A C |
 L_DCX_H :                     383C C |  L_DECODE_KEY :                7101 C |
 L_DEC_BC :                    3643 C |  L_DEC_RANGES :                3CFA C |
 L_DELETE_DO :                 63B6 C |  L_DEL_BYTES :                 2134 C |
 L_DEL_LAST_CHR :              6877 C |  L_DEL_LINES :                 212D C |
 L_DEL_ZEROS :                 6383 C |  L_DEVNAME_NOMATCH :           50DC C |
 L_DEVSPEC_0 :                 50C8 C |  L_DEVSPEC_FND :               509B C |
 L_DEVTST_0 :                  5090 C |  L_DEVTST_FUN :                5075 C |
 L_DEV_FILNAM :                207A C |  L_DEV_INPUT :                 4E7A C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 438 - 9/5/2025 20:20:35


 L_DEV_OUTPUT :                4E52 C |  L_DEV_VALIDATOR :             4E65 C |
 L_DIM_CONT_FUN :              4786 C |  L_DIRECTORY_CLOSE :           15A0 C |
 L_DIRIS :                     40CA C |  L_DISCONNECT_MSG :            5786 C |
 L_DISPLAY_DIR_1 :             1F45 C |  L_DISPLAY_DIR_2 :             1F51 C |
 L_DISP_A_LINES :              6986 C |  L_DISP_BKSP :                 451F C |
 L_DISP_DIR_TYPE_C_1 :         5975 C |  L_DISP_LINE :                 6A0D C |
 L_DISP_LINENUM :              699E C |  L_DISP_LINENUM_IN_A :         69CB C |
 L_DISP_LINENUM_IN_A_1 :       69FE C |  L_DISP_LINENUM_IN_A_2 :       6A04 C |
 L_DISP_LINE_1 :               6A10 C |  L_DISP_SCREEN :               6981 C |
 L_DIS_INT_75_65 :             765C C |  L_DIVLOOP :                   3797 C |
 L_DIVLOOP_1 :                 37A3 C |  L_DIV_EXTFAC1_BY_100 :        2D95 C |
 L_DOWNLOAD_MSG :              5768 C |  L_DO_EOF :                    21AE C |
 L_DO_EOFLINE :                68EF C |  L_DO_MATH_VCTR_TBL :          10D7 C |
 L_DRAIN_RS232_IN_QUEUE :      5673 C |  L_DRAW_BOX_1 :                1CD2 C |
 L_DRAW_LINE :                 1CD9 C |  L_DRAW_LINE_1 :               1CFF C |
 L_DRAW_LINE_2 :               1D0C C |  L_DRAW_LINE_3 :               1D27 C |
 L_DVAR2 :                     2887 C |  L_DVARS :                     2888 C |
 L_DVI_CMD_TBL :               770B C |  L_ECHO_MSG :                  558B C |
 L_EDITFILE_MSG :              5E15 C |  L_EDIT_DO_FILE_FUN_1 :        5F71 C |
 L_EDIT_ERR1 :                 5ED5 C |  L_EDIT_ERR2 :                 5EDA C |
 L_EDIT_ERR3 :                 5EEB C |  L_EDIT_MODE :                 5E82 C |
 L_EDIT_MODE_1 :               5E94 C |  L_EDIT_MODE_2 :               5EAB C |
 L_EDIT_MODE_3 :               5EBA C |  L_EMPTY_KEY_FUNC :            5B3E C |
 L_ENA_INTR :                  3FFA C |  L_ENA_INT_75_65 :             743C C |
 L_ENA_INT_75_65_POP :         71F4 C |  L_ENDCON :                    40B6 C |
 L_END_MSG :                   25DB C |  L_END_OF_PROG :                428 C |
 L_EOF_FND :                   5EBD C |  L_EOF_FUN_1 :                 18BF C |
 L_ERRFIN :                     4F6 C |  L_ERR_MEMFULL :               60A3 C |
 L_ESC_B_1 :                   4477 C |  L_ESC_M_1 :                   44C7 C |
 L_ESC_SEQ_1 :                 4411 C |  L_EVAL :                       F1C C |
 L_EVAL_1 :                     F51 C |  L_EVAL_2 :                     F60 C |
 L_EVAL_3 :                     FA3 C |  L_EVAL_4 :                     FC6 C |
 L_EVAL_5 :                     FF2 C |  L_EVAL_6 :                    1015 C |
 L_EVAL_7 :                    102E C |  L_EVAL_CARRY_IN_A :           33E9 C |
 L_EVAL_FILNAM :               4C0F C |  L_EVAL_FILNAM_1 :             4C21 C |
 L_EVAL_FILNAM_2 :             4C2B C |  L_EVAL_FILNAM_3 :             4C48 C |
 L_EVAL_HL :                   341B C |  L_EVAL_INV_SIGN_IN_A :        33E7 C |
 L_EVAL_POS_EXPR :              8D7 C |  L_EVAL_POS_EXPR_PREINC :       8D6 C |
 L_EVAL_PRI_3 :                 DF8 C |  L_EVAL_REL_OP :               1047 C |
 L_EVAL_SIGN_IN_A :            33E8 C |  L_EXEC_DCB_FUNC :             5123 C |
 L_EXE_MSG :                   25E1 C |  L_EXPND_BASIC_LN :            11AA C |
 L_EXPND_BASIC_LN_1 :          11B6 C |  L_EXPND_BASIC_LN_10 :         1242 C |
 L_EXPND_BASIC_LN_2 :          11B9 C |  L_EXPND_BASIC_LN_3 :          11E1 C |
 L_EXPND_BASIC_LN_4 :          121A C |  L_EXPND_BASIC_LN_5 :          121D C |
 L_EXPND_BASIC_LN_6 :          1221 C |  L_EXPND_BASIC_LN_7 :          1226 C |
 L_EXPND_BASIC_LN_8 :          122B C |  L_EXPND_BASIC_LN_9 :          1233 C |
 L_EXPND_DO :                  634A C |  L_EXP_1 :                     30CB C |
 L_EXP_TBL :                   35B0 C |  L_EXTRA_MSG :                  D71 C |
 L_FILEDATA_ADV :              174F C |  L_FILETODOWNLOAD_MSG :        5760 C |
 L_FILETOUPLOAD_MSG :          5751 C |  L_FILL_STR :                  2993 C |
 L_FINALIZE_FCB :              14DE C |  L_FINDFREEDIRENTRY :          20E4 C |
 L_FINDNEXTDIRENTRY :          20D5 C |  L_FIND_ADDR_1 :               47B2 C |
 L_FIND_ADDR_2 :               47DC C |  L_FIND_ADDR_3 :               4801 C |
 L_FIND_ADDR_4 :               481A C |  L_FIND_ADDR_5 :               482C C |
 L_FIND_ADDR_6 :               482F C |  L_FIND_ADDR_7 :               4830 C |
 L_FIND_ADDR_8 :               4835 C |  L_FIND_ADDR_9 :               4876 C |
 L_FIND_EOF :                  219A C |  L_FIND_NONZERO_BCD :          3D67 C |
 L_FIND_TEXT_IN_FILE_1 :       5C40 C |  L_FINPRT :                     C39 C |
 L_FKEY_LOOP :                 42D3 C |  L_FLIP_REV :                  45CB C |
 L_FNDEOFDO :                  6B2A C |  L_FNDEOFTXT :                 6B2D C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 439 - 9/5/2025 20:20:35


 L_FNDLIN :                     628 C |  L_FNDLIN_2 :                   62B C |
 L_FNDVAR :                    27F4 C |  L_FND_BCD_POS :               3D2D C |
 L_FND_CAS_DATA_BLK :          26D1 C |  L_FND_CHAR_HL_LINEPTR :       6AA3 C |
 L_FND_DIR_ENTRY :             20AF C |  L_FND_DIR_ENTRY_1 :           20B3 C |
 L_FND_END_DO_FILES :          6370 C |  L_FOR_COMMON :                 7F1 C |
 L_FOUICC :                    3C68 C |  L_FOUND_DOT :                 4C5C C |
 L_FOUTAN :                    3C70 C |  L_FOUTCD :                    3C5B C |
 L_FOUTDP :                    3C87 C |  L_FOUTE1 :                    3C84 C |
 L_FOUTED :                    3C83 C |  L_FRCDBL :                    35BA C |
 L_FREFAC :                    2919 C |  L_FRESTR :                    2916 C |
 L_FRETM2 :                    291C C |  L_FRETMP :                    291D C |
 L_FRETMS :                    2935 C |  L_FRMCHK :                     DAC C |
 L_FRMEQL :                     DA4 C |  L_FRMEVL :                     DAB C |
 L_FRMPRN :                     DA9 C |  L_FULLHALF_MSG :              5583 C |
 L_FUNC_KEYS_TBL_TELCOM :      5D2B C |  L_FUNC_KEYS_TBL_UTIL :        5D0A C |
 L_FUNC_KEYS_TBL_UTIL_EXT :    5D1E C |  L_GARBA2 :                    27F1 C |
 L_GARBAG :                    27E4 C |  L_GEN_DATA_SN_ERROR :          440 C |
 L_GEN_ERR_9 :                 48F6 C |  L_GEN_ERR_IN_E_1 :             48A C |
 L_GEN_TONE_1 :                72DA C |  L_GETBYT :                    112E C |
 L_GETIN2 :                    1113 C |  L_GETINT :                    1112 C |
 L_GETLSTLINE :                6A3E C | *L_GETSPA :                    27C8 C |
 L_GET_ADDRESS :               2372 C |  L_GET_CRSPOS_1 :              6B0C C |
 L_GET_CRSPOS_ADDR :           6AF9 C |  L_GET_CRS_LINEPTR :           6A45 C |
 L_GET_FCBLAST_BUF :           4F12 C |  L_GET_FILEDATA_PTR :          1749 C |
 L_GET_FIRST_CHAR :            2953 C |  L_GET_KEY :                   65B9 C |
 L_GET_LCD_ROWS :              63CD C |  L_GET_LINEPTR :               6A48 C |
 L_GET_OPT_LEN :               2B3D C |  L_GET_PREV_LINEPTR :          6A55 C |
 L_GET_ROW_COL :               6AC7 C |  L_GET_SEL_PTRS :              64AB C |
 L_GET_STR :                   2947 C |  L_GET_TIME_1 :                1AAC C |
 L_GET_TIME_STRING_1 :         1A62 C |  L_GET_TXT_FNAME :             673E C |
*L_GONE :                       83A C | *L_GONE2 :                      840 C |
*L_GONE3 :                      83F C |  L_GOSUB_ON_INTR :              952 C |
 L_GOTO_STMT_1 :                939 C |  L_GRBPAS :                    28A8 C |
 L_GTBYTC :                    112D C |  L_HL_TO_FAC1 :                3E12 C |
 L_HOME :                      75BE C |  L_IF_STMT_1 :                  B33 C |
 L_IF_STMT_2 :                  B3A C |  L_ILL_FRMD_TXT :              5F38 C |
*L_IMULDV :                    37BA C |  L_INCHL :                     3457 C |
 L_INEG :                      37D0 C |  L_INEGA :                     37C2 C |
 L_INEGH :                     37C1 C |  L_INEGHL :                    37C6 C |
 L_INIT_BASIC :                3F6D C |  L_INIT_BASIC_0 :              3F78 C |
 L_INIT_BASIC_1 :              3F9C C |  L_INIT_CRS_BLINK :            73D9 C |
 L_INIT_DVI :                  434A C |  L_INJECT_KEYS :               1300 C |
 L_INJECT_KEYS_2 :             1399 C |  L_INJECT_KEYS_3 :             139F C |
 L_INPUT_2_1 :                 4EBB C |  L_INPUT_2_2 :                 4ED9 C |
 L_INPUT_2_3 :                 4EEB C |  L_INPUT_2_4 :                 4EF6 C |
 L_INPUT_STMT_1 :               CB4 C |  L_INPUT_STMT_2 :               CC4 C |
 L_INPUT_STMT_3 :               CD4 C |  L_INP_CHAR_HANDLER :          667E C |
 L_INP_CR_HANDLER :            6675 C |  L_INP_CTRL_C_HANDLER :        6672 C |
 L_INP_DO_BKSP :               46D8 C |  L_INP_DO_BKSP_1 :             4701 C |
 L_INP_FILE :                  4703 C |  L_INP_FILE_1 :                4753 C |
 L_INP_FILE_2 :                4759 C |  L_INP_FILE_3 :                477C C |
 L_INP_LINE_1 :                4655 C |  L_INP_TAB_HANDLER :           667C C |
 L_INSRT_DO :                  6396 C |  L_INSRT_FFFF :                1336 C |
 L_INSRT_PASTE :               6501 C |  L_INSTR_MATCH :               2AAE C |
 L_INSTR_NOMATCH :             2AB7 C |  L_INSTR_SEARCH :              2A96 C |
 L_INSTR_TAIL :                2AAB C |  L_INT16_MUL :                 36D8 C |
 L_INT16_MUL_0 :               36F5 C |  L_INTFR2 :                    1116 C |
 L_INT_EXP_1 :                 3E07 C |  L_INT_EXP_2 :                 3E15 C |
 L_INT_EXP_3 :                 3E24 C |  L_INT_EXP_4 :                 3E53 C |
 L_INT_EXP_5 :                 3E66 C |  L_INT_EXP_6 :                 3E85 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 440 - 9/5/2025 20:20:35


 L_INT_EXP_7 :                 3E9E C |  L_INT_EXP_8 :                 3EC3 C |
 L_INT_EXP_9 :                 3ECF C |  L_INT_STOP_STMT_1 :           3FC0 C |
 L_ISFRSTLIN :                   13 C |  L_ISVAR_1 :                    FDD C |
 L_IS_CTRL_CHAR :              56FE C |  L_IS_MIDSTR :                 10F4 C |
 L_IS_SUZUKI_DIR :             2081 C |  L_KEYBOARD_1 :                7C49 C |
 L_KEYBOARD_2 :                7CA1 C |  L_KEYBOARD_3 :                7CDB C |
 L_KEYBOARD_4 :                7CEF C |  L_KEYBOARD_5 :                7D2F C |
 L_KEY_DECODE_1 :              7184 C |  L_KEY_DECODE_2 :              718E C |
 L_KEY_DECODE_3 :              71B5 C |  L_KEY_DECODE_4 :              71B6 C |
 L_KEY_DECODE_5 :              71B7 C |  L_KEY_DECODE_6 :              71C4 C |
 L_KEY_DETECT_1 :              71FD C |  L_KEY_LIST_STMT_1 :           1BD3 C |
 L_KEY_NOLIST :                1BF6 C |  L_KEY_NOLIST_1 :              1C48 C |
 L_KEY_SCAN :                  70C5 C |  L_KEY_SCAN_2 :                70DD C |
 L_KEY_SCAN_3 :                70E2 C |  L_KEY_STMT :                  1AD4 C |
 L_KILL_CO_FILE_2 :            1FDA C |  L_LCDREFRESH :                4601 C |
*L_LCDREFRESH_0 :              4604 C |  L_LCDREFRESH_1 :              4606 C |
 L_LCD_CHAR_LOOP :             74E2 C |  L_LCD_CHAR_RW :               74A2 C |
 L_LCD_DRVS_BOTTOM :           764D C |  L_LCD_DRVS_TOP :              7643 C |
 L_LCD_LOC :                   4586 C |  L_LCD_PLOT :                  7517 C |
 L_LCD_PLOT_2 :                74CC C |  L_LCD_PLOT_3 :                74DF C |
 L_LCD_PLOT_RD :               7515 C |  L_LCD_PLOT_WR :               7516 C |
 L_LCD_RD :                    753B C |  L_LCD_REV_LOC :               45AA C |
 L_LCD_REV_UPD :               459A C |  L_LCD_SELECT_ALL :            7641 C |
 L_LCD_WR :                    752B C |  L_LCOPY_STMT_1 :              1E67 C |
 L_LD_FAC1_BYTE :              10D1 C |  L_LD_FAC1_BYTE_1 :            10D3 C |
 L_LEFT_STR_1 :                29AF C |  L_LEFT_STR_2 :                29B2 C |
 L_LEFT_STR_3 :                29B3 C |  L_LET_1 :                      9D6 C |
 L_LET_2 :                      9D7 C |  L_LET_3 :                      A1D C |
 L_LET_4 :                      A25 C |  L_LET_5 :                      A29 C |
 L_LINE_IN_0 :                 4F6F C |  L_LINE_IN_1 :                 4F9C C |
 L_LINE_IN_2 :                 4FD5 C |  L_LINE_IN_3 :                 4FE4 C |
 L_LINE_IN_4 :                 4FF5 C |  L_LINE_IN_5 :                 500A C |
 L_LINE_IN_6 :                 5023 C |  L_LINE_IN_7 :                 5024 C |
 L_LINE_IN_8 :                 5044 C |  L_LINE_IN_ERR :               4FEA C |
 L_LINE_NONUM :                4F1C C |  L_LINE_STMT_1_1 :             1C94 C |
 L_LINGET :                     8EB C |  L_LINGET_PREINC :              8EC C |
 L_LIST_LOOP :                 114A C |  L_LIST_STMT_2 :               1194 C |
 L_LIST_STMT_3 :               1195 C |  L_LLIST_MSG :                 6C78 C |
 L_LOADFROM_MSG :              67D4 C |  L_LOADM_END :                 251A C |
 L_LOADM_RAM :                 24E7 C |  L_LOAD_STR_M :                3452 C |
 L_LOGIC_VEC :                 1072 C |  L_LOGIC_VEC_1 :               1092 C |
 L_LOGIC_VEC_2 :               109D C |  L_LOGIC_VEC_3 :               10A8 C |
 L_LOOPKBD :                   7080 C |  L_LOOPONKEY :                  A66 C |
 L_LPOPER :                     DAE C |  L_LPT_NEWLINE :               4BA0 C |
*L_MAIN :                       511 C |  L_MAKE_DE_MAX :               64B2 C |
 L_MAKINT :                    3510 C |  L_MATH_TBL_1 :                 2F8 C |
 L_MATH_TBL_2 :                 304 C |  L_MATH_TBL_3 :                 310 C |
 L_MEMFULL_MSG :               60B1 C |  L_MENU_CMD_LOOP_NOBEEP :      585D C |
 L_MENU_CTRLU_1 :              5921 C |  L_MENU_CTRLU_HANDLER :        5906 C |
 L_MENU_HANDLER_1 :            589C C |  L_MENU_HANDLER_2 :            58C3 C |
 L_MENU_HANDLER_3 :            58DB C |  L_MENU_HANDLER_4 :            58E2 C |
 L_MENU_HANDLER_5 :            58EB C |  L_MENU_KEY :                  5CAE C |
 L_MENU_LOGO :                 7FA4 C |  L_MENU_MSG :                     3 C |
 L_MENU_OR_CMD :               5D99 C |  L_MERGE_1 :                   4D8D C |
 L_MERGE_2 :                   4D9E C |  L_MERGE_3 :                   4DA6 C |
 L_MOD_PRI :                   37DF C |  L_MONTHS_MSG :                5AE9 C |
 L_MORLIN :                     8EF C |  L_MOVE_8_BYTES_HL_DE :        31BB C |
 L_MOVE_LINE_PTRS :            6284 C |  L_MOV_DATA :                  6B7F C |
 L_MSFT_MSG :                  5B0D C |  L_MULTBCD_1 :                 2D72 C |
 L_MULTBCD_2 :                 2D78 C |  L_MULTBCD_DE_HL :             2D4B C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 441 - 9/5/2025 20:20:35


 L_MULTIDIM :                  4893 C |  L_NEG :                       33FD C |
 L_NEG_NEG :                   31E3 C |  L_NEWLINE_MSG :               5593 C |
 L_NEWSTT :                     804 C |  L_NEWSTT_1 :                   811 C |
 L_NEWSTT_2 :                   82B C |  L_NEXTCHAR_DECE :             4C7D C |
 L_NEXT_STMT_1 :               4177 C |  L_NEXT_STMT_2 :               41BB C |
 L_NEXT_STMT_3 :               41E4 C |  L_NEXT_STMT_4 :               41F6 C |
 L_NEXT_STMT_5 :               4208 C |  L_NM_ERR :                    5096 C |
 L_NOENTRY_MSG :               5B1A C |  L_NOFILE_MSG :                577C C |
 L_NOMATCH_MSG :               65CE C |  L_NORM_BCD_FAC1_1 :           2BDE C |
 L_NOTBGL :                     AFA C |  L_NOTE_DO_MSG :               5D02 C |
 L_NOTFOUND_MSG :              5CD6 C | *L_NOTSTV :                     DBE C |
 L_NOT_AUTOPWR :               7DA8 C |  L_NO_INJECT_KEYS :            133D C |
 L_NO_SUBSCRIPT :              48BC C |  L_NULL_MSG :                  5B3C C |
 L_NULL_STR :                  5F48 C |  L_NUM_LCD_ROWS :              63DB C |
 L_ONE_TO_FAC1 :               3DFC C |  L_ON_COM_INTR :               4075 C |
 L_ON_XXX_INTR :               4054 C |  L_OPEN_INPUT :                4CFC C |
 L_OPEN_INPUT_1 :              4CFD C |  L_OPEN_OUTPUT :               4CF2 C |
 L_OUTOFMEMORY :               3F17 C |  L_OV_ERROR :                  3901 C |
 L_PAD_FILESPEC :              4C72 C |  L_POPDHBREGS :                4E8A C |
 L_POPD_MAKINT :               3526 C |  L_POPHL_RET_2 :                FD8 C |
 L_POPHSR :                     90C C |  L_POPH_RET :                  4F08 C |
 L_POPPSW :                    43A2 C |  L_POPPSW_RET :                4F1A C |
 L_POP_HL :                    383E C |  L_POP_PSW_RET :               27E2 C |
 L_POP_RET :                   5C96 C |  L_POP_ROTATER_M :             2CFA C |
 L_POP_WREGS_RET :             71F8 C | *L_PORT70H :                   7304 C |
 L_POWER_OFF :                 13B5 C |  L_POWER_ON_STMT_1 :           1469 C |
 L_PREP_8CHAR_STR :            198D C |  L_PREP_ACHAR_STR :            198F C |
 L_PREP_DATA_BLK :             2648 C |  L_PREP_STR :                  275D C |
 L_PREP_STR_LEN1 :             275B C |  L_PRESS_SPACE :               5F49 C |
 L_PRE_KEY_DECODE :            711A C |  L_PRINT_A :                   4B6A C |
 L_PRINT_A_1 :                 4B79 C |  L_PRINT_A_2 :                 4B7A C |
 L_PRINT_BCDS :                3C97 C |  L_PRINT_BCDS_1 :              3CA4 C |
 L_PRINT_BCDS_2 :              3CB3 C |  L_PRINT_CO_INFO :             25A4 C |
 L_PRINT_CRLF :                4BCB C |  L_PRINT_FAC :                 3CC3 C |
 L_PRINT_FAC1_FMT_1 :          3A05 C |  L_PRINT_FAC1_FMT_10 :         3AE6 C |
 L_PRINT_FAC1_FMT_11 :         3AEF C |  L_PRINT_FAC1_FMT_12 :         3AFF C |
 L_PRINT_FAC1_FMT_13 :         3B12 C |  L_PRINT_FAC1_FMT_14 :         3B3A C |
 L_PRINT_FAC1_FMT_15 :         3B42 C |  L_PRINT_FAC1_FMT_16 :         3BB8 C |
 L_PRINT_FAC1_FMT_17 :         3BCC C |  L_PRINT_FAC1_FMT_18 :         3BD2 C |
 L_PRINT_FAC1_FMT_2 :          3A21 C |  L_PRINT_FAC1_FMT_3 :          3A3E C |
 L_PRINT_FAC1_FMT_4 :          3A5C C |  L_PRINT_FAC1_FMT_5 :          3A6F C |
 L_PRINT_FAC1_FMT_6 :          3AA8 C |  L_PRINT_FAC1_FMT_7 :          3AC2 C |
 L_PRINT_FAC1_FMT_8 :          3AC3 C |  L_PRINT_FAC1_FMT_9 :          3ACA C |
 L_PRINT_FAC_1 :               3CC9 C |  L_PRINT_FAC_2 :               3CF4 C |
 L_PRINT_LST_STR :             27B4 C |  L_PRINT_NEXT :                 C34 C |
 L_PRINT_POS :                 1D5F C |  L_PRINT_PROPS :               25CD C |
 L_PRINT_STMT_1 :               B60 C |  L_PRINT_STMT_2 :               B65 C |
 L_PRINT_STMT_3 :               BB9 C |  L_PRINT_STMT_4 :               BC2 C |
 L_PRINT_STMT_5 :               BC6 C |  L_PRINT_STMT_6 :               BCD C |
 L_PRINT_STMT_7 :               BF2 C |  L_PRINT_STMT_8 :               BF8 C |
 L_PRNT_ABORT :                65AB C |  L_PRNT_COMMA :                3C8F C |
 L_PRNT_ERRMSG :               65AE C |  L_PRNT_ERR_1 :                 4DD C |
 L_PRNT_ERR_2 :                 4E0 C |  L_PRNT_ERR_IN_E :              493 C |
 L_PRNT_HDR_CMP_HIMEM :        2531 C |  L_PRNT_MSG :                  65B3 C |
*L_PROCESS_BASIC :              523 C |  L_PROCESS_ON_INT :            4028 C |
 L_PROCESS_ON_INT_1 :          402B C |  L_PROCESS_ON_INT_2 :          404B C |
 L_PROCESS_ON_INT_3 :          4052 C |  L_PROCESS_PASTE :             12F0 C |
 L_PROCESS_SEL :               6912 C |  L_PROCESS_SEL_1 :             694D C |
 L_PROCESS_SEL_2 :             6953 C |  L_PROCESS_STR_ARG1 :          2A2F C |
 L_PROCESS_STR_ARG2 :          2A32 C |  L_PROC_BAS_1 :                 536 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 442 - 9/5/2025 20:20:35


 L_PSET_STMT_1 :               1C5A C |  L_PSH_HL_EVAL_FILNAM :        4C0B C |
 L_PUSH_FAC1_1 :               3237 C |  L_PUSH_FOR :                   800 C |
 L_PUSH_OP_VEC :                E22 C |  L_PWR_DOWN_BOOT :             7D94 C |
 L_PWR_DOWN_BOOT2 :            7D9F C |  L_PWR_POP_ALL :               14EA C |
 L_QUERY_USER :                6603 C |  L_QUERY_USER_1 :              663D C |
 L_QUERY_USER_CNT :            663A C |  L_QUERY_USER_END :            6654 C |
 L_QUERY_USER_NULL :           6600 C |  L_RAMFILE :                   1E7B C |
 L_RAMFILE_1 :                 1EC7 C |  L_RAM_EXISTS :                1580 C |
 L_RAM_IN_1 :                  1609 C |  L_RAM_OPEN_MODE1 :            1541 C |
 L_RAM_OPEN_MODE2 :            1516 C |  L_RAM_OPEN_MODE8 :            155C C |
 L_READ_STMT_1 :                CDE C |  L_READ_STMT_2 :                CE6 C |
 L_READ_STMT_3 :                D0E C |  L_READ_STMT_4 :                D2E C |
 L_READ_STMT_5 :                D31 C |  L_READ_STMT_6 :                D3D C |
 L_READ_STMT_7 :                D45 C |  L_READ_STMT_8 :                D82 C |
 L_READ_STMT_9 :               4F4D C |  L_READ_TIME_1 :               1920 C |
 L_RECORD_CR :                 4BD1 C |  L_REDO_MSG :                   C74 C |
 L_REM1 :                       9A4 C |  L_REM2 :                       9A7 C |
 L_RESERVE_STRBUF :            27C8 C |  L_RESET_CONF :                66FE C |
 L_RESET_POS :                 4BD9 C |  L_RESET_SP :                  5D5D C |
 L_RESET_SP_0 :                5D53 C |  L_RESET_SP_1 :                5D4D C |
 L_RESET_TIME :                7E97 C |  L_RESNXT :                     ADB C |
 L_RESTORE_1 :                 4095 C |  L_RESTXT :                     AE5 C |
 L_REST_POS_LCD :              4BE5 C |  L_RETAOP :                     DBA C |
 L_RETURN_ZERO :               13C0 C |  L_RET_INPBUF_PREDEC :         6678 C |
 L_RET_NEGINT :                3688 C |  L_RET_NEGINT_1 :              369D C |
 L_RET_NEGINT_2 :              36B7 C |  L_REV_VID_FNAME :             59E5 C |
 L_ROTATEL_FAC1 :              2C94 C |  L_ROTATEL_M :                 2C97 C |
 L_ROTATER_FAC1 :              2CF2 C |  L_ROTATER_M :                 2CF5 C |
 L_ROTATE_LEFT_1 :             2C9B C |  L_ROTATE_RIGHT :              2CDA C |
 L_ROTATE_RIGHT_1 :            2CDF C |  L_ROUND_FAC1 :                2C27 C |
 L_ROUND_FAC1_1 :              2C2C C |  L_RS232_ISR_1 :               6DDB C |
 L_RS232_SEND_EXIT :           6E4A C |  L_RS232_SET_1 :               6E83 C |
 L_RST7_5_1 :                  1B8C C |  L_RST7_5_2 :                  1BAE C |
 L_RST_20H_LKUP_END :          43A2 C |  L_RUBOUT_CMD :                5D9E C |
 L_RUNC2 :                      935 C |  L_RUN_BASIC_PGRM_4 :           83F C |
 L_SAVEM_RAMFILE :             22F4 C |  L_SAVETO_MSG :                6735 C |
 L_SAVE_ASC :                  4E0B C |  L_SAVE_ERR1 :                 4E18 C |
 L_SAVE_ERR2 :                 4E1D C |  L_SAVE_RAM :                  1ED9 C |
 L_SAVE_RAM_1 :                1F10 C |  L_SAV_PREV_LINEPTR :          6A9B C |
 L_SCHD_MSG :                  5CE8 C |  L_SCNLIN_1 :                   624 C |
 L_SCNLIN_2 :                   626 C |  L_SCREEN_STMT_1 :             1E3C C |
 L_SCROLL_LCD :                45ED C |  L_SCROLL_SCREEN :             627B C |
*L_SEARCH_ADRS :               5AA6 C |  L_SELECT_LCD_DRIVER :         755B C |
 L_SELECT_LCD_DRIVER_ALL :     7553 C |  L_SELECT_MSG :                5B24 C |
 L_SEND_CHARS_TO_LCD_1 :       1BED C |  L_SEND_TO_LPT_EXIT :          6D6A C |
 L_SETCARRY :                  3641 C |  L_SETCRS_FROM_HL :            630B C |
 L_SETUP_FCB :                 4CBF C |  L_SET_CURSOR_POS_FROM_STACK : 60AD C |
 L_SET_CUR_LSTLIN :            65DF C |  L_SET_DEC_PNT :               2C17 C |
 L_SET_END_OF_FILE :           1524 C |  L_SET_EXT_BA :                20A6 C |
 L_SET_EXT_CO :                2089 C |  L_SET_EXT_FROM_BC :           20A9 C |
 L_SET_EXT_FUNC_KEYS :         5C98 C |  L_SET_FAC_ZERO :              33ED C |
 L_SET_FCBLAST :               4CB3 C |  L_SET_FKEYS_1 :               5A81 C |
 L_SET_FUNC_KEYS :             5C8D C |  L_SET_LABEL_LINE :            13AF C |
 L_SET_LCTEYX :                7440 C |  L_SET_MEM_TABLES :            21D4 C |
 L_SET_NUM_BCD_DIGITS :        3D04 C |  L_SET_PARITY :                181C C |
 L_SET_PORT_NUM :              111F C |  L_SET_RS232_1 :               1864 C |
 L_SET_SIGN_NORM :             2DA8 C |  L_SET_START_OF_FILE :         1521 C |
 L_SET_STRBUF :                6C7F C |  L_SET_TRSNSTR :               2760 C |
 L_SET_UTILS_OUTPUT :          5DB1 C |  L_SET_UTIL_MAXLINE :          5DBC C |
 L_SET_UTIL_WIDTH :            5DC5 C |  L_SGN_EXTEND :                340A C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 443 - 9/5/2025 20:20:35


 L_SHIFT_BCD :                 2CAD C |  L_SHOW_LINE :                 6344 C |
 L_SINT_ADD_1 :                3707 C |  L_SINT_MULT_1 :               3737 C |
 L_SINT_MULT_2 :               374B C |  L_SINT_MULT_3 :               375F C |
 L_SINT_MULT_4 :               3770 C |  L_SIN_1 :                     2F0F C |
 L_SIN_2 :                     2F52 C |  L_SKIP_DOT :                  4C58 C |
 L_SKIP_SPACE_AT_M :           5D46 C |  L_SPACE_MSG :                 5B37 C |
 L_STEP_INT_SNGL :              7EA C |  L_STEP_INT_SNGL_1 :            7EB C |
 L_STK_SNGL_DIV :              380C C |  L_STOP_TONE :                 72F9 C |
 L_STORE_ESC_SEQ :             43B2 C |  L_STORE_EXT_KEY :             71F0 C |
 L_STORE_IGNORE_PARITY :       1832 C |  L_STORE_KEY :                 70EE C |
 L_STPEND :                    40B3 C |  L_STRING_1 :                  298A C |
 L_STRING_MSG :                65D7 C |  L_STRSTK_ADD :                278D C |
 L_STR_1 :                     2747 C |  L_STR_CMP :                   270C C |
 L_STR_CONCAT :                28CC C |  L_STR_LOOP :                  276F C |
 L_SUBSCRIPT :                 488D C |  L_SUBSCRIPT_1 :               48C2 C |
 L_SUBSCRIPT_2 :               48FC C |  L_SUBSCRIPT_3 :               491C C |
 L_SUBSCRIPT_5 :               495A C |  L_SUBSCRIPT_6 :               498A C |
 L_SUBSCRIPT_7 :               498D C |  L_SUB_BCD_FAC1 :              2BDB C |
 L_SUB_DE_FROM_HL :            10BF C |  L_SVAR :                      281D C |
 L_SWAPFILENAMES :             224C C |  L_SWP_FAC_SP :                31D2 C |
 L_TAB_STMT_1 :                 C26 C |  L_TAB_STMT_2 :                 C2B C |
 L_TELCOM_DISCNNCT :           5739 C |  L_TELCOM_DOWN_1 :             56BF C |
 L_TELCOM_DOWN_2 :             56C5 C |  L_TELCOM_DOWN_3 :             56D8 C |
 L_TELCOM_DOWN_4 :             56E2 C |  L_TELCOM_ECHO_1 :             5556 C |
 L_TELCOM_ECHO_2 :             5562 C |  L_TELCOM_ECHO_3 :             556B C |
 L_TELCOM_ERR :                5152 C |  L_TELCOM_EXEC_CMD :           6CA7 C |
 L_TELCOM_EXEC_CMD_1 :         6CA9 C |  L_TELCOM_EXEC_CMD_2 :         6CCC C |
*L_TELCOM_FOUND :              5C7F C |  L_TELCOM_FULL_1 :             5544 C |
*L_TELCOM_TERM_1 :             5468 C |  L_TELCOM_TERM_2 :             548F C |
 L_TELCOM_TERM_3 :             54E2 C |  L_TELCOM_TERM_4 :             54EF C |
 L_TELCOM_UP_1 :               5606 C |  L_TELCOM_UP_2 :               562D C |
 L_TELCOM_UP_3 :               566C C |  L_TEN_COMPLEMENT :            2C5A C |
 L_TERMLOOP :                  54AA C |  L_TERM_FUN_KEYS :             5443 C |
 L_TEST_SEL :                  62EE C |  L_TEST_WWRAP_CHARS :          695E C |
 L_TEST_WWRAP_CHARS_2 :        6965 C |  L_TEXT_BYTE :                 63F4 C |
 L_TEXT_CTRL_A_FUN_1 :         619E C |  L_TEXT_CTRL_A_FUN_2 :         61A4 C |
 L_TEXT_CTRL_A_FUN_3 :         61AF C |  L_TEXT_CTRL_B_FUN_1 :         61EC C |
 L_TEXT_CTRL_E_FUN_1 :         615B C |  L_TEXT_CTRL_E_FUN_2 :         6166 C |
 L_TEXT_CTRL_E_FUN_3 :         6175 C |  L_TEXT_CTRL_H_FUN_1 :         6118 C |
 L_TEXT_CTRL_H_FUN_2 :         6146 C |  L_TEXT_CTRL_I_FUN_1 :         6095 C |
 L_TEXT_CTRL_N_1 :             658F C |  L_TEXT_CTRL_T_FUN_1 :         61D1 C |
 L_TEXT_CTRL_U_1 :             646F C |  L_TEXT_CTRL_U_2 :             6488 C |
 L_TEXT_CTRL_V_1 :             6797 C |  L_TEXT_CTRL_V_2 :             67B7 C |
 L_TEXT_CTRL_V_3 :             67BA C |  L_TEXT_CTRL_V_4 :             67CB C |
 L_TEXT_CTRL_Y_END :           66E9 C |  L_TEXT_CTRL_Y_END_0 :         66E6 C |
 L_TEXT_CTRL_Z_FUN_1 :         6229 C |  L_TEXT_CTRL_Z_FUN_2 :         6230 C |
 L_TEXT_CTRL_Z_FUN_3 :         6233 C |  L_TEXT_CTRL_Z_FUN_4 :         6236 C |
 L_TEXT_ENTRY_1 :              5DFB C |  L_TEXT_MSG :                  5F60 C |
 L_TOP_MSG :                   25D5 C |  L_TO_DOUBLE :                  791 C |
 L_TO_SINGLE :                  7C8 C |  L_TRIG_INTR_1 :               3FE1 C |
 L_TRYGI2 :                    27CA C |  L_TRY_DEFSNG :                 88C C |
 L_TSTFILSTAT :                18C7 C |  L_TSTOP :                      DB7 C |
 L_TST_FAC1_8000H :            3519 C |  L_TST_FCBLAST :               421A C |
 L_TST_FOR_Q :                 5DE4 C |  L_TVAR :                      2802 C |
 L_UNBIAS_EXP :                3D55 C |  L_UNDERSCORE_MSG :            5B3A C |
 L_UPDATE_LINE_PTRS :          6253 C |  L_UPDATE_LINE_PTRS_1 :        6256 C |
 L_UPDATE_SEL :                62A0 C |  L_UPDATE_SEL_1 :              62B3 C |
 L_UPD_FILEBUFS :              7F2B C |  L_UPD_FOR_LOOPS :             18DA C |
 L_UPD_FOR_LOOPS_1 :           18DD C |  L_UPD_FOR_LOOPS_2 :           18E0 C |
 L_UPD_INTR_TBL :              3FC7 C |  L_UPD_LCD_DWN :               6311 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 444 - 9/5/2025 20:20:35


 L_UPD_LCD_DWN_1 :             6312 C |  L_UPD_LCD_UP :                631D C |
 L_UPD_LCD_UP_1 :              631E C |  L_UPD_LINPROT :               43A9 C |
 L_UPD_PTRS :                  6BC3 C |  L_UPLOAD_MSG :                5759 C |
 L_UP_ABORTED :                56EF C |  L_USING0 :                    49A0 C |
 L_USING1 :                    49A9 C |  L_USING10 :                   4AC2 C |
 L_USING11 :                   4AD7 C |  L_USING12 :                   4AF0 C |
 L_USING13 :                   4AF9 C |  L_USING2 :                    49B4 C |
 L_USING3 :                    49BF C |  L_USING4 :                    49D8 C |
 L_USING5 :                    49DC C |  L_USING6 :                    4A4D C |
 L_USING7 :                    4A64 C |  L_USING8 :                    4A83 C |
 L_USING9 :                    4AA3 C |  L_USING_BACK :                4B07 C |
 L_USING_BANG :                4B04 C |  L_USING_CONT :                4A81 C |
 L_USING_DLR :                 4A27 C |  L_USING_DOT :                 4A58 C |
 L_USING_HASH :                4A2E C |  L_USING_PLUS :                4B3A C |
 L_UTIL_FILE_1 :               5BE2 C |  L_UTIL_FILE_FND :             5BA9 C |
 L_UTIL_FILE_FND_0 :           5BBB C |  L_UTIL_NOT_OPEN :             5B88 C |
 L_VALDBL :                    35CF C |  L_VALIDATE_FILE :             4F29 C |
 L_VALIDATE_FILE_1 :           4F2B C |  L_VALIDATE_TEXT_PTR :         62F6 C |
 L_VALINT :                    3513 C |  L_VALSNG :                    35D4 C |
 L_VECT_JMP :                  1031 C |  L_VERIFY_ERR :                2481 C |
 L_VER_DEFSTR :                 89B C |  L_VNEG :                      33F6 C |
 L_VSIGN :                     3411 C |  L_VT100_HOOK_INIT :           5429 C |
 L_WAIT_KEY_1 :                12D4 C |  L_WAIT_KEY_2 :                12EA C |
 L_WAIT_MSG :                  5595 C |  L_WEEKDAYS_MSG :              1978 C |
 L_WIDTH_MSG :                 670C C |  L_WRITE_TO_DEVICE :           1739 C |
 L_WRT_CAS_BLK :               1716 C |  L_WRT_FCB_DATA :              1621 C |
 L_WRT_FCB_NOMEM :             1669 C |  L_WWRAP_CHARS :               6977 C |
 L_XON_XOFF_1 :                6E65 C |  L_XON_XOFF_2 :                6E69 C |
 L_XTRNL_CNTRLER_1 :           76A0 C |  L_XTRNL_CNTRLER_BRK :         76F4 C |
 L_XTRNL_CNTRLER_BRK_1 :       76F5 C |  L_XTRNL_CNTRLER_CPY :         76B6 C |
 L_XTRNL_CNTRLER_INIT :        7693 C |  L_ZERO_TO_FAC1 :              3E0F C |
*MACEXP :                         1 - |  MAKHOL :                      6B6D C |
 MAPCONT :                     533E C |  MAPDONE :                     5370 C |
 MAPLOOP :                     5347 C |  MAPLOOP2 :                    5360 C |
 MAPM100ESC :                  532A C |  MASDEL :                      6B9F C |
 MATCH :                       5356 C |  MAXCHRCOLUMN :                  28 - |
 MAXCHRROW :                      8 - |  MAXFILES_R :                  FC82 - |
 MAXPIXCOLUMN :                  F0 - |  MAXPIXROW :                     40 - |
 MAXSERCNT :                     40 - |  MBUFFER_R :                   FBE8 - |
 MDMSPD_R :                    F62B - |  MDM_DEV :                       F9 - |
 MEMSIZ_R :                    FB67 - |  MENMAX_R :                    FDEF - |
 MENPOS_R :                    FDEE - |  MENUCMD_R :                   FDED - |
 MNU2RAM_R :                   FDA1 - | *MOMCPU :                    8085DC - |
*MOMCPUNAME :             8085UNDOC - |  MSTMP3_R :                    FB92 - |
*NESTMAX :                      100 - |  NOMATCH :                     536C C |
 NORMCHR :                     75CF C |  NXTLINE_R :                   FABC - |
 OLDCURSTAT_R :                FACB - |  OLDLIN_R :                    FBAA - |
 OLDTXT_R :                    FBAC - |  ONERR_R :                     FBA5 - |
 ONTIMETRIGD_R :               F943 - |  OPNFIL_R :                    FCA7 - |
 OPTROM :                         1 - |  OUTCODE_R :                   F667 - |
 OUTFMTWIDTH_R :               F922 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARMSK_R :                    FF8D - |
 PASTEFLG_R :                  F6E6 - |  PASTE_KEY :                      B - |
 PBTABLE_R :                   FFF6 - |  PBUFIDX_R :                   F62E - |
 PHOOK :                       53F9 C |  PHOOK1 :                      53FA C |
 PHOOK2 :                      53FD C |  PNDCTRL_R :                   FFEB - |
 PNDERR_R :                    F6E1 - |  PNDINT_R :                    F654 - |
 POPGOF :                       419 C |  POPPSW_R :                    FAC7 - |
 PORTA8_R :                    FAAE - |  PORTE8_R :                    FF45 - |
 POWRSP_R :                    FABE - |  PREVLINE_R :                  F6E9 - |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 445 - 9/5/2025 20:20:35


 PRGRUN_R :                    FBA7 - | *PRINT_KEY :                      D - |
 PRMPRV_R :                    FBD9 - |  PROCESSXY :                   5375 C |
 PROFLG_R :                    FB97 - |  PRTBUF_R :                    F64A - |
 PRTFLG_R :                    F675 - |  PRTROWCOL :                   F640 - |
 PRTWDTH_R :                   F649 - |  PRT_USING_R :                 FB98 - |
 PWRCNT_R :                    F931 - |  PWRDOWN_R :                   F602 - |
 PWRDWN_R :                    F932 - |  PWROFF_R :                    F656 - |
 Q :                            101 - |  RAMDIRCNT :                     1B - |
 RAMDIRLEN :                      B - |  RAMDIRPTR_R :                 FA8C - |
 RAMDIR_R :                    F962 - |  RAM_DEV :                       F8 - |
 REALM100 :                       1 - | *RELAXED :                        0 - |
 REVFLG_R :                    F648 - |  RICKY_R :                     F9AF - |
 ROMFLG_R :                    F62A - |  ROMJMP_R :                    F624 - |
 ROMSW_R :                     FAA4 - |  ROMTST_R :                    F605 - |
 RS232 :                       7571 C |  RST38ARG_R :                  FAC9 - |
 RST38_R :                     FADA - |  R_ABS_FUN :                   33F2 C |
 R_ADDRSS_ENTRY :              5B68 C |  R_ADDRSS_FIND_FUN :           5BF5 C |
 R_ADDRSS_INST_VCTR_TBL :      5CEF C |  R_ADDRSS_LFND_FUN :           5BF7 C |
 R_ADD_M_FAC1 :                3194 C |  R_ARROW_KEY :                 7222 C |
 R_ASCII_CONV_HELPER :         3931 C |  R_ASCII_CONV_HELPER2 :        3940 C |
 R_ASCII_FND_BANG :            392A C |  R_ASCII_FND_CAPE :            388A C |
 R_ASCII_FND_DOT :             3904 C |  R_ASCII_FND_E :               3867 C |
 R_ASCII_FND_HASH :            3929 C |  R_ASCII_FND_PERC :            391A C |
 R_ASCII_NOTFND :              38D1 C |  R_ASCII_NUM_CONV :            1037 C |
 R_ASCII_TO_DBL :              3840 C |  R_ASC_FUN :                   294F C |
 R_ATN_FUN :                   2F71 C |  R_ATN_MATH_TBL :              339B C |
 R_BASIC_ENTRY :               6C49 C |  R_BASIC_ERR_MSG_TXT :          31C C |
 R_BASIC_FKEYS_TBL :           5B46 C |  R_BASIC_KEYWORD_TBL :           80 C |
 R_BASIC_VECTOR_TBL :           262 C |  R_BCD_ADD :                   2C46 C |
 R_BCD_ADD_M_TO_DE :           2C4E C |  R_BCR_CLOSE :                 1883 C |
 R_BCR_DCB :                   1877 C |  R_BCR_IN :                    1885 C |
 R_BCR_IO :                    1887 C |  R_BCR_OPEN :                  1881 C |
 R_BEEP_FUN :                  7662 C |  R_BEEP_STMT :                 4229 C |
 R_BKSPACE_FUN :               4461 C |  R_BLINK_CURSOR :              73A9 C |
 R_BOOT_ROUTINE :              7D33 C |  R_BREAK_MSG :                  3FB C |
 R_BUF_TO_LCD :                11A2 C |  R_CALC_FREE_RAM :             7EE1 C |
 R_CALL_STMT :                 1DFA C |  R_CAPS_LOCK_KEY :             722C C |
 R_CAS_CLOSE :                 16AD C |  R_CAS_COUNT_PULSES :          7023 C |
 R_CAS_DCB :                   167F C |  R_CAS_IN :                    16D2 C |
 R_CAS_IO :                    1710 C |  R_CAS_MOTOR_OFF :             14AA C |
 R_CAS_MOTOR_ON :              14A8 C |  R_CAS_OPEN :                  1689 C |
 R_CAS_OPEN_IN :               2667 C |  R_CAS_OPEN_IN_BA :            2650 C |
 R_CAS_OPEN_IN_CO :            2656 C |  R_CAS_OPEN_IN_DO :            2653 C |
 R_CAS_OPEN_OUT_BA :           260B C |  R_CAS_OPEN_OUT_CO :           2611 C |
 R_CAS_OPEN_OUT_DO :           260E C |  R_CAS_OUT :                   16C7 C |
 R_CAS_READ_BIT :              6FDB C |  R_CAS_READ_BYTE :             14B0 C |
 R_CAS_READ_HEADER :           6F85 C |  R_CAS_READ_NO_CHKSUM :        702A C |
 R_CAS_READ_REC :              2413 C |  R_CAS_REMOTE_FUN :            7043 C |
 R_CAS_WRITE_BIT :             6F6A C |  R_CAS_WRITE_BUF :             22B9 C |
 R_CAS_WRITE_BYTE :            14C1 C |  R_CAS_WRITE_HEADER :          6F46 C |
 R_CAS_WRITE_NO_SYNC :         6F5B C |  R_CHAR_PLOT :                 431F C |
 R_CHAR_PLOT_4 :               4335 C |  R_CHAR_PLOT_5 :               434C C |
 R_CHAR_PLOT_6 :               4560 C |  R_CHAR_PLOT_6A :              4566 C |
 R_CHAR_PLOT_7 :               73EE C |  R_CHEAD :                      5F4 C |
 R_CHECK_FOR_CRLF :            5C74 C |  R_CHECK_RS232_QUEUE :         6D6D C |
*R_CHKDC :                     5AA9 C |  R_CHK_BREAK :                 7283 C |
 R_CHK_KEY_QUEUE :             13DB C |  R_CHK_PENDING_KEYS :          7270 C |
 R_CHK_RUNNING_PGRM :          10E6 C |  R_CHK_SHIFT_BREAK :           729F C |
 R_CHK_XTRNL_CNTRLER :         7682 C |  R_CHR_FUN :                   295F C |
 R_CINT_FUN :                  3501 C |  R_CLEAR_COM_INT_DEF :         4009 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 446 - 9/5/2025 20:20:35


 R_CLEAR_FKEY_TBL :            5A79 C |  R_CLEAR_INTR :                3FF1 C |
 R_CLEAR_MEM :                 4F0A C |  R_CLEAR_POINT :               744D C |
 R_CLEAR_STMT :                40F9 C |  R_CLOADM_STMT :               24A7 C |
 R_CLOAD_ONERR :               2426 C |  R_CLOAD_STMT :                2377 C |
 R_CLOSE_STMT :                4E28 C |  R_CLOSE_STMT_2 :              4E3B C |
*R_CLR_B_BYTES :               5579 C |  R_CLR_XON_XOFF :              6F32 C |
 R_CLSALL :                    4E22 C |  R_CLS_FUN :                   4548 C |
 R_CLS_PRINT_TIME_DAY :        5A12 C |  R_CLS_STMT :                  4231 C |
 R_CMP_FAC1_FAC2 :             34FA C |  R_CMP_FAC1_M :                31AF C |
 R_CMP_HIMEM :                 2534 C |  R_CMP_MEM_DE_M :              5A6D C |
 R_COLD_BOOT :                 7DE7 C | *R_COMP_BYTE_M :                  8 C |
 R_COMP_DE_HL :                  18 C |  R_COM_CLOSE :                 179E C |
 R_COM_DCB :                   1762 C |  R_COM_IN :                    17B0 C |
 R_COM_IO :                    17CA C |  R_COM_MDM_STMT :              1A9E C |
 R_COM_OPEN :                  176D C |  R_COM_OUT :                   17A8 C |
 R_CONT_STMT :                 40DA C |  R_CONV_A_TOUPPER :             FE9 C |
 R_CONV_FILENAME :             59AD C |  R_CONV_M_TOUPPER :             FE8 C |
 R_CONV_SINT_HL_SNGL :         3543 C |  R_COPY_MEM_DE_M :             5A62 C |
 R_COPY_STRING :               65C3 C |  R_COPY_WORD_DE_M :            5A60 C |
 R_COS_FUN :                   2EEF C |  R_CRT_DCB :                   14F2 C |
 R_CRT_OPEN :                  14F8 C |  R_CRT_OUT :                   14FA C |
 R_CRUNCH :                     646 C |  R_CR_FUN :                    44AA C |
 R_CSAVEM_STMT :               22DD C |  R_CSAVE_STMT :                2280 C |
 R_CSNG_FUN :                  352A C |  R_CSRLIN_FUN :                1D90 C |
 R_CURSOR_TO_LOW_LEFT :        4277 C |  R_CVT_DIGIT_PREDEC_DE :       1A6A C |
 R_DATA_STMT :                  99E C |  R_DATE_FUN :                  1924 C |
 R_DATE_STMT :                 19BD C |  R_DAY_FUN :                   1955 C |
 R_DAY_STMT :                  19F1 C |  R_DBL_ADD :                   2B78 C |
 R_DBL_ADD_1 :                 2B7E C |  R_DBL_ADD_2 :                 2BA2 C |
 R_DBL_ADD_M :                 2B75 C |  R_DBL_DIV :                   2DC7 C |
 R_DBL_EXP :                   3D8E C |  R_DBL_MULT :                  2CFF C |
 R_DBL_ONE :                   3286 C |  R_DBL_PNT5 :                  327C C |
 R_DBL_SQR :                   31A0 C |  R_DBL_SUB :                   2B69 C |
 R_DBL_ZERO :                  327E C |  R_DCB_VCTR_TBL :              5113 C |
 R_DECL_VAR_TYPE_E :            8A1 C |  R_DEC_PNDINT :                3FFC C |
*R_DEFDBL_STMT :                881 C |  R_DEFINT_STMT :                886 C |
*R_DEFSNG_STMT :                896 C | *R_DEFSTR_STMT :                89F C |
 R_DEF_STMT :                   872 C |  R_DELAY_FUNC :                7657 C |
 R_DEL_CUR_LINE :              4253 C |  R_DET_CAS_SYNC_HDR :          1499 C |
 R_DET_DEVICE_ARG :            1AFC C | *R_DET_LAST_VAR_TYPE :           28 C |
 R_DET_TIME_ARG :              1AEA C |  R_DEV_NAME_TBL :              50F1 C |
 R_DIM_STMT :                  478B C |  R_DIR_DISP_ORDER_TBL :        5B1E C |
 R_DISABLE_XON_XOFF :          6E1E C |  R_DISCONNECT_PHONE :          517C C |
 R_DISPLAY_DIR :               1F42 C |  R_DISP_DIR :                  57F8 C |
 R_DISP_DIR_TYPE_C :           5970 C |  R_DISP_FKEYS :                5A9E C |
 R_DISP_FKEY_LINE :            42A8 C |  R_DISP_FREE_BYTES :           7EAC C |
 R_DISP_MODEL :                7EA6 C |  R_DL_PNT25 :                  328E C |
 R_DO_MINUS :                   FCC C |  R_DRAW_BOX :                  1CBC C |
*R_DRAW_FBOX :                 1CA6 C |  R_DSKI_FUN :                  5073 C |
 R_DSKO_FUN :                  5071 C |  R_DVICMD_FUN :                76DE C |
 R_DVIRDY_FUN :                76FB C |  R_EDIT_DO_FILE_FUN :          5F65 C |
 R_EDIT_STMT :                 5E51 C |  R_ENABLE_INTS :               726A C |
 R_ENABLE_XON_XOFF :           6F31 C | *R_END_MDM_PATCH :             51DB C |
 R_END_STMT :                  409F C |  R_END_VT100_PATCH :           5443 C |
 R_EOF_FUN :                   1889 C |  R_ERASE_FKEY_DISP :           428A C |
 R_ERASE_IPL_PRGM :            1A96 C |  R_ERASE_TO_EOL :              425D C |
*R_ERL_FUN :                    F56 C |  R_ERROR_MSG :                  3EA C |
 R_ERROR_STMT :                 B0F C | *R_ERR_FUN :                    F47 C |
 R_ESC_A_FUN :                 4469 C |  R_ESC_B_FUN :                 446E C |
 R_ESC_CAPJ_FUN :              454E C |  R_ESC_CAPL_FUN :              44EA C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 447 - 9/5/2025 20:20:35


 R_ESC_CAPP_FUN :              44AF C |  R_ESC_CAPQ_FUN :              44BA C |
 R_ESC_C_FUN :                 4453 C |  R_ESC_D_FUN :                 445C C |
 R_ESC_H_FUN :                 44A8 C |  R_ESC_K_FUN :                 4537 C |
 R_ESC_L_FUN :                 4535 C |  R_ESC_M_FUN :                 44C4 C |
 R_ESC_P_FUN :                 4431 C |  R_ESC_Q_FUN :                 4432 C |
 R_ESC_SEQ_DRIVER :            43FA C |  R_ESC_T_FUN :                 4439 C |
 R_ESC_U_FUN :                 4437 C |  R_ESC_V_FUN :                 443F C |
 R_ESC_W_FUN :                 4440 C |  R_ESC_X_FUN :                 444A C |
 R_ESC_Y_FUN :                 43AF C |  R_EVAL :                       F1C C |
 R_EVAL_EXPR_2 :               1297 C |  R_EVAL_LINE_NUM :              8E0 C |
 R_EVAL_LIST_ARGS :             60A C | *R_EVAL_VAR :                   FDA C |
 R_EXEC_CO_FILE :              254B C |  R_EXEC_INST_IN_A :             840 C |
 R_EXEC_ROM_FILE :             596F C |  R_EXP_FUN :                   30A4 C |
 R_EXP_MATH_TBL :              32D6 C |  R_EXP_MATH_TBL_1 :            32F7 C |
 R_FAC1_EQ_FAC2 :              31C1 C |  R_FAC1_EQ_FP :                31C4 C |
 R_FAC1_EQ_ZERO :              3D11 C |  R_FAC2_EQ_FAC1 :              31B5 C |
 R_FAC2_EQ_FP :                31B8 C |  R_FILES_STMT :                1F3A C |
 R_FINDFILE :                  208F C |  R_FIND_NEXT_LINE_IN_FILE :    5C6D C |
 R_FIND_TEXT_IN_FILE :         5C3F C |  R_FIND_VAR_ADDR :             4790 C |
 R_FIX_FUN :                   3645 C |  R_FOR_STMT :                   726 C |
 R_FP_NUMBERS :                325C C |  R_FP_NUMBERS_10 :             32C6 C |
 R_FP_NUMBERS_11 :             32CE C |  R_FP_NUMBERS_4 :              3296 C |
 R_FP_NUMBERS_5 :              329E C |  R_FP_NUMBERS_6 :              32A6 C |
 R_FP_NUMBERS_7 :              32AE C |  R_FP_NUMBERS_8 :              32B6 C |
 R_FP_NUMBERS_9 :              32BE C |  R_FRE_FUN :                   2B4C C |
 R_FUN_INIT_IMAGE :             35A C |  R_FUN_INIT_IMAGE_END :         3EA C |
*R_FUN_KEYWORD_TBL1 :           18F C | *R_FUN_KEYWORD_TBL2 :           1F0 C |
 R_FUN_VCTR_TBL :                40 C |  R_GEN_AO_ERR_FUN :            5051 C |
 R_GEN_BN_ERR_FUN :            505D C |  R_GEN_CF_ERR_FUN :            505A C |
 R_GEN_D0_ERROR :               449 C |  R_GEN_DD_ERROR :               44F C |
 R_GEN_DS_ERR_FUN :            5054 C |  R_GEN_EF_ERR_FUN :            5063 C |
 R_GEN_ERR_IN_E :               45D C |  R_GEN_FC_ERROR :               8DB C |
 R_GEN_FF_ERR_FUN :            5057 C |  R_GEN_FL_ERR_FUN :            5066 C |
*R_GEN_ID_ERROR :              10EF C |  R_GEN_IE_ERR_FUN :            5060 C |
 R_GEN_IO_ERROR :              1494 C |  R_GEN_MO_ERROR :               458 C |
 R_GEN_NF_ERROR :               44C C |  R_GEN_NM_ERR_FUN :            504E C |
 R_GEN_OV_ERROR :               455 C |  R_GEN_RW_ERROR :               452 C |
 R_GEN_SN_ERROR :               446 C |  R_GEN_TM_ERROR :               45B C |
 R_GEN_TONE :                  72C5 C |  R_GEN_UL_ERROR :               94D C |
 R_GEN_VERIFY_FAIL_ERR :       2478 C |  R_GETSTK :                    3EFF C |
 R_GETSTK2 :                   3F08 C |  R_GET_CLK_CHIP_REGS :         7329 C |
*R_GET_FAC1_SIGN :               30 C |  R_GET_FCB :                   4C81 C |
 R_GET_FCB_FROM_A :            4C84 C |  R_GET_FILESTAT :              1675 C |
 R_GET_FILE_ADDR :             5AE4 C |  R_GET_FILE_ADDR_PREINC_HL :   5AE3 C |
 R_GET_FIND_DO_FILE :          2206 C |  R_GET_KEY_CONV_TOUPPER :      5D64 C |
 R_GET_LCD_CHAR :              4512 C |  R_GET_TIME :                  1AA5 C |
 R_GET_TIME_STRING :           1A42 C |  R_GOSUB_STMT :                 91E C |
 R_GOTO_STMT :                  936 C |  R_GO_BASIC_RDY :               511 C |
 R_GO_BASIC_RDY_OK :            502 C |  R_HIMEM_FUN :                 1DB9 C |
 R_HOME_CURSOR :               422D C |  R_IF_STMT :                    B1A C |
 R_IMP_FUN :                   10B5 C |  R_INC_PNDINT :                3FE8 C |
 R_INC_RS232_QUEUE_IN :        6DFC C |  R_INIT_AND_READY :             422 C |
 R_INIT_BASIC_VARS :           3F28 C |  R_INIT_BASIC_VARS_2 :         3F2C C |
 R_INIT_BASIC_VARS_3 :         3F2F C |  R_INIT_CLK_CHIP_REGS :        7F01 C |
 R_INIT_RS232_MDM :            6EA6 C |  R_INIT_RST_38H_TBL :          7EC6 C |
 R_INIT_SER_BUF_PARAMS :       6F39 C |  R_INIT_TEMP3 :                3182 C |
 R_INKEY_FUN :                 4BEA C |  R_INPUT_FROM_FILE :            C99 C |
 R_INPUT_STMT :                 CA3 C |  R_INPUT_STMT_2 :              4E8E C |
 R_INP_BKSP_HANDLER :          46A0 C |  R_INP_CTRL_C_HANDLER :        4684 C |
 R_INP_CTRL_U_HANDLER :        46C3 C |  R_INP_DISP_LINE :             463E C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 448 - 9/5/2025 20:20:35


 R_INP_DISP_LINE_NO_Q :        4644 C |  R_INP_ENTER_HANDLER :         4696 C |
 R_INP_FUN :                   1100 C |  R_INP_HANDLER :               46CC C |
 R_INP_TAB_HANDLER :           46CA C |  R_INSERT_A_INTO_FILE :        6B61 C |
 R_INSERT_LINE :               4258 C |  R_INSTR_FUN :                 2A37 C |
 R_INT16_DIV :                  F0D C |  R_INT_EXP :                   3DF7 C |
 R_INT_FUN :                   3654 C |  R_INT_ON_STMT :               3FA0 C |
 R_INT_STOP_STMT :             3FB9 C |  R_INV_CHAR_DISABLE :          426E C |
 R_INV_CHAR_ENABLE :           4269 C |  R_IN_MSG :                     3F1 C |
 R_IPL_STMT :                  1A78 C |  R_ISLET :                     40F2 C |
 R_ISLET_M :                   40F1 C |  R_ISR_EXIT_FUN :              71F7 C |
 R_ISVAR :                      FDA C |  R_KEYBOARD_CONV_MATRIX :      7BF1 C |
 R_KEYBOARD_CONV_SHIFTED :     7C1D C |  R_KEYBOARD_NUM :              7CF9 C |
 R_KEYSCAN_MGT_FUN :           7055 C |  R_KEY_ADD_TO_BUF :            71E4 C |
 R_KEY_CTRLC_TST :             71D5 C |  R_KEY_DECODE :                7122 C |
*R_KEY_DETECTION :             7060 C |  R_KEY_FUN :                   1AB2 C |
*R_KEY_LIST_STMT :             1BBD C |  R_KEY_ON_OFF_STMT :           1AC3 C |
*R_KEY_REPEAT_DET :            70B0 C |  R_KEY_STMT :                  1BB8 C |
 R_KEY_VECTOR_LKUP_TBL :       466F C |  R_KICK_PWR_OFF_WDT :          1BB1 C |
 R_KILL_BA_FILE :              2005 C |  R_KILL_BA_FILE_2 :            2017 C |
 R_KILL_CO_FILE :              1FD9 C |  R_KILL_STMT :                 1F91 C |
 R_LCD_CHAR_OUT_FUN :          4BAA C |  R_LCD_CHAR_SHAPE_TBL1 :       7711 C |
 R_LCD_CHAR_SHAPE_TBL2 :       78F1 C |  R_LCD_CLOSE_FUN :             4D59 C |
 R_LCD_CLOSE_FUN_1 :           4D5D C |  R_LCD_DCB :                   14D2 C |
 R_LCD_ESC_LKUP_END :          43FA C |  R_LCD_ESC_LKUP_TBL :          43B8 C |
 R_LCD_NEW_LINE :              4BB8 C |  R_LCD_OPEN :                  14D8 C |
 R_LCD_OUT :                   14E5 C |  R_LCD_OUT_DRIVER :            4373 C |
 R_LCD_SCROLL :                44D2 C |  R_LCD_SCROLL_DOWN :           44FA C |
 R_LCOPY_STMT :                1E5E C |  R_LEFT_FUN :                  29AB C |
 R_LEN_FUN :                   2943 C |  R_LET_STMT :                   9C3 C |
 R_LFILES_FUN :                506F C |  R_LF_FUN :                    4494 C |
 R_LINE_INPUT_FILE :           4F5B C |  R_LINE_STMT :                  C45 C |
 R_LINE_STMT_1 :               1C6D C |  R_LIST_STMT :                 1140 C |
 R_LLIST_STMT :                113B C |  R_LOADM_STMT :                2491 C |
 R_LOAD_BASIC_FKEYS :          6C9C C |  R_LOAD_CAS_HDR :              148A C |
 R_LOAD_CO_HEADER :            253D C |  R_LOAD_FAC2_FROM_M :          3461 C |
 R_LOAD_STMT :                 4D70 C |  R_LOC_FUN :                   506D C |
 R_LOF_FUN :                   506B C |  R_LOG_FUN :                   2FCF C |
 R_LOG_MATH_TBL :              3310 C |  R_LOG_MATH_TBL_1 :            3331 C |
 R_LOW_PWR_TRAP :              1431 C |  R_LPOS_FUN :                  10C8 C |
 R_LPRINT_STMT :                B4E C |  R_LPT_DCB :                   1754 C |
 R_LPT_OUT :                   175A C | *R_MAKTXT :                    220F C |
 R_MATH_PRIORITY_TBL :          2E2 C |  R_MATH_VCTR_TBL :              2EE C |
 R_MAXFILES_FUN :              1DB2 C | *R_MAXRAM_FUN :                1DA7 C |
*R_MAXRAM_FUN2 :               1DAD C |  R_MAX_FUN :                   1D9B C |
 R_MAX_FUN2 :                  7F0B C |  R_MDM_CLOSE :                 17DB C |
 R_MDM_DCB :                   17D1 C |  R_MDM_OPEN :                  176C C |
 R_MEMCPY_CALL_ARGS :          2904 C |  R_MENU_BKSP_HANDLER :         588E C |
 R_MENU_CMD_LOOP :             585A C |  R_MENU_CTRL_U_HANDLER :       5837 C |
 R_MENU_ENTER_HANDLER :        58F7 C |  R_MENU_ENTRY :                5797 C |
 R_MENU_TEXT_STRINGS :         7F98 C |  R_MERGE_STMT :                4D71 C |
 R_MID_FUN :                   29E6 C |  R_MOTOR_OFF_STMT :            1DF5 C |
*R_MOTOR_ON_STMT :             1DF1 C |  R_MOTOR_STMT :                1DEC C |
 R_MOVE_6_BYTES :              2540 C |  R_MOVE_8_BYTES_INC :          31CD C |
 R_MOVE_BC_BYTES_DEC :         6BE6 C |  R_MOVE_BC_BYTES_INC :         6BDB C |
 R_MOVE_B_BYTES :              2542 C |  R_MOVE_B_BYTES_DEC :          3472 C |
 R_MOVE_B_BYTES_INC :          3469 C |  R_MOVE_C_BYTES_DEC :          2EE6 C |
 R_MOVE_C_BYTES_UP :           2EDD C |  R_MOVE_FAC1_TO_M :            31CA C |
 R_MOVE_L_BYTES :              290C C |  R_MOVE_TYP_BYTES_INC :        3465 C |
 R_MOVE_TYP_BYTES_INC_M_TO_DE : 3464 C |
 R_MULT_FAC1_PWR2_TBL :        31F7 C |  R_MULT_M_FAC2 :               31A3 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 449 - 9/5/2025 20:20:35


 R_NAME_STMT :                 2037 C |  R_NEW_STMT :                  20FE C |
 R_NEXT_DIR_ENTRY :            59C9 C |  R_NEXT_STMT :                 4174 C |
 R_NOT_FUN :                   1054 C |  R_NULL_MSG :                   3F5 C |
 R_NUM_KEY :                   7233 C |  R_OK_MSG :                     3F6 C |
 R_ONCOM_STMT :                1B22 C | *R_ONTIME_STMT :               1B0F C |
*R_ON_ERROR_STMT :              A34 C |  R_ON_KEY_STMT :                A5B C |
 R_ON_STMT :                    A2F C |  R_ON_TIME_STMT :               A94 C |
 R_OPEN_FILE :                 4D12 C |  R_OPEN_STMT :                 4CCB C |
 R_OPEN_TXT_FILE_OUTPUT :      220F C |  R_OUT_CH_TO_LPT :             1470 C |
 R_OUT_STMT :                  110C C |  R_PEEK_FUN :                  1284 C |
 R_PLOT_POINT :                744C C |  R_POKE_FUN :                  128B C |
 R_POP_ALL_REGS :              14ED C |  R_POP_ALL_WREGS :             14EE C |
 R_POP_FAC1 :                  324B C |  R_POP_FAC1_2 :                324E C |
 R_POP_FAC2 :                  3245 C |  R_POP_GO_BASIC_RDY :           501 C |
 R_POS_FUN :                   10CE C |  R_POWER_CONT_STMT :           1459 C |
 R_POWER_DOWN :                143F C |  R_POWER_DOWN_NOSTATE :        1451 C |
 R_POWER_ON_STMT :             1461 C |  R_POWER_STMT :                1419 C |
 R_PRESET_STMT :               1C66 C |  R_PRINT_A_EXPAND :            4B55 C |
 R_PRINT_A_TO_LCD :            4313 C |  R_PRINT_BASIC_ERR :            4C5 C |
*R_PRINT_CHAR :                  20 C |  R_PRINT_FAC1 :                39E9 C |
*R_PRINT_FAC1_FORMAT :         39EC C |  R_PRINT_FAC1_ZERO :           39E8 C |
 R_PRINT_HL_ON_LCD :           39D4 C | *R_PRINT_LB_INIT_FUN :         4F2E C |
 R_PRINT_SPACE :                 1E C |  R_PRINT_STMT :                 B56 C |
 R_PRINT_STRING :              27B1 C |  R_PRINT_STRING2 :             5A58 C |
 R_PRINT_STRING_2 :            5791 C |  R_PRINT_STRING_PREINC_HL :    27B0 C |
 R_PRINT_TELCOM_STAT :         51B4 C |  R_PRINT_TIME_DAY :            5A15 C |
 R_PRINT_TIME_LOOP :           5D70 C |  R_PRNT_BASIC_ERR_TERM :       39CC C |
 R_PROC_SAVEM_ARGS :           2346 C |  R_PROTECT_LABEL :             4235 C |
 R_PSET_STMT :                 1C57 C |  R_PUSH_FAC1 :                 3234 C |
 R_PUSH_FAC2 :                 322E C |  R_PUSH_SNGL_FAC1 :            3422 C |
 R_PUT_CLK_CHIP_REGS :         732A C | *R_PWR_DOWN_TRAP :               24 C |
 R_RAM_CLOSE :                 158D C |  R_RAM_DCB :                   14FC C |
 R_RAM_IN :                    15C4 C |  R_RAM_IO :                    161B C |
 R_RAM_OPEN :                  1506 C |  R_RAM_OUT :                   15AC C |
 R_RAM_VCTR_TBL_DRIVER :       7FD6 C |  R_READ_CLK_CHIP_BIT :         7352 C |
 R_READ_DATE :                 192F C |  R_READ_DAY :                  1962 C |
 R_READ_RS232_QUEUE :          6D7E C |  R_READ_STMT :                  CD9 C |
 R_READ_TIME :                 190F C |  R_REM_STMT :                   9A0 C |
*R_RESET_VECTOR :                 0 C |  R_RESTORE_JMP_BC :             48D C |
 R_RESTORE_STMT :              407F C |  R_RESUME_AUTO_SCROLL :        4244 C |
 R_RESUME_STMT :                AB0 C |  R_RETURN_STMT :                966 C |
 R_RET_FUN :                   6015 C |  R_RET_INSTR :                 7FF3 C |
 R_RE_INIT_SYSTEM :            6CD6 C |  R_RIGHT_FUN :                 29DC C |
 R_RND_FUN :                   313E C |  R_ROM_CAT_ENTRIES :           6BF1 C |
 R_RS232_BAUD_TIMER_VALS :     6E94 C | *R_RST38H :                      38 C |
 R_RST6_5_ISR :                6DAC C | *R_RST_10H :                     10 C |
 R_RST_20H_LKUP_TBL :          438A C |  R_RST_28H :                   1069 C |
 R_RST_30H_FUN :               33DC C | *R_RST_5_5 :                     2C C |
*R_RST_6_5 :                     34 C | *R_RST_7_5 :                     3C C |
 R_RUN_BASIC_AT_HL :            83A C |  R_RUN_STMT :                   90F C |
 R_RUN_STMT_2 :                4D6E C |  R_SAVEM_STMT :                22CC C |
 R_SAVE_STMT :                 4DCF C |  R_SAVE_TO_DIRECTORY :         2239 C |
 R_SCAN_KEYBOARD :             7242 C |  R_SCAN_SPECIAL_KEYS :         72B1 C |
 R_SCHEDL_ENTRY :              5B6F C | *R_SCNLIN :                     60A C |
 R_SCREEN_STMT :               1E22 C |  R_SEARCH_DIR :                5AA9 C |
 R_SEND_A_LCD_LPT :            4B44 C |  R_SEND_A_TO_LPT :             6D3F C |
 R_SEND_A_USING_XON :          6E32 C |  R_SEND_CHARS_TO_LCD :         1BE0 C |
 R_SEND_CRLF :                 4222 C |  R_SEND_CURSOR_HOME :          5D6A C |
 R_SEND_C_TO_RS232 :           6E3A C |  R_SEND_ESC_SEQ :              4270 C |
 R_SEND_ESC_X :                4262 C |  R_SEND_XON :                  6E0B C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 450 - 9/5/2025 20:20:35


 R_SET_BASIC_FKEYS :           6C93 C |  R_SET_CLK_CHIP_MODE :         7383 C |
 R_SET_CURSOR_POS :            427C C |  R_SET_DISP_FKEY :             42A5 C |
 R_SET_FKEYS :                 5A7C C |  R_SET_OUT_DEV_LCD :           4B92 C |
 R_SET_RS232_BAUD_RATE :       6E75 C |  R_SET_RS232_PARAMS :          17E6 C |
 R_SET_TELCOM_STAT :           51C3 C |  R_SGN_FUN :                   3407 C |
 R_SINT_ADD :                  3704 C |  R_SINT_CMP :                  34C2 C |
 R_SINT_DIV :                  377E C |  R_SINT_MULT :                 3725 C |
 R_SINT_SUB :                  36F8 C |  R_SIN_FUN :                   2F09 C |
 R_SIN_MATH_TBL :              335A C |  R_SNGL_ADD_BCDE :             37F4 C |
*R_SNGL_ADD_FAC2 :             37F7 C |  R_SNGL_BCDE_EQ_FAC1 :         343D C |
 R_SNGL_BCDE_EQ_M :            3447 C |  R_SNGL_CMP_BCDE_FAC1 :        3498 C |
 R_SNGL_CMP_BCDE_M :           34B0 C |  R_SNGL_DECB_EQ_M :            3450 C |
 R_SNGL_DIV :                  380E C |  R_SNGL_EXP :                  3D7F C |
 R_SNGL_FAC1_EQ_BCDE :         3432 C | *R_SNGL_FAC1_EQ_M :            342F C |
 R_SNGL_LOAD :                 3827 C |  R_SNGL_MULT_BCDE :            3803 C |
*R_SNGL_MULT_FAC2 :            3806 C |  R_SNGL_M_EQ_FAC1 :            3459 C |
 R_SNGL_SUB :                  37FD C |  R_SOUND_OFF_STMT :            1DE5 C |
 R_SOUND_ON_STMT :             1DE6 C |  R_SOUND_PORT :                7676 C |
 R_SOUND_STMT :                1DC5 C |  R_SPACE_FUN :                 298E C |
 R_SPACE_KEY :                 5F24 C |  R_SQR_FAC1_MULT_TBL :         31EB C |
 R_SQR_FUN :                   305A C | *R_STEP_STMT :                  783 C |
 R_STOP_AUTO_SCROLL :          423F C |  R_STOP_STMT :                 409A C |
 R_STRING_FUN :                296D C |  R_STRLEN :                    21FA C |
 R_STRLTI :                    276C C |  R_STRLTI_FOR_B :              276E C |
 R_STRLTI_PREDEC_HL :          276B C |  R_STR_FUN :                   273A C |
 R_SUB_M_FAC1 :                319A C |  R_TAB_FUN :                   4480 C |
 R_TAB_STMT :                   C01 C |  R_TAN_FUN :                   2F58 C |
 R_TBL_BASED_MATH :            3209 C |  R_TELCOM_BYE_FUN :            571E C |
 R_TELCOM_CMD_VCTR_TBL :       5186 C |  R_TELCOM_DISPATCH :           54FC C |
 R_TELCOM_DOWN_FUN :           567E C |  R_TELCOM_ECHO_FUN :           5550 C |
 R_TELCOM_ENTRY :              5146 C |  R_TELCOM_FULL_FUN :           553E C |
 R_TELCOM_LABEL_TXT :          5199 C |  R_TELCOM_PREV_FUN :           5523 C |
 R_TELCOM_RE_ENTRY :           515B C |  R_TELCOM_STAT_FUN :           51AD C |
 R_TELCOM_TERM_FUN :           5455 C |  R_TELCOM_TXT :                517D C |
 R_TELCOM_UP_FUN :             559D C |  R_TERM_FKEY_VCTR_F6 :         551D C |
 R_TERM_FKEY_VCTR_F7 :         5520 C |  R_TERM_FKEY_VCTR_TBL :        550D C |
 R_TESTDVI_FUN :               767D C |  R_TEXT_CTRL_A_FUN :           618C C |
 R_TEXT_CTRL_B_FUN :           61D7 C |  R_TEXT_CTRL_C_FUN :           628F C |
 R_TEXT_CTRL_D_FUN :           60DE C |  R_TEXT_CTRL_E_FUN :           6155 C |
 R_TEXT_CTRL_F_FUN :           617A C |  R_TEXT_CTRL_G_FUN :           6713 C |
 R_TEXT_CTRL_H_FUN :           610B C |  R_TEXT_CTRL_I_FUN :           608A C |
 R_TEXT_CTRL_L_FUN :           6242 C |  R_TEXT_CTRL_M_FUN :           60BE C |
 R_TEXT_CTRL_N_FUN :           6551 C |  R_TEXT_CTRL_O_FUN :           6431 C |
 R_TEXT_CTRL_P_FUN :           607C C |  R_TEXT_CTRL_Q_FUN :           620B C |
 R_TEXT_CTRL_R_FUN :           61FD C |  R_TEXT_CTRL_S_FUN :           6151 C |
 R_TEXT_CTRL_T_FUN :           61C2 C |  R_TEXT_CTRL_U_FUN :           6445 C |
 R_TEXT_CTRL_VCTR_TBL :        6016 C |  R_TEXT_CTRL_V_FUN :           6774 C |
 R_TEXT_CTRL_W_FUN :           6210 C |  R_TEXT_CTRL_X_FUN :           60E2 C |
 R_TEXT_CTRL_Y_FUN :           6691 C |  R_TEXT_CTRL_Z_FUN :           621C C |
 R_TEXT_EDIT_LOOP :            5FDD C |  R_TEXT_ENTRY :                5DEE C |
 R_TEXT_ESC_FUN :              6056 C |  R_TEXT_FKEY2_TBL :            5E2A C |
 R_TEXT_FKEY_TBL :             5E22 C |  R_TEXT_GET_NEXT_BYTE :        63E5 C |
 R_TIMER_ISR :                 1B32 C |  R_TIME_FUN :                  1904 C |
 R_TIME_OFF_STMT :             3FB2 C |  R_TIME_STMT :                 19AB C |
 R_TOGGLE_LABEL :              13A5 C |  R_TOKENIZE_XY :               1D2E C |
*R_TO_STMT :                    76B C |  R_TRIG_INTR :                 3FD2 C |
 R_TURN_CURSOR_OFF :           424E C |  R_TURN_CURSOR_ON :            4249 C |
 R_UNINIT_RS232_MDM :          6ECB C |  R_UNPROT_LABEL :              423A C |
 R_UNSHIFTED_KEY :             720A C |  R_UPDATE_CLK_CHIP :           19B3 C |
 R_UPDATE_CLK_VALUES :         19A0 C |  R_UPDATE_LINE_ADDR :           5F0 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 451 - 9/5/2025 20:20:35


 R_USING_FUN :                 4991 C |  R_VAL_FUN :                   2A07 C |
*R_VARPTR_BUF_FUN :             F86 C | *R_VARPTR_FUN :                 F7E C |
 R_VARPTR_VAR_FUN :             F92 C |  R_VECTORTBL_LOOKUP :          4378 C |
 R_WAIT_FOR_SPACE_KEY :        5F2F C |  R_WAIT_KEY :                  12CB C |
 R_WAIT_LCD_DRIVER :           7568 C |  R_WARM_RESET :                6CE0 C |
 R_WIDTH_STMT :                1DC3 C |  R_XON_XOFF_HANDLER :          6E4D C |
 R_XTRNL_CNTRLER_DRIVER :      768F C |  SAVCURPOS_R :                 F88E - |
 SAVEDSP_R :                   FFF8 - |  SAVESCESC_R :                 F6E0 - |
 SAVTXT_R :                    FB9B - |  SCREEN_RS232 :                52BB C |
 SCREEN_TTL :                  52C2 C |  SCRLDIS_R :                   F63E - |
 SCRTCH :                      20FF C |  SEARCHSTR_R :                 F71F - |
 SENDA :                       531E C |  SENDA_PROTECTED :             530F C |
 SENDC :                       52F2 C |  SENDESCA :                    5317 C |
 SENDLOOP :                    7623 C | *SENDSTART :                   761C C |
*SENDSTOP :                    762E C |  SERBUF_R :                    FF46 - |
 SERCNT_R :                    FF86 - |  SERHK_R :                     F5FC - |
 SERINIT_R :                   FF43 - |  SERMOD_R :                    F65B - |
 SERPTR_R :                    FF88 - |  SER_UPDWN_R :                 FAC2 - |
 SETNEWCONS :                  5282 C |  SHFTPRNT_R :                  F88A - |
*SHIFT_PRINT_KEY :                C - |  SNDA2DVI :                    52C7 C |
 SNDA2VID :                    52E1 C |  SNDFLG_R :                    FF44 - |
*SNERR :                        446 - | *SPCLKEY_R :                   FF97 - |
*STAT_IN_FCB_OFS :                0 - | *STO_OPCODE :                     0 - |
 STRBUF_R :                    F678 - |  STRGEND_R :                   FBB6 - |
 STRNAM_R :                    FDD9 - |  STRSTKEND_R :                 FB88 - |
 SUBFLG_R :                    FB96 - |  SUZUKI_R :                    F999 - |
 SYSHK_R :                     F5FF - |  SYSINT_R :                    F944 - |
*SYSMAXCOL :                   F63C - |  SYSMAXROW :                   F63B - |
 SYSRAM_R :                    F5F0 - |  SYSROWCOL :                   F639 - |
 SYSSTK_R :                    F5E6 - |  TEMP2_R :                     FBA8 - |
 TEMP3_R :                     FB8E - |  TEMP8_R :                     FB90 - |
 TEMP9_R :                     FBE2 - |  TEMPPT_R :                    FB69 - |
 TEMPST_R :                    FB6B - |  TIMBUF_R :                    F923 - |
 TIMCN2_R :                    F930 - |  TIMCNT_R :                    F92F - |
 TIMDWN_R :                    F657 - | *TIME :                    20:20:35 - |
 TIMINT_R :                    F93D - |  TIMMON_R :                    F655 - |
 TIMYR1_R :                    F92D - |  TLCMKEY_R :                   FAC6 - |
 TMPCONDEV_R :                 FDFA - |  TMPLIN_R :                    F6E7 - |
 TMP_UTIL_R :                  FDD7 - |  TOKTMP_R :                    F681 - |
 TRSNSTR_R :                   FB89 - | *TRUE :                           1 - |
 TXTEND_R :                    FB62 - |  TXTLINTBL_R :                 F6EB - |
 TXTLOAD :                     63F4 - |  TXTTAB_R :                    F67C - |
 UNLOCK8 :                     75E1 C |  UNLOCKSCROLL :                75E5 C |
 UNUSED1_R :                   FBE4 - |  UNUSED2_R :                   FBE1 - |
 UNUSED3_R :                   FBDB - |  UNUSED4_R :                   F787 - |
 UNUSED5_R :                   FAC8 - |  UNUSED6_R :                   FBD6 - |
 UNUSED7_R :                   FBD4 - |  USRRAM_R :                    F9BA - |
 VALSTRDAT_R :                 FBE6 - |  VALSTRPTR_R :                 F67E - |
 VALTYP_R :                    FB65 - |  VAR1 :                        FFFE - |
 VARTAB_R :                    FBB2 - | *VERSION :                     142F - |
 VIDFLG_R :                    FFFC - |  VT100INROM :                     1 - |
 WANDHK_R :                    F5F9 - |  WAND_DEV :                      FB - |
 WWRAP_R :                     F921 - |  XONFLG_R :                    FF42 - |
 XONXOFF1_R :                  FF41 - |  XONXOFF_R :                   FF40 - |
 XPLOT_R :                     F64E - |  XXSTRT_R :                    FAD8 - |
 XYDONE :                      53AE C |  XYLOOP :                      53A4 C |
 YPENDING :                    FAAE - | *YPLOT_R :                     F64F - |
*_ABS :                          E1 - | *_AND :                          D5 - |
*_ASC :                          F9 - | *_ATN :                          ED - |
*_BACKSLASH_ :                   DB - | *_BEEP :                         B1 - |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 452 - 9/5/2025 20:20:35


*_CALL :                         B9 - | *_CDBL :                         F4 - |
*_CHR_ :                         FA - | *_CINT :                         F2 - |
*_CLEAR :                        A7 - | *_CLOAD :                        A8 - |
*_CLOSE :                        9A - | *_CLS :                          B0 - |
 _COM :                          AD - |  _CONT :                         A4 - |
*_COS :                          EA - | *_CSAVE :                        A9 - |
*_CSNG :                         F3 - |  _CSRLIN :                       CA - |
 _DATA :                         83 - |  _DATE_ :                        AB - |
 _DAY_ :                         AC - | *_DEF :                          A1 - |
*_DIM :                          85 - |  _DIR_ACTIVE :                   80 - |
 _DIR_COFILE :                   20 - |  _DIR_DOFILE :                   40 - |
*_DIR_DOOPEN :                    2 - |  _DIR_INROM :                    10 - |
 _DIR_INVIS :                     8 - | *_DIV_ :                         D3 - |
 _DSKI_ :                        C8 - | *_DSKO_ :                        98 - |
*_EDIT :                         93 - |  _ELSE :                         91 - |
 _END :                          80 - | *_EOF :                          EF - |
 _EQUAL_ :                       DD - | *_EQV :                          D8 - |
 _ERL :                          C4 - |  _ERR :                          C5 - |
 _ERROR :                        94 - | *_EXP :                          E9 - |
 _FILES :                        9D - | *_FIX :                          F5 - |
 _FOR :                          81 - | *_FRE :                          E2 - |
 _GOSUB :                        8C - |  _GOTO :                         88 - |
 _GT_ :                          DC - | *_HAT_ :                         D4 - |
 _HIMEM :                        CC - | *_IF :                           8A - |
*_IMP :                          D9 - |  _INKEY_ :                       C9 - |
*_INP :                          E3 - |  _INPUT :                        84 - |
 _INSTR :                        C7 - |  _INT :                          E0 - |
*_IPL :                          BB - |  _KEY :                          AF - |
*_KILL :                         BD - | *_LCOPY :                        B3 - |
*_LEFT_ :                        FC - | *_LEN :                          F6 - |
*_LET :                          87 - | *_LFILES :                       9F - |
*_LINE :                         92 - |  _LIST :                         A5 - |
*_LLIST :                        A6 - | *_LOAD :                         9B - |
*_LOC :                          F0 - | *_LOF :                          F1 - |
*_LOG :                          E8 - | *_LPOS :                         E4 - |
*_LPRINT :                       A0 - |  _LT_ :                          DE - |
 _MAX :                          B7 - |  _MDM :                          AE - |
*_MENU :                         BA - | *_MERGE :                        9C - |
 _MID_ :                         FE - |  _MINUS_ :                       D1 - |
*_MOD :                          DA - | *_MOTOR :                        B6 - |
*_MULT_ :                        D2 - | *_NAME :                         BC - |
*_NEW :                          BF - |  _NEXT :                         82 - |
*_NONE_ :                       100 - |  _NOT :                          CE - |
 _OFF :                          CB - |  _ON :                           97 - |
*_OPEN :                         99 - | *_OR :                           D6 - |
 _OUT :                          96 - | *_PEEK :                         EE - |
 _PLUS_ :                        D0 - | *_POKE :                         A2 - |
*_POS :                          E5 - | *_POWER :                        B8 - |
*_PRESET :                       B5 - |  _PRINT :                        A3 - |
*_PSET :                         B4 - |  _QUOTE_ :                       FF - |
*_RDN :                          E7 - | *_READ :                         86 - |
 _REM :                          8E - | *_RESTORE :                      8B - |
 _RESUME :                       95 - | *_RETURN :                       8D - |
*_RIGHT_ :                       FD - | *_RUN :                          89 - |
*_SAVE :                         9E - | *_SCREEN :                       BE - |
 _SGN :                          DF - | *_SIN :                          EB - |
*_SOUND :                        B2 - | *_SPACE_ :                       FB - |
*_SQR :                          E6 - |  _STEP :                         CF - |
 _STOP :                         8F - |  _STRING_ :                      C6 - |
*_STR_ :                         F7 - |  _TAB_ :                         C0 - |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 453 - 9/5/2025 20:20:35


*_TAN :                          EC - |  _THEN :                         CD - |
 _TIME_ :                        AA - |  _TO :                           C1 - |
 _USING :                        C2 - | *_VAL :                          F8 - |
 _VARPTR :                       C3 - | *_WIDTH :                        90 - |
*_XOR :                          D7 - |  __BACK0 :                      5D2 C |
 __BACK1 :                      5FE C |  __BACK10 :                     EF2 C |
 __BACK100 :                   3EF6 C |  __BACK101 :                   3F37 C |
 __BACK102 :                   400F C |  __BACK103 :                   401E C |
 __BACK104 :                   4045 C |  __BACK105 :                   4139 C |
 __BACK106 :                   44D5 C |  __BACK107 :                   44FD C |
 __BACK108 :                   453A C |  __BACK109 :                   4551 C |
 __BACK11 :                    1250 C |  __BACK110 :                   45C5 C |
 __BACK111 :                   45E2 C |  __BACK112 :                   4608 C |
 __BACK113 :                   4626 C |  __BACK114 :                   46A9 C |
 __BACK115 :                   46E4 C |  __BACK116 :                   4731 C |
 __BACK117 :                   47A8 C |  __BACK118 :                   4867 C |
 __BACK119 :                   493F C |  __BACK12 :                    125C C |
 __BACK120 :                   495F C |  __BACK121 :                   49C3 C |
 __BACK122 :                   49DF C |  __BACK123 :                   4B32 C |
 __BACK124 :                   4B5B C |  __BACK125 :                   4E2F C |
 __BACK126 :                   4ECC C |  __BACK127 :                   4F0B C |
 __BACK128 :                   4F72 C |  __BACK129 :                   4FB0 C |
 __BACK13 :                    1270 C |  __BACK130 :                   5085 C |
 __BACK131 :                   50E0 C |  __BACK132 :                   51B9 C |
 __BACK133 :                   529B C |  __BACK134 :                   54E6 C |
 __BACK135 :                   552C C |  __BACK136 :                   557A C |
 __BACK137 :                   56A3 C |  __BACK138 :                   57ED C |
 __BACK139 :                   5811 C |  __BACK14 :                    134B C |
 __BACK140 :                   5915 C |  __BACK141 :                   59B4 C |
 __BACK142 :                   59F2 C |  __BACK143 :                   5A36 C |
 __BACK144 :                   5A83 C |  __BACK145 :                   5A94 C |
 __BACK146 :                   5C42 C |  __BACK147 :                   5C9F C |
 __BACK148 :                   612E C |  __BACK149 :                   617D C |
 __BACK15 :                    1402 C |  __BACK150 :                   6183 C |
 __BACK151 :                   618F C |  __BACK152 :                   6195 C |
 __BACK153 :                   6264 C |  __BACK154 :                   62E2 C |
 __BACK155 :                   62FF C |  __BACK156 :                   6366 C |
 __BACK157 :                   6373 C |  __BACK158 :                   638B C |
 __BACK159 :                   645B C |  __BACK16 :                    149F C |
 __BACK160 :                   6520 C |  __BACK161 :                   65C4 C |
 __BACK162 :                   6612 C |  __BACK163 :                   66DA C |
 __BACK164 :                   6727 C |  __BACK165 :                   683B C |
 __BACK166 :                   6936 C |  __BACK167 :                   696A C |
 __BACK168 :                   6993 C |  __BACK169 :                   69DD C |
 __BACK17 :                    1575 C |  __BACK170 :                   69F7 C |
 __BACK171 :                   6A17 C |  __BACK172 :                   6A72 C |
 __BACK173 :                   6AAE C |  __BACK174 :                   6AD4 C |
 __BACK175 :                   6B2F C |  __BACK176 :                   6B3F C |
 __BACK177 :                   6B50 C |  __BACK178 :                   6CAF C |
 __BACK179 :                   6D1D C |  __BACK18 :                    1658 C |
 __BACK180 :                   6D41 C |  __BACK181 :                   6D63 C |
 __BACK182 :                   6D88 C |  __BACK183 :                   6F49 C |
 __BACK184 :                   6F60 C |  __BACK185 :                   6F74 C |
 __BACK186 :                   6F7C C |  __BACK187 :                   6F87 C |
 __BACK188 :                   6FCE C |  __BACK189 :                   6FEE C |
 __BACK19 :                    16A2 C |  __BACK190 :                   7004 C |
 __BACK191 :                   7036 C |  __BACK192 :                   70CD C |
 __BACK193 :                   7239 C |  __BACK194 :                   725E C |
 __BACK195 :                   72EA C |  __BACK196 :                   731C C |
 __BACK197 :                   73B5 C |  __BACK198 :                   7456 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 454 - 9/5/2025 20:20:35


 __BACK199 :                   74F6 C |  __BACK2 :                      699 C |
 __BACK20 :                    16B5 C |  __BACK200 :                   7569 C |
 __BACK201 :                   7667 C |  __BACK202 :                   76C0 C |
 __BACK203 :                   76D2 C |  __BACK204 :                   76DF C |
 __BACK205 :                   7D3A C |  __BACK206 :                   7E1C C |
 __BACK207 :                   7ECF C |  __BACK208 :                   7EE4 C |
 __BACK209 :                   7F32 C |  __BACK21 :                    16E8 C |
 __BACK210 :                   7F82 C |  __BACK22 :                    171E C |
 __BACK23 :                    1A01 C |  __BACK24 :                    1AC6 C |
 __BACK25 :                    1B72 C |  __BACK26 :                    1BC4 C |
 __BACK27 :                    1BDA C |  __BACK28 :                    1C38 C |
 __BACK29 :                    1CB1 C |  __BACK3 :                      706 C |
 __BACK30 :                    1D6F C |  __BACK31 :                    1E69 C |
 __BACK32 :                    1F08 C |  __BACK33 :                    1F63 C |
 __BACK34 :                    1FC6 C |  __BACK35 :                    20C0 C |
 __BACK36 :                    20F2 C |  __BACK37 :                    2155 C |
 __BACK38 :                    2190 C |  __BACK39 :                    21B0 C |
 __BACK4 :                      73A C |  __BACK40 :                    21FD C |
 __BACK41 :                    2255 C |  __BACK42 :                    2273 C |
 __BACK43 :                    22BB C |  __BACK44 :                    2415 C |
 __BACK45 :                    2473 C |  __BACK46 :                    2592 C |
 __BACK47 :                    25F3 C |  __BACK48 :                    2623 C |
 __BACK49 :                    263D C |  __BACK5 :                      8C7 C |
 __BACK50 :                    2658 C |  __BACK51 :                    2685 C |
 __BACK52 :                    26A9 C |  __BACK53 :                    26BD C |
 __BACK54 :                    2722 C |  __BACK55 :                    2772 C |
 __BACK56 :                    27BB C |  __BACK57 :                    290D C |
 __BACK58 :                    29A2 C |  __BACK59 :                    2A99 C |
 __BACK6 :                      AA2 C |  __BACK60 :                    2B32 C |
 __BACK61 :                    2B95 C |  __BACK62 :                    2BE4 C |
 __BACK63 :                    2C11 C |  __BACK64 :                    2C33 C |
 __BACK65 :                    2C4F C |  __BACK66 :                    2C6A C |
 __BACK67 :                    2C86 C |  __BACK68 :                    2C9D C |
 __BACK69 :                    2CD0 C |  __BACK7 :                      B3C C |
 __BACK70 :                    2CE2 C |  __BACK71 :                    2D40 C |
 __BACK72 :                    2D68 C |  __BACK73 :                    2D7F C |
 __BACK74 :                    2DB8 C |  __BACK75 :                    2DF1 C |
 __BACK76 :                    2E0A C |  __BACK77 :                    2E38 C |
 __BACK78 :                    2E8B C |  __BACK79 :                    2E9D C |
 __BACK8 :                      C2F C |  __BACK80 :                    307C C |
 __BACK81 :                    3217 C |  __BACK82 :                    323A C |
 __BACK83 :                    3251 C |  __BACK84 :                    34EA C |
 __BACK85 :                    356E C |  __BACK86 :                    367A C |
 __BACK87 :                    36E3 C |  __BACK88 :                    38B0 C |
 __BACK89 :                    3A98 C |  __BACK9 :                      E2B C |
 __BACK90 :                    3AB6 C |  __BACK91 :                    3AFE C |
 __BACK92 :                    3B30 C |  __BACK93 :                    3C45 C |
 __BACK94 :                    3C50 C |  __BACK95 :                    3C60 C |
 __BACK96 :                    3C79 C |  __BACK97 :                    3CDC C |
 __BACK98 :                    3D3D C |  __BACK99 :                    3D6B C |
 __FORW0 :                      43A C |  __FORW1 :                      473 C |
 __FORW10 :                     6C1 C |  __FORW100 :                   2987 C |
 __FORW101 :                   29BB C |  __FORW102 :                   2A53 C |
 __FORW103 :                   2AE9 C |  __FORW104 :                   2B1A C |
 __FORW105 :                   2B49 C |  __FORW106 :                   2BF3 C |
 __FORW107 :                   2BFE C |  __FORW108 :                   2C64 C |
 __FORW109 :                   2D26 C |  __FORW11 :                     6DB C |
 __FORW110 :                   2D86 C |  __FORW111 :                   2E15 C |
 __FORW112 :                   2E5F C |  __FORW113 :                   2EC6 C |
 __FORW114 :                   2F49 C |  __FORW115 :                   2FED C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 455 - 9/5/2025 20:20:35


 __FORW116 :                   30C8 C |  __FORW117 :                   30ED C |
 __FORW118 :                   3130 C |  __FORW119 :                   3173 C |
 __FORW12 :                     6E9 C |  __FORW120 :                   34CF C |
 __FORW121 :                   34F7 C |  __FORW122 :                   358B C |
 __FORW123 :                   359C C |  __FORW124 :                   35AA C |
 __FORW125 :                   35D6 C |  __FORW126 :                   360C C |
 __FORW127 :                   363D C |  __FORW128 :                   3666 C |
 __FORW129 :                   3695 C |  __FORW13 :                     6F8 C |
 __FORW130 :                   36A8 C |  __FORW131 :                   36B3 C |
 __FORW132 :                   36F1 C |  __FORW133 :                   3745 C |
 __FORW134 :                   3755 C |  __FORW135 :                   3761 C |
 __FORW136 :                   37A2 C |  __FORW137 :                   387D C |
 __FORW138 :                   3889 C |  __FORW139 :                   38C5 C |
 __FORW14 :                     705 C |  __FORW140 :                   38E8 C |
 __FORW141 :                   38FC C |  __FORW142 :                   3917 C |
 __FORW143 :                   394D C |  __FORW144 :                   3958 C |
 __FORW145 :                   3988 C |  __FORW146 :                   39A1 C |
 __FORW147 :                   39B4 C |  __FORW148 :                   39C7 C |
 __FORW149 :                   39F3 C |  __FORW15 :                     758 C |
 __FORW150 :                   3A5F C |  __FORW151 :                   3A68 C |
 __FORW152 :                   3A89 C |  __FORW153 :                   3AB4 C |
 __FORW154 :                   3AF9 C |  __FORW155 :                   3B32 C |
 __FORW156 :                   3B5E C |  __FORW157 :                   3B81 C |
 __FORW158 :                   3B8C C |  __FORW159 :                   3BA7 C |
 __FORW16 :                     7B7 C |  __FORW160 :                   3BC3 C |
 __FORW161 :                   3C04 C |  __FORW162 :                   3C0B C |
 __FORW163 :                   3C31 C |  __FORW164 :                   3C3B C |
 __FORW165 :                   3CB4 C |  __FORW166 :                   3D4F C |
 __FORW167 :                   3D7C C |  __FORW168 :                   3DDE C |
 __FORW169 :                   3E02 C |  __FORW17 :                     7F7 C |
 __FORW170 :                   3E34 C |  __FORW171 :                   3EB1 C |
 __FORW172 :                   3FB0 C |  __FORW173 :                   3FE6 C |
 __FORW174 :                   4094 C |  __FORW175 :                   4197 C |
 __FORW176 :                   42C0 C |  __FORW177 :                   42E1 C |
 __FORW178 :                   42ED C |  __FORW179 :                   4426 C |
 __FORW18 :                     86C C |  __FORW180 :                   447B C |
 __FORW181 :                   45A6 C |  __FORW182 :                   46C0 C |
 __FORW183 :                   46D4 C |  __FORW184 :                   46F2 C |
 __FORW185 :                   46FB C |  __FORW186 :                   4728 C |
 __FORW187 :                   474E C |  __FORW188 :                   47A7 C |
 __FORW189 :                   47CE C |  __FORW19 :                     8BC C |
 __FORW190 :                   47F6 C |  __FORW191 :                   4816 C |
 __FORW192 :                   488B C |  __FORW193 :                   48B0 C |
 __FORW194 :                   48DD C |  __FORW195 :                   4924 C |
 __FORW196 :                   4985 C |  __FORW197 :                   49D4 C |
 __FORW198 :                   4A1F C |  __FORW199 :                   4A2B C |
 __FORW2 :                      4B6 C |  __FORW20 :                     972 C |
 __FORW200 :                   4A9E C |  __FORW201 :                   4AD6 C |
 __FORW202 :                   4AF4 C |  __FORW203 :                   4B76 C |
 __FORW204 :                   4B88 C |  __FORW205 :                   4BFE C |
 __FORW206 :                   4CAE C |  __FORW207 :                   4CD7 C |
 __FORW208 :                   4D45 C |  __FORW209 :                   4D9F C |
 __FORW21 :                     987 C |  __FORW210 :                   4DF9 C |
 __FORW211 :                   4EB8 C |  __FORW212 :                   4F43 C |
 __FORW213 :                   4F82 C |  __FORW214 :                   4F97 C |
 __FORW215 :                   5015 C |  __FORW216 :                   5036 C |
 __FORW217 :                   50A8 C |  __FORW218 :                   50D7 C |
 __FORW219 :                   51CF C |  __FORW22 :                     998 C |
 __FORW220 :                   54C6 C |  __FORW221 :                   5573 C |
 __FORW222 :                   55FD C |  __FORW223 :                   562A C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 456 - 9/5/2025 20:20:35


 __FORW224 :                   5646 C |  __FORW225 :                   5653 C |
 __FORW226 :                   56B7 C |  __FORW227 :                   56F2 C |
 __FORW228 :                   5711 C |  __FORW229 :                   5807 C |
 __FORW23 :                     9E6 C |  __FORW230 :                   5823 C |
 __FORW231 :                   5897 C |  __FORW232 :                   590C C |
 __FORW233 :                   591E C |  __FORW234 :                   59A1 C |
 __FORW235 :                   5A93 C |  __FORW236 :                   5AD8 C |
 __FORW237 :                   5BCF C |  __FORW238 :                   5C24 C |
 __FORW239 :                   5C37 C |  __FORW24 :                     9F1 C |
 __FORW240 :                   5C53 C |  __FORW241 :                   5C6A C |
 __FORW242 :                   5DDF C |  __FORW243 :                   5E5A C |
 __FORW244 :                   5F03 C |  __FORW245 :                   5F15 C |
 __FORW246 :                   5F9F C |  __FORW247 :                   61BA C |
 __FORW248 :                   6272 C |  __FORW249 :                   62B0 C |
 __FORW25 :                     A1C C |  __FORW250 :                   62C0 C |
 __FORW251 :                   62CD C |  __FORW252 :                   6404 C |
 __FORW253 :                   6414 C |  __FORW254 :                   646A C |
 __FORW255 :                   64F9 C |  __FORW256 :                   658B C |
 __FORW257 :                   6760 C |  __FORW258 :                   67AB C |
 __FORW259 :                   6807 C |  __FORW26 :                     A48 C |
 __FORW260 :                   6827 C |  __FORW261 :                   68C9 C |
 __FORW262 :                   68E7 C |  __FORW263 :                   693F C |
 __FORW264 :                   69CA C |  __FORW265 :                   69F4 C |
 __FORW266 :                   6A32 C |  __FORW267 :                   6A6C C |
 __FORW268 :                   6AC4 C |  __FORW269 :                   6AEE C |
 __FORW27 :                     A7E C |  __FORW270 :                   6B1B C |
 __FORW271 :                   6C8F C |  __FORW272 :                   6CA2 C |
 __FORW273 :                   6D1E C |  __FORW274 :                   6D3D C |
 __FORW275 :                   6D79 C |  __FORW276 :                   6DA9 C |
 __FORW277 :                   6DD2 C |  __FORW278 :                   6E5F C |
 __FORW279 :                   6EB3 C |  __FORW28 :                     AA1 C |
 __FORW280 :                   6FB3 C |  __FORW281 :                   6FBA C |
 __FORW282 :                   6FC9 C |  __FORW283 :                   704F C |
 __FORW284 :                   7092 C |  __FORW285 :                   70D6 C |
 __FORW286 :                   7133 C |  __FORW287 :                   7148 C |
 __FORW288 :                   7152 C |  __FORW289 :                   7180 C |
 __FORW29 :                     AC0 C |  __FORW290 :                   7189 C |
 __FORW291 :                   71AE C |  __FORW292 :                   71C2 C |
 __FORW293 :                   721D C |  __FORW294 :                   7269 C |
 __FORW295 :                   727E C |  __FORW296 :                   72E8 C |
 __FORW297 :                   73A6 C |  __FORW298 :                   7410 C |
 __FORW299 :                   741F C |  __FORW3 :                      4DB C |
 __FORW30 :                     AE0 C |  __FORW300 :                   7430 C |
 __FORW301 :                   746D C |  __FORW302 :                   7497 C |
 __FORW303 :                   74B4 C |  __FORW304 :                   74CB C |
 __FORW305 :                   7527 C |  __FORW306 :                   7D75 C |
*__FORW307 :                   7D7C C |  __FORW308 :                   7DBB C |
 __FORW309 :                   7E43 C |  __FORW31 :                     B08 C |
 __FORW310 :                   7EF8 C |  __FORW32 :                     B2B C |
 __FORW33 :                     BAB C |  __FORW34 :                     BEA C |
 __FORW35 :                     C23 C |  __FORW36 :                     CE8 C |
 __FORW37 :                     D2B C |  __FORW38 :                     D4F C |
 __FORW39 :                     D6D C |  __FORW4 :                      56F C |
 __FORW40 :                     D9B C |  __FORW41 :                     DDC C |
 __FORW42 :                     E1A C |  __FORW43 :                     E85 C |
 __FORW44 :                     F95 C |  __FORW45 :                    102A C |
 __FORW46 :                    1066 C |  __FORW47 :                    1185 C |
 __FORW48 :                    11CD C |  __FORW49 :                    11DF C |
 __FORW5 :                      591 C |  __FORW50 :                    12EB C |
 __FORW51 :                    1358 C |  __FORW52 :                    1412 C |
 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 457 - 9/5/2025 20:20:35


 __FORW53 :                    147F C |  __FORW54 :                    15F5 C |
 __FORW55 :                    16A7 C |  __FORW56 :                    16C0 C |
 __FORW57 :                    16FF C |  __FORW58 :                    178B C |
 __FORW59 :                    17F7 C |  __FORW6 :                      5DA C |
 __FORW60 :                    182D C |  __FORW61 :                    184E C |
 __FORW62 :                    18BD C |  __FORW63 :                    1900 C |
 __FORW64 :                    1941 C |  __FORW65 :                    1A95 C |
 __FORW66 :                    1AA9 C |  __FORW67 :                    1B65 C |
 __FORW68 :                    1B88 C |  __FORW69 :                    1BAB C |
 __FORW7 :                      61B C |  __FORW70 :                    1BEB C |
 __FORW71 :                    1C4E C |  __FORW72 :                    1C92 C |
 __FORW73 :                    1CAF C |  __FORW74 :                    1CE4 C |
 __FORW75 :                    1CEF C |  __FORW76 :                    1CFA C |
 __FORW77 :                    1D22 C |  __FORW78 :                    1D54 C |
 __FORW79 :                    1E14 C |  __FORW8 :                      67E C |
 __FORW80 :                    1E52 C |  __FORW81 :                    1E91 C |
 __FORW82 :                    1EBA C |  __FORW83 :                    1EF8 C |
 __FORW84 :                    1F7F C |  __FORW85 :                    1FA1 C |
 __FORW86 :                    2052 C |  __FORW87 :                    20A0 C |
 __FORW88 :                    2391 C |  __FORW89 :                    23A6 C |
 __FORW9 :                      6B8 C |  __FORW90 :                    23BD C |
 __FORW91 :                    24CB C |  __FORW92 :                    2507 C |
 __FORW93 :                    2604 C |  __FORW94 :                    267C C |
 __FORW95 :                    26B5 C |  __FORW96 :                    26CA C |
 __FORW97 :                    2781 C |  __FORW98 :                    2833 C |
 __FORW99 :                    2933 C |

   2804 symbols
    203 unused symbols

 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 458 - 9/5/2025 20:20:35


  defined macros:
  ---------------

CHRGET                                | COMPAR                               
FSIGN                                 | GETDEFROMM                           
GETDEFROMMNOINC                       | GETHLFROMM                           
INPORT                                | LSTTYP                               
OUTCHR                                | OUTPORT                              
RST38H                                | SKIP_2BYTES_INST_BC                  
SKIP_2BYTES_INST_DE                   | SKIP_2BYTES_INST_HL                  
SKIP_2BYTES_INST_JC                   | SKIP_2BYTES_INST_JNZ                 
SKIP_2BYTES_INST_JZ                   | SKIP_2INSTS                          
SKIP_BYTE_INST                        | SKIP_BYTE_INST_B                     
SKIP_BYTE_INST_C                      | SKIP_BYTE_INST_D                     
SKIP_BYTE_INST_E                      | SKIP_XRA_A                           
SKIP_XRA_A_CP                         | SYNCHK                               

     26 macros

 AS V1.42 Beta [Bld 37] - source file M100-Source.asm - page 459 - 9/5/2025 20:20:35


  codepages:
  ----------

STANDARD (0 changed characters)


0.52 seconds assembly time

  25654 lines source file
  26878 lines incl. macro expansions
      2 passes
      0 errors
      1 warning
